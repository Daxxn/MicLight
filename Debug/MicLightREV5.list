
MicLightREV5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010ac8  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  08010b88  08010b88  00011b88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e04  08010e04  000121e8  2**0
                  CONTENTS
  4 .ARM          00000000  08010e04  08010e04  000121e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08010e04  08010e04  000121e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010e04  08010e04  00011e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08010e0c  08010e0c  00011e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  08010e14  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba4  200001e8  08010ffc  000121e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  20001d8c  08010ffc  00012d8c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000121e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f476  00000000  00000000  00012210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e50  00000000  00000000  00031686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017d8  00000000  00000000  000364d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001259  00000000  00000000  00037cb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ff76  00000000  00000000  00038f09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f99b  00000000  00000000  00058e7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a21d9  00000000  00000000  0007881a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011a9f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f50  00000000  00000000  0011aa38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00120988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010b70 	.word	0x08010b70

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	08010b70 	.word	0x08010b70

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_cfrcmple>:
 8000220:	4684      	mov	ip, r0
 8000222:	0008      	movs	r0, r1
 8000224:	4661      	mov	r1, ip
 8000226:	e7ff      	b.n	8000228 <__aeabi_cfcmpeq>

08000228 <__aeabi_cfcmpeq>:
 8000228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800022a:	f000 fb8b 	bl	8000944 <__lesf2>
 800022e:	2800      	cmp	r0, #0
 8000230:	d401      	bmi.n	8000236 <__aeabi_cfcmpeq+0xe>
 8000232:	2100      	movs	r1, #0
 8000234:	42c8      	cmn	r0, r1
 8000236:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000238 <__aeabi_fcmpeq>:
 8000238:	b510      	push	{r4, lr}
 800023a:	f000 fb0b 	bl	8000854 <__eqsf2>
 800023e:	4240      	negs	r0, r0
 8000240:	3001      	adds	r0, #1
 8000242:	bd10      	pop	{r4, pc}

08000244 <__aeabi_fcmplt>:
 8000244:	b510      	push	{r4, lr}
 8000246:	f000 fb7d 	bl	8000944 <__lesf2>
 800024a:	2800      	cmp	r0, #0
 800024c:	db01      	blt.n	8000252 <__aeabi_fcmplt+0xe>
 800024e:	2000      	movs	r0, #0
 8000250:	bd10      	pop	{r4, pc}
 8000252:	2001      	movs	r0, #1
 8000254:	bd10      	pop	{r4, pc}
 8000256:	46c0      	nop			@ (mov r8, r8)

08000258 <__aeabi_fcmple>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 fb73 	bl	8000944 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	dd01      	ble.n	8000266 <__aeabi_fcmple+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			@ (mov r8, r8)

0800026c <__aeabi_fcmpgt>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 fb19 	bl	80008a4 <__gesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dc01      	bgt.n	800027a <__aeabi_fcmpgt+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			@ (mov r8, r8)

08000280 <__aeabi_fcmpge>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 fb0f 	bl	80008a4 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	da01      	bge.n	800028e <__aeabi_fcmpge+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			@ (mov r8, r8)

08000294 <__aeabi_f2uiz>:
 8000294:	219e      	movs	r1, #158	@ 0x9e
 8000296:	b510      	push	{r4, lr}
 8000298:	05c9      	lsls	r1, r1, #23
 800029a:	1c04      	adds	r4, r0, #0
 800029c:	f7ff fff0 	bl	8000280 <__aeabi_fcmpge>
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d103      	bne.n	80002ac <__aeabi_f2uiz+0x18>
 80002a4:	1c20      	adds	r0, r4, #0
 80002a6:	f000 fe93 	bl	8000fd0 <__aeabi_f2iz>
 80002aa:	bd10      	pop	{r4, pc}
 80002ac:	219e      	movs	r1, #158	@ 0x9e
 80002ae:	1c20      	adds	r0, r4, #0
 80002b0:	05c9      	lsls	r1, r1, #23
 80002b2:	f000 fcd3 	bl	8000c5c <__aeabi_fsub>
 80002b6:	f000 fe8b 	bl	8000fd0 <__aeabi_f2iz>
 80002ba:	2380      	movs	r3, #128	@ 0x80
 80002bc:	061b      	lsls	r3, r3, #24
 80002be:	469c      	mov	ip, r3
 80002c0:	4460      	add	r0, ip
 80002c2:	e7f2      	b.n	80002aa <__aeabi_f2uiz+0x16>

080002c4 <__aeabi_d2uiz>:
 80002c4:	b570      	push	{r4, r5, r6, lr}
 80002c6:	2200      	movs	r2, #0
 80002c8:	4b0c      	ldr	r3, [pc, #48]	@ (80002fc <__aeabi_d2uiz+0x38>)
 80002ca:	0004      	movs	r4, r0
 80002cc:	000d      	movs	r5, r1
 80002ce:	f002 fa39 	bl	8002744 <__aeabi_dcmpge>
 80002d2:	2800      	cmp	r0, #0
 80002d4:	d104      	bne.n	80002e0 <__aeabi_d2uiz+0x1c>
 80002d6:	0020      	movs	r0, r4
 80002d8:	0029      	movs	r1, r5
 80002da:	f002 f8a5 	bl	8002428 <__aeabi_d2iz>
 80002de:	bd70      	pop	{r4, r5, r6, pc}
 80002e0:	4b06      	ldr	r3, [pc, #24]	@ (80002fc <__aeabi_d2uiz+0x38>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	0020      	movs	r0, r4
 80002e6:	0029      	movs	r1, r5
 80002e8:	f001 fd02 	bl	8001cf0 <__aeabi_dsub>
 80002ec:	f002 f89c 	bl	8002428 <__aeabi_d2iz>
 80002f0:	2380      	movs	r3, #128	@ 0x80
 80002f2:	061b      	lsls	r3, r3, #24
 80002f4:	469c      	mov	ip, r3
 80002f6:	4460      	add	r0, ip
 80002f8:	e7f1      	b.n	80002de <__aeabi_d2uiz+0x1a>
 80002fa:	46c0      	nop			@ (mov r8, r8)
 80002fc:	41e00000 	.word	0x41e00000

08000300 <__aeabi_fadd>:
 8000300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000302:	46ce      	mov	lr, r9
 8000304:	4647      	mov	r7, r8
 8000306:	0243      	lsls	r3, r0, #9
 8000308:	0a5a      	lsrs	r2, r3, #9
 800030a:	024e      	lsls	r6, r1, #9
 800030c:	0045      	lsls	r5, r0, #1
 800030e:	0fc4      	lsrs	r4, r0, #31
 8000310:	0048      	lsls	r0, r1, #1
 8000312:	4691      	mov	r9, r2
 8000314:	0e2d      	lsrs	r5, r5, #24
 8000316:	0a72      	lsrs	r2, r6, #9
 8000318:	0e00      	lsrs	r0, r0, #24
 800031a:	4694      	mov	ip, r2
 800031c:	b580      	push	{r7, lr}
 800031e:	099b      	lsrs	r3, r3, #6
 8000320:	0fc9      	lsrs	r1, r1, #31
 8000322:	09b6      	lsrs	r6, r6, #6
 8000324:	1a2a      	subs	r2, r5, r0
 8000326:	428c      	cmp	r4, r1
 8000328:	d021      	beq.n	800036e <__aeabi_fadd+0x6e>
 800032a:	2a00      	cmp	r2, #0
 800032c:	dd0d      	ble.n	800034a <__aeabi_fadd+0x4a>
 800032e:	2800      	cmp	r0, #0
 8000330:	d12d      	bne.n	800038e <__aeabi_fadd+0x8e>
 8000332:	2e00      	cmp	r6, #0
 8000334:	d100      	bne.n	8000338 <__aeabi_fadd+0x38>
 8000336:	e08d      	b.n	8000454 <__aeabi_fadd+0x154>
 8000338:	1e51      	subs	r1, r2, #1
 800033a:	2a01      	cmp	r2, #1
 800033c:	d100      	bne.n	8000340 <__aeabi_fadd+0x40>
 800033e:	e11d      	b.n	800057c <__aeabi_fadd+0x27c>
 8000340:	2aff      	cmp	r2, #255	@ 0xff
 8000342:	d100      	bne.n	8000346 <__aeabi_fadd+0x46>
 8000344:	e0ab      	b.n	800049e <__aeabi_fadd+0x19e>
 8000346:	000a      	movs	r2, r1
 8000348:	e027      	b.n	800039a <__aeabi_fadd+0x9a>
 800034a:	2a00      	cmp	r2, #0
 800034c:	d04d      	beq.n	80003ea <__aeabi_fadd+0xea>
 800034e:	1b42      	subs	r2, r0, r5
 8000350:	2d00      	cmp	r5, #0
 8000352:	d000      	beq.n	8000356 <__aeabi_fadd+0x56>
 8000354:	e0cc      	b.n	80004f0 <__aeabi_fadd+0x1f0>
 8000356:	2b00      	cmp	r3, #0
 8000358:	d100      	bne.n	800035c <__aeabi_fadd+0x5c>
 800035a:	e079      	b.n	8000450 <__aeabi_fadd+0x150>
 800035c:	1e54      	subs	r4, r2, #1
 800035e:	2a01      	cmp	r2, #1
 8000360:	d100      	bne.n	8000364 <__aeabi_fadd+0x64>
 8000362:	e128      	b.n	80005b6 <__aeabi_fadd+0x2b6>
 8000364:	2aff      	cmp	r2, #255	@ 0xff
 8000366:	d100      	bne.n	800036a <__aeabi_fadd+0x6a>
 8000368:	e097      	b.n	800049a <__aeabi_fadd+0x19a>
 800036a:	0022      	movs	r2, r4
 800036c:	e0c5      	b.n	80004fa <__aeabi_fadd+0x1fa>
 800036e:	2a00      	cmp	r2, #0
 8000370:	dc00      	bgt.n	8000374 <__aeabi_fadd+0x74>
 8000372:	e096      	b.n	80004a2 <__aeabi_fadd+0x1a2>
 8000374:	2800      	cmp	r0, #0
 8000376:	d04f      	beq.n	8000418 <__aeabi_fadd+0x118>
 8000378:	2dff      	cmp	r5, #255	@ 0xff
 800037a:	d100      	bne.n	800037e <__aeabi_fadd+0x7e>
 800037c:	e08f      	b.n	800049e <__aeabi_fadd+0x19e>
 800037e:	2180      	movs	r1, #128	@ 0x80
 8000380:	04c9      	lsls	r1, r1, #19
 8000382:	430e      	orrs	r6, r1
 8000384:	2a1b      	cmp	r2, #27
 8000386:	dd51      	ble.n	800042c <__aeabi_fadd+0x12c>
 8000388:	002a      	movs	r2, r5
 800038a:	3301      	adds	r3, #1
 800038c:	e018      	b.n	80003c0 <__aeabi_fadd+0xc0>
 800038e:	2dff      	cmp	r5, #255	@ 0xff
 8000390:	d100      	bne.n	8000394 <__aeabi_fadd+0x94>
 8000392:	e084      	b.n	800049e <__aeabi_fadd+0x19e>
 8000394:	2180      	movs	r1, #128	@ 0x80
 8000396:	04c9      	lsls	r1, r1, #19
 8000398:	430e      	orrs	r6, r1
 800039a:	2101      	movs	r1, #1
 800039c:	2a1b      	cmp	r2, #27
 800039e:	dc08      	bgt.n	80003b2 <__aeabi_fadd+0xb2>
 80003a0:	0031      	movs	r1, r6
 80003a2:	2020      	movs	r0, #32
 80003a4:	40d1      	lsrs	r1, r2
 80003a6:	1a82      	subs	r2, r0, r2
 80003a8:	4096      	lsls	r6, r2
 80003aa:	0032      	movs	r2, r6
 80003ac:	1e50      	subs	r0, r2, #1
 80003ae:	4182      	sbcs	r2, r0
 80003b0:	4311      	orrs	r1, r2
 80003b2:	1a5b      	subs	r3, r3, r1
 80003b4:	015a      	lsls	r2, r3, #5
 80003b6:	d459      	bmi.n	800046c <__aeabi_fadd+0x16c>
 80003b8:	2107      	movs	r1, #7
 80003ba:	002a      	movs	r2, r5
 80003bc:	4019      	ands	r1, r3
 80003be:	d049      	beq.n	8000454 <__aeabi_fadd+0x154>
 80003c0:	210f      	movs	r1, #15
 80003c2:	4019      	ands	r1, r3
 80003c4:	2904      	cmp	r1, #4
 80003c6:	d000      	beq.n	80003ca <__aeabi_fadd+0xca>
 80003c8:	3304      	adds	r3, #4
 80003ca:	0159      	lsls	r1, r3, #5
 80003cc:	d542      	bpl.n	8000454 <__aeabi_fadd+0x154>
 80003ce:	1c50      	adds	r0, r2, #1
 80003d0:	2afe      	cmp	r2, #254	@ 0xfe
 80003d2:	d03a      	beq.n	800044a <__aeabi_fadd+0x14a>
 80003d4:	019b      	lsls	r3, r3, #6
 80003d6:	b2c0      	uxtb	r0, r0
 80003d8:	0a5b      	lsrs	r3, r3, #9
 80003da:	05c0      	lsls	r0, r0, #23
 80003dc:	4318      	orrs	r0, r3
 80003de:	07e4      	lsls	r4, r4, #31
 80003e0:	4320      	orrs	r0, r4
 80003e2:	bcc0      	pop	{r6, r7}
 80003e4:	46b9      	mov	r9, r7
 80003e6:	46b0      	mov	r8, r6
 80003e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80003ea:	20fe      	movs	r0, #254	@ 0xfe
 80003ec:	4680      	mov	r8, r0
 80003ee:	1c6f      	adds	r7, r5, #1
 80003f0:	0038      	movs	r0, r7
 80003f2:	4647      	mov	r7, r8
 80003f4:	4207      	tst	r7, r0
 80003f6:	d000      	beq.n	80003fa <__aeabi_fadd+0xfa>
 80003f8:	e08e      	b.n	8000518 <__aeabi_fadd+0x218>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d000      	beq.n	8000400 <__aeabi_fadd+0x100>
 80003fe:	e0b4      	b.n	800056a <__aeabi_fadd+0x26a>
 8000400:	2b00      	cmp	r3, #0
 8000402:	d100      	bne.n	8000406 <__aeabi_fadd+0x106>
 8000404:	e0db      	b.n	80005be <__aeabi_fadd+0x2be>
 8000406:	2e00      	cmp	r6, #0
 8000408:	d06c      	beq.n	80004e4 <__aeabi_fadd+0x1e4>
 800040a:	1b98      	subs	r0, r3, r6
 800040c:	0145      	lsls	r5, r0, #5
 800040e:	d400      	bmi.n	8000412 <__aeabi_fadd+0x112>
 8000410:	e0f7      	b.n	8000602 <__aeabi_fadd+0x302>
 8000412:	000c      	movs	r4, r1
 8000414:	1af3      	subs	r3, r6, r3
 8000416:	e03d      	b.n	8000494 <__aeabi_fadd+0x194>
 8000418:	2e00      	cmp	r6, #0
 800041a:	d01b      	beq.n	8000454 <__aeabi_fadd+0x154>
 800041c:	1e51      	subs	r1, r2, #1
 800041e:	2a01      	cmp	r2, #1
 8000420:	d100      	bne.n	8000424 <__aeabi_fadd+0x124>
 8000422:	e082      	b.n	800052a <__aeabi_fadd+0x22a>
 8000424:	2aff      	cmp	r2, #255	@ 0xff
 8000426:	d03a      	beq.n	800049e <__aeabi_fadd+0x19e>
 8000428:	000a      	movs	r2, r1
 800042a:	e7ab      	b.n	8000384 <__aeabi_fadd+0x84>
 800042c:	0031      	movs	r1, r6
 800042e:	2020      	movs	r0, #32
 8000430:	40d1      	lsrs	r1, r2
 8000432:	1a82      	subs	r2, r0, r2
 8000434:	4096      	lsls	r6, r2
 8000436:	0032      	movs	r2, r6
 8000438:	1e50      	subs	r0, r2, #1
 800043a:	4182      	sbcs	r2, r0
 800043c:	430a      	orrs	r2, r1
 800043e:	189b      	adds	r3, r3, r2
 8000440:	015a      	lsls	r2, r3, #5
 8000442:	d5b9      	bpl.n	80003b8 <__aeabi_fadd+0xb8>
 8000444:	1c6a      	adds	r2, r5, #1
 8000446:	2dfe      	cmp	r5, #254	@ 0xfe
 8000448:	d175      	bne.n	8000536 <__aeabi_fadd+0x236>
 800044a:	20ff      	movs	r0, #255	@ 0xff
 800044c:	2300      	movs	r3, #0
 800044e:	e7c4      	b.n	80003da <__aeabi_fadd+0xda>
 8000450:	000c      	movs	r4, r1
 8000452:	0033      	movs	r3, r6
 8000454:	08db      	lsrs	r3, r3, #3
 8000456:	2aff      	cmp	r2, #255	@ 0xff
 8000458:	d146      	bne.n	80004e8 <__aeabi_fadd+0x1e8>
 800045a:	2b00      	cmp	r3, #0
 800045c:	d0f5      	beq.n	800044a <__aeabi_fadd+0x14a>
 800045e:	2280      	movs	r2, #128	@ 0x80
 8000460:	03d2      	lsls	r2, r2, #15
 8000462:	4313      	orrs	r3, r2
 8000464:	025b      	lsls	r3, r3, #9
 8000466:	20ff      	movs	r0, #255	@ 0xff
 8000468:	0a5b      	lsrs	r3, r3, #9
 800046a:	e7b6      	b.n	80003da <__aeabi_fadd+0xda>
 800046c:	019f      	lsls	r7, r3, #6
 800046e:	09bf      	lsrs	r7, r7, #6
 8000470:	0038      	movs	r0, r7
 8000472:	f002 f971 	bl	8002758 <__clzsi2>
 8000476:	3805      	subs	r0, #5
 8000478:	4087      	lsls	r7, r0
 800047a:	4285      	cmp	r5, r0
 800047c:	dc24      	bgt.n	80004c8 <__aeabi_fadd+0x1c8>
 800047e:	003b      	movs	r3, r7
 8000480:	2120      	movs	r1, #32
 8000482:	1b42      	subs	r2, r0, r5
 8000484:	3201      	adds	r2, #1
 8000486:	40d3      	lsrs	r3, r2
 8000488:	1a8a      	subs	r2, r1, r2
 800048a:	4097      	lsls	r7, r2
 800048c:	1e7a      	subs	r2, r7, #1
 800048e:	4197      	sbcs	r7, r2
 8000490:	2200      	movs	r2, #0
 8000492:	433b      	orrs	r3, r7
 8000494:	0759      	lsls	r1, r3, #29
 8000496:	d193      	bne.n	80003c0 <__aeabi_fadd+0xc0>
 8000498:	e797      	b.n	80003ca <__aeabi_fadd+0xca>
 800049a:	000c      	movs	r4, r1
 800049c:	0033      	movs	r3, r6
 800049e:	08db      	lsrs	r3, r3, #3
 80004a0:	e7db      	b.n	800045a <__aeabi_fadd+0x15a>
 80004a2:	2a00      	cmp	r2, #0
 80004a4:	d014      	beq.n	80004d0 <__aeabi_fadd+0x1d0>
 80004a6:	1b42      	subs	r2, r0, r5
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	d14b      	bne.n	8000544 <__aeabi_fadd+0x244>
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d0d0      	beq.n	8000452 <__aeabi_fadd+0x152>
 80004b0:	1e51      	subs	r1, r2, #1
 80004b2:	2a01      	cmp	r2, #1
 80004b4:	d100      	bne.n	80004b8 <__aeabi_fadd+0x1b8>
 80004b6:	e09e      	b.n	80005f6 <__aeabi_fadd+0x2f6>
 80004b8:	2aff      	cmp	r2, #255	@ 0xff
 80004ba:	d0ef      	beq.n	800049c <__aeabi_fadd+0x19c>
 80004bc:	000a      	movs	r2, r1
 80004be:	2a1b      	cmp	r2, #27
 80004c0:	dd5f      	ble.n	8000582 <__aeabi_fadd+0x282>
 80004c2:	0002      	movs	r2, r0
 80004c4:	1c73      	adds	r3, r6, #1
 80004c6:	e77b      	b.n	80003c0 <__aeabi_fadd+0xc0>
 80004c8:	4b50      	ldr	r3, [pc, #320]	@ (800060c <__aeabi_fadd+0x30c>)
 80004ca:	1a2a      	subs	r2, r5, r0
 80004cc:	403b      	ands	r3, r7
 80004ce:	e7e1      	b.n	8000494 <__aeabi_fadd+0x194>
 80004d0:	21fe      	movs	r1, #254	@ 0xfe
 80004d2:	1c6a      	adds	r2, r5, #1
 80004d4:	4211      	tst	r1, r2
 80004d6:	d13b      	bne.n	8000550 <__aeabi_fadd+0x250>
 80004d8:	2d00      	cmp	r5, #0
 80004da:	d15d      	bne.n	8000598 <__aeabi_fadd+0x298>
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d07f      	beq.n	80005e0 <__aeabi_fadd+0x2e0>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d17f      	bne.n	80005e4 <__aeabi_fadd+0x2e4>
 80004e4:	2200      	movs	r2, #0
 80004e6:	08db      	lsrs	r3, r3, #3
 80004e8:	025b      	lsls	r3, r3, #9
 80004ea:	0a5b      	lsrs	r3, r3, #9
 80004ec:	b2d0      	uxtb	r0, r2
 80004ee:	e774      	b.n	80003da <__aeabi_fadd+0xda>
 80004f0:	28ff      	cmp	r0, #255	@ 0xff
 80004f2:	d0d2      	beq.n	800049a <__aeabi_fadd+0x19a>
 80004f4:	2480      	movs	r4, #128	@ 0x80
 80004f6:	04e4      	lsls	r4, r4, #19
 80004f8:	4323      	orrs	r3, r4
 80004fa:	2401      	movs	r4, #1
 80004fc:	2a1b      	cmp	r2, #27
 80004fe:	dc07      	bgt.n	8000510 <__aeabi_fadd+0x210>
 8000500:	001c      	movs	r4, r3
 8000502:	2520      	movs	r5, #32
 8000504:	40d4      	lsrs	r4, r2
 8000506:	1aaa      	subs	r2, r5, r2
 8000508:	4093      	lsls	r3, r2
 800050a:	1e5a      	subs	r2, r3, #1
 800050c:	4193      	sbcs	r3, r2
 800050e:	431c      	orrs	r4, r3
 8000510:	1b33      	subs	r3, r6, r4
 8000512:	0005      	movs	r5, r0
 8000514:	000c      	movs	r4, r1
 8000516:	e74d      	b.n	80003b4 <__aeabi_fadd+0xb4>
 8000518:	1b9f      	subs	r7, r3, r6
 800051a:	017a      	lsls	r2, r7, #5
 800051c:	d422      	bmi.n	8000564 <__aeabi_fadd+0x264>
 800051e:	2f00      	cmp	r7, #0
 8000520:	d1a6      	bne.n	8000470 <__aeabi_fadd+0x170>
 8000522:	2400      	movs	r4, #0
 8000524:	2000      	movs	r0, #0
 8000526:	2300      	movs	r3, #0
 8000528:	e757      	b.n	80003da <__aeabi_fadd+0xda>
 800052a:	199b      	adds	r3, r3, r6
 800052c:	2501      	movs	r5, #1
 800052e:	3201      	adds	r2, #1
 8000530:	0159      	lsls	r1, r3, #5
 8000532:	d400      	bmi.n	8000536 <__aeabi_fadd+0x236>
 8000534:	e740      	b.n	80003b8 <__aeabi_fadd+0xb8>
 8000536:	2101      	movs	r1, #1
 8000538:	4835      	ldr	r0, [pc, #212]	@ (8000610 <__aeabi_fadd+0x310>)
 800053a:	4019      	ands	r1, r3
 800053c:	085b      	lsrs	r3, r3, #1
 800053e:	4003      	ands	r3, r0
 8000540:	430b      	orrs	r3, r1
 8000542:	e7a7      	b.n	8000494 <__aeabi_fadd+0x194>
 8000544:	28ff      	cmp	r0, #255	@ 0xff
 8000546:	d0a9      	beq.n	800049c <__aeabi_fadd+0x19c>
 8000548:	2180      	movs	r1, #128	@ 0x80
 800054a:	04c9      	lsls	r1, r1, #19
 800054c:	430b      	orrs	r3, r1
 800054e:	e7b6      	b.n	80004be <__aeabi_fadd+0x1be>
 8000550:	2aff      	cmp	r2, #255	@ 0xff
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0x256>
 8000554:	e779      	b.n	800044a <__aeabi_fadd+0x14a>
 8000556:	199b      	adds	r3, r3, r6
 8000558:	085b      	lsrs	r3, r3, #1
 800055a:	0759      	lsls	r1, r3, #29
 800055c:	d000      	beq.n	8000560 <__aeabi_fadd+0x260>
 800055e:	e72f      	b.n	80003c0 <__aeabi_fadd+0xc0>
 8000560:	08db      	lsrs	r3, r3, #3
 8000562:	e7c1      	b.n	80004e8 <__aeabi_fadd+0x1e8>
 8000564:	000c      	movs	r4, r1
 8000566:	1af7      	subs	r7, r6, r3
 8000568:	e782      	b.n	8000470 <__aeabi_fadd+0x170>
 800056a:	2b00      	cmp	r3, #0
 800056c:	d12c      	bne.n	80005c8 <__aeabi_fadd+0x2c8>
 800056e:	2e00      	cmp	r6, #0
 8000570:	d193      	bne.n	800049a <__aeabi_fadd+0x19a>
 8000572:	2380      	movs	r3, #128	@ 0x80
 8000574:	2400      	movs	r4, #0
 8000576:	20ff      	movs	r0, #255	@ 0xff
 8000578:	03db      	lsls	r3, r3, #15
 800057a:	e72e      	b.n	80003da <__aeabi_fadd+0xda>
 800057c:	2501      	movs	r5, #1
 800057e:	1b9b      	subs	r3, r3, r6
 8000580:	e718      	b.n	80003b4 <__aeabi_fadd+0xb4>
 8000582:	0019      	movs	r1, r3
 8000584:	2520      	movs	r5, #32
 8000586:	40d1      	lsrs	r1, r2
 8000588:	1aaa      	subs	r2, r5, r2
 800058a:	4093      	lsls	r3, r2
 800058c:	1e5a      	subs	r2, r3, #1
 800058e:	4193      	sbcs	r3, r2
 8000590:	430b      	orrs	r3, r1
 8000592:	0005      	movs	r5, r0
 8000594:	199b      	adds	r3, r3, r6
 8000596:	e753      	b.n	8000440 <__aeabi_fadd+0x140>
 8000598:	2b00      	cmp	r3, #0
 800059a:	d100      	bne.n	800059e <__aeabi_fadd+0x29e>
 800059c:	e77e      	b.n	800049c <__aeabi_fadd+0x19c>
 800059e:	2e00      	cmp	r6, #0
 80005a0:	d100      	bne.n	80005a4 <__aeabi_fadd+0x2a4>
 80005a2:	e77c      	b.n	800049e <__aeabi_fadd+0x19e>
 80005a4:	2280      	movs	r2, #128	@ 0x80
 80005a6:	03d2      	lsls	r2, r2, #15
 80005a8:	4591      	cmp	r9, r2
 80005aa:	d302      	bcc.n	80005b2 <__aeabi_fadd+0x2b2>
 80005ac:	4594      	cmp	ip, r2
 80005ae:	d200      	bcs.n	80005b2 <__aeabi_fadd+0x2b2>
 80005b0:	0033      	movs	r3, r6
 80005b2:	08db      	lsrs	r3, r3, #3
 80005b4:	e753      	b.n	800045e <__aeabi_fadd+0x15e>
 80005b6:	000c      	movs	r4, r1
 80005b8:	1af3      	subs	r3, r6, r3
 80005ba:	3501      	adds	r5, #1
 80005bc:	e6fa      	b.n	80003b4 <__aeabi_fadd+0xb4>
 80005be:	2e00      	cmp	r6, #0
 80005c0:	d0af      	beq.n	8000522 <__aeabi_fadd+0x222>
 80005c2:	000c      	movs	r4, r1
 80005c4:	0033      	movs	r3, r6
 80005c6:	e78d      	b.n	80004e4 <__aeabi_fadd+0x1e4>
 80005c8:	2e00      	cmp	r6, #0
 80005ca:	d100      	bne.n	80005ce <__aeabi_fadd+0x2ce>
 80005cc:	e767      	b.n	800049e <__aeabi_fadd+0x19e>
 80005ce:	2280      	movs	r2, #128	@ 0x80
 80005d0:	03d2      	lsls	r2, r2, #15
 80005d2:	4591      	cmp	r9, r2
 80005d4:	d3ed      	bcc.n	80005b2 <__aeabi_fadd+0x2b2>
 80005d6:	4594      	cmp	ip, r2
 80005d8:	d2eb      	bcs.n	80005b2 <__aeabi_fadd+0x2b2>
 80005da:	000c      	movs	r4, r1
 80005dc:	0033      	movs	r3, r6
 80005de:	e7e8      	b.n	80005b2 <__aeabi_fadd+0x2b2>
 80005e0:	0033      	movs	r3, r6
 80005e2:	e77f      	b.n	80004e4 <__aeabi_fadd+0x1e4>
 80005e4:	199b      	adds	r3, r3, r6
 80005e6:	2200      	movs	r2, #0
 80005e8:	0159      	lsls	r1, r3, #5
 80005ea:	d5b9      	bpl.n	8000560 <__aeabi_fadd+0x260>
 80005ec:	4a07      	ldr	r2, [pc, #28]	@ (800060c <__aeabi_fadd+0x30c>)
 80005ee:	4013      	ands	r3, r2
 80005f0:	08db      	lsrs	r3, r3, #3
 80005f2:	2201      	movs	r2, #1
 80005f4:	e778      	b.n	80004e8 <__aeabi_fadd+0x1e8>
 80005f6:	199b      	adds	r3, r3, r6
 80005f8:	3201      	adds	r2, #1
 80005fa:	3501      	adds	r5, #1
 80005fc:	0159      	lsls	r1, r3, #5
 80005fe:	d49a      	bmi.n	8000536 <__aeabi_fadd+0x236>
 8000600:	e6da      	b.n	80003b8 <__aeabi_fadd+0xb8>
 8000602:	1e03      	subs	r3, r0, #0
 8000604:	d08d      	beq.n	8000522 <__aeabi_fadd+0x222>
 8000606:	08db      	lsrs	r3, r3, #3
 8000608:	e76e      	b.n	80004e8 <__aeabi_fadd+0x1e8>
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	fbffffff 	.word	0xfbffffff
 8000610:	7dffffff 	.word	0x7dffffff

08000614 <__aeabi_fdiv>:
 8000614:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000616:	464f      	mov	r7, r9
 8000618:	4646      	mov	r6, r8
 800061a:	46d6      	mov	lr, sl
 800061c:	0244      	lsls	r4, r0, #9
 800061e:	b5c0      	push	{r6, r7, lr}
 8000620:	0047      	lsls	r7, r0, #1
 8000622:	1c0e      	adds	r6, r1, #0
 8000624:	0a64      	lsrs	r4, r4, #9
 8000626:	0e3f      	lsrs	r7, r7, #24
 8000628:	0fc5      	lsrs	r5, r0, #31
 800062a:	2f00      	cmp	r7, #0
 800062c:	d03c      	beq.n	80006a8 <__aeabi_fdiv+0x94>
 800062e:	2fff      	cmp	r7, #255	@ 0xff
 8000630:	d042      	beq.n	80006b8 <__aeabi_fdiv+0xa4>
 8000632:	2300      	movs	r3, #0
 8000634:	2280      	movs	r2, #128	@ 0x80
 8000636:	4699      	mov	r9, r3
 8000638:	469a      	mov	sl, r3
 800063a:	00e4      	lsls	r4, r4, #3
 800063c:	04d2      	lsls	r2, r2, #19
 800063e:	4314      	orrs	r4, r2
 8000640:	3f7f      	subs	r7, #127	@ 0x7f
 8000642:	0273      	lsls	r3, r6, #9
 8000644:	0a5b      	lsrs	r3, r3, #9
 8000646:	4698      	mov	r8, r3
 8000648:	0073      	lsls	r3, r6, #1
 800064a:	0e1b      	lsrs	r3, r3, #24
 800064c:	0ff6      	lsrs	r6, r6, #31
 800064e:	2b00      	cmp	r3, #0
 8000650:	d01b      	beq.n	800068a <__aeabi_fdiv+0x76>
 8000652:	2bff      	cmp	r3, #255	@ 0xff
 8000654:	d013      	beq.n	800067e <__aeabi_fdiv+0x6a>
 8000656:	4642      	mov	r2, r8
 8000658:	2180      	movs	r1, #128	@ 0x80
 800065a:	00d2      	lsls	r2, r2, #3
 800065c:	04c9      	lsls	r1, r1, #19
 800065e:	4311      	orrs	r1, r2
 8000660:	4688      	mov	r8, r1
 8000662:	2000      	movs	r0, #0
 8000664:	3b7f      	subs	r3, #127	@ 0x7f
 8000666:	0029      	movs	r1, r5
 8000668:	1aff      	subs	r7, r7, r3
 800066a:	464b      	mov	r3, r9
 800066c:	4071      	eors	r1, r6
 800066e:	b2c9      	uxtb	r1, r1
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d900      	bls.n	8000676 <__aeabi_fdiv+0x62>
 8000674:	e0b5      	b.n	80007e2 <__aeabi_fdiv+0x1ce>
 8000676:	4a74      	ldr	r2, [pc, #464]	@ (8000848 <__aeabi_fdiv+0x234>)
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	58d3      	ldr	r3, [r2, r3]
 800067c:	469f      	mov	pc, r3
 800067e:	4643      	mov	r3, r8
 8000680:	2b00      	cmp	r3, #0
 8000682:	d13f      	bne.n	8000704 <__aeabi_fdiv+0xf0>
 8000684:	3fff      	subs	r7, #255	@ 0xff
 8000686:	3302      	adds	r3, #2
 8000688:	e003      	b.n	8000692 <__aeabi_fdiv+0x7e>
 800068a:	4643      	mov	r3, r8
 800068c:	2b00      	cmp	r3, #0
 800068e:	d12d      	bne.n	80006ec <__aeabi_fdiv+0xd8>
 8000690:	2301      	movs	r3, #1
 8000692:	0029      	movs	r1, r5
 8000694:	464a      	mov	r2, r9
 8000696:	4071      	eors	r1, r6
 8000698:	b2c9      	uxtb	r1, r1
 800069a:	431a      	orrs	r2, r3
 800069c:	2a0e      	cmp	r2, #14
 800069e:	d838      	bhi.n	8000712 <__aeabi_fdiv+0xfe>
 80006a0:	486a      	ldr	r0, [pc, #424]	@ (800084c <__aeabi_fdiv+0x238>)
 80006a2:	0092      	lsls	r2, r2, #2
 80006a4:	5882      	ldr	r2, [r0, r2]
 80006a6:	4697      	mov	pc, r2
 80006a8:	2c00      	cmp	r4, #0
 80006aa:	d113      	bne.n	80006d4 <__aeabi_fdiv+0xc0>
 80006ac:	2304      	movs	r3, #4
 80006ae:	4699      	mov	r9, r3
 80006b0:	3b03      	subs	r3, #3
 80006b2:	2700      	movs	r7, #0
 80006b4:	469a      	mov	sl, r3
 80006b6:	e7c4      	b.n	8000642 <__aeabi_fdiv+0x2e>
 80006b8:	2c00      	cmp	r4, #0
 80006ba:	d105      	bne.n	80006c8 <__aeabi_fdiv+0xb4>
 80006bc:	2308      	movs	r3, #8
 80006be:	4699      	mov	r9, r3
 80006c0:	3b06      	subs	r3, #6
 80006c2:	27ff      	movs	r7, #255	@ 0xff
 80006c4:	469a      	mov	sl, r3
 80006c6:	e7bc      	b.n	8000642 <__aeabi_fdiv+0x2e>
 80006c8:	230c      	movs	r3, #12
 80006ca:	4699      	mov	r9, r3
 80006cc:	3b09      	subs	r3, #9
 80006ce:	27ff      	movs	r7, #255	@ 0xff
 80006d0:	469a      	mov	sl, r3
 80006d2:	e7b6      	b.n	8000642 <__aeabi_fdiv+0x2e>
 80006d4:	0020      	movs	r0, r4
 80006d6:	f002 f83f 	bl	8002758 <__clzsi2>
 80006da:	2776      	movs	r7, #118	@ 0x76
 80006dc:	1f43      	subs	r3, r0, #5
 80006de:	409c      	lsls	r4, r3
 80006e0:	2300      	movs	r3, #0
 80006e2:	427f      	negs	r7, r7
 80006e4:	4699      	mov	r9, r3
 80006e6:	469a      	mov	sl, r3
 80006e8:	1a3f      	subs	r7, r7, r0
 80006ea:	e7aa      	b.n	8000642 <__aeabi_fdiv+0x2e>
 80006ec:	4640      	mov	r0, r8
 80006ee:	f002 f833 	bl	8002758 <__clzsi2>
 80006f2:	4642      	mov	r2, r8
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409a      	lsls	r2, r3
 80006f8:	2376      	movs	r3, #118	@ 0x76
 80006fa:	425b      	negs	r3, r3
 80006fc:	1a1b      	subs	r3, r3, r0
 80006fe:	4690      	mov	r8, r2
 8000700:	2000      	movs	r0, #0
 8000702:	e7b0      	b.n	8000666 <__aeabi_fdiv+0x52>
 8000704:	2303      	movs	r3, #3
 8000706:	464a      	mov	r2, r9
 8000708:	431a      	orrs	r2, r3
 800070a:	4691      	mov	r9, r2
 800070c:	2003      	movs	r0, #3
 800070e:	33fc      	adds	r3, #252	@ 0xfc
 8000710:	e7a9      	b.n	8000666 <__aeabi_fdiv+0x52>
 8000712:	000d      	movs	r5, r1
 8000714:	20ff      	movs	r0, #255	@ 0xff
 8000716:	2200      	movs	r2, #0
 8000718:	05c0      	lsls	r0, r0, #23
 800071a:	07ed      	lsls	r5, r5, #31
 800071c:	4310      	orrs	r0, r2
 800071e:	4328      	orrs	r0, r5
 8000720:	bce0      	pop	{r5, r6, r7}
 8000722:	46ba      	mov	sl, r7
 8000724:	46b1      	mov	r9, r6
 8000726:	46a8      	mov	r8, r5
 8000728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800072a:	000d      	movs	r5, r1
 800072c:	2000      	movs	r0, #0
 800072e:	2200      	movs	r2, #0
 8000730:	e7f2      	b.n	8000718 <__aeabi_fdiv+0x104>
 8000732:	4653      	mov	r3, sl
 8000734:	2b02      	cmp	r3, #2
 8000736:	d0ed      	beq.n	8000714 <__aeabi_fdiv+0x100>
 8000738:	2b03      	cmp	r3, #3
 800073a:	d033      	beq.n	80007a4 <__aeabi_fdiv+0x190>
 800073c:	46a0      	mov	r8, r4
 800073e:	2b01      	cmp	r3, #1
 8000740:	d105      	bne.n	800074e <__aeabi_fdiv+0x13a>
 8000742:	2000      	movs	r0, #0
 8000744:	2200      	movs	r2, #0
 8000746:	e7e7      	b.n	8000718 <__aeabi_fdiv+0x104>
 8000748:	0035      	movs	r5, r6
 800074a:	2803      	cmp	r0, #3
 800074c:	d07a      	beq.n	8000844 <__aeabi_fdiv+0x230>
 800074e:	003b      	movs	r3, r7
 8000750:	337f      	adds	r3, #127	@ 0x7f
 8000752:	2b00      	cmp	r3, #0
 8000754:	dd2d      	ble.n	80007b2 <__aeabi_fdiv+0x19e>
 8000756:	4642      	mov	r2, r8
 8000758:	0752      	lsls	r2, r2, #29
 800075a:	d007      	beq.n	800076c <__aeabi_fdiv+0x158>
 800075c:	220f      	movs	r2, #15
 800075e:	4641      	mov	r1, r8
 8000760:	400a      	ands	r2, r1
 8000762:	2a04      	cmp	r2, #4
 8000764:	d002      	beq.n	800076c <__aeabi_fdiv+0x158>
 8000766:	2204      	movs	r2, #4
 8000768:	4694      	mov	ip, r2
 800076a:	44e0      	add	r8, ip
 800076c:	4642      	mov	r2, r8
 800076e:	0112      	lsls	r2, r2, #4
 8000770:	d505      	bpl.n	800077e <__aeabi_fdiv+0x16a>
 8000772:	4642      	mov	r2, r8
 8000774:	4b36      	ldr	r3, [pc, #216]	@ (8000850 <__aeabi_fdiv+0x23c>)
 8000776:	401a      	ands	r2, r3
 8000778:	003b      	movs	r3, r7
 800077a:	4690      	mov	r8, r2
 800077c:	3380      	adds	r3, #128	@ 0x80
 800077e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000780:	dcc8      	bgt.n	8000714 <__aeabi_fdiv+0x100>
 8000782:	4642      	mov	r2, r8
 8000784:	0192      	lsls	r2, r2, #6
 8000786:	0a52      	lsrs	r2, r2, #9
 8000788:	b2d8      	uxtb	r0, r3
 800078a:	e7c5      	b.n	8000718 <__aeabi_fdiv+0x104>
 800078c:	2280      	movs	r2, #128	@ 0x80
 800078e:	2500      	movs	r5, #0
 8000790:	20ff      	movs	r0, #255	@ 0xff
 8000792:	03d2      	lsls	r2, r2, #15
 8000794:	e7c0      	b.n	8000718 <__aeabi_fdiv+0x104>
 8000796:	2280      	movs	r2, #128	@ 0x80
 8000798:	03d2      	lsls	r2, r2, #15
 800079a:	4214      	tst	r4, r2
 800079c:	d002      	beq.n	80007a4 <__aeabi_fdiv+0x190>
 800079e:	4643      	mov	r3, r8
 80007a0:	4213      	tst	r3, r2
 80007a2:	d049      	beq.n	8000838 <__aeabi_fdiv+0x224>
 80007a4:	2280      	movs	r2, #128	@ 0x80
 80007a6:	03d2      	lsls	r2, r2, #15
 80007a8:	4322      	orrs	r2, r4
 80007aa:	0252      	lsls	r2, r2, #9
 80007ac:	20ff      	movs	r0, #255	@ 0xff
 80007ae:	0a52      	lsrs	r2, r2, #9
 80007b0:	e7b2      	b.n	8000718 <__aeabi_fdiv+0x104>
 80007b2:	2201      	movs	r2, #1
 80007b4:	1ad3      	subs	r3, r2, r3
 80007b6:	2b1b      	cmp	r3, #27
 80007b8:	dcc3      	bgt.n	8000742 <__aeabi_fdiv+0x12e>
 80007ba:	4642      	mov	r2, r8
 80007bc:	40da      	lsrs	r2, r3
 80007be:	4643      	mov	r3, r8
 80007c0:	379e      	adds	r7, #158	@ 0x9e
 80007c2:	40bb      	lsls	r3, r7
 80007c4:	1e59      	subs	r1, r3, #1
 80007c6:	418b      	sbcs	r3, r1
 80007c8:	431a      	orrs	r2, r3
 80007ca:	0753      	lsls	r3, r2, #29
 80007cc:	d004      	beq.n	80007d8 <__aeabi_fdiv+0x1c4>
 80007ce:	230f      	movs	r3, #15
 80007d0:	4013      	ands	r3, r2
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d000      	beq.n	80007d8 <__aeabi_fdiv+0x1c4>
 80007d6:	3204      	adds	r2, #4
 80007d8:	0153      	lsls	r3, r2, #5
 80007da:	d529      	bpl.n	8000830 <__aeabi_fdiv+0x21c>
 80007dc:	2001      	movs	r0, #1
 80007de:	2200      	movs	r2, #0
 80007e0:	e79a      	b.n	8000718 <__aeabi_fdiv+0x104>
 80007e2:	4642      	mov	r2, r8
 80007e4:	0163      	lsls	r3, r4, #5
 80007e6:	0155      	lsls	r5, r2, #5
 80007e8:	42ab      	cmp	r3, r5
 80007ea:	d215      	bcs.n	8000818 <__aeabi_fdiv+0x204>
 80007ec:	201b      	movs	r0, #27
 80007ee:	2200      	movs	r2, #0
 80007f0:	3f01      	subs	r7, #1
 80007f2:	2601      	movs	r6, #1
 80007f4:	001c      	movs	r4, r3
 80007f6:	0052      	lsls	r2, r2, #1
 80007f8:	005b      	lsls	r3, r3, #1
 80007fa:	2c00      	cmp	r4, #0
 80007fc:	db01      	blt.n	8000802 <__aeabi_fdiv+0x1ee>
 80007fe:	429d      	cmp	r5, r3
 8000800:	d801      	bhi.n	8000806 <__aeabi_fdiv+0x1f2>
 8000802:	1b5b      	subs	r3, r3, r5
 8000804:	4332      	orrs	r2, r6
 8000806:	3801      	subs	r0, #1
 8000808:	2800      	cmp	r0, #0
 800080a:	d1f3      	bne.n	80007f4 <__aeabi_fdiv+0x1e0>
 800080c:	1e58      	subs	r0, r3, #1
 800080e:	4183      	sbcs	r3, r0
 8000810:	4313      	orrs	r3, r2
 8000812:	4698      	mov	r8, r3
 8000814:	000d      	movs	r5, r1
 8000816:	e79a      	b.n	800074e <__aeabi_fdiv+0x13a>
 8000818:	201a      	movs	r0, #26
 800081a:	2201      	movs	r2, #1
 800081c:	1b5b      	subs	r3, r3, r5
 800081e:	e7e8      	b.n	80007f2 <__aeabi_fdiv+0x1de>
 8000820:	3b02      	subs	r3, #2
 8000822:	425a      	negs	r2, r3
 8000824:	4153      	adcs	r3, r2
 8000826:	425b      	negs	r3, r3
 8000828:	0035      	movs	r5, r6
 800082a:	2200      	movs	r2, #0
 800082c:	b2d8      	uxtb	r0, r3
 800082e:	e773      	b.n	8000718 <__aeabi_fdiv+0x104>
 8000830:	0192      	lsls	r2, r2, #6
 8000832:	2000      	movs	r0, #0
 8000834:	0a52      	lsrs	r2, r2, #9
 8000836:	e76f      	b.n	8000718 <__aeabi_fdiv+0x104>
 8000838:	431a      	orrs	r2, r3
 800083a:	0252      	lsls	r2, r2, #9
 800083c:	0035      	movs	r5, r6
 800083e:	20ff      	movs	r0, #255	@ 0xff
 8000840:	0a52      	lsrs	r2, r2, #9
 8000842:	e769      	b.n	8000718 <__aeabi_fdiv+0x104>
 8000844:	4644      	mov	r4, r8
 8000846:	e7ad      	b.n	80007a4 <__aeabi_fdiv+0x190>
 8000848:	08010bc8 	.word	0x08010bc8
 800084c:	08010c08 	.word	0x08010c08
 8000850:	f7ffffff 	.word	0xf7ffffff

08000854 <__eqsf2>:
 8000854:	b570      	push	{r4, r5, r6, lr}
 8000856:	0042      	lsls	r2, r0, #1
 8000858:	024e      	lsls	r6, r1, #9
 800085a:	004c      	lsls	r4, r1, #1
 800085c:	0245      	lsls	r5, r0, #9
 800085e:	0a6d      	lsrs	r5, r5, #9
 8000860:	0e12      	lsrs	r2, r2, #24
 8000862:	0fc3      	lsrs	r3, r0, #31
 8000864:	0a76      	lsrs	r6, r6, #9
 8000866:	0e24      	lsrs	r4, r4, #24
 8000868:	0fc9      	lsrs	r1, r1, #31
 800086a:	2aff      	cmp	r2, #255	@ 0xff
 800086c:	d010      	beq.n	8000890 <__eqsf2+0x3c>
 800086e:	2cff      	cmp	r4, #255	@ 0xff
 8000870:	d00c      	beq.n	800088c <__eqsf2+0x38>
 8000872:	2001      	movs	r0, #1
 8000874:	42a2      	cmp	r2, r4
 8000876:	d10a      	bne.n	800088e <__eqsf2+0x3a>
 8000878:	42b5      	cmp	r5, r6
 800087a:	d108      	bne.n	800088e <__eqsf2+0x3a>
 800087c:	428b      	cmp	r3, r1
 800087e:	d00f      	beq.n	80008a0 <__eqsf2+0x4c>
 8000880:	2a00      	cmp	r2, #0
 8000882:	d104      	bne.n	800088e <__eqsf2+0x3a>
 8000884:	0028      	movs	r0, r5
 8000886:	1e43      	subs	r3, r0, #1
 8000888:	4198      	sbcs	r0, r3
 800088a:	e000      	b.n	800088e <__eqsf2+0x3a>
 800088c:	2001      	movs	r0, #1
 800088e:	bd70      	pop	{r4, r5, r6, pc}
 8000890:	2001      	movs	r0, #1
 8000892:	2cff      	cmp	r4, #255	@ 0xff
 8000894:	d1fb      	bne.n	800088e <__eqsf2+0x3a>
 8000896:	4335      	orrs	r5, r6
 8000898:	d1f9      	bne.n	800088e <__eqsf2+0x3a>
 800089a:	404b      	eors	r3, r1
 800089c:	0018      	movs	r0, r3
 800089e:	e7f6      	b.n	800088e <__eqsf2+0x3a>
 80008a0:	2000      	movs	r0, #0
 80008a2:	e7f4      	b.n	800088e <__eqsf2+0x3a>

080008a4 <__gesf2>:
 80008a4:	b530      	push	{r4, r5, lr}
 80008a6:	0042      	lsls	r2, r0, #1
 80008a8:	0244      	lsls	r4, r0, #9
 80008aa:	024d      	lsls	r5, r1, #9
 80008ac:	0fc3      	lsrs	r3, r0, #31
 80008ae:	0048      	lsls	r0, r1, #1
 80008b0:	0a64      	lsrs	r4, r4, #9
 80008b2:	0e12      	lsrs	r2, r2, #24
 80008b4:	0a6d      	lsrs	r5, r5, #9
 80008b6:	0e00      	lsrs	r0, r0, #24
 80008b8:	0fc9      	lsrs	r1, r1, #31
 80008ba:	2aff      	cmp	r2, #255	@ 0xff
 80008bc:	d019      	beq.n	80008f2 <__gesf2+0x4e>
 80008be:	28ff      	cmp	r0, #255	@ 0xff
 80008c0:	d00b      	beq.n	80008da <__gesf2+0x36>
 80008c2:	2a00      	cmp	r2, #0
 80008c4:	d11e      	bne.n	8000904 <__gesf2+0x60>
 80008c6:	2800      	cmp	r0, #0
 80008c8:	d10b      	bne.n	80008e2 <__gesf2+0x3e>
 80008ca:	2d00      	cmp	r5, #0
 80008cc:	d027      	beq.n	800091e <__gesf2+0x7a>
 80008ce:	2c00      	cmp	r4, #0
 80008d0:	d134      	bne.n	800093c <__gesf2+0x98>
 80008d2:	2900      	cmp	r1, #0
 80008d4:	d02f      	beq.n	8000936 <__gesf2+0x92>
 80008d6:	0008      	movs	r0, r1
 80008d8:	bd30      	pop	{r4, r5, pc}
 80008da:	2d00      	cmp	r5, #0
 80008dc:	d128      	bne.n	8000930 <__gesf2+0x8c>
 80008de:	2a00      	cmp	r2, #0
 80008e0:	d101      	bne.n	80008e6 <__gesf2+0x42>
 80008e2:	2c00      	cmp	r4, #0
 80008e4:	d0f5      	beq.n	80008d2 <__gesf2+0x2e>
 80008e6:	428b      	cmp	r3, r1
 80008e8:	d107      	bne.n	80008fa <__gesf2+0x56>
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d023      	beq.n	8000936 <__gesf2+0x92>
 80008ee:	0018      	movs	r0, r3
 80008f0:	e7f2      	b.n	80008d8 <__gesf2+0x34>
 80008f2:	2c00      	cmp	r4, #0
 80008f4:	d11c      	bne.n	8000930 <__gesf2+0x8c>
 80008f6:	28ff      	cmp	r0, #255	@ 0xff
 80008f8:	d014      	beq.n	8000924 <__gesf2+0x80>
 80008fa:	1e58      	subs	r0, r3, #1
 80008fc:	2302      	movs	r3, #2
 80008fe:	4018      	ands	r0, r3
 8000900:	3801      	subs	r0, #1
 8000902:	e7e9      	b.n	80008d8 <__gesf2+0x34>
 8000904:	2800      	cmp	r0, #0
 8000906:	d0f8      	beq.n	80008fa <__gesf2+0x56>
 8000908:	428b      	cmp	r3, r1
 800090a:	d1f6      	bne.n	80008fa <__gesf2+0x56>
 800090c:	4282      	cmp	r2, r0
 800090e:	dcf4      	bgt.n	80008fa <__gesf2+0x56>
 8000910:	dbeb      	blt.n	80008ea <__gesf2+0x46>
 8000912:	42ac      	cmp	r4, r5
 8000914:	d8f1      	bhi.n	80008fa <__gesf2+0x56>
 8000916:	2000      	movs	r0, #0
 8000918:	42ac      	cmp	r4, r5
 800091a:	d2dd      	bcs.n	80008d8 <__gesf2+0x34>
 800091c:	e7e5      	b.n	80008ea <__gesf2+0x46>
 800091e:	2c00      	cmp	r4, #0
 8000920:	d0da      	beq.n	80008d8 <__gesf2+0x34>
 8000922:	e7ea      	b.n	80008fa <__gesf2+0x56>
 8000924:	2d00      	cmp	r5, #0
 8000926:	d103      	bne.n	8000930 <__gesf2+0x8c>
 8000928:	428b      	cmp	r3, r1
 800092a:	d1e6      	bne.n	80008fa <__gesf2+0x56>
 800092c:	2000      	movs	r0, #0
 800092e:	e7d3      	b.n	80008d8 <__gesf2+0x34>
 8000930:	2002      	movs	r0, #2
 8000932:	4240      	negs	r0, r0
 8000934:	e7d0      	b.n	80008d8 <__gesf2+0x34>
 8000936:	2001      	movs	r0, #1
 8000938:	4240      	negs	r0, r0
 800093a:	e7cd      	b.n	80008d8 <__gesf2+0x34>
 800093c:	428b      	cmp	r3, r1
 800093e:	d0e8      	beq.n	8000912 <__gesf2+0x6e>
 8000940:	e7db      	b.n	80008fa <__gesf2+0x56>
 8000942:	46c0      	nop			@ (mov r8, r8)

08000944 <__lesf2>:
 8000944:	b530      	push	{r4, r5, lr}
 8000946:	0042      	lsls	r2, r0, #1
 8000948:	0244      	lsls	r4, r0, #9
 800094a:	024d      	lsls	r5, r1, #9
 800094c:	0fc3      	lsrs	r3, r0, #31
 800094e:	0048      	lsls	r0, r1, #1
 8000950:	0a64      	lsrs	r4, r4, #9
 8000952:	0e12      	lsrs	r2, r2, #24
 8000954:	0a6d      	lsrs	r5, r5, #9
 8000956:	0e00      	lsrs	r0, r0, #24
 8000958:	0fc9      	lsrs	r1, r1, #31
 800095a:	2aff      	cmp	r2, #255	@ 0xff
 800095c:	d01a      	beq.n	8000994 <__lesf2+0x50>
 800095e:	28ff      	cmp	r0, #255	@ 0xff
 8000960:	d00e      	beq.n	8000980 <__lesf2+0x3c>
 8000962:	2a00      	cmp	r2, #0
 8000964:	d11e      	bne.n	80009a4 <__lesf2+0x60>
 8000966:	2800      	cmp	r0, #0
 8000968:	d10e      	bne.n	8000988 <__lesf2+0x44>
 800096a:	2d00      	cmp	r5, #0
 800096c:	d02a      	beq.n	80009c4 <__lesf2+0x80>
 800096e:	2c00      	cmp	r4, #0
 8000970:	d00c      	beq.n	800098c <__lesf2+0x48>
 8000972:	428b      	cmp	r3, r1
 8000974:	d01d      	beq.n	80009b2 <__lesf2+0x6e>
 8000976:	1e58      	subs	r0, r3, #1
 8000978:	2302      	movs	r3, #2
 800097a:	4018      	ands	r0, r3
 800097c:	3801      	subs	r0, #1
 800097e:	e010      	b.n	80009a2 <__lesf2+0x5e>
 8000980:	2d00      	cmp	r5, #0
 8000982:	d10d      	bne.n	80009a0 <__lesf2+0x5c>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d120      	bne.n	80009ca <__lesf2+0x86>
 8000988:	2c00      	cmp	r4, #0
 800098a:	d11e      	bne.n	80009ca <__lesf2+0x86>
 800098c:	2900      	cmp	r1, #0
 800098e:	d023      	beq.n	80009d8 <__lesf2+0x94>
 8000990:	0008      	movs	r0, r1
 8000992:	e006      	b.n	80009a2 <__lesf2+0x5e>
 8000994:	2c00      	cmp	r4, #0
 8000996:	d103      	bne.n	80009a0 <__lesf2+0x5c>
 8000998:	28ff      	cmp	r0, #255	@ 0xff
 800099a:	d1ec      	bne.n	8000976 <__lesf2+0x32>
 800099c:	2d00      	cmp	r5, #0
 800099e:	d017      	beq.n	80009d0 <__lesf2+0x8c>
 80009a0:	2002      	movs	r0, #2
 80009a2:	bd30      	pop	{r4, r5, pc}
 80009a4:	2800      	cmp	r0, #0
 80009a6:	d0e6      	beq.n	8000976 <__lesf2+0x32>
 80009a8:	428b      	cmp	r3, r1
 80009aa:	d1e4      	bne.n	8000976 <__lesf2+0x32>
 80009ac:	4282      	cmp	r2, r0
 80009ae:	dce2      	bgt.n	8000976 <__lesf2+0x32>
 80009b0:	db04      	blt.n	80009bc <__lesf2+0x78>
 80009b2:	42ac      	cmp	r4, r5
 80009b4:	d8df      	bhi.n	8000976 <__lesf2+0x32>
 80009b6:	2000      	movs	r0, #0
 80009b8:	42ac      	cmp	r4, r5
 80009ba:	d2f2      	bcs.n	80009a2 <__lesf2+0x5e>
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d00b      	beq.n	80009d8 <__lesf2+0x94>
 80009c0:	0018      	movs	r0, r3
 80009c2:	e7ee      	b.n	80009a2 <__lesf2+0x5e>
 80009c4:	2c00      	cmp	r4, #0
 80009c6:	d0ec      	beq.n	80009a2 <__lesf2+0x5e>
 80009c8:	e7d5      	b.n	8000976 <__lesf2+0x32>
 80009ca:	428b      	cmp	r3, r1
 80009cc:	d1d3      	bne.n	8000976 <__lesf2+0x32>
 80009ce:	e7f5      	b.n	80009bc <__lesf2+0x78>
 80009d0:	2000      	movs	r0, #0
 80009d2:	428b      	cmp	r3, r1
 80009d4:	d0e5      	beq.n	80009a2 <__lesf2+0x5e>
 80009d6:	e7ce      	b.n	8000976 <__lesf2+0x32>
 80009d8:	2001      	movs	r0, #1
 80009da:	4240      	negs	r0, r0
 80009dc:	e7e1      	b.n	80009a2 <__lesf2+0x5e>
 80009de:	46c0      	nop			@ (mov r8, r8)

080009e0 <__aeabi_fmul>:
 80009e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009e2:	464f      	mov	r7, r9
 80009e4:	4646      	mov	r6, r8
 80009e6:	46d6      	mov	lr, sl
 80009e8:	0243      	lsls	r3, r0, #9
 80009ea:	0a5b      	lsrs	r3, r3, #9
 80009ec:	0045      	lsls	r5, r0, #1
 80009ee:	b5c0      	push	{r6, r7, lr}
 80009f0:	4699      	mov	r9, r3
 80009f2:	1c0f      	adds	r7, r1, #0
 80009f4:	0e2d      	lsrs	r5, r5, #24
 80009f6:	0fc6      	lsrs	r6, r0, #31
 80009f8:	2d00      	cmp	r5, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_fmul+0x1e>
 80009fc:	e088      	b.n	8000b10 <__aeabi_fmul+0x130>
 80009fe:	2dff      	cmp	r5, #255	@ 0xff
 8000a00:	d100      	bne.n	8000a04 <__aeabi_fmul+0x24>
 8000a02:	e08d      	b.n	8000b20 <__aeabi_fmul+0x140>
 8000a04:	2280      	movs	r2, #128	@ 0x80
 8000a06:	00db      	lsls	r3, r3, #3
 8000a08:	04d2      	lsls	r2, r2, #19
 8000a0a:	431a      	orrs	r2, r3
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	4691      	mov	r9, r2
 8000a10:	4698      	mov	r8, r3
 8000a12:	469a      	mov	sl, r3
 8000a14:	3d7f      	subs	r5, #127	@ 0x7f
 8000a16:	027c      	lsls	r4, r7, #9
 8000a18:	007b      	lsls	r3, r7, #1
 8000a1a:	0a64      	lsrs	r4, r4, #9
 8000a1c:	0e1b      	lsrs	r3, r3, #24
 8000a1e:	0fff      	lsrs	r7, r7, #31
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d068      	beq.n	8000af6 <__aeabi_fmul+0x116>
 8000a24:	2bff      	cmp	r3, #255	@ 0xff
 8000a26:	d021      	beq.n	8000a6c <__aeabi_fmul+0x8c>
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	00e4      	lsls	r4, r4, #3
 8000a2c:	04d2      	lsls	r2, r2, #19
 8000a2e:	4314      	orrs	r4, r2
 8000a30:	4642      	mov	r2, r8
 8000a32:	3b7f      	subs	r3, #127	@ 0x7f
 8000a34:	195b      	adds	r3, r3, r5
 8000a36:	2100      	movs	r1, #0
 8000a38:	1c5d      	adds	r5, r3, #1
 8000a3a:	2a0a      	cmp	r2, #10
 8000a3c:	dc2e      	bgt.n	8000a9c <__aeabi_fmul+0xbc>
 8000a3e:	407e      	eors	r6, r7
 8000a40:	4642      	mov	r2, r8
 8000a42:	2a02      	cmp	r2, #2
 8000a44:	dc23      	bgt.n	8000a8e <__aeabi_fmul+0xae>
 8000a46:	3a01      	subs	r2, #1
 8000a48:	2a01      	cmp	r2, #1
 8000a4a:	d900      	bls.n	8000a4e <__aeabi_fmul+0x6e>
 8000a4c:	e0bd      	b.n	8000bca <__aeabi_fmul+0x1ea>
 8000a4e:	2902      	cmp	r1, #2
 8000a50:	d06e      	beq.n	8000b30 <__aeabi_fmul+0x150>
 8000a52:	2901      	cmp	r1, #1
 8000a54:	d12c      	bne.n	8000ab0 <__aeabi_fmul+0xd0>
 8000a56:	2000      	movs	r0, #0
 8000a58:	2200      	movs	r2, #0
 8000a5a:	05c0      	lsls	r0, r0, #23
 8000a5c:	07f6      	lsls	r6, r6, #31
 8000a5e:	4310      	orrs	r0, r2
 8000a60:	4330      	orrs	r0, r6
 8000a62:	bce0      	pop	{r5, r6, r7}
 8000a64:	46ba      	mov	sl, r7
 8000a66:	46b1      	mov	r9, r6
 8000a68:	46a8      	mov	r8, r5
 8000a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a6c:	002b      	movs	r3, r5
 8000a6e:	33ff      	adds	r3, #255	@ 0xff
 8000a70:	2c00      	cmp	r4, #0
 8000a72:	d065      	beq.n	8000b40 <__aeabi_fmul+0x160>
 8000a74:	2203      	movs	r2, #3
 8000a76:	4641      	mov	r1, r8
 8000a78:	4311      	orrs	r1, r2
 8000a7a:	0032      	movs	r2, r6
 8000a7c:	3501      	adds	r5, #1
 8000a7e:	4688      	mov	r8, r1
 8000a80:	407a      	eors	r2, r7
 8000a82:	35ff      	adds	r5, #255	@ 0xff
 8000a84:	290a      	cmp	r1, #10
 8000a86:	dd00      	ble.n	8000a8a <__aeabi_fmul+0xaa>
 8000a88:	e0d8      	b.n	8000c3c <__aeabi_fmul+0x25c>
 8000a8a:	0016      	movs	r6, r2
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	4640      	mov	r0, r8
 8000a90:	2201      	movs	r2, #1
 8000a92:	4082      	lsls	r2, r0
 8000a94:	20a6      	movs	r0, #166	@ 0xa6
 8000a96:	00c0      	lsls	r0, r0, #3
 8000a98:	4202      	tst	r2, r0
 8000a9a:	d020      	beq.n	8000ade <__aeabi_fmul+0xfe>
 8000a9c:	4653      	mov	r3, sl
 8000a9e:	2b02      	cmp	r3, #2
 8000aa0:	d046      	beq.n	8000b30 <__aeabi_fmul+0x150>
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d100      	bne.n	8000aa8 <__aeabi_fmul+0xc8>
 8000aa6:	e0bb      	b.n	8000c20 <__aeabi_fmul+0x240>
 8000aa8:	4651      	mov	r1, sl
 8000aaa:	464c      	mov	r4, r9
 8000aac:	2901      	cmp	r1, #1
 8000aae:	d0d2      	beq.n	8000a56 <__aeabi_fmul+0x76>
 8000ab0:	002b      	movs	r3, r5
 8000ab2:	337f      	adds	r3, #127	@ 0x7f
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	dd70      	ble.n	8000b9a <__aeabi_fmul+0x1ba>
 8000ab8:	0762      	lsls	r2, r4, #29
 8000aba:	d004      	beq.n	8000ac6 <__aeabi_fmul+0xe6>
 8000abc:	220f      	movs	r2, #15
 8000abe:	4022      	ands	r2, r4
 8000ac0:	2a04      	cmp	r2, #4
 8000ac2:	d000      	beq.n	8000ac6 <__aeabi_fmul+0xe6>
 8000ac4:	3404      	adds	r4, #4
 8000ac6:	0122      	lsls	r2, r4, #4
 8000ac8:	d503      	bpl.n	8000ad2 <__aeabi_fmul+0xf2>
 8000aca:	4b63      	ldr	r3, [pc, #396]	@ (8000c58 <__aeabi_fmul+0x278>)
 8000acc:	401c      	ands	r4, r3
 8000ace:	002b      	movs	r3, r5
 8000ad0:	3380      	adds	r3, #128	@ 0x80
 8000ad2:	2bfe      	cmp	r3, #254	@ 0xfe
 8000ad4:	dc2c      	bgt.n	8000b30 <__aeabi_fmul+0x150>
 8000ad6:	01a2      	lsls	r2, r4, #6
 8000ad8:	0a52      	lsrs	r2, r2, #9
 8000ada:	b2d8      	uxtb	r0, r3
 8000adc:	e7bd      	b.n	8000a5a <__aeabi_fmul+0x7a>
 8000ade:	2090      	movs	r0, #144	@ 0x90
 8000ae0:	0080      	lsls	r0, r0, #2
 8000ae2:	4202      	tst	r2, r0
 8000ae4:	d127      	bne.n	8000b36 <__aeabi_fmul+0x156>
 8000ae6:	38b9      	subs	r0, #185	@ 0xb9
 8000ae8:	38ff      	subs	r0, #255	@ 0xff
 8000aea:	4210      	tst	r0, r2
 8000aec:	d06d      	beq.n	8000bca <__aeabi_fmul+0x1ea>
 8000aee:	003e      	movs	r6, r7
 8000af0:	46a1      	mov	r9, r4
 8000af2:	468a      	mov	sl, r1
 8000af4:	e7d2      	b.n	8000a9c <__aeabi_fmul+0xbc>
 8000af6:	2c00      	cmp	r4, #0
 8000af8:	d141      	bne.n	8000b7e <__aeabi_fmul+0x19e>
 8000afa:	2301      	movs	r3, #1
 8000afc:	4642      	mov	r2, r8
 8000afe:	431a      	orrs	r2, r3
 8000b00:	4690      	mov	r8, r2
 8000b02:	002b      	movs	r3, r5
 8000b04:	4642      	mov	r2, r8
 8000b06:	2101      	movs	r1, #1
 8000b08:	1c5d      	adds	r5, r3, #1
 8000b0a:	2a0a      	cmp	r2, #10
 8000b0c:	dd97      	ble.n	8000a3e <__aeabi_fmul+0x5e>
 8000b0e:	e7c5      	b.n	8000a9c <__aeabi_fmul+0xbc>
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d126      	bne.n	8000b62 <__aeabi_fmul+0x182>
 8000b14:	2304      	movs	r3, #4
 8000b16:	4698      	mov	r8, r3
 8000b18:	3b03      	subs	r3, #3
 8000b1a:	2500      	movs	r5, #0
 8000b1c:	469a      	mov	sl, r3
 8000b1e:	e77a      	b.n	8000a16 <__aeabi_fmul+0x36>
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d118      	bne.n	8000b56 <__aeabi_fmul+0x176>
 8000b24:	2308      	movs	r3, #8
 8000b26:	4698      	mov	r8, r3
 8000b28:	3b06      	subs	r3, #6
 8000b2a:	25ff      	movs	r5, #255	@ 0xff
 8000b2c:	469a      	mov	sl, r3
 8000b2e:	e772      	b.n	8000a16 <__aeabi_fmul+0x36>
 8000b30:	20ff      	movs	r0, #255	@ 0xff
 8000b32:	2200      	movs	r2, #0
 8000b34:	e791      	b.n	8000a5a <__aeabi_fmul+0x7a>
 8000b36:	2280      	movs	r2, #128	@ 0x80
 8000b38:	2600      	movs	r6, #0
 8000b3a:	20ff      	movs	r0, #255	@ 0xff
 8000b3c:	03d2      	lsls	r2, r2, #15
 8000b3e:	e78c      	b.n	8000a5a <__aeabi_fmul+0x7a>
 8000b40:	4641      	mov	r1, r8
 8000b42:	2202      	movs	r2, #2
 8000b44:	3501      	adds	r5, #1
 8000b46:	4311      	orrs	r1, r2
 8000b48:	4688      	mov	r8, r1
 8000b4a:	35ff      	adds	r5, #255	@ 0xff
 8000b4c:	290a      	cmp	r1, #10
 8000b4e:	dca5      	bgt.n	8000a9c <__aeabi_fmul+0xbc>
 8000b50:	2102      	movs	r1, #2
 8000b52:	407e      	eors	r6, r7
 8000b54:	e774      	b.n	8000a40 <__aeabi_fmul+0x60>
 8000b56:	230c      	movs	r3, #12
 8000b58:	4698      	mov	r8, r3
 8000b5a:	3b09      	subs	r3, #9
 8000b5c:	25ff      	movs	r5, #255	@ 0xff
 8000b5e:	469a      	mov	sl, r3
 8000b60:	e759      	b.n	8000a16 <__aeabi_fmul+0x36>
 8000b62:	0018      	movs	r0, r3
 8000b64:	f001 fdf8 	bl	8002758 <__clzsi2>
 8000b68:	464a      	mov	r2, r9
 8000b6a:	1f43      	subs	r3, r0, #5
 8000b6c:	2576      	movs	r5, #118	@ 0x76
 8000b6e:	409a      	lsls	r2, r3
 8000b70:	2300      	movs	r3, #0
 8000b72:	426d      	negs	r5, r5
 8000b74:	4691      	mov	r9, r2
 8000b76:	4698      	mov	r8, r3
 8000b78:	469a      	mov	sl, r3
 8000b7a:	1a2d      	subs	r5, r5, r0
 8000b7c:	e74b      	b.n	8000a16 <__aeabi_fmul+0x36>
 8000b7e:	0020      	movs	r0, r4
 8000b80:	f001 fdea 	bl	8002758 <__clzsi2>
 8000b84:	4642      	mov	r2, r8
 8000b86:	1f43      	subs	r3, r0, #5
 8000b88:	409c      	lsls	r4, r3
 8000b8a:	1a2b      	subs	r3, r5, r0
 8000b8c:	3b76      	subs	r3, #118	@ 0x76
 8000b8e:	2100      	movs	r1, #0
 8000b90:	1c5d      	adds	r5, r3, #1
 8000b92:	2a0a      	cmp	r2, #10
 8000b94:	dc00      	bgt.n	8000b98 <__aeabi_fmul+0x1b8>
 8000b96:	e752      	b.n	8000a3e <__aeabi_fmul+0x5e>
 8000b98:	e780      	b.n	8000a9c <__aeabi_fmul+0xbc>
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	1ad3      	subs	r3, r2, r3
 8000b9e:	2b1b      	cmp	r3, #27
 8000ba0:	dd00      	ble.n	8000ba4 <__aeabi_fmul+0x1c4>
 8000ba2:	e758      	b.n	8000a56 <__aeabi_fmul+0x76>
 8000ba4:	359e      	adds	r5, #158	@ 0x9e
 8000ba6:	0022      	movs	r2, r4
 8000ba8:	40ac      	lsls	r4, r5
 8000baa:	40da      	lsrs	r2, r3
 8000bac:	1e63      	subs	r3, r4, #1
 8000bae:	419c      	sbcs	r4, r3
 8000bb0:	4322      	orrs	r2, r4
 8000bb2:	0753      	lsls	r3, r2, #29
 8000bb4:	d004      	beq.n	8000bc0 <__aeabi_fmul+0x1e0>
 8000bb6:	230f      	movs	r3, #15
 8000bb8:	4013      	ands	r3, r2
 8000bba:	2b04      	cmp	r3, #4
 8000bbc:	d000      	beq.n	8000bc0 <__aeabi_fmul+0x1e0>
 8000bbe:	3204      	adds	r2, #4
 8000bc0:	0153      	lsls	r3, r2, #5
 8000bc2:	d537      	bpl.n	8000c34 <__aeabi_fmul+0x254>
 8000bc4:	2001      	movs	r0, #1
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	e747      	b.n	8000a5a <__aeabi_fmul+0x7a>
 8000bca:	0c21      	lsrs	r1, r4, #16
 8000bcc:	464a      	mov	r2, r9
 8000bce:	0424      	lsls	r4, r4, #16
 8000bd0:	0c24      	lsrs	r4, r4, #16
 8000bd2:	0027      	movs	r7, r4
 8000bd4:	0c10      	lsrs	r0, r2, #16
 8000bd6:	0412      	lsls	r2, r2, #16
 8000bd8:	0c12      	lsrs	r2, r2, #16
 8000bda:	4344      	muls	r4, r0
 8000bdc:	4357      	muls	r7, r2
 8000bde:	4348      	muls	r0, r1
 8000be0:	4351      	muls	r1, r2
 8000be2:	0c3a      	lsrs	r2, r7, #16
 8000be4:	1909      	adds	r1, r1, r4
 8000be6:	1852      	adds	r2, r2, r1
 8000be8:	4294      	cmp	r4, r2
 8000bea:	d903      	bls.n	8000bf4 <__aeabi_fmul+0x214>
 8000bec:	2180      	movs	r1, #128	@ 0x80
 8000bee:	0249      	lsls	r1, r1, #9
 8000bf0:	468c      	mov	ip, r1
 8000bf2:	4460      	add	r0, ip
 8000bf4:	043f      	lsls	r7, r7, #16
 8000bf6:	0411      	lsls	r1, r2, #16
 8000bf8:	0c3f      	lsrs	r7, r7, #16
 8000bfa:	19c9      	adds	r1, r1, r7
 8000bfc:	018c      	lsls	r4, r1, #6
 8000bfe:	1e67      	subs	r7, r4, #1
 8000c00:	41bc      	sbcs	r4, r7
 8000c02:	0c12      	lsrs	r2, r2, #16
 8000c04:	0e89      	lsrs	r1, r1, #26
 8000c06:	1812      	adds	r2, r2, r0
 8000c08:	430c      	orrs	r4, r1
 8000c0a:	0192      	lsls	r2, r2, #6
 8000c0c:	4314      	orrs	r4, r2
 8000c0e:	0112      	lsls	r2, r2, #4
 8000c10:	d50e      	bpl.n	8000c30 <__aeabi_fmul+0x250>
 8000c12:	2301      	movs	r3, #1
 8000c14:	0862      	lsrs	r2, r4, #1
 8000c16:	401c      	ands	r4, r3
 8000c18:	4314      	orrs	r4, r2
 8000c1a:	e749      	b.n	8000ab0 <__aeabi_fmul+0xd0>
 8000c1c:	003e      	movs	r6, r7
 8000c1e:	46a1      	mov	r9, r4
 8000c20:	2280      	movs	r2, #128	@ 0x80
 8000c22:	464b      	mov	r3, r9
 8000c24:	03d2      	lsls	r2, r2, #15
 8000c26:	431a      	orrs	r2, r3
 8000c28:	0252      	lsls	r2, r2, #9
 8000c2a:	20ff      	movs	r0, #255	@ 0xff
 8000c2c:	0a52      	lsrs	r2, r2, #9
 8000c2e:	e714      	b.n	8000a5a <__aeabi_fmul+0x7a>
 8000c30:	001d      	movs	r5, r3
 8000c32:	e73d      	b.n	8000ab0 <__aeabi_fmul+0xd0>
 8000c34:	0192      	lsls	r2, r2, #6
 8000c36:	2000      	movs	r0, #0
 8000c38:	0a52      	lsrs	r2, r2, #9
 8000c3a:	e70e      	b.n	8000a5a <__aeabi_fmul+0x7a>
 8000c3c:	290f      	cmp	r1, #15
 8000c3e:	d1ed      	bne.n	8000c1c <__aeabi_fmul+0x23c>
 8000c40:	2280      	movs	r2, #128	@ 0x80
 8000c42:	464b      	mov	r3, r9
 8000c44:	03d2      	lsls	r2, r2, #15
 8000c46:	4213      	tst	r3, r2
 8000c48:	d0ea      	beq.n	8000c20 <__aeabi_fmul+0x240>
 8000c4a:	4214      	tst	r4, r2
 8000c4c:	d1e8      	bne.n	8000c20 <__aeabi_fmul+0x240>
 8000c4e:	003e      	movs	r6, r7
 8000c50:	20ff      	movs	r0, #255	@ 0xff
 8000c52:	4322      	orrs	r2, r4
 8000c54:	e701      	b.n	8000a5a <__aeabi_fmul+0x7a>
 8000c56:	46c0      	nop			@ (mov r8, r8)
 8000c58:	f7ffffff 	.word	0xf7ffffff

08000c5c <__aeabi_fsub>:
 8000c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c5e:	4647      	mov	r7, r8
 8000c60:	46ce      	mov	lr, r9
 8000c62:	024e      	lsls	r6, r1, #9
 8000c64:	0243      	lsls	r3, r0, #9
 8000c66:	0045      	lsls	r5, r0, #1
 8000c68:	0a72      	lsrs	r2, r6, #9
 8000c6a:	0fc4      	lsrs	r4, r0, #31
 8000c6c:	0048      	lsls	r0, r1, #1
 8000c6e:	b580      	push	{r7, lr}
 8000c70:	4694      	mov	ip, r2
 8000c72:	0a5f      	lsrs	r7, r3, #9
 8000c74:	0e2d      	lsrs	r5, r5, #24
 8000c76:	099b      	lsrs	r3, r3, #6
 8000c78:	0e00      	lsrs	r0, r0, #24
 8000c7a:	0fc9      	lsrs	r1, r1, #31
 8000c7c:	09b6      	lsrs	r6, r6, #6
 8000c7e:	28ff      	cmp	r0, #255	@ 0xff
 8000c80:	d024      	beq.n	8000ccc <__aeabi_fsub+0x70>
 8000c82:	2201      	movs	r2, #1
 8000c84:	4051      	eors	r1, r2
 8000c86:	1a2a      	subs	r2, r5, r0
 8000c88:	428c      	cmp	r4, r1
 8000c8a:	d00f      	beq.n	8000cac <__aeabi_fsub+0x50>
 8000c8c:	2a00      	cmp	r2, #0
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_fsub+0x36>
 8000c90:	e16a      	b.n	8000f68 <__aeabi_fsub+0x30c>
 8000c92:	2800      	cmp	r0, #0
 8000c94:	d135      	bne.n	8000d02 <__aeabi_fsub+0xa6>
 8000c96:	2e00      	cmp	r6, #0
 8000c98:	d100      	bne.n	8000c9c <__aeabi_fsub+0x40>
 8000c9a:	e0a2      	b.n	8000de2 <__aeabi_fsub+0x186>
 8000c9c:	1e51      	subs	r1, r2, #1
 8000c9e:	2a01      	cmp	r2, #1
 8000ca0:	d100      	bne.n	8000ca4 <__aeabi_fsub+0x48>
 8000ca2:	e124      	b.n	8000eee <__aeabi_fsub+0x292>
 8000ca4:	2aff      	cmp	r2, #255	@ 0xff
 8000ca6:	d021      	beq.n	8000cec <__aeabi_fsub+0x90>
 8000ca8:	000a      	movs	r2, r1
 8000caa:	e02f      	b.n	8000d0c <__aeabi_fsub+0xb0>
 8000cac:	2a00      	cmp	r2, #0
 8000cae:	dc00      	bgt.n	8000cb2 <__aeabi_fsub+0x56>
 8000cb0:	e167      	b.n	8000f82 <__aeabi_fsub+0x326>
 8000cb2:	2800      	cmp	r0, #0
 8000cb4:	d05e      	beq.n	8000d74 <__aeabi_fsub+0x118>
 8000cb6:	2dff      	cmp	r5, #255	@ 0xff
 8000cb8:	d018      	beq.n	8000cec <__aeabi_fsub+0x90>
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	04c9      	lsls	r1, r1, #19
 8000cbe:	430e      	orrs	r6, r1
 8000cc0:	2a1b      	cmp	r2, #27
 8000cc2:	dc00      	bgt.n	8000cc6 <__aeabi_fsub+0x6a>
 8000cc4:	e076      	b.n	8000db4 <__aeabi_fsub+0x158>
 8000cc6:	002a      	movs	r2, r5
 8000cc8:	3301      	adds	r3, #1
 8000cca:	e032      	b.n	8000d32 <__aeabi_fsub+0xd6>
 8000ccc:	002a      	movs	r2, r5
 8000cce:	3aff      	subs	r2, #255	@ 0xff
 8000cd0:	4691      	mov	r9, r2
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d042      	beq.n	8000d5c <__aeabi_fsub+0x100>
 8000cd6:	428c      	cmp	r4, r1
 8000cd8:	d055      	beq.n	8000d86 <__aeabi_fsub+0x12a>
 8000cda:	464a      	mov	r2, r9
 8000cdc:	2a00      	cmp	r2, #0
 8000cde:	d100      	bne.n	8000ce2 <__aeabi_fsub+0x86>
 8000ce0:	e09c      	b.n	8000e1c <__aeabi_fsub+0x1c0>
 8000ce2:	2d00      	cmp	r5, #0
 8000ce4:	d100      	bne.n	8000ce8 <__aeabi_fsub+0x8c>
 8000ce6:	e077      	b.n	8000dd8 <__aeabi_fsub+0x17c>
 8000ce8:	000c      	movs	r4, r1
 8000cea:	0033      	movs	r3, r6
 8000cec:	08db      	lsrs	r3, r3, #3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d100      	bne.n	8000cf4 <__aeabi_fsub+0x98>
 8000cf2:	e06e      	b.n	8000dd2 <__aeabi_fsub+0x176>
 8000cf4:	2280      	movs	r2, #128	@ 0x80
 8000cf6:	03d2      	lsls	r2, r2, #15
 8000cf8:	4313      	orrs	r3, r2
 8000cfa:	025b      	lsls	r3, r3, #9
 8000cfc:	20ff      	movs	r0, #255	@ 0xff
 8000cfe:	0a5b      	lsrs	r3, r3, #9
 8000d00:	e024      	b.n	8000d4c <__aeabi_fsub+0xf0>
 8000d02:	2dff      	cmp	r5, #255	@ 0xff
 8000d04:	d0f2      	beq.n	8000cec <__aeabi_fsub+0x90>
 8000d06:	2180      	movs	r1, #128	@ 0x80
 8000d08:	04c9      	lsls	r1, r1, #19
 8000d0a:	430e      	orrs	r6, r1
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	2a1b      	cmp	r2, #27
 8000d10:	dc08      	bgt.n	8000d24 <__aeabi_fsub+0xc8>
 8000d12:	0031      	movs	r1, r6
 8000d14:	2020      	movs	r0, #32
 8000d16:	40d1      	lsrs	r1, r2
 8000d18:	1a82      	subs	r2, r0, r2
 8000d1a:	4096      	lsls	r6, r2
 8000d1c:	0032      	movs	r2, r6
 8000d1e:	1e50      	subs	r0, r2, #1
 8000d20:	4182      	sbcs	r2, r0
 8000d22:	4311      	orrs	r1, r2
 8000d24:	1a5b      	subs	r3, r3, r1
 8000d26:	015a      	lsls	r2, r3, #5
 8000d28:	d460      	bmi.n	8000dec <__aeabi_fsub+0x190>
 8000d2a:	2107      	movs	r1, #7
 8000d2c:	002a      	movs	r2, r5
 8000d2e:	4019      	ands	r1, r3
 8000d30:	d057      	beq.n	8000de2 <__aeabi_fsub+0x186>
 8000d32:	210f      	movs	r1, #15
 8000d34:	4019      	ands	r1, r3
 8000d36:	2904      	cmp	r1, #4
 8000d38:	d000      	beq.n	8000d3c <__aeabi_fsub+0xe0>
 8000d3a:	3304      	adds	r3, #4
 8000d3c:	0159      	lsls	r1, r3, #5
 8000d3e:	d550      	bpl.n	8000de2 <__aeabi_fsub+0x186>
 8000d40:	1c50      	adds	r0, r2, #1
 8000d42:	2afe      	cmp	r2, #254	@ 0xfe
 8000d44:	d045      	beq.n	8000dd2 <__aeabi_fsub+0x176>
 8000d46:	019b      	lsls	r3, r3, #6
 8000d48:	b2c0      	uxtb	r0, r0
 8000d4a:	0a5b      	lsrs	r3, r3, #9
 8000d4c:	05c0      	lsls	r0, r0, #23
 8000d4e:	4318      	orrs	r0, r3
 8000d50:	07e4      	lsls	r4, r4, #31
 8000d52:	4320      	orrs	r0, r4
 8000d54:	bcc0      	pop	{r6, r7}
 8000d56:	46b9      	mov	r9, r7
 8000d58:	46b0      	mov	r8, r6
 8000d5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4051      	eors	r1, r2
 8000d60:	428c      	cmp	r4, r1
 8000d62:	d1ba      	bne.n	8000cda <__aeabi_fsub+0x7e>
 8000d64:	464a      	mov	r2, r9
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	d010      	beq.n	8000d8c <__aeabi_fsub+0x130>
 8000d6a:	2d00      	cmp	r5, #0
 8000d6c:	d100      	bne.n	8000d70 <__aeabi_fsub+0x114>
 8000d6e:	e098      	b.n	8000ea2 <__aeabi_fsub+0x246>
 8000d70:	2300      	movs	r3, #0
 8000d72:	e7bb      	b.n	8000cec <__aeabi_fsub+0x90>
 8000d74:	2e00      	cmp	r6, #0
 8000d76:	d034      	beq.n	8000de2 <__aeabi_fsub+0x186>
 8000d78:	1e51      	subs	r1, r2, #1
 8000d7a:	2a01      	cmp	r2, #1
 8000d7c:	d06e      	beq.n	8000e5c <__aeabi_fsub+0x200>
 8000d7e:	2aff      	cmp	r2, #255	@ 0xff
 8000d80:	d0b4      	beq.n	8000cec <__aeabi_fsub+0x90>
 8000d82:	000a      	movs	r2, r1
 8000d84:	e79c      	b.n	8000cc0 <__aeabi_fsub+0x64>
 8000d86:	2a00      	cmp	r2, #0
 8000d88:	d000      	beq.n	8000d8c <__aeabi_fsub+0x130>
 8000d8a:	e088      	b.n	8000e9e <__aeabi_fsub+0x242>
 8000d8c:	20fe      	movs	r0, #254	@ 0xfe
 8000d8e:	1c6a      	adds	r2, r5, #1
 8000d90:	4210      	tst	r0, r2
 8000d92:	d000      	beq.n	8000d96 <__aeabi_fsub+0x13a>
 8000d94:	e092      	b.n	8000ebc <__aeabi_fsub+0x260>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d000      	beq.n	8000d9c <__aeabi_fsub+0x140>
 8000d9a:	e0a4      	b.n	8000ee6 <__aeabi_fsub+0x28a>
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d100      	bne.n	8000da2 <__aeabi_fsub+0x146>
 8000da0:	e0cb      	b.n	8000f3a <__aeabi_fsub+0x2de>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	d000      	beq.n	8000da8 <__aeabi_fsub+0x14c>
 8000da6:	e0ca      	b.n	8000f3e <__aeabi_fsub+0x2e2>
 8000da8:	2200      	movs	r2, #0
 8000daa:	08db      	lsrs	r3, r3, #3
 8000dac:	025b      	lsls	r3, r3, #9
 8000dae:	0a5b      	lsrs	r3, r3, #9
 8000db0:	b2d0      	uxtb	r0, r2
 8000db2:	e7cb      	b.n	8000d4c <__aeabi_fsub+0xf0>
 8000db4:	0031      	movs	r1, r6
 8000db6:	2020      	movs	r0, #32
 8000db8:	40d1      	lsrs	r1, r2
 8000dba:	1a82      	subs	r2, r0, r2
 8000dbc:	4096      	lsls	r6, r2
 8000dbe:	0032      	movs	r2, r6
 8000dc0:	1e50      	subs	r0, r2, #1
 8000dc2:	4182      	sbcs	r2, r0
 8000dc4:	430a      	orrs	r2, r1
 8000dc6:	189b      	adds	r3, r3, r2
 8000dc8:	015a      	lsls	r2, r3, #5
 8000dca:	d5ae      	bpl.n	8000d2a <__aeabi_fsub+0xce>
 8000dcc:	1c6a      	adds	r2, r5, #1
 8000dce:	2dfe      	cmp	r5, #254	@ 0xfe
 8000dd0:	d14a      	bne.n	8000e68 <__aeabi_fsub+0x20c>
 8000dd2:	20ff      	movs	r0, #255	@ 0xff
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	e7b9      	b.n	8000d4c <__aeabi_fsub+0xf0>
 8000dd8:	22ff      	movs	r2, #255	@ 0xff
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d14b      	bne.n	8000e76 <__aeabi_fsub+0x21a>
 8000dde:	000c      	movs	r4, r1
 8000de0:	0033      	movs	r3, r6
 8000de2:	08db      	lsrs	r3, r3, #3
 8000de4:	2aff      	cmp	r2, #255	@ 0xff
 8000de6:	d100      	bne.n	8000dea <__aeabi_fsub+0x18e>
 8000de8:	e781      	b.n	8000cee <__aeabi_fsub+0x92>
 8000dea:	e7df      	b.n	8000dac <__aeabi_fsub+0x150>
 8000dec:	019f      	lsls	r7, r3, #6
 8000dee:	09bf      	lsrs	r7, r7, #6
 8000df0:	0038      	movs	r0, r7
 8000df2:	f001 fcb1 	bl	8002758 <__clzsi2>
 8000df6:	3805      	subs	r0, #5
 8000df8:	4087      	lsls	r7, r0
 8000dfa:	4285      	cmp	r5, r0
 8000dfc:	dc21      	bgt.n	8000e42 <__aeabi_fsub+0x1e6>
 8000dfe:	003b      	movs	r3, r7
 8000e00:	2120      	movs	r1, #32
 8000e02:	1b42      	subs	r2, r0, r5
 8000e04:	3201      	adds	r2, #1
 8000e06:	40d3      	lsrs	r3, r2
 8000e08:	1a8a      	subs	r2, r1, r2
 8000e0a:	4097      	lsls	r7, r2
 8000e0c:	1e7a      	subs	r2, r7, #1
 8000e0e:	4197      	sbcs	r7, r2
 8000e10:	2200      	movs	r2, #0
 8000e12:	433b      	orrs	r3, r7
 8000e14:	0759      	lsls	r1, r3, #29
 8000e16:	d000      	beq.n	8000e1a <__aeabi_fsub+0x1be>
 8000e18:	e78b      	b.n	8000d32 <__aeabi_fsub+0xd6>
 8000e1a:	e78f      	b.n	8000d3c <__aeabi_fsub+0xe0>
 8000e1c:	20fe      	movs	r0, #254	@ 0xfe
 8000e1e:	1c6a      	adds	r2, r5, #1
 8000e20:	4210      	tst	r0, r2
 8000e22:	d112      	bne.n	8000e4a <__aeabi_fsub+0x1ee>
 8000e24:	2d00      	cmp	r5, #0
 8000e26:	d152      	bne.n	8000ece <__aeabi_fsub+0x272>
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d07c      	beq.n	8000f26 <__aeabi_fsub+0x2ca>
 8000e2c:	2e00      	cmp	r6, #0
 8000e2e:	d0bb      	beq.n	8000da8 <__aeabi_fsub+0x14c>
 8000e30:	1b9a      	subs	r2, r3, r6
 8000e32:	0150      	lsls	r0, r2, #5
 8000e34:	d400      	bmi.n	8000e38 <__aeabi_fsub+0x1dc>
 8000e36:	e08b      	b.n	8000f50 <__aeabi_fsub+0x2f4>
 8000e38:	2401      	movs	r4, #1
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	1af3      	subs	r3, r6, r3
 8000e3e:	400c      	ands	r4, r1
 8000e40:	e7e8      	b.n	8000e14 <__aeabi_fsub+0x1b8>
 8000e42:	4b56      	ldr	r3, [pc, #344]	@ (8000f9c <__aeabi_fsub+0x340>)
 8000e44:	1a2a      	subs	r2, r5, r0
 8000e46:	403b      	ands	r3, r7
 8000e48:	e7e4      	b.n	8000e14 <__aeabi_fsub+0x1b8>
 8000e4a:	1b9f      	subs	r7, r3, r6
 8000e4c:	017a      	lsls	r2, r7, #5
 8000e4e:	d446      	bmi.n	8000ede <__aeabi_fsub+0x282>
 8000e50:	2f00      	cmp	r7, #0
 8000e52:	d1cd      	bne.n	8000df0 <__aeabi_fsub+0x194>
 8000e54:	2400      	movs	r4, #0
 8000e56:	2000      	movs	r0, #0
 8000e58:	2300      	movs	r3, #0
 8000e5a:	e777      	b.n	8000d4c <__aeabi_fsub+0xf0>
 8000e5c:	199b      	adds	r3, r3, r6
 8000e5e:	2501      	movs	r5, #1
 8000e60:	3201      	adds	r2, #1
 8000e62:	0159      	lsls	r1, r3, #5
 8000e64:	d400      	bmi.n	8000e68 <__aeabi_fsub+0x20c>
 8000e66:	e760      	b.n	8000d2a <__aeabi_fsub+0xce>
 8000e68:	2101      	movs	r1, #1
 8000e6a:	484d      	ldr	r0, [pc, #308]	@ (8000fa0 <__aeabi_fsub+0x344>)
 8000e6c:	4019      	ands	r1, r3
 8000e6e:	085b      	lsrs	r3, r3, #1
 8000e70:	4003      	ands	r3, r0
 8000e72:	430b      	orrs	r3, r1
 8000e74:	e7ce      	b.n	8000e14 <__aeabi_fsub+0x1b8>
 8000e76:	1e57      	subs	r7, r2, #1
 8000e78:	2a01      	cmp	r2, #1
 8000e7a:	d05a      	beq.n	8000f32 <__aeabi_fsub+0x2d6>
 8000e7c:	000c      	movs	r4, r1
 8000e7e:	2aff      	cmp	r2, #255	@ 0xff
 8000e80:	d033      	beq.n	8000eea <__aeabi_fsub+0x28e>
 8000e82:	2201      	movs	r2, #1
 8000e84:	2f1b      	cmp	r7, #27
 8000e86:	dc07      	bgt.n	8000e98 <__aeabi_fsub+0x23c>
 8000e88:	2120      	movs	r1, #32
 8000e8a:	1bc9      	subs	r1, r1, r7
 8000e8c:	001a      	movs	r2, r3
 8000e8e:	408b      	lsls	r3, r1
 8000e90:	40fa      	lsrs	r2, r7
 8000e92:	1e59      	subs	r1, r3, #1
 8000e94:	418b      	sbcs	r3, r1
 8000e96:	431a      	orrs	r2, r3
 8000e98:	0005      	movs	r5, r0
 8000e9a:	1ab3      	subs	r3, r6, r2
 8000e9c:	e743      	b.n	8000d26 <__aeabi_fsub+0xca>
 8000e9e:	2d00      	cmp	r5, #0
 8000ea0:	d123      	bne.n	8000eea <__aeabi_fsub+0x28e>
 8000ea2:	22ff      	movs	r2, #255	@ 0xff
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d09b      	beq.n	8000de0 <__aeabi_fsub+0x184>
 8000ea8:	1e51      	subs	r1, r2, #1
 8000eaa:	2a01      	cmp	r2, #1
 8000eac:	d0d6      	beq.n	8000e5c <__aeabi_fsub+0x200>
 8000eae:	2aff      	cmp	r2, #255	@ 0xff
 8000eb0:	d01b      	beq.n	8000eea <__aeabi_fsub+0x28e>
 8000eb2:	291b      	cmp	r1, #27
 8000eb4:	dd2c      	ble.n	8000f10 <__aeabi_fsub+0x2b4>
 8000eb6:	0002      	movs	r2, r0
 8000eb8:	1c73      	adds	r3, r6, #1
 8000eba:	e73a      	b.n	8000d32 <__aeabi_fsub+0xd6>
 8000ebc:	2aff      	cmp	r2, #255	@ 0xff
 8000ebe:	d088      	beq.n	8000dd2 <__aeabi_fsub+0x176>
 8000ec0:	199b      	adds	r3, r3, r6
 8000ec2:	085b      	lsrs	r3, r3, #1
 8000ec4:	0759      	lsls	r1, r3, #29
 8000ec6:	d000      	beq.n	8000eca <__aeabi_fsub+0x26e>
 8000ec8:	e733      	b.n	8000d32 <__aeabi_fsub+0xd6>
 8000eca:	08db      	lsrs	r3, r3, #3
 8000ecc:	e76e      	b.n	8000dac <__aeabi_fsub+0x150>
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d110      	bne.n	8000ef4 <__aeabi_fsub+0x298>
 8000ed2:	2e00      	cmp	r6, #0
 8000ed4:	d043      	beq.n	8000f5e <__aeabi_fsub+0x302>
 8000ed6:	2401      	movs	r4, #1
 8000ed8:	0033      	movs	r3, r6
 8000eda:	400c      	ands	r4, r1
 8000edc:	e706      	b.n	8000cec <__aeabi_fsub+0x90>
 8000ede:	2401      	movs	r4, #1
 8000ee0:	1af7      	subs	r7, r6, r3
 8000ee2:	400c      	ands	r4, r1
 8000ee4:	e784      	b.n	8000df0 <__aeabi_fsub+0x194>
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d104      	bne.n	8000ef4 <__aeabi_fsub+0x298>
 8000eea:	0033      	movs	r3, r6
 8000eec:	e6fe      	b.n	8000cec <__aeabi_fsub+0x90>
 8000eee:	2501      	movs	r5, #1
 8000ef0:	1b9b      	subs	r3, r3, r6
 8000ef2:	e718      	b.n	8000d26 <__aeabi_fsub+0xca>
 8000ef4:	2e00      	cmp	r6, #0
 8000ef6:	d100      	bne.n	8000efa <__aeabi_fsub+0x29e>
 8000ef8:	e6f8      	b.n	8000cec <__aeabi_fsub+0x90>
 8000efa:	2280      	movs	r2, #128	@ 0x80
 8000efc:	03d2      	lsls	r2, r2, #15
 8000efe:	4297      	cmp	r7, r2
 8000f00:	d304      	bcc.n	8000f0c <__aeabi_fsub+0x2b0>
 8000f02:	4594      	cmp	ip, r2
 8000f04:	d202      	bcs.n	8000f0c <__aeabi_fsub+0x2b0>
 8000f06:	2401      	movs	r4, #1
 8000f08:	0033      	movs	r3, r6
 8000f0a:	400c      	ands	r4, r1
 8000f0c:	08db      	lsrs	r3, r3, #3
 8000f0e:	e6f1      	b.n	8000cf4 <__aeabi_fsub+0x98>
 8000f10:	001a      	movs	r2, r3
 8000f12:	2520      	movs	r5, #32
 8000f14:	40ca      	lsrs	r2, r1
 8000f16:	1a69      	subs	r1, r5, r1
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	1e59      	subs	r1, r3, #1
 8000f1c:	418b      	sbcs	r3, r1
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	0005      	movs	r5, r0
 8000f22:	199b      	adds	r3, r3, r6
 8000f24:	e750      	b.n	8000dc8 <__aeabi_fsub+0x16c>
 8000f26:	2e00      	cmp	r6, #0
 8000f28:	d094      	beq.n	8000e54 <__aeabi_fsub+0x1f8>
 8000f2a:	2401      	movs	r4, #1
 8000f2c:	0033      	movs	r3, r6
 8000f2e:	400c      	ands	r4, r1
 8000f30:	e73a      	b.n	8000da8 <__aeabi_fsub+0x14c>
 8000f32:	000c      	movs	r4, r1
 8000f34:	2501      	movs	r5, #1
 8000f36:	1af3      	subs	r3, r6, r3
 8000f38:	e6f5      	b.n	8000d26 <__aeabi_fsub+0xca>
 8000f3a:	0033      	movs	r3, r6
 8000f3c:	e734      	b.n	8000da8 <__aeabi_fsub+0x14c>
 8000f3e:	199b      	adds	r3, r3, r6
 8000f40:	2200      	movs	r2, #0
 8000f42:	0159      	lsls	r1, r3, #5
 8000f44:	d5c1      	bpl.n	8000eca <__aeabi_fsub+0x26e>
 8000f46:	4a15      	ldr	r2, [pc, #84]	@ (8000f9c <__aeabi_fsub+0x340>)
 8000f48:	4013      	ands	r3, r2
 8000f4a:	08db      	lsrs	r3, r3, #3
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	e72d      	b.n	8000dac <__aeabi_fsub+0x150>
 8000f50:	2a00      	cmp	r2, #0
 8000f52:	d100      	bne.n	8000f56 <__aeabi_fsub+0x2fa>
 8000f54:	e77e      	b.n	8000e54 <__aeabi_fsub+0x1f8>
 8000f56:	0013      	movs	r3, r2
 8000f58:	2200      	movs	r2, #0
 8000f5a:	08db      	lsrs	r3, r3, #3
 8000f5c:	e726      	b.n	8000dac <__aeabi_fsub+0x150>
 8000f5e:	2380      	movs	r3, #128	@ 0x80
 8000f60:	2400      	movs	r4, #0
 8000f62:	20ff      	movs	r0, #255	@ 0xff
 8000f64:	03db      	lsls	r3, r3, #15
 8000f66:	e6f1      	b.n	8000d4c <__aeabi_fsub+0xf0>
 8000f68:	2a00      	cmp	r2, #0
 8000f6a:	d100      	bne.n	8000f6e <__aeabi_fsub+0x312>
 8000f6c:	e756      	b.n	8000e1c <__aeabi_fsub+0x1c0>
 8000f6e:	1b47      	subs	r7, r0, r5
 8000f70:	003a      	movs	r2, r7
 8000f72:	2d00      	cmp	r5, #0
 8000f74:	d100      	bne.n	8000f78 <__aeabi_fsub+0x31c>
 8000f76:	e730      	b.n	8000dda <__aeabi_fsub+0x17e>
 8000f78:	2280      	movs	r2, #128	@ 0x80
 8000f7a:	04d2      	lsls	r2, r2, #19
 8000f7c:	000c      	movs	r4, r1
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	e77f      	b.n	8000e82 <__aeabi_fsub+0x226>
 8000f82:	2a00      	cmp	r2, #0
 8000f84:	d100      	bne.n	8000f88 <__aeabi_fsub+0x32c>
 8000f86:	e701      	b.n	8000d8c <__aeabi_fsub+0x130>
 8000f88:	1b41      	subs	r1, r0, r5
 8000f8a:	2d00      	cmp	r5, #0
 8000f8c:	d101      	bne.n	8000f92 <__aeabi_fsub+0x336>
 8000f8e:	000a      	movs	r2, r1
 8000f90:	e788      	b.n	8000ea4 <__aeabi_fsub+0x248>
 8000f92:	2280      	movs	r2, #128	@ 0x80
 8000f94:	04d2      	lsls	r2, r2, #19
 8000f96:	4313      	orrs	r3, r2
 8000f98:	e78b      	b.n	8000eb2 <__aeabi_fsub+0x256>
 8000f9a:	46c0      	nop			@ (mov r8, r8)
 8000f9c:	fbffffff 	.word	0xfbffffff
 8000fa0:	7dffffff 	.word	0x7dffffff

08000fa4 <__aeabi_fcmpun>:
 8000fa4:	0243      	lsls	r3, r0, #9
 8000fa6:	024a      	lsls	r2, r1, #9
 8000fa8:	0040      	lsls	r0, r0, #1
 8000faa:	0049      	lsls	r1, r1, #1
 8000fac:	0a5b      	lsrs	r3, r3, #9
 8000fae:	0a52      	lsrs	r2, r2, #9
 8000fb0:	0e09      	lsrs	r1, r1, #24
 8000fb2:	0e00      	lsrs	r0, r0, #24
 8000fb4:	28ff      	cmp	r0, #255	@ 0xff
 8000fb6:	d006      	beq.n	8000fc6 <__aeabi_fcmpun+0x22>
 8000fb8:	2000      	movs	r0, #0
 8000fba:	29ff      	cmp	r1, #255	@ 0xff
 8000fbc:	d102      	bne.n	8000fc4 <__aeabi_fcmpun+0x20>
 8000fbe:	1e53      	subs	r3, r2, #1
 8000fc0:	419a      	sbcs	r2, r3
 8000fc2:	0010      	movs	r0, r2
 8000fc4:	4770      	bx	lr
 8000fc6:	38fe      	subs	r0, #254	@ 0xfe
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1fb      	bne.n	8000fc4 <__aeabi_fcmpun+0x20>
 8000fcc:	e7f4      	b.n	8000fb8 <__aeabi_fcmpun+0x14>
 8000fce:	46c0      	nop			@ (mov r8, r8)

08000fd0 <__aeabi_f2iz>:
 8000fd0:	0241      	lsls	r1, r0, #9
 8000fd2:	0042      	lsls	r2, r0, #1
 8000fd4:	0fc3      	lsrs	r3, r0, #31
 8000fd6:	0a49      	lsrs	r1, r1, #9
 8000fd8:	2000      	movs	r0, #0
 8000fda:	0e12      	lsrs	r2, r2, #24
 8000fdc:	2a7e      	cmp	r2, #126	@ 0x7e
 8000fde:	dd03      	ble.n	8000fe8 <__aeabi_f2iz+0x18>
 8000fe0:	2a9d      	cmp	r2, #157	@ 0x9d
 8000fe2:	dd02      	ble.n	8000fea <__aeabi_f2iz+0x1a>
 8000fe4:	4a09      	ldr	r2, [pc, #36]	@ (800100c <__aeabi_f2iz+0x3c>)
 8000fe6:	1898      	adds	r0, r3, r2
 8000fe8:	4770      	bx	lr
 8000fea:	2080      	movs	r0, #128	@ 0x80
 8000fec:	0400      	lsls	r0, r0, #16
 8000fee:	4301      	orrs	r1, r0
 8000ff0:	2a95      	cmp	r2, #149	@ 0x95
 8000ff2:	dc07      	bgt.n	8001004 <__aeabi_f2iz+0x34>
 8000ff4:	2096      	movs	r0, #150	@ 0x96
 8000ff6:	1a82      	subs	r2, r0, r2
 8000ff8:	40d1      	lsrs	r1, r2
 8000ffa:	4248      	negs	r0, r1
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d1f3      	bne.n	8000fe8 <__aeabi_f2iz+0x18>
 8001000:	0008      	movs	r0, r1
 8001002:	e7f1      	b.n	8000fe8 <__aeabi_f2iz+0x18>
 8001004:	3a96      	subs	r2, #150	@ 0x96
 8001006:	4091      	lsls	r1, r2
 8001008:	e7f7      	b.n	8000ffa <__aeabi_f2iz+0x2a>
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	7fffffff 	.word	0x7fffffff

08001010 <__aeabi_i2f>:
 8001010:	b570      	push	{r4, r5, r6, lr}
 8001012:	2800      	cmp	r0, #0
 8001014:	d013      	beq.n	800103e <__aeabi_i2f+0x2e>
 8001016:	17c3      	asrs	r3, r0, #31
 8001018:	18c5      	adds	r5, r0, r3
 800101a:	405d      	eors	r5, r3
 800101c:	0fc4      	lsrs	r4, r0, #31
 800101e:	0028      	movs	r0, r5
 8001020:	f001 fb9a 	bl	8002758 <__clzsi2>
 8001024:	239e      	movs	r3, #158	@ 0x9e
 8001026:	0001      	movs	r1, r0
 8001028:	1a1b      	subs	r3, r3, r0
 800102a:	2b96      	cmp	r3, #150	@ 0x96
 800102c:	dc0f      	bgt.n	800104e <__aeabi_i2f+0x3e>
 800102e:	2808      	cmp	r0, #8
 8001030:	d034      	beq.n	800109c <__aeabi_i2f+0x8c>
 8001032:	3908      	subs	r1, #8
 8001034:	408d      	lsls	r5, r1
 8001036:	026d      	lsls	r5, r5, #9
 8001038:	0a6d      	lsrs	r5, r5, #9
 800103a:	b2d8      	uxtb	r0, r3
 800103c:	e002      	b.n	8001044 <__aeabi_i2f+0x34>
 800103e:	2400      	movs	r4, #0
 8001040:	2000      	movs	r0, #0
 8001042:	2500      	movs	r5, #0
 8001044:	05c0      	lsls	r0, r0, #23
 8001046:	4328      	orrs	r0, r5
 8001048:	07e4      	lsls	r4, r4, #31
 800104a:	4320      	orrs	r0, r4
 800104c:	bd70      	pop	{r4, r5, r6, pc}
 800104e:	2b99      	cmp	r3, #153	@ 0x99
 8001050:	dc16      	bgt.n	8001080 <__aeabi_i2f+0x70>
 8001052:	1f42      	subs	r2, r0, #5
 8001054:	2805      	cmp	r0, #5
 8001056:	d000      	beq.n	800105a <__aeabi_i2f+0x4a>
 8001058:	4095      	lsls	r5, r2
 800105a:	002a      	movs	r2, r5
 800105c:	4811      	ldr	r0, [pc, #68]	@ (80010a4 <__aeabi_i2f+0x94>)
 800105e:	4002      	ands	r2, r0
 8001060:	076e      	lsls	r6, r5, #29
 8001062:	d009      	beq.n	8001078 <__aeabi_i2f+0x68>
 8001064:	260f      	movs	r6, #15
 8001066:	4035      	ands	r5, r6
 8001068:	2d04      	cmp	r5, #4
 800106a:	d005      	beq.n	8001078 <__aeabi_i2f+0x68>
 800106c:	3204      	adds	r2, #4
 800106e:	0155      	lsls	r5, r2, #5
 8001070:	d502      	bpl.n	8001078 <__aeabi_i2f+0x68>
 8001072:	239f      	movs	r3, #159	@ 0x9f
 8001074:	4002      	ands	r2, r0
 8001076:	1a5b      	subs	r3, r3, r1
 8001078:	0192      	lsls	r2, r2, #6
 800107a:	0a55      	lsrs	r5, r2, #9
 800107c:	b2d8      	uxtb	r0, r3
 800107e:	e7e1      	b.n	8001044 <__aeabi_i2f+0x34>
 8001080:	2205      	movs	r2, #5
 8001082:	1a12      	subs	r2, r2, r0
 8001084:	0028      	movs	r0, r5
 8001086:	40d0      	lsrs	r0, r2
 8001088:	0002      	movs	r2, r0
 800108a:	0008      	movs	r0, r1
 800108c:	301b      	adds	r0, #27
 800108e:	4085      	lsls	r5, r0
 8001090:	0028      	movs	r0, r5
 8001092:	1e45      	subs	r5, r0, #1
 8001094:	41a8      	sbcs	r0, r5
 8001096:	4302      	orrs	r2, r0
 8001098:	0015      	movs	r5, r2
 800109a:	e7de      	b.n	800105a <__aeabi_i2f+0x4a>
 800109c:	026d      	lsls	r5, r5, #9
 800109e:	2096      	movs	r0, #150	@ 0x96
 80010a0:	0a6d      	lsrs	r5, r5, #9
 80010a2:	e7cf      	b.n	8001044 <__aeabi_i2f+0x34>
 80010a4:	fbffffff 	.word	0xfbffffff

080010a8 <__aeabi_ui2f>:
 80010a8:	b570      	push	{r4, r5, r6, lr}
 80010aa:	1e04      	subs	r4, r0, #0
 80010ac:	d00e      	beq.n	80010cc <__aeabi_ui2f+0x24>
 80010ae:	f001 fb53 	bl	8002758 <__clzsi2>
 80010b2:	239e      	movs	r3, #158	@ 0x9e
 80010b4:	0001      	movs	r1, r0
 80010b6:	1a1b      	subs	r3, r3, r0
 80010b8:	2b96      	cmp	r3, #150	@ 0x96
 80010ba:	dc0c      	bgt.n	80010d6 <__aeabi_ui2f+0x2e>
 80010bc:	2808      	cmp	r0, #8
 80010be:	d02f      	beq.n	8001120 <__aeabi_ui2f+0x78>
 80010c0:	3908      	subs	r1, #8
 80010c2:	408c      	lsls	r4, r1
 80010c4:	0264      	lsls	r4, r4, #9
 80010c6:	0a64      	lsrs	r4, r4, #9
 80010c8:	b2d8      	uxtb	r0, r3
 80010ca:	e001      	b.n	80010d0 <__aeabi_ui2f+0x28>
 80010cc:	2000      	movs	r0, #0
 80010ce:	2400      	movs	r4, #0
 80010d0:	05c0      	lsls	r0, r0, #23
 80010d2:	4320      	orrs	r0, r4
 80010d4:	bd70      	pop	{r4, r5, r6, pc}
 80010d6:	2b99      	cmp	r3, #153	@ 0x99
 80010d8:	dc16      	bgt.n	8001108 <__aeabi_ui2f+0x60>
 80010da:	1f42      	subs	r2, r0, #5
 80010dc:	2805      	cmp	r0, #5
 80010de:	d000      	beq.n	80010e2 <__aeabi_ui2f+0x3a>
 80010e0:	4094      	lsls	r4, r2
 80010e2:	0022      	movs	r2, r4
 80010e4:	4810      	ldr	r0, [pc, #64]	@ (8001128 <__aeabi_ui2f+0x80>)
 80010e6:	4002      	ands	r2, r0
 80010e8:	0765      	lsls	r5, r4, #29
 80010ea:	d009      	beq.n	8001100 <__aeabi_ui2f+0x58>
 80010ec:	250f      	movs	r5, #15
 80010ee:	402c      	ands	r4, r5
 80010f0:	2c04      	cmp	r4, #4
 80010f2:	d005      	beq.n	8001100 <__aeabi_ui2f+0x58>
 80010f4:	3204      	adds	r2, #4
 80010f6:	0154      	lsls	r4, r2, #5
 80010f8:	d502      	bpl.n	8001100 <__aeabi_ui2f+0x58>
 80010fa:	239f      	movs	r3, #159	@ 0x9f
 80010fc:	4002      	ands	r2, r0
 80010fe:	1a5b      	subs	r3, r3, r1
 8001100:	0192      	lsls	r2, r2, #6
 8001102:	0a54      	lsrs	r4, r2, #9
 8001104:	b2d8      	uxtb	r0, r3
 8001106:	e7e3      	b.n	80010d0 <__aeabi_ui2f+0x28>
 8001108:	0002      	movs	r2, r0
 800110a:	0020      	movs	r0, r4
 800110c:	321b      	adds	r2, #27
 800110e:	4090      	lsls	r0, r2
 8001110:	0002      	movs	r2, r0
 8001112:	1e50      	subs	r0, r2, #1
 8001114:	4182      	sbcs	r2, r0
 8001116:	2005      	movs	r0, #5
 8001118:	1a40      	subs	r0, r0, r1
 800111a:	40c4      	lsrs	r4, r0
 800111c:	4314      	orrs	r4, r2
 800111e:	e7e0      	b.n	80010e2 <__aeabi_ui2f+0x3a>
 8001120:	0264      	lsls	r4, r4, #9
 8001122:	2096      	movs	r0, #150	@ 0x96
 8001124:	0a64      	lsrs	r4, r4, #9
 8001126:	e7d3      	b.n	80010d0 <__aeabi_ui2f+0x28>
 8001128:	fbffffff 	.word	0xfbffffff

0800112c <__aeabi_ddiv>:
 800112c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800112e:	46de      	mov	lr, fp
 8001130:	4645      	mov	r5, r8
 8001132:	4657      	mov	r7, sl
 8001134:	464e      	mov	r6, r9
 8001136:	b5e0      	push	{r5, r6, r7, lr}
 8001138:	b087      	sub	sp, #28
 800113a:	9200      	str	r2, [sp, #0]
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	030b      	lsls	r3, r1, #12
 8001140:	0b1b      	lsrs	r3, r3, #12
 8001142:	469b      	mov	fp, r3
 8001144:	0fca      	lsrs	r2, r1, #31
 8001146:	004b      	lsls	r3, r1, #1
 8001148:	0004      	movs	r4, r0
 800114a:	4680      	mov	r8, r0
 800114c:	0d5b      	lsrs	r3, r3, #21
 800114e:	9202      	str	r2, [sp, #8]
 8001150:	d100      	bne.n	8001154 <__aeabi_ddiv+0x28>
 8001152:	e16a      	b.n	800142a <__aeabi_ddiv+0x2fe>
 8001154:	4ad4      	ldr	r2, [pc, #848]	@ (80014a8 <__aeabi_ddiv+0x37c>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d100      	bne.n	800115c <__aeabi_ddiv+0x30>
 800115a:	e18c      	b.n	8001476 <__aeabi_ddiv+0x34a>
 800115c:	4659      	mov	r1, fp
 800115e:	0f42      	lsrs	r2, r0, #29
 8001160:	00c9      	lsls	r1, r1, #3
 8001162:	430a      	orrs	r2, r1
 8001164:	2180      	movs	r1, #128	@ 0x80
 8001166:	0409      	lsls	r1, r1, #16
 8001168:	4311      	orrs	r1, r2
 800116a:	00c2      	lsls	r2, r0, #3
 800116c:	4690      	mov	r8, r2
 800116e:	4acf      	ldr	r2, [pc, #828]	@ (80014ac <__aeabi_ddiv+0x380>)
 8001170:	4689      	mov	r9, r1
 8001172:	4692      	mov	sl, r2
 8001174:	449a      	add	sl, r3
 8001176:	2300      	movs	r3, #0
 8001178:	2400      	movs	r4, #0
 800117a:	9303      	str	r3, [sp, #12]
 800117c:	9e00      	ldr	r6, [sp, #0]
 800117e:	9f01      	ldr	r7, [sp, #4]
 8001180:	033b      	lsls	r3, r7, #12
 8001182:	0b1b      	lsrs	r3, r3, #12
 8001184:	469b      	mov	fp, r3
 8001186:	007b      	lsls	r3, r7, #1
 8001188:	0030      	movs	r0, r6
 800118a:	0d5b      	lsrs	r3, r3, #21
 800118c:	0ffd      	lsrs	r5, r7, #31
 800118e:	2b00      	cmp	r3, #0
 8001190:	d100      	bne.n	8001194 <__aeabi_ddiv+0x68>
 8001192:	e128      	b.n	80013e6 <__aeabi_ddiv+0x2ba>
 8001194:	4ac4      	ldr	r2, [pc, #784]	@ (80014a8 <__aeabi_ddiv+0x37c>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d100      	bne.n	800119c <__aeabi_ddiv+0x70>
 800119a:	e177      	b.n	800148c <__aeabi_ddiv+0x360>
 800119c:	4659      	mov	r1, fp
 800119e:	0f72      	lsrs	r2, r6, #29
 80011a0:	00c9      	lsls	r1, r1, #3
 80011a2:	430a      	orrs	r2, r1
 80011a4:	2180      	movs	r1, #128	@ 0x80
 80011a6:	0409      	lsls	r1, r1, #16
 80011a8:	4311      	orrs	r1, r2
 80011aa:	468b      	mov	fp, r1
 80011ac:	49bf      	ldr	r1, [pc, #764]	@ (80014ac <__aeabi_ddiv+0x380>)
 80011ae:	00f2      	lsls	r2, r6, #3
 80011b0:	468c      	mov	ip, r1
 80011b2:	4651      	mov	r1, sl
 80011b4:	4463      	add	r3, ip
 80011b6:	1acb      	subs	r3, r1, r3
 80011b8:	469a      	mov	sl, r3
 80011ba:	2300      	movs	r3, #0
 80011bc:	9e02      	ldr	r6, [sp, #8]
 80011be:	406e      	eors	r6, r5
 80011c0:	2c0f      	cmp	r4, #15
 80011c2:	d827      	bhi.n	8001214 <__aeabi_ddiv+0xe8>
 80011c4:	49ba      	ldr	r1, [pc, #744]	@ (80014b0 <__aeabi_ddiv+0x384>)
 80011c6:	00a4      	lsls	r4, r4, #2
 80011c8:	5909      	ldr	r1, [r1, r4]
 80011ca:	468f      	mov	pc, r1
 80011cc:	46cb      	mov	fp, r9
 80011ce:	4642      	mov	r2, r8
 80011d0:	9e02      	ldr	r6, [sp, #8]
 80011d2:	9b03      	ldr	r3, [sp, #12]
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d016      	beq.n	8001206 <__aeabi_ddiv+0xda>
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d100      	bne.n	80011de <__aeabi_ddiv+0xb2>
 80011dc:	e2a6      	b.n	800172c <__aeabi_ddiv+0x600>
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d000      	beq.n	80011e4 <__aeabi_ddiv+0xb8>
 80011e2:	e0df      	b.n	80013a4 <__aeabi_ddiv+0x278>
 80011e4:	2200      	movs	r2, #0
 80011e6:	2300      	movs	r3, #0
 80011e8:	2400      	movs	r4, #0
 80011ea:	4690      	mov	r8, r2
 80011ec:	051b      	lsls	r3, r3, #20
 80011ee:	4323      	orrs	r3, r4
 80011f0:	07f6      	lsls	r6, r6, #31
 80011f2:	4333      	orrs	r3, r6
 80011f4:	4640      	mov	r0, r8
 80011f6:	0019      	movs	r1, r3
 80011f8:	b007      	add	sp, #28
 80011fa:	bcf0      	pop	{r4, r5, r6, r7}
 80011fc:	46bb      	mov	fp, r7
 80011fe:	46b2      	mov	sl, r6
 8001200:	46a9      	mov	r9, r5
 8001202:	46a0      	mov	r8, r4
 8001204:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001206:	2200      	movs	r2, #0
 8001208:	2400      	movs	r4, #0
 800120a:	4690      	mov	r8, r2
 800120c:	4ba6      	ldr	r3, [pc, #664]	@ (80014a8 <__aeabi_ddiv+0x37c>)
 800120e:	e7ed      	b.n	80011ec <__aeabi_ddiv+0xc0>
 8001210:	002e      	movs	r6, r5
 8001212:	e7df      	b.n	80011d4 <__aeabi_ddiv+0xa8>
 8001214:	45cb      	cmp	fp, r9
 8001216:	d200      	bcs.n	800121a <__aeabi_ddiv+0xee>
 8001218:	e1d4      	b.n	80015c4 <__aeabi_ddiv+0x498>
 800121a:	d100      	bne.n	800121e <__aeabi_ddiv+0xf2>
 800121c:	e1cf      	b.n	80015be <__aeabi_ddiv+0x492>
 800121e:	2301      	movs	r3, #1
 8001220:	425b      	negs	r3, r3
 8001222:	469c      	mov	ip, r3
 8001224:	4644      	mov	r4, r8
 8001226:	4648      	mov	r0, r9
 8001228:	2700      	movs	r7, #0
 800122a:	44e2      	add	sl, ip
 800122c:	465b      	mov	r3, fp
 800122e:	0e15      	lsrs	r5, r2, #24
 8001230:	021b      	lsls	r3, r3, #8
 8001232:	431d      	orrs	r5, r3
 8001234:	0c19      	lsrs	r1, r3, #16
 8001236:	042b      	lsls	r3, r5, #16
 8001238:	0212      	lsls	r2, r2, #8
 800123a:	9500      	str	r5, [sp, #0]
 800123c:	0c1d      	lsrs	r5, r3, #16
 800123e:	4691      	mov	r9, r2
 8001240:	9102      	str	r1, [sp, #8]
 8001242:	9503      	str	r5, [sp, #12]
 8001244:	f7fe ffe6 	bl	8000214 <__aeabi_uidivmod>
 8001248:	0002      	movs	r2, r0
 800124a:	436a      	muls	r2, r5
 800124c:	040b      	lsls	r3, r1, #16
 800124e:	0c21      	lsrs	r1, r4, #16
 8001250:	4680      	mov	r8, r0
 8001252:	4319      	orrs	r1, r3
 8001254:	428a      	cmp	r2, r1
 8001256:	d909      	bls.n	800126c <__aeabi_ddiv+0x140>
 8001258:	9d00      	ldr	r5, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	46ac      	mov	ip, r5
 800125e:	425b      	negs	r3, r3
 8001260:	4461      	add	r1, ip
 8001262:	469c      	mov	ip, r3
 8001264:	44e0      	add	r8, ip
 8001266:	428d      	cmp	r5, r1
 8001268:	d800      	bhi.n	800126c <__aeabi_ddiv+0x140>
 800126a:	e1fb      	b.n	8001664 <__aeabi_ddiv+0x538>
 800126c:	1a88      	subs	r0, r1, r2
 800126e:	9902      	ldr	r1, [sp, #8]
 8001270:	f7fe ffd0 	bl	8000214 <__aeabi_uidivmod>
 8001274:	9a03      	ldr	r2, [sp, #12]
 8001276:	0424      	lsls	r4, r4, #16
 8001278:	4342      	muls	r2, r0
 800127a:	0409      	lsls	r1, r1, #16
 800127c:	0c24      	lsrs	r4, r4, #16
 800127e:	0003      	movs	r3, r0
 8001280:	430c      	orrs	r4, r1
 8001282:	42a2      	cmp	r2, r4
 8001284:	d906      	bls.n	8001294 <__aeabi_ddiv+0x168>
 8001286:	9900      	ldr	r1, [sp, #0]
 8001288:	3b01      	subs	r3, #1
 800128a:	468c      	mov	ip, r1
 800128c:	4464      	add	r4, ip
 800128e:	42a1      	cmp	r1, r4
 8001290:	d800      	bhi.n	8001294 <__aeabi_ddiv+0x168>
 8001292:	e1e1      	b.n	8001658 <__aeabi_ddiv+0x52c>
 8001294:	1aa0      	subs	r0, r4, r2
 8001296:	4642      	mov	r2, r8
 8001298:	0412      	lsls	r2, r2, #16
 800129a:	431a      	orrs	r2, r3
 800129c:	4693      	mov	fp, r2
 800129e:	464b      	mov	r3, r9
 80012a0:	4659      	mov	r1, fp
 80012a2:	0c1b      	lsrs	r3, r3, #16
 80012a4:	001d      	movs	r5, r3
 80012a6:	9304      	str	r3, [sp, #16]
 80012a8:	040b      	lsls	r3, r1, #16
 80012aa:	4649      	mov	r1, r9
 80012ac:	0409      	lsls	r1, r1, #16
 80012ae:	0c09      	lsrs	r1, r1, #16
 80012b0:	000c      	movs	r4, r1
 80012b2:	0c1b      	lsrs	r3, r3, #16
 80012b4:	435c      	muls	r4, r3
 80012b6:	0c12      	lsrs	r2, r2, #16
 80012b8:	436b      	muls	r3, r5
 80012ba:	4688      	mov	r8, r1
 80012bc:	4351      	muls	r1, r2
 80012be:	436a      	muls	r2, r5
 80012c0:	0c25      	lsrs	r5, r4, #16
 80012c2:	46ac      	mov	ip, r5
 80012c4:	185b      	adds	r3, r3, r1
 80012c6:	4463      	add	r3, ip
 80012c8:	4299      	cmp	r1, r3
 80012ca:	d903      	bls.n	80012d4 <__aeabi_ddiv+0x1a8>
 80012cc:	2180      	movs	r1, #128	@ 0x80
 80012ce:	0249      	lsls	r1, r1, #9
 80012d0:	468c      	mov	ip, r1
 80012d2:	4462      	add	r2, ip
 80012d4:	0c19      	lsrs	r1, r3, #16
 80012d6:	0424      	lsls	r4, r4, #16
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	0c24      	lsrs	r4, r4, #16
 80012dc:	188a      	adds	r2, r1, r2
 80012de:	191c      	adds	r4, r3, r4
 80012e0:	4290      	cmp	r0, r2
 80012e2:	d302      	bcc.n	80012ea <__aeabi_ddiv+0x1be>
 80012e4:	d116      	bne.n	8001314 <__aeabi_ddiv+0x1e8>
 80012e6:	42a7      	cmp	r7, r4
 80012e8:	d214      	bcs.n	8001314 <__aeabi_ddiv+0x1e8>
 80012ea:	465b      	mov	r3, fp
 80012ec:	9d00      	ldr	r5, [sp, #0]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	444f      	add	r7, r9
 80012f2:	9305      	str	r3, [sp, #20]
 80012f4:	454f      	cmp	r7, r9
 80012f6:	419b      	sbcs	r3, r3
 80012f8:	46ac      	mov	ip, r5
 80012fa:	425b      	negs	r3, r3
 80012fc:	4463      	add	r3, ip
 80012fe:	18c0      	adds	r0, r0, r3
 8001300:	4285      	cmp	r5, r0
 8001302:	d300      	bcc.n	8001306 <__aeabi_ddiv+0x1da>
 8001304:	e1a1      	b.n	800164a <__aeabi_ddiv+0x51e>
 8001306:	4282      	cmp	r2, r0
 8001308:	d900      	bls.n	800130c <__aeabi_ddiv+0x1e0>
 800130a:	e1f6      	b.n	80016fa <__aeabi_ddiv+0x5ce>
 800130c:	d100      	bne.n	8001310 <__aeabi_ddiv+0x1e4>
 800130e:	e1f1      	b.n	80016f4 <__aeabi_ddiv+0x5c8>
 8001310:	9b05      	ldr	r3, [sp, #20]
 8001312:	469b      	mov	fp, r3
 8001314:	1b3c      	subs	r4, r7, r4
 8001316:	42a7      	cmp	r7, r4
 8001318:	41bf      	sbcs	r7, r7
 800131a:	9d00      	ldr	r5, [sp, #0]
 800131c:	1a80      	subs	r0, r0, r2
 800131e:	427f      	negs	r7, r7
 8001320:	1bc0      	subs	r0, r0, r7
 8001322:	4285      	cmp	r5, r0
 8001324:	d100      	bne.n	8001328 <__aeabi_ddiv+0x1fc>
 8001326:	e1d0      	b.n	80016ca <__aeabi_ddiv+0x59e>
 8001328:	9902      	ldr	r1, [sp, #8]
 800132a:	f7fe ff73 	bl	8000214 <__aeabi_uidivmod>
 800132e:	9a03      	ldr	r2, [sp, #12]
 8001330:	040b      	lsls	r3, r1, #16
 8001332:	4342      	muls	r2, r0
 8001334:	0c21      	lsrs	r1, r4, #16
 8001336:	0007      	movs	r7, r0
 8001338:	4319      	orrs	r1, r3
 800133a:	428a      	cmp	r2, r1
 800133c:	d900      	bls.n	8001340 <__aeabi_ddiv+0x214>
 800133e:	e178      	b.n	8001632 <__aeabi_ddiv+0x506>
 8001340:	1a88      	subs	r0, r1, r2
 8001342:	9902      	ldr	r1, [sp, #8]
 8001344:	f7fe ff66 	bl	8000214 <__aeabi_uidivmod>
 8001348:	9a03      	ldr	r2, [sp, #12]
 800134a:	0424      	lsls	r4, r4, #16
 800134c:	4342      	muls	r2, r0
 800134e:	0409      	lsls	r1, r1, #16
 8001350:	0c24      	lsrs	r4, r4, #16
 8001352:	0003      	movs	r3, r0
 8001354:	430c      	orrs	r4, r1
 8001356:	42a2      	cmp	r2, r4
 8001358:	d900      	bls.n	800135c <__aeabi_ddiv+0x230>
 800135a:	e15d      	b.n	8001618 <__aeabi_ddiv+0x4ec>
 800135c:	4641      	mov	r1, r8
 800135e:	1aa4      	subs	r4, r4, r2
 8001360:	043a      	lsls	r2, r7, #16
 8001362:	431a      	orrs	r2, r3
 8001364:	9d04      	ldr	r5, [sp, #16]
 8001366:	0413      	lsls	r3, r2, #16
 8001368:	0c1b      	lsrs	r3, r3, #16
 800136a:	4359      	muls	r1, r3
 800136c:	4647      	mov	r7, r8
 800136e:	436b      	muls	r3, r5
 8001370:	469c      	mov	ip, r3
 8001372:	0c10      	lsrs	r0, r2, #16
 8001374:	4347      	muls	r7, r0
 8001376:	0c0b      	lsrs	r3, r1, #16
 8001378:	44bc      	add	ip, r7
 800137a:	4463      	add	r3, ip
 800137c:	4368      	muls	r0, r5
 800137e:	429f      	cmp	r7, r3
 8001380:	d903      	bls.n	800138a <__aeabi_ddiv+0x25e>
 8001382:	2580      	movs	r5, #128	@ 0x80
 8001384:	026d      	lsls	r5, r5, #9
 8001386:	46ac      	mov	ip, r5
 8001388:	4460      	add	r0, ip
 800138a:	0c1f      	lsrs	r7, r3, #16
 800138c:	0409      	lsls	r1, r1, #16
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	0c09      	lsrs	r1, r1, #16
 8001392:	183f      	adds	r7, r7, r0
 8001394:	185b      	adds	r3, r3, r1
 8001396:	42bc      	cmp	r4, r7
 8001398:	d200      	bcs.n	800139c <__aeabi_ddiv+0x270>
 800139a:	e102      	b.n	80015a2 <__aeabi_ddiv+0x476>
 800139c:	d100      	bne.n	80013a0 <__aeabi_ddiv+0x274>
 800139e:	e0fd      	b.n	800159c <__aeabi_ddiv+0x470>
 80013a0:	2301      	movs	r3, #1
 80013a2:	431a      	orrs	r2, r3
 80013a4:	4b43      	ldr	r3, [pc, #268]	@ (80014b4 <__aeabi_ddiv+0x388>)
 80013a6:	4453      	add	r3, sl
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dc00      	bgt.n	80013ae <__aeabi_ddiv+0x282>
 80013ac:	e0ae      	b.n	800150c <__aeabi_ddiv+0x3e0>
 80013ae:	0751      	lsls	r1, r2, #29
 80013b0:	d000      	beq.n	80013b4 <__aeabi_ddiv+0x288>
 80013b2:	e198      	b.n	80016e6 <__aeabi_ddiv+0x5ba>
 80013b4:	4659      	mov	r1, fp
 80013b6:	01c9      	lsls	r1, r1, #7
 80013b8:	d506      	bpl.n	80013c8 <__aeabi_ddiv+0x29c>
 80013ba:	4659      	mov	r1, fp
 80013bc:	4b3e      	ldr	r3, [pc, #248]	@ (80014b8 <__aeabi_ddiv+0x38c>)
 80013be:	4019      	ands	r1, r3
 80013c0:	2380      	movs	r3, #128	@ 0x80
 80013c2:	468b      	mov	fp, r1
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4453      	add	r3, sl
 80013c8:	493c      	ldr	r1, [pc, #240]	@ (80014bc <__aeabi_ddiv+0x390>)
 80013ca:	428b      	cmp	r3, r1
 80013cc:	dd00      	ble.n	80013d0 <__aeabi_ddiv+0x2a4>
 80013ce:	e71a      	b.n	8001206 <__aeabi_ddiv+0xda>
 80013d0:	4659      	mov	r1, fp
 80013d2:	08d2      	lsrs	r2, r2, #3
 80013d4:	0749      	lsls	r1, r1, #29
 80013d6:	4311      	orrs	r1, r2
 80013d8:	465a      	mov	r2, fp
 80013da:	055b      	lsls	r3, r3, #21
 80013dc:	0254      	lsls	r4, r2, #9
 80013de:	4688      	mov	r8, r1
 80013e0:	0b24      	lsrs	r4, r4, #12
 80013e2:	0d5b      	lsrs	r3, r3, #21
 80013e4:	e702      	b.n	80011ec <__aeabi_ddiv+0xc0>
 80013e6:	465a      	mov	r2, fp
 80013e8:	9b00      	ldr	r3, [sp, #0]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	d100      	bne.n	80013f0 <__aeabi_ddiv+0x2c4>
 80013ee:	e07e      	b.n	80014ee <__aeabi_ddiv+0x3c2>
 80013f0:	465b      	mov	r3, fp
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d100      	bne.n	80013f8 <__aeabi_ddiv+0x2cc>
 80013f6:	e100      	b.n	80015fa <__aeabi_ddiv+0x4ce>
 80013f8:	4658      	mov	r0, fp
 80013fa:	f001 f9ad 	bl	8002758 <__clzsi2>
 80013fe:	0002      	movs	r2, r0
 8001400:	0003      	movs	r3, r0
 8001402:	3a0b      	subs	r2, #11
 8001404:	271d      	movs	r7, #29
 8001406:	9e00      	ldr	r6, [sp, #0]
 8001408:	1aba      	subs	r2, r7, r2
 800140a:	0019      	movs	r1, r3
 800140c:	4658      	mov	r0, fp
 800140e:	40d6      	lsrs	r6, r2
 8001410:	3908      	subs	r1, #8
 8001412:	4088      	lsls	r0, r1
 8001414:	0032      	movs	r2, r6
 8001416:	4302      	orrs	r2, r0
 8001418:	4693      	mov	fp, r2
 800141a:	9a00      	ldr	r2, [sp, #0]
 800141c:	408a      	lsls	r2, r1
 800141e:	4928      	ldr	r1, [pc, #160]	@ (80014c0 <__aeabi_ddiv+0x394>)
 8001420:	4453      	add	r3, sl
 8001422:	468a      	mov	sl, r1
 8001424:	449a      	add	sl, r3
 8001426:	2300      	movs	r3, #0
 8001428:	e6c8      	b.n	80011bc <__aeabi_ddiv+0x90>
 800142a:	465b      	mov	r3, fp
 800142c:	4303      	orrs	r3, r0
 800142e:	4699      	mov	r9, r3
 8001430:	d056      	beq.n	80014e0 <__aeabi_ddiv+0x3b4>
 8001432:	465b      	mov	r3, fp
 8001434:	2b00      	cmp	r3, #0
 8001436:	d100      	bne.n	800143a <__aeabi_ddiv+0x30e>
 8001438:	e0cd      	b.n	80015d6 <__aeabi_ddiv+0x4aa>
 800143a:	4658      	mov	r0, fp
 800143c:	f001 f98c 	bl	8002758 <__clzsi2>
 8001440:	230b      	movs	r3, #11
 8001442:	425b      	negs	r3, r3
 8001444:	469c      	mov	ip, r3
 8001446:	0002      	movs	r2, r0
 8001448:	4484      	add	ip, r0
 800144a:	4666      	mov	r6, ip
 800144c:	231d      	movs	r3, #29
 800144e:	1b9b      	subs	r3, r3, r6
 8001450:	0026      	movs	r6, r4
 8001452:	0011      	movs	r1, r2
 8001454:	4658      	mov	r0, fp
 8001456:	40de      	lsrs	r6, r3
 8001458:	3908      	subs	r1, #8
 800145a:	4088      	lsls	r0, r1
 800145c:	0033      	movs	r3, r6
 800145e:	4303      	orrs	r3, r0
 8001460:	4699      	mov	r9, r3
 8001462:	0023      	movs	r3, r4
 8001464:	408b      	lsls	r3, r1
 8001466:	4698      	mov	r8, r3
 8001468:	4b16      	ldr	r3, [pc, #88]	@ (80014c4 <__aeabi_ddiv+0x398>)
 800146a:	2400      	movs	r4, #0
 800146c:	1a9b      	subs	r3, r3, r2
 800146e:	469a      	mov	sl, r3
 8001470:	2300      	movs	r3, #0
 8001472:	9303      	str	r3, [sp, #12]
 8001474:	e682      	b.n	800117c <__aeabi_ddiv+0x50>
 8001476:	465a      	mov	r2, fp
 8001478:	4302      	orrs	r2, r0
 800147a:	4691      	mov	r9, r2
 800147c:	d12a      	bne.n	80014d4 <__aeabi_ddiv+0x3a8>
 800147e:	2200      	movs	r2, #0
 8001480:	469a      	mov	sl, r3
 8001482:	2302      	movs	r3, #2
 8001484:	4690      	mov	r8, r2
 8001486:	2408      	movs	r4, #8
 8001488:	9303      	str	r3, [sp, #12]
 800148a:	e677      	b.n	800117c <__aeabi_ddiv+0x50>
 800148c:	465a      	mov	r2, fp
 800148e:	9b00      	ldr	r3, [sp, #0]
 8001490:	431a      	orrs	r2, r3
 8001492:	4b0d      	ldr	r3, [pc, #52]	@ (80014c8 <__aeabi_ddiv+0x39c>)
 8001494:	469c      	mov	ip, r3
 8001496:	44e2      	add	sl, ip
 8001498:	2a00      	cmp	r2, #0
 800149a:	d117      	bne.n	80014cc <__aeabi_ddiv+0x3a0>
 800149c:	2302      	movs	r3, #2
 800149e:	431c      	orrs	r4, r3
 80014a0:	2300      	movs	r3, #0
 80014a2:	469b      	mov	fp, r3
 80014a4:	3302      	adds	r3, #2
 80014a6:	e689      	b.n	80011bc <__aeabi_ddiv+0x90>
 80014a8:	000007ff 	.word	0x000007ff
 80014ac:	fffffc01 	.word	0xfffffc01
 80014b0:	08010c44 	.word	0x08010c44
 80014b4:	000003ff 	.word	0x000003ff
 80014b8:	feffffff 	.word	0xfeffffff
 80014bc:	000007fe 	.word	0x000007fe
 80014c0:	000003f3 	.word	0x000003f3
 80014c4:	fffffc0d 	.word	0xfffffc0d
 80014c8:	fffff801 	.word	0xfffff801
 80014cc:	2303      	movs	r3, #3
 80014ce:	0032      	movs	r2, r6
 80014d0:	431c      	orrs	r4, r3
 80014d2:	e673      	b.n	80011bc <__aeabi_ddiv+0x90>
 80014d4:	469a      	mov	sl, r3
 80014d6:	2303      	movs	r3, #3
 80014d8:	46d9      	mov	r9, fp
 80014da:	240c      	movs	r4, #12
 80014dc:	9303      	str	r3, [sp, #12]
 80014de:	e64d      	b.n	800117c <__aeabi_ddiv+0x50>
 80014e0:	2300      	movs	r3, #0
 80014e2:	4698      	mov	r8, r3
 80014e4:	469a      	mov	sl, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	2404      	movs	r4, #4
 80014ea:	9303      	str	r3, [sp, #12]
 80014ec:	e646      	b.n	800117c <__aeabi_ddiv+0x50>
 80014ee:	2301      	movs	r3, #1
 80014f0:	431c      	orrs	r4, r3
 80014f2:	2300      	movs	r3, #0
 80014f4:	469b      	mov	fp, r3
 80014f6:	3301      	adds	r3, #1
 80014f8:	e660      	b.n	80011bc <__aeabi_ddiv+0x90>
 80014fa:	2300      	movs	r3, #0
 80014fc:	2480      	movs	r4, #128	@ 0x80
 80014fe:	4698      	mov	r8, r3
 8001500:	2600      	movs	r6, #0
 8001502:	4b92      	ldr	r3, [pc, #584]	@ (800174c <__aeabi_ddiv+0x620>)
 8001504:	0324      	lsls	r4, r4, #12
 8001506:	e671      	b.n	80011ec <__aeabi_ddiv+0xc0>
 8001508:	2201      	movs	r2, #1
 800150a:	4252      	negs	r2, r2
 800150c:	2101      	movs	r1, #1
 800150e:	1ac9      	subs	r1, r1, r3
 8001510:	2938      	cmp	r1, #56	@ 0x38
 8001512:	dd00      	ble.n	8001516 <__aeabi_ddiv+0x3ea>
 8001514:	e666      	b.n	80011e4 <__aeabi_ddiv+0xb8>
 8001516:	291f      	cmp	r1, #31
 8001518:	dc00      	bgt.n	800151c <__aeabi_ddiv+0x3f0>
 800151a:	e0ab      	b.n	8001674 <__aeabi_ddiv+0x548>
 800151c:	201f      	movs	r0, #31
 800151e:	4240      	negs	r0, r0
 8001520:	1ac3      	subs	r3, r0, r3
 8001522:	4658      	mov	r0, fp
 8001524:	40d8      	lsrs	r0, r3
 8001526:	0003      	movs	r3, r0
 8001528:	2920      	cmp	r1, #32
 800152a:	d004      	beq.n	8001536 <__aeabi_ddiv+0x40a>
 800152c:	4658      	mov	r0, fp
 800152e:	4988      	ldr	r1, [pc, #544]	@ (8001750 <__aeabi_ddiv+0x624>)
 8001530:	4451      	add	r1, sl
 8001532:	4088      	lsls	r0, r1
 8001534:	4302      	orrs	r2, r0
 8001536:	1e51      	subs	r1, r2, #1
 8001538:	418a      	sbcs	r2, r1
 800153a:	431a      	orrs	r2, r3
 800153c:	2307      	movs	r3, #7
 800153e:	0019      	movs	r1, r3
 8001540:	2400      	movs	r4, #0
 8001542:	4011      	ands	r1, r2
 8001544:	4213      	tst	r3, r2
 8001546:	d00c      	beq.n	8001562 <__aeabi_ddiv+0x436>
 8001548:	230f      	movs	r3, #15
 800154a:	4013      	ands	r3, r2
 800154c:	2b04      	cmp	r3, #4
 800154e:	d100      	bne.n	8001552 <__aeabi_ddiv+0x426>
 8001550:	e0f9      	b.n	8001746 <__aeabi_ddiv+0x61a>
 8001552:	1d11      	adds	r1, r2, #4
 8001554:	4291      	cmp	r1, r2
 8001556:	419b      	sbcs	r3, r3
 8001558:	000a      	movs	r2, r1
 800155a:	425b      	negs	r3, r3
 800155c:	0759      	lsls	r1, r3, #29
 800155e:	025b      	lsls	r3, r3, #9
 8001560:	0b1c      	lsrs	r4, r3, #12
 8001562:	08d2      	lsrs	r2, r2, #3
 8001564:	430a      	orrs	r2, r1
 8001566:	4690      	mov	r8, r2
 8001568:	2300      	movs	r3, #0
 800156a:	e63f      	b.n	80011ec <__aeabi_ddiv+0xc0>
 800156c:	2480      	movs	r4, #128	@ 0x80
 800156e:	464b      	mov	r3, r9
 8001570:	0324      	lsls	r4, r4, #12
 8001572:	4223      	tst	r3, r4
 8001574:	d009      	beq.n	800158a <__aeabi_ddiv+0x45e>
 8001576:	465b      	mov	r3, fp
 8001578:	4223      	tst	r3, r4
 800157a:	d106      	bne.n	800158a <__aeabi_ddiv+0x45e>
 800157c:	431c      	orrs	r4, r3
 800157e:	0324      	lsls	r4, r4, #12
 8001580:	002e      	movs	r6, r5
 8001582:	4690      	mov	r8, r2
 8001584:	4b71      	ldr	r3, [pc, #452]	@ (800174c <__aeabi_ddiv+0x620>)
 8001586:	0b24      	lsrs	r4, r4, #12
 8001588:	e630      	b.n	80011ec <__aeabi_ddiv+0xc0>
 800158a:	2480      	movs	r4, #128	@ 0x80
 800158c:	464b      	mov	r3, r9
 800158e:	0324      	lsls	r4, r4, #12
 8001590:	431c      	orrs	r4, r3
 8001592:	0324      	lsls	r4, r4, #12
 8001594:	9e02      	ldr	r6, [sp, #8]
 8001596:	4b6d      	ldr	r3, [pc, #436]	@ (800174c <__aeabi_ddiv+0x620>)
 8001598:	0b24      	lsrs	r4, r4, #12
 800159a:	e627      	b.n	80011ec <__aeabi_ddiv+0xc0>
 800159c:	2b00      	cmp	r3, #0
 800159e:	d100      	bne.n	80015a2 <__aeabi_ddiv+0x476>
 80015a0:	e700      	b.n	80013a4 <__aeabi_ddiv+0x278>
 80015a2:	9800      	ldr	r0, [sp, #0]
 80015a4:	1e51      	subs	r1, r2, #1
 80015a6:	4684      	mov	ip, r0
 80015a8:	4464      	add	r4, ip
 80015aa:	4284      	cmp	r4, r0
 80015ac:	d200      	bcs.n	80015b0 <__aeabi_ddiv+0x484>
 80015ae:	e084      	b.n	80016ba <__aeabi_ddiv+0x58e>
 80015b0:	42bc      	cmp	r4, r7
 80015b2:	d200      	bcs.n	80015b6 <__aeabi_ddiv+0x48a>
 80015b4:	e0ae      	b.n	8001714 <__aeabi_ddiv+0x5e8>
 80015b6:	d100      	bne.n	80015ba <__aeabi_ddiv+0x48e>
 80015b8:	e0c1      	b.n	800173e <__aeabi_ddiv+0x612>
 80015ba:	000a      	movs	r2, r1
 80015bc:	e6f0      	b.n	80013a0 <__aeabi_ddiv+0x274>
 80015be:	4542      	cmp	r2, r8
 80015c0:	d900      	bls.n	80015c4 <__aeabi_ddiv+0x498>
 80015c2:	e62c      	b.n	800121e <__aeabi_ddiv+0xf2>
 80015c4:	464b      	mov	r3, r9
 80015c6:	07dc      	lsls	r4, r3, #31
 80015c8:	0858      	lsrs	r0, r3, #1
 80015ca:	4643      	mov	r3, r8
 80015cc:	085b      	lsrs	r3, r3, #1
 80015ce:	431c      	orrs	r4, r3
 80015d0:	4643      	mov	r3, r8
 80015d2:	07df      	lsls	r7, r3, #31
 80015d4:	e62a      	b.n	800122c <__aeabi_ddiv+0x100>
 80015d6:	f001 f8bf 	bl	8002758 <__clzsi2>
 80015da:	2315      	movs	r3, #21
 80015dc:	469c      	mov	ip, r3
 80015de:	4484      	add	ip, r0
 80015e0:	0002      	movs	r2, r0
 80015e2:	4663      	mov	r3, ip
 80015e4:	3220      	adds	r2, #32
 80015e6:	2b1c      	cmp	r3, #28
 80015e8:	dc00      	bgt.n	80015ec <__aeabi_ddiv+0x4c0>
 80015ea:	e72e      	b.n	800144a <__aeabi_ddiv+0x31e>
 80015ec:	0023      	movs	r3, r4
 80015ee:	3808      	subs	r0, #8
 80015f0:	4083      	lsls	r3, r0
 80015f2:	4699      	mov	r9, r3
 80015f4:	2300      	movs	r3, #0
 80015f6:	4698      	mov	r8, r3
 80015f8:	e736      	b.n	8001468 <__aeabi_ddiv+0x33c>
 80015fa:	f001 f8ad 	bl	8002758 <__clzsi2>
 80015fe:	0002      	movs	r2, r0
 8001600:	0003      	movs	r3, r0
 8001602:	3215      	adds	r2, #21
 8001604:	3320      	adds	r3, #32
 8001606:	2a1c      	cmp	r2, #28
 8001608:	dc00      	bgt.n	800160c <__aeabi_ddiv+0x4e0>
 800160a:	e6fb      	b.n	8001404 <__aeabi_ddiv+0x2d8>
 800160c:	9900      	ldr	r1, [sp, #0]
 800160e:	3808      	subs	r0, #8
 8001610:	4081      	lsls	r1, r0
 8001612:	2200      	movs	r2, #0
 8001614:	468b      	mov	fp, r1
 8001616:	e702      	b.n	800141e <__aeabi_ddiv+0x2f2>
 8001618:	9900      	ldr	r1, [sp, #0]
 800161a:	3b01      	subs	r3, #1
 800161c:	468c      	mov	ip, r1
 800161e:	4464      	add	r4, ip
 8001620:	42a1      	cmp	r1, r4
 8001622:	d900      	bls.n	8001626 <__aeabi_ddiv+0x4fa>
 8001624:	e69a      	b.n	800135c <__aeabi_ddiv+0x230>
 8001626:	42a2      	cmp	r2, r4
 8001628:	d800      	bhi.n	800162c <__aeabi_ddiv+0x500>
 800162a:	e697      	b.n	800135c <__aeabi_ddiv+0x230>
 800162c:	1e83      	subs	r3, r0, #2
 800162e:	4464      	add	r4, ip
 8001630:	e694      	b.n	800135c <__aeabi_ddiv+0x230>
 8001632:	46ac      	mov	ip, r5
 8001634:	4461      	add	r1, ip
 8001636:	3f01      	subs	r7, #1
 8001638:	428d      	cmp	r5, r1
 800163a:	d900      	bls.n	800163e <__aeabi_ddiv+0x512>
 800163c:	e680      	b.n	8001340 <__aeabi_ddiv+0x214>
 800163e:	428a      	cmp	r2, r1
 8001640:	d800      	bhi.n	8001644 <__aeabi_ddiv+0x518>
 8001642:	e67d      	b.n	8001340 <__aeabi_ddiv+0x214>
 8001644:	1e87      	subs	r7, r0, #2
 8001646:	4461      	add	r1, ip
 8001648:	e67a      	b.n	8001340 <__aeabi_ddiv+0x214>
 800164a:	4285      	cmp	r5, r0
 800164c:	d000      	beq.n	8001650 <__aeabi_ddiv+0x524>
 800164e:	e65f      	b.n	8001310 <__aeabi_ddiv+0x1e4>
 8001650:	45b9      	cmp	r9, r7
 8001652:	d900      	bls.n	8001656 <__aeabi_ddiv+0x52a>
 8001654:	e65c      	b.n	8001310 <__aeabi_ddiv+0x1e4>
 8001656:	e656      	b.n	8001306 <__aeabi_ddiv+0x1da>
 8001658:	42a2      	cmp	r2, r4
 800165a:	d800      	bhi.n	800165e <__aeabi_ddiv+0x532>
 800165c:	e61a      	b.n	8001294 <__aeabi_ddiv+0x168>
 800165e:	1e83      	subs	r3, r0, #2
 8001660:	4464      	add	r4, ip
 8001662:	e617      	b.n	8001294 <__aeabi_ddiv+0x168>
 8001664:	428a      	cmp	r2, r1
 8001666:	d800      	bhi.n	800166a <__aeabi_ddiv+0x53e>
 8001668:	e600      	b.n	800126c <__aeabi_ddiv+0x140>
 800166a:	46ac      	mov	ip, r5
 800166c:	1e83      	subs	r3, r0, #2
 800166e:	4698      	mov	r8, r3
 8001670:	4461      	add	r1, ip
 8001672:	e5fb      	b.n	800126c <__aeabi_ddiv+0x140>
 8001674:	4837      	ldr	r0, [pc, #220]	@ (8001754 <__aeabi_ddiv+0x628>)
 8001676:	0014      	movs	r4, r2
 8001678:	4450      	add	r0, sl
 800167a:	4082      	lsls	r2, r0
 800167c:	465b      	mov	r3, fp
 800167e:	0017      	movs	r7, r2
 8001680:	4083      	lsls	r3, r0
 8001682:	40cc      	lsrs	r4, r1
 8001684:	1e7a      	subs	r2, r7, #1
 8001686:	4197      	sbcs	r7, r2
 8001688:	4323      	orrs	r3, r4
 800168a:	433b      	orrs	r3, r7
 800168c:	001a      	movs	r2, r3
 800168e:	465b      	mov	r3, fp
 8001690:	40cb      	lsrs	r3, r1
 8001692:	0751      	lsls	r1, r2, #29
 8001694:	d009      	beq.n	80016aa <__aeabi_ddiv+0x57e>
 8001696:	210f      	movs	r1, #15
 8001698:	4011      	ands	r1, r2
 800169a:	2904      	cmp	r1, #4
 800169c:	d005      	beq.n	80016aa <__aeabi_ddiv+0x57e>
 800169e:	1d11      	adds	r1, r2, #4
 80016a0:	4291      	cmp	r1, r2
 80016a2:	4192      	sbcs	r2, r2
 80016a4:	4252      	negs	r2, r2
 80016a6:	189b      	adds	r3, r3, r2
 80016a8:	000a      	movs	r2, r1
 80016aa:	0219      	lsls	r1, r3, #8
 80016ac:	d400      	bmi.n	80016b0 <__aeabi_ddiv+0x584>
 80016ae:	e755      	b.n	800155c <__aeabi_ddiv+0x430>
 80016b0:	2200      	movs	r2, #0
 80016b2:	2301      	movs	r3, #1
 80016b4:	2400      	movs	r4, #0
 80016b6:	4690      	mov	r8, r2
 80016b8:	e598      	b.n	80011ec <__aeabi_ddiv+0xc0>
 80016ba:	000a      	movs	r2, r1
 80016bc:	42bc      	cmp	r4, r7
 80016be:	d000      	beq.n	80016c2 <__aeabi_ddiv+0x596>
 80016c0:	e66e      	b.n	80013a0 <__aeabi_ddiv+0x274>
 80016c2:	454b      	cmp	r3, r9
 80016c4:	d000      	beq.n	80016c8 <__aeabi_ddiv+0x59c>
 80016c6:	e66b      	b.n	80013a0 <__aeabi_ddiv+0x274>
 80016c8:	e66c      	b.n	80013a4 <__aeabi_ddiv+0x278>
 80016ca:	4b23      	ldr	r3, [pc, #140]	@ (8001758 <__aeabi_ddiv+0x62c>)
 80016cc:	4a23      	ldr	r2, [pc, #140]	@ (800175c <__aeabi_ddiv+0x630>)
 80016ce:	4453      	add	r3, sl
 80016d0:	4592      	cmp	sl, r2
 80016d2:	da00      	bge.n	80016d6 <__aeabi_ddiv+0x5aa>
 80016d4:	e718      	b.n	8001508 <__aeabi_ddiv+0x3dc>
 80016d6:	2101      	movs	r1, #1
 80016d8:	4249      	negs	r1, r1
 80016da:	1d0a      	adds	r2, r1, #4
 80016dc:	428a      	cmp	r2, r1
 80016de:	4189      	sbcs	r1, r1
 80016e0:	4249      	negs	r1, r1
 80016e2:	448b      	add	fp, r1
 80016e4:	e666      	b.n	80013b4 <__aeabi_ddiv+0x288>
 80016e6:	210f      	movs	r1, #15
 80016e8:	4011      	ands	r1, r2
 80016ea:	2904      	cmp	r1, #4
 80016ec:	d100      	bne.n	80016f0 <__aeabi_ddiv+0x5c4>
 80016ee:	e661      	b.n	80013b4 <__aeabi_ddiv+0x288>
 80016f0:	0011      	movs	r1, r2
 80016f2:	e7f2      	b.n	80016da <__aeabi_ddiv+0x5ae>
 80016f4:	42bc      	cmp	r4, r7
 80016f6:	d800      	bhi.n	80016fa <__aeabi_ddiv+0x5ce>
 80016f8:	e60a      	b.n	8001310 <__aeabi_ddiv+0x1e4>
 80016fa:	2302      	movs	r3, #2
 80016fc:	425b      	negs	r3, r3
 80016fe:	469c      	mov	ip, r3
 8001700:	9900      	ldr	r1, [sp, #0]
 8001702:	444f      	add	r7, r9
 8001704:	454f      	cmp	r7, r9
 8001706:	419b      	sbcs	r3, r3
 8001708:	44e3      	add	fp, ip
 800170a:	468c      	mov	ip, r1
 800170c:	425b      	negs	r3, r3
 800170e:	4463      	add	r3, ip
 8001710:	18c0      	adds	r0, r0, r3
 8001712:	e5ff      	b.n	8001314 <__aeabi_ddiv+0x1e8>
 8001714:	4649      	mov	r1, r9
 8001716:	9d00      	ldr	r5, [sp, #0]
 8001718:	0048      	lsls	r0, r1, #1
 800171a:	4548      	cmp	r0, r9
 800171c:	4189      	sbcs	r1, r1
 800171e:	46ac      	mov	ip, r5
 8001720:	4249      	negs	r1, r1
 8001722:	4461      	add	r1, ip
 8001724:	4681      	mov	r9, r0
 8001726:	3a02      	subs	r2, #2
 8001728:	1864      	adds	r4, r4, r1
 800172a:	e7c7      	b.n	80016bc <__aeabi_ddiv+0x590>
 800172c:	2480      	movs	r4, #128	@ 0x80
 800172e:	465b      	mov	r3, fp
 8001730:	0324      	lsls	r4, r4, #12
 8001732:	431c      	orrs	r4, r3
 8001734:	0324      	lsls	r4, r4, #12
 8001736:	4690      	mov	r8, r2
 8001738:	4b04      	ldr	r3, [pc, #16]	@ (800174c <__aeabi_ddiv+0x620>)
 800173a:	0b24      	lsrs	r4, r4, #12
 800173c:	e556      	b.n	80011ec <__aeabi_ddiv+0xc0>
 800173e:	4599      	cmp	r9, r3
 8001740:	d3e8      	bcc.n	8001714 <__aeabi_ddiv+0x5e8>
 8001742:	000a      	movs	r2, r1
 8001744:	e7bd      	b.n	80016c2 <__aeabi_ddiv+0x596>
 8001746:	2300      	movs	r3, #0
 8001748:	e708      	b.n	800155c <__aeabi_ddiv+0x430>
 800174a:	46c0      	nop			@ (mov r8, r8)
 800174c:	000007ff 	.word	0x000007ff
 8001750:	0000043e 	.word	0x0000043e
 8001754:	0000041e 	.word	0x0000041e
 8001758:	000003ff 	.word	0x000003ff
 800175c:	fffffc02 	.word	0xfffffc02

08001760 <__aeabi_dmul>:
 8001760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001762:	4657      	mov	r7, sl
 8001764:	46de      	mov	lr, fp
 8001766:	464e      	mov	r6, r9
 8001768:	4645      	mov	r5, r8
 800176a:	b5e0      	push	{r5, r6, r7, lr}
 800176c:	001f      	movs	r7, r3
 800176e:	030b      	lsls	r3, r1, #12
 8001770:	0b1b      	lsrs	r3, r3, #12
 8001772:	0016      	movs	r6, r2
 8001774:	469a      	mov	sl, r3
 8001776:	0fca      	lsrs	r2, r1, #31
 8001778:	004b      	lsls	r3, r1, #1
 800177a:	0004      	movs	r4, r0
 800177c:	4693      	mov	fp, r2
 800177e:	b087      	sub	sp, #28
 8001780:	0d5b      	lsrs	r3, r3, #21
 8001782:	d100      	bne.n	8001786 <__aeabi_dmul+0x26>
 8001784:	e0d5      	b.n	8001932 <__aeabi_dmul+0x1d2>
 8001786:	4abb      	ldr	r2, [pc, #748]	@ (8001a74 <__aeabi_dmul+0x314>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d100      	bne.n	800178e <__aeabi_dmul+0x2e>
 800178c:	e0f8      	b.n	8001980 <__aeabi_dmul+0x220>
 800178e:	4651      	mov	r1, sl
 8001790:	0f42      	lsrs	r2, r0, #29
 8001792:	00c9      	lsls	r1, r1, #3
 8001794:	430a      	orrs	r2, r1
 8001796:	2180      	movs	r1, #128	@ 0x80
 8001798:	0409      	lsls	r1, r1, #16
 800179a:	4311      	orrs	r1, r2
 800179c:	00c2      	lsls	r2, r0, #3
 800179e:	4691      	mov	r9, r2
 80017a0:	4ab5      	ldr	r2, [pc, #724]	@ (8001a78 <__aeabi_dmul+0x318>)
 80017a2:	468a      	mov	sl, r1
 80017a4:	189d      	adds	r5, r3, r2
 80017a6:	2300      	movs	r3, #0
 80017a8:	4698      	mov	r8, r3
 80017aa:	9302      	str	r3, [sp, #8]
 80017ac:	033c      	lsls	r4, r7, #12
 80017ae:	007b      	lsls	r3, r7, #1
 80017b0:	0ffa      	lsrs	r2, r7, #31
 80017b2:	0030      	movs	r0, r6
 80017b4:	0b24      	lsrs	r4, r4, #12
 80017b6:	0d5b      	lsrs	r3, r3, #21
 80017b8:	9200      	str	r2, [sp, #0]
 80017ba:	d100      	bne.n	80017be <__aeabi_dmul+0x5e>
 80017bc:	e096      	b.n	80018ec <__aeabi_dmul+0x18c>
 80017be:	4aad      	ldr	r2, [pc, #692]	@ (8001a74 <__aeabi_dmul+0x314>)
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d031      	beq.n	8001828 <__aeabi_dmul+0xc8>
 80017c4:	0f72      	lsrs	r2, r6, #29
 80017c6:	00e4      	lsls	r4, r4, #3
 80017c8:	4322      	orrs	r2, r4
 80017ca:	2480      	movs	r4, #128	@ 0x80
 80017cc:	0424      	lsls	r4, r4, #16
 80017ce:	4314      	orrs	r4, r2
 80017d0:	4aa9      	ldr	r2, [pc, #676]	@ (8001a78 <__aeabi_dmul+0x318>)
 80017d2:	00f0      	lsls	r0, r6, #3
 80017d4:	4694      	mov	ip, r2
 80017d6:	4463      	add	r3, ip
 80017d8:	195b      	adds	r3, r3, r5
 80017da:	1c5a      	adds	r2, r3, #1
 80017dc:	9201      	str	r2, [sp, #4]
 80017de:	4642      	mov	r2, r8
 80017e0:	2600      	movs	r6, #0
 80017e2:	2a0a      	cmp	r2, #10
 80017e4:	dc42      	bgt.n	800186c <__aeabi_dmul+0x10c>
 80017e6:	465a      	mov	r2, fp
 80017e8:	9900      	ldr	r1, [sp, #0]
 80017ea:	404a      	eors	r2, r1
 80017ec:	4693      	mov	fp, r2
 80017ee:	4642      	mov	r2, r8
 80017f0:	2a02      	cmp	r2, #2
 80017f2:	dc32      	bgt.n	800185a <__aeabi_dmul+0xfa>
 80017f4:	3a01      	subs	r2, #1
 80017f6:	2a01      	cmp	r2, #1
 80017f8:	d900      	bls.n	80017fc <__aeabi_dmul+0x9c>
 80017fa:	e149      	b.n	8001a90 <__aeabi_dmul+0x330>
 80017fc:	2e02      	cmp	r6, #2
 80017fe:	d100      	bne.n	8001802 <__aeabi_dmul+0xa2>
 8001800:	e0ca      	b.n	8001998 <__aeabi_dmul+0x238>
 8001802:	2e01      	cmp	r6, #1
 8001804:	d13d      	bne.n	8001882 <__aeabi_dmul+0x122>
 8001806:	2300      	movs	r3, #0
 8001808:	2400      	movs	r4, #0
 800180a:	2200      	movs	r2, #0
 800180c:	0010      	movs	r0, r2
 800180e:	465a      	mov	r2, fp
 8001810:	051b      	lsls	r3, r3, #20
 8001812:	4323      	orrs	r3, r4
 8001814:	07d2      	lsls	r2, r2, #31
 8001816:	4313      	orrs	r3, r2
 8001818:	0019      	movs	r1, r3
 800181a:	b007      	add	sp, #28
 800181c:	bcf0      	pop	{r4, r5, r6, r7}
 800181e:	46bb      	mov	fp, r7
 8001820:	46b2      	mov	sl, r6
 8001822:	46a9      	mov	r9, r5
 8001824:	46a0      	mov	r8, r4
 8001826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001828:	4b92      	ldr	r3, [pc, #584]	@ (8001a74 <__aeabi_dmul+0x314>)
 800182a:	4326      	orrs	r6, r4
 800182c:	18eb      	adds	r3, r5, r3
 800182e:	2e00      	cmp	r6, #0
 8001830:	d100      	bne.n	8001834 <__aeabi_dmul+0xd4>
 8001832:	e0bb      	b.n	80019ac <__aeabi_dmul+0x24c>
 8001834:	2203      	movs	r2, #3
 8001836:	4641      	mov	r1, r8
 8001838:	4311      	orrs	r1, r2
 800183a:	465a      	mov	r2, fp
 800183c:	4688      	mov	r8, r1
 800183e:	9900      	ldr	r1, [sp, #0]
 8001840:	404a      	eors	r2, r1
 8001842:	2180      	movs	r1, #128	@ 0x80
 8001844:	0109      	lsls	r1, r1, #4
 8001846:	468c      	mov	ip, r1
 8001848:	0029      	movs	r1, r5
 800184a:	4461      	add	r1, ip
 800184c:	9101      	str	r1, [sp, #4]
 800184e:	4641      	mov	r1, r8
 8001850:	290a      	cmp	r1, #10
 8001852:	dd00      	ble.n	8001856 <__aeabi_dmul+0xf6>
 8001854:	e233      	b.n	8001cbe <__aeabi_dmul+0x55e>
 8001856:	4693      	mov	fp, r2
 8001858:	2603      	movs	r6, #3
 800185a:	4642      	mov	r2, r8
 800185c:	2701      	movs	r7, #1
 800185e:	4097      	lsls	r7, r2
 8001860:	21a6      	movs	r1, #166	@ 0xa6
 8001862:	003a      	movs	r2, r7
 8001864:	00c9      	lsls	r1, r1, #3
 8001866:	400a      	ands	r2, r1
 8001868:	420f      	tst	r7, r1
 800186a:	d031      	beq.n	80018d0 <__aeabi_dmul+0x170>
 800186c:	9e02      	ldr	r6, [sp, #8]
 800186e:	2e02      	cmp	r6, #2
 8001870:	d100      	bne.n	8001874 <__aeabi_dmul+0x114>
 8001872:	e235      	b.n	8001ce0 <__aeabi_dmul+0x580>
 8001874:	2e03      	cmp	r6, #3
 8001876:	d100      	bne.n	800187a <__aeabi_dmul+0x11a>
 8001878:	e1d2      	b.n	8001c20 <__aeabi_dmul+0x4c0>
 800187a:	4654      	mov	r4, sl
 800187c:	4648      	mov	r0, r9
 800187e:	2e01      	cmp	r6, #1
 8001880:	d0c1      	beq.n	8001806 <__aeabi_dmul+0xa6>
 8001882:	9a01      	ldr	r2, [sp, #4]
 8001884:	4b7d      	ldr	r3, [pc, #500]	@ (8001a7c <__aeabi_dmul+0x31c>)
 8001886:	4694      	mov	ip, r2
 8001888:	4463      	add	r3, ip
 800188a:	2b00      	cmp	r3, #0
 800188c:	dc00      	bgt.n	8001890 <__aeabi_dmul+0x130>
 800188e:	e0c0      	b.n	8001a12 <__aeabi_dmul+0x2b2>
 8001890:	0742      	lsls	r2, r0, #29
 8001892:	d009      	beq.n	80018a8 <__aeabi_dmul+0x148>
 8001894:	220f      	movs	r2, #15
 8001896:	4002      	ands	r2, r0
 8001898:	2a04      	cmp	r2, #4
 800189a:	d005      	beq.n	80018a8 <__aeabi_dmul+0x148>
 800189c:	1d02      	adds	r2, r0, #4
 800189e:	4282      	cmp	r2, r0
 80018a0:	4180      	sbcs	r0, r0
 80018a2:	4240      	negs	r0, r0
 80018a4:	1824      	adds	r4, r4, r0
 80018a6:	0010      	movs	r0, r2
 80018a8:	01e2      	lsls	r2, r4, #7
 80018aa:	d506      	bpl.n	80018ba <__aeabi_dmul+0x15a>
 80018ac:	4b74      	ldr	r3, [pc, #464]	@ (8001a80 <__aeabi_dmul+0x320>)
 80018ae:	9a01      	ldr	r2, [sp, #4]
 80018b0:	401c      	ands	r4, r3
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	4694      	mov	ip, r2
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	4463      	add	r3, ip
 80018ba:	4a72      	ldr	r2, [pc, #456]	@ (8001a84 <__aeabi_dmul+0x324>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	dc6b      	bgt.n	8001998 <__aeabi_dmul+0x238>
 80018c0:	0762      	lsls	r2, r4, #29
 80018c2:	08c0      	lsrs	r0, r0, #3
 80018c4:	0264      	lsls	r4, r4, #9
 80018c6:	055b      	lsls	r3, r3, #21
 80018c8:	4302      	orrs	r2, r0
 80018ca:	0b24      	lsrs	r4, r4, #12
 80018cc:	0d5b      	lsrs	r3, r3, #21
 80018ce:	e79d      	b.n	800180c <__aeabi_dmul+0xac>
 80018d0:	2190      	movs	r1, #144	@ 0x90
 80018d2:	0089      	lsls	r1, r1, #2
 80018d4:	420f      	tst	r7, r1
 80018d6:	d163      	bne.n	80019a0 <__aeabi_dmul+0x240>
 80018d8:	2288      	movs	r2, #136	@ 0x88
 80018da:	423a      	tst	r2, r7
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dmul+0x180>
 80018de:	e0d7      	b.n	8001a90 <__aeabi_dmul+0x330>
 80018e0:	9b00      	ldr	r3, [sp, #0]
 80018e2:	46a2      	mov	sl, r4
 80018e4:	469b      	mov	fp, r3
 80018e6:	4681      	mov	r9, r0
 80018e8:	9602      	str	r6, [sp, #8]
 80018ea:	e7bf      	b.n	800186c <__aeabi_dmul+0x10c>
 80018ec:	0023      	movs	r3, r4
 80018ee:	4333      	orrs	r3, r6
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dmul+0x194>
 80018f2:	e07f      	b.n	80019f4 <__aeabi_dmul+0x294>
 80018f4:	2c00      	cmp	r4, #0
 80018f6:	d100      	bne.n	80018fa <__aeabi_dmul+0x19a>
 80018f8:	e1ad      	b.n	8001c56 <__aeabi_dmul+0x4f6>
 80018fa:	0020      	movs	r0, r4
 80018fc:	f000 ff2c 	bl	8002758 <__clzsi2>
 8001900:	0002      	movs	r2, r0
 8001902:	0003      	movs	r3, r0
 8001904:	3a0b      	subs	r2, #11
 8001906:	201d      	movs	r0, #29
 8001908:	0019      	movs	r1, r3
 800190a:	1a82      	subs	r2, r0, r2
 800190c:	0030      	movs	r0, r6
 800190e:	3908      	subs	r1, #8
 8001910:	40d0      	lsrs	r0, r2
 8001912:	408c      	lsls	r4, r1
 8001914:	4304      	orrs	r4, r0
 8001916:	0030      	movs	r0, r6
 8001918:	4088      	lsls	r0, r1
 800191a:	4a5b      	ldr	r2, [pc, #364]	@ (8001a88 <__aeabi_dmul+0x328>)
 800191c:	1aeb      	subs	r3, r5, r3
 800191e:	4694      	mov	ip, r2
 8001920:	4463      	add	r3, ip
 8001922:	1c5a      	adds	r2, r3, #1
 8001924:	9201      	str	r2, [sp, #4]
 8001926:	4642      	mov	r2, r8
 8001928:	2600      	movs	r6, #0
 800192a:	2a0a      	cmp	r2, #10
 800192c:	dc00      	bgt.n	8001930 <__aeabi_dmul+0x1d0>
 800192e:	e75a      	b.n	80017e6 <__aeabi_dmul+0x86>
 8001930:	e79c      	b.n	800186c <__aeabi_dmul+0x10c>
 8001932:	4653      	mov	r3, sl
 8001934:	4303      	orrs	r3, r0
 8001936:	4699      	mov	r9, r3
 8001938:	d054      	beq.n	80019e4 <__aeabi_dmul+0x284>
 800193a:	4653      	mov	r3, sl
 800193c:	2b00      	cmp	r3, #0
 800193e:	d100      	bne.n	8001942 <__aeabi_dmul+0x1e2>
 8001940:	e177      	b.n	8001c32 <__aeabi_dmul+0x4d2>
 8001942:	4650      	mov	r0, sl
 8001944:	f000 ff08 	bl	8002758 <__clzsi2>
 8001948:	230b      	movs	r3, #11
 800194a:	425b      	negs	r3, r3
 800194c:	469c      	mov	ip, r3
 800194e:	0002      	movs	r2, r0
 8001950:	4484      	add	ip, r0
 8001952:	0011      	movs	r1, r2
 8001954:	4650      	mov	r0, sl
 8001956:	3908      	subs	r1, #8
 8001958:	4088      	lsls	r0, r1
 800195a:	231d      	movs	r3, #29
 800195c:	4680      	mov	r8, r0
 800195e:	4660      	mov	r0, ip
 8001960:	1a1b      	subs	r3, r3, r0
 8001962:	0020      	movs	r0, r4
 8001964:	40d8      	lsrs	r0, r3
 8001966:	0003      	movs	r3, r0
 8001968:	4640      	mov	r0, r8
 800196a:	4303      	orrs	r3, r0
 800196c:	469a      	mov	sl, r3
 800196e:	0023      	movs	r3, r4
 8001970:	408b      	lsls	r3, r1
 8001972:	4699      	mov	r9, r3
 8001974:	2300      	movs	r3, #0
 8001976:	4d44      	ldr	r5, [pc, #272]	@ (8001a88 <__aeabi_dmul+0x328>)
 8001978:	4698      	mov	r8, r3
 800197a:	1aad      	subs	r5, r5, r2
 800197c:	9302      	str	r3, [sp, #8]
 800197e:	e715      	b.n	80017ac <__aeabi_dmul+0x4c>
 8001980:	4652      	mov	r2, sl
 8001982:	4302      	orrs	r2, r0
 8001984:	4691      	mov	r9, r2
 8001986:	d126      	bne.n	80019d6 <__aeabi_dmul+0x276>
 8001988:	2200      	movs	r2, #0
 800198a:	001d      	movs	r5, r3
 800198c:	2302      	movs	r3, #2
 800198e:	4692      	mov	sl, r2
 8001990:	3208      	adds	r2, #8
 8001992:	4690      	mov	r8, r2
 8001994:	9302      	str	r3, [sp, #8]
 8001996:	e709      	b.n	80017ac <__aeabi_dmul+0x4c>
 8001998:	2400      	movs	r4, #0
 800199a:	2200      	movs	r2, #0
 800199c:	4b35      	ldr	r3, [pc, #212]	@ (8001a74 <__aeabi_dmul+0x314>)
 800199e:	e735      	b.n	800180c <__aeabi_dmul+0xac>
 80019a0:	2300      	movs	r3, #0
 80019a2:	2480      	movs	r4, #128	@ 0x80
 80019a4:	469b      	mov	fp, r3
 80019a6:	0324      	lsls	r4, r4, #12
 80019a8:	4b32      	ldr	r3, [pc, #200]	@ (8001a74 <__aeabi_dmul+0x314>)
 80019aa:	e72f      	b.n	800180c <__aeabi_dmul+0xac>
 80019ac:	2202      	movs	r2, #2
 80019ae:	4641      	mov	r1, r8
 80019b0:	4311      	orrs	r1, r2
 80019b2:	2280      	movs	r2, #128	@ 0x80
 80019b4:	0112      	lsls	r2, r2, #4
 80019b6:	4694      	mov	ip, r2
 80019b8:	002a      	movs	r2, r5
 80019ba:	4462      	add	r2, ip
 80019bc:	4688      	mov	r8, r1
 80019be:	9201      	str	r2, [sp, #4]
 80019c0:	290a      	cmp	r1, #10
 80019c2:	dd00      	ble.n	80019c6 <__aeabi_dmul+0x266>
 80019c4:	e752      	b.n	800186c <__aeabi_dmul+0x10c>
 80019c6:	465a      	mov	r2, fp
 80019c8:	2000      	movs	r0, #0
 80019ca:	9900      	ldr	r1, [sp, #0]
 80019cc:	0004      	movs	r4, r0
 80019ce:	404a      	eors	r2, r1
 80019d0:	4693      	mov	fp, r2
 80019d2:	2602      	movs	r6, #2
 80019d4:	e70b      	b.n	80017ee <__aeabi_dmul+0x8e>
 80019d6:	220c      	movs	r2, #12
 80019d8:	001d      	movs	r5, r3
 80019da:	2303      	movs	r3, #3
 80019dc:	4681      	mov	r9, r0
 80019de:	4690      	mov	r8, r2
 80019e0:	9302      	str	r3, [sp, #8]
 80019e2:	e6e3      	b.n	80017ac <__aeabi_dmul+0x4c>
 80019e4:	2300      	movs	r3, #0
 80019e6:	469a      	mov	sl, r3
 80019e8:	3304      	adds	r3, #4
 80019ea:	4698      	mov	r8, r3
 80019ec:	3b03      	subs	r3, #3
 80019ee:	2500      	movs	r5, #0
 80019f0:	9302      	str	r3, [sp, #8]
 80019f2:	e6db      	b.n	80017ac <__aeabi_dmul+0x4c>
 80019f4:	4642      	mov	r2, r8
 80019f6:	3301      	adds	r3, #1
 80019f8:	431a      	orrs	r2, r3
 80019fa:	002b      	movs	r3, r5
 80019fc:	4690      	mov	r8, r2
 80019fe:	1c5a      	adds	r2, r3, #1
 8001a00:	9201      	str	r2, [sp, #4]
 8001a02:	4642      	mov	r2, r8
 8001a04:	2400      	movs	r4, #0
 8001a06:	2000      	movs	r0, #0
 8001a08:	2601      	movs	r6, #1
 8001a0a:	2a0a      	cmp	r2, #10
 8001a0c:	dc00      	bgt.n	8001a10 <__aeabi_dmul+0x2b0>
 8001a0e:	e6ea      	b.n	80017e6 <__aeabi_dmul+0x86>
 8001a10:	e72c      	b.n	800186c <__aeabi_dmul+0x10c>
 8001a12:	2201      	movs	r2, #1
 8001a14:	1ad2      	subs	r2, r2, r3
 8001a16:	2a38      	cmp	r2, #56	@ 0x38
 8001a18:	dd00      	ble.n	8001a1c <__aeabi_dmul+0x2bc>
 8001a1a:	e6f4      	b.n	8001806 <__aeabi_dmul+0xa6>
 8001a1c:	2a1f      	cmp	r2, #31
 8001a1e:	dc00      	bgt.n	8001a22 <__aeabi_dmul+0x2c2>
 8001a20:	e12a      	b.n	8001c78 <__aeabi_dmul+0x518>
 8001a22:	211f      	movs	r1, #31
 8001a24:	4249      	negs	r1, r1
 8001a26:	1acb      	subs	r3, r1, r3
 8001a28:	0021      	movs	r1, r4
 8001a2a:	40d9      	lsrs	r1, r3
 8001a2c:	000b      	movs	r3, r1
 8001a2e:	2a20      	cmp	r2, #32
 8001a30:	d005      	beq.n	8001a3e <__aeabi_dmul+0x2de>
 8001a32:	4a16      	ldr	r2, [pc, #88]	@ (8001a8c <__aeabi_dmul+0x32c>)
 8001a34:	9d01      	ldr	r5, [sp, #4]
 8001a36:	4694      	mov	ip, r2
 8001a38:	4465      	add	r5, ip
 8001a3a:	40ac      	lsls	r4, r5
 8001a3c:	4320      	orrs	r0, r4
 8001a3e:	1e42      	subs	r2, r0, #1
 8001a40:	4190      	sbcs	r0, r2
 8001a42:	4318      	orrs	r0, r3
 8001a44:	2307      	movs	r3, #7
 8001a46:	0019      	movs	r1, r3
 8001a48:	2400      	movs	r4, #0
 8001a4a:	4001      	ands	r1, r0
 8001a4c:	4203      	tst	r3, r0
 8001a4e:	d00c      	beq.n	8001a6a <__aeabi_dmul+0x30a>
 8001a50:	230f      	movs	r3, #15
 8001a52:	4003      	ands	r3, r0
 8001a54:	2b04      	cmp	r3, #4
 8001a56:	d100      	bne.n	8001a5a <__aeabi_dmul+0x2fa>
 8001a58:	e140      	b.n	8001cdc <__aeabi_dmul+0x57c>
 8001a5a:	1d03      	adds	r3, r0, #4
 8001a5c:	4283      	cmp	r3, r0
 8001a5e:	41a4      	sbcs	r4, r4
 8001a60:	0018      	movs	r0, r3
 8001a62:	4264      	negs	r4, r4
 8001a64:	0761      	lsls	r1, r4, #29
 8001a66:	0264      	lsls	r4, r4, #9
 8001a68:	0b24      	lsrs	r4, r4, #12
 8001a6a:	08c2      	lsrs	r2, r0, #3
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	e6cc      	b.n	800180c <__aeabi_dmul+0xac>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	fffffc01 	.word	0xfffffc01
 8001a7c:	000003ff 	.word	0x000003ff
 8001a80:	feffffff 	.word	0xfeffffff
 8001a84:	000007fe 	.word	0x000007fe
 8001a88:	fffffc0d 	.word	0xfffffc0d
 8001a8c:	0000043e 	.word	0x0000043e
 8001a90:	4649      	mov	r1, r9
 8001a92:	464a      	mov	r2, r9
 8001a94:	0409      	lsls	r1, r1, #16
 8001a96:	0c09      	lsrs	r1, r1, #16
 8001a98:	000d      	movs	r5, r1
 8001a9a:	0c16      	lsrs	r6, r2, #16
 8001a9c:	0c02      	lsrs	r2, r0, #16
 8001a9e:	0400      	lsls	r0, r0, #16
 8001aa0:	0c00      	lsrs	r0, r0, #16
 8001aa2:	4345      	muls	r5, r0
 8001aa4:	46ac      	mov	ip, r5
 8001aa6:	0005      	movs	r5, r0
 8001aa8:	4375      	muls	r5, r6
 8001aaa:	46a8      	mov	r8, r5
 8001aac:	0015      	movs	r5, r2
 8001aae:	000f      	movs	r7, r1
 8001ab0:	4375      	muls	r5, r6
 8001ab2:	9200      	str	r2, [sp, #0]
 8001ab4:	9502      	str	r5, [sp, #8]
 8001ab6:	002a      	movs	r2, r5
 8001ab8:	9d00      	ldr	r5, [sp, #0]
 8001aba:	436f      	muls	r7, r5
 8001abc:	4665      	mov	r5, ip
 8001abe:	0c2d      	lsrs	r5, r5, #16
 8001ac0:	46a9      	mov	r9, r5
 8001ac2:	4447      	add	r7, r8
 8001ac4:	444f      	add	r7, r9
 8001ac6:	45b8      	cmp	r8, r7
 8001ac8:	d905      	bls.n	8001ad6 <__aeabi_dmul+0x376>
 8001aca:	0015      	movs	r5, r2
 8001acc:	2280      	movs	r2, #128	@ 0x80
 8001ace:	0252      	lsls	r2, r2, #9
 8001ad0:	4690      	mov	r8, r2
 8001ad2:	4445      	add	r5, r8
 8001ad4:	9502      	str	r5, [sp, #8]
 8001ad6:	0c3d      	lsrs	r5, r7, #16
 8001ad8:	9503      	str	r5, [sp, #12]
 8001ada:	4665      	mov	r5, ip
 8001adc:	042d      	lsls	r5, r5, #16
 8001ade:	043f      	lsls	r7, r7, #16
 8001ae0:	0c2d      	lsrs	r5, r5, #16
 8001ae2:	46ac      	mov	ip, r5
 8001ae4:	003d      	movs	r5, r7
 8001ae6:	4465      	add	r5, ip
 8001ae8:	9504      	str	r5, [sp, #16]
 8001aea:	0c25      	lsrs	r5, r4, #16
 8001aec:	0424      	lsls	r4, r4, #16
 8001aee:	0c24      	lsrs	r4, r4, #16
 8001af0:	46ac      	mov	ip, r5
 8001af2:	0025      	movs	r5, r4
 8001af4:	4375      	muls	r5, r6
 8001af6:	46a8      	mov	r8, r5
 8001af8:	4665      	mov	r5, ip
 8001afa:	000f      	movs	r7, r1
 8001afc:	4369      	muls	r1, r5
 8001afe:	4441      	add	r1, r8
 8001b00:	4689      	mov	r9, r1
 8001b02:	4367      	muls	r7, r4
 8001b04:	0c39      	lsrs	r1, r7, #16
 8001b06:	4449      	add	r1, r9
 8001b08:	436e      	muls	r6, r5
 8001b0a:	4588      	cmp	r8, r1
 8001b0c:	d903      	bls.n	8001b16 <__aeabi_dmul+0x3b6>
 8001b0e:	2280      	movs	r2, #128	@ 0x80
 8001b10:	0252      	lsls	r2, r2, #9
 8001b12:	4690      	mov	r8, r2
 8001b14:	4446      	add	r6, r8
 8001b16:	0c0d      	lsrs	r5, r1, #16
 8001b18:	46a8      	mov	r8, r5
 8001b1a:	0035      	movs	r5, r6
 8001b1c:	4445      	add	r5, r8
 8001b1e:	9505      	str	r5, [sp, #20]
 8001b20:	9d03      	ldr	r5, [sp, #12]
 8001b22:	043f      	lsls	r7, r7, #16
 8001b24:	46a8      	mov	r8, r5
 8001b26:	0c3f      	lsrs	r7, r7, #16
 8001b28:	0409      	lsls	r1, r1, #16
 8001b2a:	19c9      	adds	r1, r1, r7
 8001b2c:	4488      	add	r8, r1
 8001b2e:	4645      	mov	r5, r8
 8001b30:	9503      	str	r5, [sp, #12]
 8001b32:	4655      	mov	r5, sl
 8001b34:	042e      	lsls	r6, r5, #16
 8001b36:	0c36      	lsrs	r6, r6, #16
 8001b38:	0c2f      	lsrs	r7, r5, #16
 8001b3a:	0035      	movs	r5, r6
 8001b3c:	4345      	muls	r5, r0
 8001b3e:	4378      	muls	r0, r7
 8001b40:	4681      	mov	r9, r0
 8001b42:	0038      	movs	r0, r7
 8001b44:	46a8      	mov	r8, r5
 8001b46:	0c2d      	lsrs	r5, r5, #16
 8001b48:	46aa      	mov	sl, r5
 8001b4a:	9a00      	ldr	r2, [sp, #0]
 8001b4c:	4350      	muls	r0, r2
 8001b4e:	4372      	muls	r2, r6
 8001b50:	444a      	add	r2, r9
 8001b52:	4452      	add	r2, sl
 8001b54:	4591      	cmp	r9, r2
 8001b56:	d903      	bls.n	8001b60 <__aeabi_dmul+0x400>
 8001b58:	2580      	movs	r5, #128	@ 0x80
 8001b5a:	026d      	lsls	r5, r5, #9
 8001b5c:	46a9      	mov	r9, r5
 8001b5e:	4448      	add	r0, r9
 8001b60:	0c15      	lsrs	r5, r2, #16
 8001b62:	46a9      	mov	r9, r5
 8001b64:	4645      	mov	r5, r8
 8001b66:	042d      	lsls	r5, r5, #16
 8001b68:	0c2d      	lsrs	r5, r5, #16
 8001b6a:	46a8      	mov	r8, r5
 8001b6c:	4665      	mov	r5, ip
 8001b6e:	437d      	muls	r5, r7
 8001b70:	0412      	lsls	r2, r2, #16
 8001b72:	4448      	add	r0, r9
 8001b74:	4490      	add	r8, r2
 8001b76:	46a9      	mov	r9, r5
 8001b78:	0032      	movs	r2, r6
 8001b7a:	4665      	mov	r5, ip
 8001b7c:	4362      	muls	r2, r4
 8001b7e:	436e      	muls	r6, r5
 8001b80:	437c      	muls	r4, r7
 8001b82:	0c17      	lsrs	r7, r2, #16
 8001b84:	1936      	adds	r6, r6, r4
 8001b86:	19bf      	adds	r7, r7, r6
 8001b88:	42bc      	cmp	r4, r7
 8001b8a:	d903      	bls.n	8001b94 <__aeabi_dmul+0x434>
 8001b8c:	2480      	movs	r4, #128	@ 0x80
 8001b8e:	0264      	lsls	r4, r4, #9
 8001b90:	46a4      	mov	ip, r4
 8001b92:	44e1      	add	r9, ip
 8001b94:	9c02      	ldr	r4, [sp, #8]
 8001b96:	9e03      	ldr	r6, [sp, #12]
 8001b98:	46a4      	mov	ip, r4
 8001b9a:	9d05      	ldr	r5, [sp, #20]
 8001b9c:	4466      	add	r6, ip
 8001b9e:	428e      	cmp	r6, r1
 8001ba0:	4189      	sbcs	r1, r1
 8001ba2:	46ac      	mov	ip, r5
 8001ba4:	0412      	lsls	r2, r2, #16
 8001ba6:	043c      	lsls	r4, r7, #16
 8001ba8:	0c12      	lsrs	r2, r2, #16
 8001baa:	18a2      	adds	r2, r4, r2
 8001bac:	4462      	add	r2, ip
 8001bae:	4249      	negs	r1, r1
 8001bb0:	1854      	adds	r4, r2, r1
 8001bb2:	4446      	add	r6, r8
 8001bb4:	46a4      	mov	ip, r4
 8001bb6:	4546      	cmp	r6, r8
 8001bb8:	41a4      	sbcs	r4, r4
 8001bba:	4682      	mov	sl, r0
 8001bbc:	4264      	negs	r4, r4
 8001bbe:	46a0      	mov	r8, r4
 8001bc0:	42aa      	cmp	r2, r5
 8001bc2:	4192      	sbcs	r2, r2
 8001bc4:	458c      	cmp	ip, r1
 8001bc6:	4189      	sbcs	r1, r1
 8001bc8:	44e2      	add	sl, ip
 8001bca:	44d0      	add	r8, sl
 8001bcc:	4249      	negs	r1, r1
 8001bce:	4252      	negs	r2, r2
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	45a0      	cmp	r8, r4
 8001bd4:	41a4      	sbcs	r4, r4
 8001bd6:	4582      	cmp	sl, r0
 8001bd8:	4189      	sbcs	r1, r1
 8001bda:	4264      	negs	r4, r4
 8001bdc:	4249      	negs	r1, r1
 8001bde:	430c      	orrs	r4, r1
 8001be0:	4641      	mov	r1, r8
 8001be2:	0c3f      	lsrs	r7, r7, #16
 8001be4:	19d2      	adds	r2, r2, r7
 8001be6:	1912      	adds	r2, r2, r4
 8001be8:	0dcc      	lsrs	r4, r1, #23
 8001bea:	9904      	ldr	r1, [sp, #16]
 8001bec:	0270      	lsls	r0, r6, #9
 8001bee:	4308      	orrs	r0, r1
 8001bf0:	1e41      	subs	r1, r0, #1
 8001bf2:	4188      	sbcs	r0, r1
 8001bf4:	4641      	mov	r1, r8
 8001bf6:	444a      	add	r2, r9
 8001bf8:	0df6      	lsrs	r6, r6, #23
 8001bfa:	0252      	lsls	r2, r2, #9
 8001bfc:	4330      	orrs	r0, r6
 8001bfe:	0249      	lsls	r1, r1, #9
 8001c00:	4314      	orrs	r4, r2
 8001c02:	4308      	orrs	r0, r1
 8001c04:	01d2      	lsls	r2, r2, #7
 8001c06:	d535      	bpl.n	8001c74 <__aeabi_dmul+0x514>
 8001c08:	2201      	movs	r2, #1
 8001c0a:	0843      	lsrs	r3, r0, #1
 8001c0c:	4002      	ands	r2, r0
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	07e0      	lsls	r0, r4, #31
 8001c12:	4318      	orrs	r0, r3
 8001c14:	0864      	lsrs	r4, r4, #1
 8001c16:	e634      	b.n	8001882 <__aeabi_dmul+0x122>
 8001c18:	9b00      	ldr	r3, [sp, #0]
 8001c1a:	46a2      	mov	sl, r4
 8001c1c:	469b      	mov	fp, r3
 8001c1e:	4681      	mov	r9, r0
 8001c20:	2480      	movs	r4, #128	@ 0x80
 8001c22:	4653      	mov	r3, sl
 8001c24:	0324      	lsls	r4, r4, #12
 8001c26:	431c      	orrs	r4, r3
 8001c28:	0324      	lsls	r4, r4, #12
 8001c2a:	464a      	mov	r2, r9
 8001c2c:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce8 <__aeabi_dmul+0x588>)
 8001c2e:	0b24      	lsrs	r4, r4, #12
 8001c30:	e5ec      	b.n	800180c <__aeabi_dmul+0xac>
 8001c32:	f000 fd91 	bl	8002758 <__clzsi2>
 8001c36:	2315      	movs	r3, #21
 8001c38:	469c      	mov	ip, r3
 8001c3a:	4484      	add	ip, r0
 8001c3c:	0002      	movs	r2, r0
 8001c3e:	4663      	mov	r3, ip
 8001c40:	3220      	adds	r2, #32
 8001c42:	2b1c      	cmp	r3, #28
 8001c44:	dc00      	bgt.n	8001c48 <__aeabi_dmul+0x4e8>
 8001c46:	e684      	b.n	8001952 <__aeabi_dmul+0x1f2>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	4699      	mov	r9, r3
 8001c4c:	0023      	movs	r3, r4
 8001c4e:	3808      	subs	r0, #8
 8001c50:	4083      	lsls	r3, r0
 8001c52:	469a      	mov	sl, r3
 8001c54:	e68e      	b.n	8001974 <__aeabi_dmul+0x214>
 8001c56:	f000 fd7f 	bl	8002758 <__clzsi2>
 8001c5a:	0002      	movs	r2, r0
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	3215      	adds	r2, #21
 8001c60:	3320      	adds	r3, #32
 8001c62:	2a1c      	cmp	r2, #28
 8001c64:	dc00      	bgt.n	8001c68 <__aeabi_dmul+0x508>
 8001c66:	e64e      	b.n	8001906 <__aeabi_dmul+0x1a6>
 8001c68:	0002      	movs	r2, r0
 8001c6a:	0034      	movs	r4, r6
 8001c6c:	3a08      	subs	r2, #8
 8001c6e:	2000      	movs	r0, #0
 8001c70:	4094      	lsls	r4, r2
 8001c72:	e652      	b.n	800191a <__aeabi_dmul+0x1ba>
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	e604      	b.n	8001882 <__aeabi_dmul+0x122>
 8001c78:	4b1c      	ldr	r3, [pc, #112]	@ (8001cec <__aeabi_dmul+0x58c>)
 8001c7a:	0021      	movs	r1, r4
 8001c7c:	469c      	mov	ip, r3
 8001c7e:	0003      	movs	r3, r0
 8001c80:	9d01      	ldr	r5, [sp, #4]
 8001c82:	40d3      	lsrs	r3, r2
 8001c84:	4465      	add	r5, ip
 8001c86:	40a9      	lsls	r1, r5
 8001c88:	4319      	orrs	r1, r3
 8001c8a:	0003      	movs	r3, r0
 8001c8c:	40ab      	lsls	r3, r5
 8001c8e:	1e58      	subs	r0, r3, #1
 8001c90:	4183      	sbcs	r3, r0
 8001c92:	4319      	orrs	r1, r3
 8001c94:	0008      	movs	r0, r1
 8001c96:	40d4      	lsrs	r4, r2
 8001c98:	074b      	lsls	r3, r1, #29
 8001c9a:	d009      	beq.n	8001cb0 <__aeabi_dmul+0x550>
 8001c9c:	230f      	movs	r3, #15
 8001c9e:	400b      	ands	r3, r1
 8001ca0:	2b04      	cmp	r3, #4
 8001ca2:	d005      	beq.n	8001cb0 <__aeabi_dmul+0x550>
 8001ca4:	1d0b      	adds	r3, r1, #4
 8001ca6:	428b      	cmp	r3, r1
 8001ca8:	4180      	sbcs	r0, r0
 8001caa:	4240      	negs	r0, r0
 8001cac:	1824      	adds	r4, r4, r0
 8001cae:	0018      	movs	r0, r3
 8001cb0:	0223      	lsls	r3, r4, #8
 8001cb2:	d400      	bmi.n	8001cb6 <__aeabi_dmul+0x556>
 8001cb4:	e6d6      	b.n	8001a64 <__aeabi_dmul+0x304>
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	2400      	movs	r4, #0
 8001cba:	2200      	movs	r2, #0
 8001cbc:	e5a6      	b.n	800180c <__aeabi_dmul+0xac>
 8001cbe:	290f      	cmp	r1, #15
 8001cc0:	d1aa      	bne.n	8001c18 <__aeabi_dmul+0x4b8>
 8001cc2:	2380      	movs	r3, #128	@ 0x80
 8001cc4:	4652      	mov	r2, sl
 8001cc6:	031b      	lsls	r3, r3, #12
 8001cc8:	421a      	tst	r2, r3
 8001cca:	d0a9      	beq.n	8001c20 <__aeabi_dmul+0x4c0>
 8001ccc:	421c      	tst	r4, r3
 8001cce:	d1a7      	bne.n	8001c20 <__aeabi_dmul+0x4c0>
 8001cd0:	431c      	orrs	r4, r3
 8001cd2:	9b00      	ldr	r3, [sp, #0]
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	469b      	mov	fp, r3
 8001cd8:	4b03      	ldr	r3, [pc, #12]	@ (8001ce8 <__aeabi_dmul+0x588>)
 8001cda:	e597      	b.n	800180c <__aeabi_dmul+0xac>
 8001cdc:	2400      	movs	r4, #0
 8001cde:	e6c1      	b.n	8001a64 <__aeabi_dmul+0x304>
 8001ce0:	2400      	movs	r4, #0
 8001ce2:	4b01      	ldr	r3, [pc, #4]	@ (8001ce8 <__aeabi_dmul+0x588>)
 8001ce4:	0022      	movs	r2, r4
 8001ce6:	e591      	b.n	800180c <__aeabi_dmul+0xac>
 8001ce8:	000007ff 	.word	0x000007ff
 8001cec:	0000041e 	.word	0x0000041e

08001cf0 <__aeabi_dsub>:
 8001cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cf2:	464e      	mov	r6, r9
 8001cf4:	4645      	mov	r5, r8
 8001cf6:	46de      	mov	lr, fp
 8001cf8:	4657      	mov	r7, sl
 8001cfa:	b5e0      	push	{r5, r6, r7, lr}
 8001cfc:	b085      	sub	sp, #20
 8001cfe:	9000      	str	r0, [sp, #0]
 8001d00:	9101      	str	r1, [sp, #4]
 8001d02:	030c      	lsls	r4, r1, #12
 8001d04:	004f      	lsls	r7, r1, #1
 8001d06:	0fce      	lsrs	r6, r1, #31
 8001d08:	0a61      	lsrs	r1, r4, #9
 8001d0a:	9c00      	ldr	r4, [sp, #0]
 8001d0c:	46b0      	mov	r8, r6
 8001d0e:	0f64      	lsrs	r4, r4, #29
 8001d10:	430c      	orrs	r4, r1
 8001d12:	9900      	ldr	r1, [sp, #0]
 8001d14:	0d7f      	lsrs	r7, r7, #21
 8001d16:	00c8      	lsls	r0, r1, #3
 8001d18:	0011      	movs	r1, r2
 8001d1a:	001a      	movs	r2, r3
 8001d1c:	031b      	lsls	r3, r3, #12
 8001d1e:	469c      	mov	ip, r3
 8001d20:	9100      	str	r1, [sp, #0]
 8001d22:	9201      	str	r2, [sp, #4]
 8001d24:	0051      	lsls	r1, r2, #1
 8001d26:	0d4b      	lsrs	r3, r1, #21
 8001d28:	4699      	mov	r9, r3
 8001d2a:	9b01      	ldr	r3, [sp, #4]
 8001d2c:	9d00      	ldr	r5, [sp, #0]
 8001d2e:	0fd9      	lsrs	r1, r3, #31
 8001d30:	4663      	mov	r3, ip
 8001d32:	0f6a      	lsrs	r2, r5, #29
 8001d34:	0a5b      	lsrs	r3, r3, #9
 8001d36:	4313      	orrs	r3, r2
 8001d38:	00ea      	lsls	r2, r5, #3
 8001d3a:	4694      	mov	ip, r2
 8001d3c:	4693      	mov	fp, r2
 8001d3e:	4ac1      	ldr	r2, [pc, #772]	@ (8002044 <__aeabi_dsub+0x354>)
 8001d40:	9003      	str	r0, [sp, #12]
 8001d42:	9302      	str	r3, [sp, #8]
 8001d44:	4591      	cmp	r9, r2
 8001d46:	d100      	bne.n	8001d4a <__aeabi_dsub+0x5a>
 8001d48:	e0cd      	b.n	8001ee6 <__aeabi_dsub+0x1f6>
 8001d4a:	2501      	movs	r5, #1
 8001d4c:	4069      	eors	r1, r5
 8001d4e:	464d      	mov	r5, r9
 8001d50:	1b7d      	subs	r5, r7, r5
 8001d52:	46aa      	mov	sl, r5
 8001d54:	428e      	cmp	r6, r1
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x6a>
 8001d58:	e080      	b.n	8001e5c <__aeabi_dsub+0x16c>
 8001d5a:	2d00      	cmp	r5, #0
 8001d5c:	dc00      	bgt.n	8001d60 <__aeabi_dsub+0x70>
 8001d5e:	e335      	b.n	80023cc <__aeabi_dsub+0x6dc>
 8001d60:	4649      	mov	r1, r9
 8001d62:	2900      	cmp	r1, #0
 8001d64:	d100      	bne.n	8001d68 <__aeabi_dsub+0x78>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_dsub+0x238>
 8001d68:	4297      	cmp	r7, r2
 8001d6a:	d100      	bne.n	8001d6e <__aeabi_dsub+0x7e>
 8001d6c:	e194      	b.n	8002098 <__aeabi_dsub+0x3a8>
 8001d6e:	4652      	mov	r2, sl
 8001d70:	2501      	movs	r5, #1
 8001d72:	2a38      	cmp	r2, #56	@ 0x38
 8001d74:	dc19      	bgt.n	8001daa <__aeabi_dsub+0xba>
 8001d76:	2280      	movs	r2, #128	@ 0x80
 8001d78:	9b02      	ldr	r3, [sp, #8]
 8001d7a:	0412      	lsls	r2, r2, #16
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	9302      	str	r3, [sp, #8]
 8001d80:	4652      	mov	r2, sl
 8001d82:	2a1f      	cmp	r2, #31
 8001d84:	dd00      	ble.n	8001d88 <__aeabi_dsub+0x98>
 8001d86:	e1e3      	b.n	8002150 <__aeabi_dsub+0x460>
 8001d88:	4653      	mov	r3, sl
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	4661      	mov	r1, ip
 8001d8e:	9d02      	ldr	r5, [sp, #8]
 8001d90:	1ad2      	subs	r2, r2, r3
 8001d92:	4095      	lsls	r5, r2
 8001d94:	40d9      	lsrs	r1, r3
 8001d96:	430d      	orrs	r5, r1
 8001d98:	4661      	mov	r1, ip
 8001d9a:	4091      	lsls	r1, r2
 8001d9c:	000a      	movs	r2, r1
 8001d9e:	1e51      	subs	r1, r2, #1
 8001da0:	418a      	sbcs	r2, r1
 8001da2:	4315      	orrs	r5, r2
 8001da4:	9a02      	ldr	r2, [sp, #8]
 8001da6:	40da      	lsrs	r2, r3
 8001da8:	1aa4      	subs	r4, r4, r2
 8001daa:	1b45      	subs	r5, r0, r5
 8001dac:	42a8      	cmp	r0, r5
 8001dae:	4180      	sbcs	r0, r0
 8001db0:	4240      	negs	r0, r0
 8001db2:	1a24      	subs	r4, r4, r0
 8001db4:	0223      	lsls	r3, r4, #8
 8001db6:	d400      	bmi.n	8001dba <__aeabi_dsub+0xca>
 8001db8:	e13d      	b.n	8002036 <__aeabi_dsub+0x346>
 8001dba:	0264      	lsls	r4, r4, #9
 8001dbc:	0a64      	lsrs	r4, r4, #9
 8001dbe:	2c00      	cmp	r4, #0
 8001dc0:	d100      	bne.n	8001dc4 <__aeabi_dsub+0xd4>
 8001dc2:	e147      	b.n	8002054 <__aeabi_dsub+0x364>
 8001dc4:	0020      	movs	r0, r4
 8001dc6:	f000 fcc7 	bl	8002758 <__clzsi2>
 8001dca:	0003      	movs	r3, r0
 8001dcc:	3b08      	subs	r3, #8
 8001dce:	2120      	movs	r1, #32
 8001dd0:	0028      	movs	r0, r5
 8001dd2:	1aca      	subs	r2, r1, r3
 8001dd4:	40d0      	lsrs	r0, r2
 8001dd6:	409c      	lsls	r4, r3
 8001dd8:	0002      	movs	r2, r0
 8001dda:	409d      	lsls	r5, r3
 8001ddc:	4322      	orrs	r2, r4
 8001dde:	429f      	cmp	r7, r3
 8001de0:	dd00      	ble.n	8001de4 <__aeabi_dsub+0xf4>
 8001de2:	e177      	b.n	80020d4 <__aeabi_dsub+0x3e4>
 8001de4:	1bd8      	subs	r0, r3, r7
 8001de6:	3001      	adds	r0, #1
 8001de8:	1a09      	subs	r1, r1, r0
 8001dea:	002c      	movs	r4, r5
 8001dec:	408d      	lsls	r5, r1
 8001dee:	40c4      	lsrs	r4, r0
 8001df0:	1e6b      	subs	r3, r5, #1
 8001df2:	419d      	sbcs	r5, r3
 8001df4:	0013      	movs	r3, r2
 8001df6:	40c2      	lsrs	r2, r0
 8001df8:	408b      	lsls	r3, r1
 8001dfa:	4325      	orrs	r5, r4
 8001dfc:	2700      	movs	r7, #0
 8001dfe:	0014      	movs	r4, r2
 8001e00:	431d      	orrs	r5, r3
 8001e02:	076b      	lsls	r3, r5, #29
 8001e04:	d009      	beq.n	8001e1a <__aeabi_dsub+0x12a>
 8001e06:	230f      	movs	r3, #15
 8001e08:	402b      	ands	r3, r5
 8001e0a:	2b04      	cmp	r3, #4
 8001e0c:	d005      	beq.n	8001e1a <__aeabi_dsub+0x12a>
 8001e0e:	1d2b      	adds	r3, r5, #4
 8001e10:	42ab      	cmp	r3, r5
 8001e12:	41ad      	sbcs	r5, r5
 8001e14:	426d      	negs	r5, r5
 8001e16:	1964      	adds	r4, r4, r5
 8001e18:	001d      	movs	r5, r3
 8001e1a:	0223      	lsls	r3, r4, #8
 8001e1c:	d400      	bmi.n	8001e20 <__aeabi_dsub+0x130>
 8001e1e:	e140      	b.n	80020a2 <__aeabi_dsub+0x3b2>
 8001e20:	4a88      	ldr	r2, [pc, #544]	@ (8002044 <__aeabi_dsub+0x354>)
 8001e22:	3701      	adds	r7, #1
 8001e24:	4297      	cmp	r7, r2
 8001e26:	d100      	bne.n	8001e2a <__aeabi_dsub+0x13a>
 8001e28:	e101      	b.n	800202e <__aeabi_dsub+0x33e>
 8001e2a:	2601      	movs	r6, #1
 8001e2c:	4643      	mov	r3, r8
 8001e2e:	4986      	ldr	r1, [pc, #536]	@ (8002048 <__aeabi_dsub+0x358>)
 8001e30:	08ed      	lsrs	r5, r5, #3
 8001e32:	4021      	ands	r1, r4
 8001e34:	074a      	lsls	r2, r1, #29
 8001e36:	432a      	orrs	r2, r5
 8001e38:	057c      	lsls	r4, r7, #21
 8001e3a:	024d      	lsls	r5, r1, #9
 8001e3c:	0b2d      	lsrs	r5, r5, #12
 8001e3e:	0d64      	lsrs	r4, r4, #21
 8001e40:	401e      	ands	r6, r3
 8001e42:	0524      	lsls	r4, r4, #20
 8001e44:	432c      	orrs	r4, r5
 8001e46:	07f6      	lsls	r6, r6, #31
 8001e48:	4334      	orrs	r4, r6
 8001e4a:	0010      	movs	r0, r2
 8001e4c:	0021      	movs	r1, r4
 8001e4e:	b005      	add	sp, #20
 8001e50:	bcf0      	pop	{r4, r5, r6, r7}
 8001e52:	46bb      	mov	fp, r7
 8001e54:	46b2      	mov	sl, r6
 8001e56:	46a9      	mov	r9, r5
 8001e58:	46a0      	mov	r8, r4
 8001e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e5c:	2d00      	cmp	r5, #0
 8001e5e:	dc00      	bgt.n	8001e62 <__aeabi_dsub+0x172>
 8001e60:	e2d0      	b.n	8002404 <__aeabi_dsub+0x714>
 8001e62:	4649      	mov	r1, r9
 8001e64:	2900      	cmp	r1, #0
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x17a>
 8001e68:	e0d4      	b.n	8002014 <__aeabi_dsub+0x324>
 8001e6a:	4661      	mov	r1, ip
 8001e6c:	9b02      	ldr	r3, [sp, #8]
 8001e6e:	4319      	orrs	r1, r3
 8001e70:	d100      	bne.n	8001e74 <__aeabi_dsub+0x184>
 8001e72:	e12b      	b.n	80020cc <__aeabi_dsub+0x3dc>
 8001e74:	1e69      	subs	r1, r5, #1
 8001e76:	2d01      	cmp	r5, #1
 8001e78:	d100      	bne.n	8001e7c <__aeabi_dsub+0x18c>
 8001e7a:	e1d9      	b.n	8002230 <__aeabi_dsub+0x540>
 8001e7c:	4295      	cmp	r5, r2
 8001e7e:	d100      	bne.n	8001e82 <__aeabi_dsub+0x192>
 8001e80:	e10a      	b.n	8002098 <__aeabi_dsub+0x3a8>
 8001e82:	2501      	movs	r5, #1
 8001e84:	2938      	cmp	r1, #56	@ 0x38
 8001e86:	dc17      	bgt.n	8001eb8 <__aeabi_dsub+0x1c8>
 8001e88:	468a      	mov	sl, r1
 8001e8a:	4653      	mov	r3, sl
 8001e8c:	2b1f      	cmp	r3, #31
 8001e8e:	dd00      	ble.n	8001e92 <__aeabi_dsub+0x1a2>
 8001e90:	e1e7      	b.n	8002262 <__aeabi_dsub+0x572>
 8001e92:	2220      	movs	r2, #32
 8001e94:	1ad2      	subs	r2, r2, r3
 8001e96:	9b02      	ldr	r3, [sp, #8]
 8001e98:	4661      	mov	r1, ip
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	001d      	movs	r5, r3
 8001e9e:	4653      	mov	r3, sl
 8001ea0:	40d9      	lsrs	r1, r3
 8001ea2:	4663      	mov	r3, ip
 8001ea4:	4093      	lsls	r3, r2
 8001ea6:	001a      	movs	r2, r3
 8001ea8:	430d      	orrs	r5, r1
 8001eaa:	1e51      	subs	r1, r2, #1
 8001eac:	418a      	sbcs	r2, r1
 8001eae:	4653      	mov	r3, sl
 8001eb0:	4315      	orrs	r5, r2
 8001eb2:	9a02      	ldr	r2, [sp, #8]
 8001eb4:	40da      	lsrs	r2, r3
 8001eb6:	18a4      	adds	r4, r4, r2
 8001eb8:	182d      	adds	r5, r5, r0
 8001eba:	4285      	cmp	r5, r0
 8001ebc:	4180      	sbcs	r0, r0
 8001ebe:	4240      	negs	r0, r0
 8001ec0:	1824      	adds	r4, r4, r0
 8001ec2:	0223      	lsls	r3, r4, #8
 8001ec4:	d400      	bmi.n	8001ec8 <__aeabi_dsub+0x1d8>
 8001ec6:	e0b6      	b.n	8002036 <__aeabi_dsub+0x346>
 8001ec8:	4b5e      	ldr	r3, [pc, #376]	@ (8002044 <__aeabi_dsub+0x354>)
 8001eca:	3701      	adds	r7, #1
 8001ecc:	429f      	cmp	r7, r3
 8001ece:	d100      	bne.n	8001ed2 <__aeabi_dsub+0x1e2>
 8001ed0:	e0ad      	b.n	800202e <__aeabi_dsub+0x33e>
 8001ed2:	2101      	movs	r1, #1
 8001ed4:	4b5c      	ldr	r3, [pc, #368]	@ (8002048 <__aeabi_dsub+0x358>)
 8001ed6:	086a      	lsrs	r2, r5, #1
 8001ed8:	401c      	ands	r4, r3
 8001eda:	4029      	ands	r1, r5
 8001edc:	430a      	orrs	r2, r1
 8001ede:	07e5      	lsls	r5, r4, #31
 8001ee0:	4315      	orrs	r5, r2
 8001ee2:	0864      	lsrs	r4, r4, #1
 8001ee4:	e78d      	b.n	8001e02 <__aeabi_dsub+0x112>
 8001ee6:	4a59      	ldr	r2, [pc, #356]	@ (800204c <__aeabi_dsub+0x35c>)
 8001ee8:	9b02      	ldr	r3, [sp, #8]
 8001eea:	4692      	mov	sl, r2
 8001eec:	4662      	mov	r2, ip
 8001eee:	44ba      	add	sl, r7
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	d02c      	beq.n	8001f4e <__aeabi_dsub+0x25e>
 8001ef4:	428e      	cmp	r6, r1
 8001ef6:	d02e      	beq.n	8001f56 <__aeabi_dsub+0x266>
 8001ef8:	4652      	mov	r2, sl
 8001efa:	2a00      	cmp	r2, #0
 8001efc:	d060      	beq.n	8001fc0 <__aeabi_dsub+0x2d0>
 8001efe:	2f00      	cmp	r7, #0
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x214>
 8001f02:	e0db      	b.n	80020bc <__aeabi_dsub+0x3cc>
 8001f04:	4663      	mov	r3, ip
 8001f06:	000e      	movs	r6, r1
 8001f08:	9c02      	ldr	r4, [sp, #8]
 8001f0a:	08d8      	lsrs	r0, r3, #3
 8001f0c:	0762      	lsls	r2, r4, #29
 8001f0e:	4302      	orrs	r2, r0
 8001f10:	08e4      	lsrs	r4, r4, #3
 8001f12:	0013      	movs	r3, r2
 8001f14:	4323      	orrs	r3, r4
 8001f16:	d100      	bne.n	8001f1a <__aeabi_dsub+0x22a>
 8001f18:	e254      	b.n	80023c4 <__aeabi_dsub+0x6d4>
 8001f1a:	2580      	movs	r5, #128	@ 0x80
 8001f1c:	032d      	lsls	r5, r5, #12
 8001f1e:	4325      	orrs	r5, r4
 8001f20:	032d      	lsls	r5, r5, #12
 8001f22:	4c48      	ldr	r4, [pc, #288]	@ (8002044 <__aeabi_dsub+0x354>)
 8001f24:	0b2d      	lsrs	r5, r5, #12
 8001f26:	e78c      	b.n	8001e42 <__aeabi_dsub+0x152>
 8001f28:	4661      	mov	r1, ip
 8001f2a:	9b02      	ldr	r3, [sp, #8]
 8001f2c:	4319      	orrs	r1, r3
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x242>
 8001f30:	e0cc      	b.n	80020cc <__aeabi_dsub+0x3dc>
 8001f32:	0029      	movs	r1, r5
 8001f34:	3901      	subs	r1, #1
 8001f36:	2d01      	cmp	r5, #1
 8001f38:	d100      	bne.n	8001f3c <__aeabi_dsub+0x24c>
 8001f3a:	e188      	b.n	800224e <__aeabi_dsub+0x55e>
 8001f3c:	4295      	cmp	r5, r2
 8001f3e:	d100      	bne.n	8001f42 <__aeabi_dsub+0x252>
 8001f40:	e0aa      	b.n	8002098 <__aeabi_dsub+0x3a8>
 8001f42:	2501      	movs	r5, #1
 8001f44:	2938      	cmp	r1, #56	@ 0x38
 8001f46:	dd00      	ble.n	8001f4a <__aeabi_dsub+0x25a>
 8001f48:	e72f      	b.n	8001daa <__aeabi_dsub+0xba>
 8001f4a:	468a      	mov	sl, r1
 8001f4c:	e718      	b.n	8001d80 <__aeabi_dsub+0x90>
 8001f4e:	2201      	movs	r2, #1
 8001f50:	4051      	eors	r1, r2
 8001f52:	428e      	cmp	r6, r1
 8001f54:	d1d0      	bne.n	8001ef8 <__aeabi_dsub+0x208>
 8001f56:	4653      	mov	r3, sl
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d100      	bne.n	8001f5e <__aeabi_dsub+0x26e>
 8001f5c:	e0be      	b.n	80020dc <__aeabi_dsub+0x3ec>
 8001f5e:	2f00      	cmp	r7, #0
 8001f60:	d000      	beq.n	8001f64 <__aeabi_dsub+0x274>
 8001f62:	e138      	b.n	80021d6 <__aeabi_dsub+0x4e6>
 8001f64:	46ca      	mov	sl, r9
 8001f66:	0022      	movs	r2, r4
 8001f68:	4302      	orrs	r2, r0
 8001f6a:	d100      	bne.n	8001f6e <__aeabi_dsub+0x27e>
 8001f6c:	e1e2      	b.n	8002334 <__aeabi_dsub+0x644>
 8001f6e:	4653      	mov	r3, sl
 8001f70:	1e59      	subs	r1, r3, #1
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d100      	bne.n	8001f78 <__aeabi_dsub+0x288>
 8001f76:	e20d      	b.n	8002394 <__aeabi_dsub+0x6a4>
 8001f78:	4a32      	ldr	r2, [pc, #200]	@ (8002044 <__aeabi_dsub+0x354>)
 8001f7a:	4592      	cmp	sl, r2
 8001f7c:	d100      	bne.n	8001f80 <__aeabi_dsub+0x290>
 8001f7e:	e1d2      	b.n	8002326 <__aeabi_dsub+0x636>
 8001f80:	2701      	movs	r7, #1
 8001f82:	2938      	cmp	r1, #56	@ 0x38
 8001f84:	dc13      	bgt.n	8001fae <__aeabi_dsub+0x2be>
 8001f86:	291f      	cmp	r1, #31
 8001f88:	dd00      	ble.n	8001f8c <__aeabi_dsub+0x29c>
 8001f8a:	e1ee      	b.n	800236a <__aeabi_dsub+0x67a>
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	9b02      	ldr	r3, [sp, #8]
 8001f90:	1a52      	subs	r2, r2, r1
 8001f92:	0025      	movs	r5, r4
 8001f94:	0007      	movs	r7, r0
 8001f96:	469a      	mov	sl, r3
 8001f98:	40cc      	lsrs	r4, r1
 8001f9a:	4090      	lsls	r0, r2
 8001f9c:	4095      	lsls	r5, r2
 8001f9e:	40cf      	lsrs	r7, r1
 8001fa0:	44a2      	add	sl, r4
 8001fa2:	1e42      	subs	r2, r0, #1
 8001fa4:	4190      	sbcs	r0, r2
 8001fa6:	4653      	mov	r3, sl
 8001fa8:	432f      	orrs	r7, r5
 8001faa:	4307      	orrs	r7, r0
 8001fac:	9302      	str	r3, [sp, #8]
 8001fae:	003d      	movs	r5, r7
 8001fb0:	4465      	add	r5, ip
 8001fb2:	4565      	cmp	r5, ip
 8001fb4:	4192      	sbcs	r2, r2
 8001fb6:	9b02      	ldr	r3, [sp, #8]
 8001fb8:	4252      	negs	r2, r2
 8001fba:	464f      	mov	r7, r9
 8001fbc:	18d4      	adds	r4, r2, r3
 8001fbe:	e780      	b.n	8001ec2 <__aeabi_dsub+0x1d2>
 8001fc0:	4a23      	ldr	r2, [pc, #140]	@ (8002050 <__aeabi_dsub+0x360>)
 8001fc2:	1c7d      	adds	r5, r7, #1
 8001fc4:	4215      	tst	r5, r2
 8001fc6:	d000      	beq.n	8001fca <__aeabi_dsub+0x2da>
 8001fc8:	e0aa      	b.n	8002120 <__aeabi_dsub+0x430>
 8001fca:	4662      	mov	r2, ip
 8001fcc:	0025      	movs	r5, r4
 8001fce:	9b02      	ldr	r3, [sp, #8]
 8001fd0:	4305      	orrs	r5, r0
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	2f00      	cmp	r7, #0
 8001fd6:	d000      	beq.n	8001fda <__aeabi_dsub+0x2ea>
 8001fd8:	e0f5      	b.n	80021c6 <__aeabi_dsub+0x4d6>
 8001fda:	2d00      	cmp	r5, #0
 8001fdc:	d100      	bne.n	8001fe0 <__aeabi_dsub+0x2f0>
 8001fde:	e16b      	b.n	80022b8 <__aeabi_dsub+0x5c8>
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d100      	bne.n	8001fe6 <__aeabi_dsub+0x2f6>
 8001fe4:	e152      	b.n	800228c <__aeabi_dsub+0x59c>
 8001fe6:	4663      	mov	r3, ip
 8001fe8:	1ac5      	subs	r5, r0, r3
 8001fea:	9b02      	ldr	r3, [sp, #8]
 8001fec:	1ae2      	subs	r2, r4, r3
 8001fee:	42a8      	cmp	r0, r5
 8001ff0:	419b      	sbcs	r3, r3
 8001ff2:	425b      	negs	r3, r3
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	021a      	lsls	r2, r3, #8
 8001ff8:	d400      	bmi.n	8001ffc <__aeabi_dsub+0x30c>
 8001ffa:	e1d5      	b.n	80023a8 <__aeabi_dsub+0x6b8>
 8001ffc:	4663      	mov	r3, ip
 8001ffe:	1a1d      	subs	r5, r3, r0
 8002000:	45ac      	cmp	ip, r5
 8002002:	4192      	sbcs	r2, r2
 8002004:	2601      	movs	r6, #1
 8002006:	9b02      	ldr	r3, [sp, #8]
 8002008:	4252      	negs	r2, r2
 800200a:	1b1c      	subs	r4, r3, r4
 800200c:	4688      	mov	r8, r1
 800200e:	1aa4      	subs	r4, r4, r2
 8002010:	400e      	ands	r6, r1
 8002012:	e6f6      	b.n	8001e02 <__aeabi_dsub+0x112>
 8002014:	4297      	cmp	r7, r2
 8002016:	d03f      	beq.n	8002098 <__aeabi_dsub+0x3a8>
 8002018:	4652      	mov	r2, sl
 800201a:	2501      	movs	r5, #1
 800201c:	2a38      	cmp	r2, #56	@ 0x38
 800201e:	dd00      	ble.n	8002022 <__aeabi_dsub+0x332>
 8002020:	e74a      	b.n	8001eb8 <__aeabi_dsub+0x1c8>
 8002022:	2280      	movs	r2, #128	@ 0x80
 8002024:	9b02      	ldr	r3, [sp, #8]
 8002026:	0412      	lsls	r2, r2, #16
 8002028:	4313      	orrs	r3, r2
 800202a:	9302      	str	r3, [sp, #8]
 800202c:	e72d      	b.n	8001e8a <__aeabi_dsub+0x19a>
 800202e:	003c      	movs	r4, r7
 8002030:	2500      	movs	r5, #0
 8002032:	2200      	movs	r2, #0
 8002034:	e705      	b.n	8001e42 <__aeabi_dsub+0x152>
 8002036:	2307      	movs	r3, #7
 8002038:	402b      	ands	r3, r5
 800203a:	2b00      	cmp	r3, #0
 800203c:	d000      	beq.n	8002040 <__aeabi_dsub+0x350>
 800203e:	e6e2      	b.n	8001e06 <__aeabi_dsub+0x116>
 8002040:	e06b      	b.n	800211a <__aeabi_dsub+0x42a>
 8002042:	46c0      	nop			@ (mov r8, r8)
 8002044:	000007ff 	.word	0x000007ff
 8002048:	ff7fffff 	.word	0xff7fffff
 800204c:	fffff801 	.word	0xfffff801
 8002050:	000007fe 	.word	0x000007fe
 8002054:	0028      	movs	r0, r5
 8002056:	f000 fb7f 	bl	8002758 <__clzsi2>
 800205a:	0003      	movs	r3, r0
 800205c:	3318      	adds	r3, #24
 800205e:	2b1f      	cmp	r3, #31
 8002060:	dc00      	bgt.n	8002064 <__aeabi_dsub+0x374>
 8002062:	e6b4      	b.n	8001dce <__aeabi_dsub+0xde>
 8002064:	002a      	movs	r2, r5
 8002066:	3808      	subs	r0, #8
 8002068:	4082      	lsls	r2, r0
 800206a:	429f      	cmp	r7, r3
 800206c:	dd00      	ble.n	8002070 <__aeabi_dsub+0x380>
 800206e:	e0b9      	b.n	80021e4 <__aeabi_dsub+0x4f4>
 8002070:	1bdb      	subs	r3, r3, r7
 8002072:	1c58      	adds	r0, r3, #1
 8002074:	281f      	cmp	r0, #31
 8002076:	dc00      	bgt.n	800207a <__aeabi_dsub+0x38a>
 8002078:	e1a0      	b.n	80023bc <__aeabi_dsub+0x6cc>
 800207a:	0015      	movs	r5, r2
 800207c:	3b1f      	subs	r3, #31
 800207e:	40dd      	lsrs	r5, r3
 8002080:	2820      	cmp	r0, #32
 8002082:	d005      	beq.n	8002090 <__aeabi_dsub+0x3a0>
 8002084:	2340      	movs	r3, #64	@ 0x40
 8002086:	1a1b      	subs	r3, r3, r0
 8002088:	409a      	lsls	r2, r3
 800208a:	1e53      	subs	r3, r2, #1
 800208c:	419a      	sbcs	r2, r3
 800208e:	4315      	orrs	r5, r2
 8002090:	2307      	movs	r3, #7
 8002092:	2700      	movs	r7, #0
 8002094:	402b      	ands	r3, r5
 8002096:	e7d0      	b.n	800203a <__aeabi_dsub+0x34a>
 8002098:	08c0      	lsrs	r0, r0, #3
 800209a:	0762      	lsls	r2, r4, #29
 800209c:	4302      	orrs	r2, r0
 800209e:	08e4      	lsrs	r4, r4, #3
 80020a0:	e737      	b.n	8001f12 <__aeabi_dsub+0x222>
 80020a2:	08ea      	lsrs	r2, r5, #3
 80020a4:	0763      	lsls	r3, r4, #29
 80020a6:	431a      	orrs	r2, r3
 80020a8:	4bd3      	ldr	r3, [pc, #844]	@ (80023f8 <__aeabi_dsub+0x708>)
 80020aa:	08e4      	lsrs	r4, r4, #3
 80020ac:	429f      	cmp	r7, r3
 80020ae:	d100      	bne.n	80020b2 <__aeabi_dsub+0x3c2>
 80020b0:	e72f      	b.n	8001f12 <__aeabi_dsub+0x222>
 80020b2:	0324      	lsls	r4, r4, #12
 80020b4:	0b25      	lsrs	r5, r4, #12
 80020b6:	057c      	lsls	r4, r7, #21
 80020b8:	0d64      	lsrs	r4, r4, #21
 80020ba:	e6c2      	b.n	8001e42 <__aeabi_dsub+0x152>
 80020bc:	46ca      	mov	sl, r9
 80020be:	0022      	movs	r2, r4
 80020c0:	4302      	orrs	r2, r0
 80020c2:	d158      	bne.n	8002176 <__aeabi_dsub+0x486>
 80020c4:	4663      	mov	r3, ip
 80020c6:	000e      	movs	r6, r1
 80020c8:	9c02      	ldr	r4, [sp, #8]
 80020ca:	9303      	str	r3, [sp, #12]
 80020cc:	9b03      	ldr	r3, [sp, #12]
 80020ce:	4657      	mov	r7, sl
 80020d0:	08da      	lsrs	r2, r3, #3
 80020d2:	e7e7      	b.n	80020a4 <__aeabi_dsub+0x3b4>
 80020d4:	4cc9      	ldr	r4, [pc, #804]	@ (80023fc <__aeabi_dsub+0x70c>)
 80020d6:	1aff      	subs	r7, r7, r3
 80020d8:	4014      	ands	r4, r2
 80020da:	e692      	b.n	8001e02 <__aeabi_dsub+0x112>
 80020dc:	4dc8      	ldr	r5, [pc, #800]	@ (8002400 <__aeabi_dsub+0x710>)
 80020de:	1c7a      	adds	r2, r7, #1
 80020e0:	422a      	tst	r2, r5
 80020e2:	d000      	beq.n	80020e6 <__aeabi_dsub+0x3f6>
 80020e4:	e084      	b.n	80021f0 <__aeabi_dsub+0x500>
 80020e6:	0022      	movs	r2, r4
 80020e8:	4302      	orrs	r2, r0
 80020ea:	2f00      	cmp	r7, #0
 80020ec:	d000      	beq.n	80020f0 <__aeabi_dsub+0x400>
 80020ee:	e0ef      	b.n	80022d0 <__aeabi_dsub+0x5e0>
 80020f0:	2a00      	cmp	r2, #0
 80020f2:	d100      	bne.n	80020f6 <__aeabi_dsub+0x406>
 80020f4:	e0e5      	b.n	80022c2 <__aeabi_dsub+0x5d2>
 80020f6:	4662      	mov	r2, ip
 80020f8:	9902      	ldr	r1, [sp, #8]
 80020fa:	430a      	orrs	r2, r1
 80020fc:	d100      	bne.n	8002100 <__aeabi_dsub+0x410>
 80020fe:	e0c5      	b.n	800228c <__aeabi_dsub+0x59c>
 8002100:	4663      	mov	r3, ip
 8002102:	18c5      	adds	r5, r0, r3
 8002104:	468c      	mov	ip, r1
 8002106:	4285      	cmp	r5, r0
 8002108:	4180      	sbcs	r0, r0
 800210a:	4464      	add	r4, ip
 800210c:	4240      	negs	r0, r0
 800210e:	1824      	adds	r4, r4, r0
 8002110:	0223      	lsls	r3, r4, #8
 8002112:	d502      	bpl.n	800211a <__aeabi_dsub+0x42a>
 8002114:	4bb9      	ldr	r3, [pc, #740]	@ (80023fc <__aeabi_dsub+0x70c>)
 8002116:	3701      	adds	r7, #1
 8002118:	401c      	ands	r4, r3
 800211a:	46ba      	mov	sl, r7
 800211c:	9503      	str	r5, [sp, #12]
 800211e:	e7d5      	b.n	80020cc <__aeabi_dsub+0x3dc>
 8002120:	4662      	mov	r2, ip
 8002122:	1a85      	subs	r5, r0, r2
 8002124:	42a8      	cmp	r0, r5
 8002126:	4192      	sbcs	r2, r2
 8002128:	4252      	negs	r2, r2
 800212a:	4691      	mov	r9, r2
 800212c:	9b02      	ldr	r3, [sp, #8]
 800212e:	1ae3      	subs	r3, r4, r3
 8002130:	001a      	movs	r2, r3
 8002132:	464b      	mov	r3, r9
 8002134:	1ad2      	subs	r2, r2, r3
 8002136:	0013      	movs	r3, r2
 8002138:	4691      	mov	r9, r2
 800213a:	021a      	lsls	r2, r3, #8
 800213c:	d46c      	bmi.n	8002218 <__aeabi_dsub+0x528>
 800213e:	464a      	mov	r2, r9
 8002140:	464c      	mov	r4, r9
 8002142:	432a      	orrs	r2, r5
 8002144:	d000      	beq.n	8002148 <__aeabi_dsub+0x458>
 8002146:	e63a      	b.n	8001dbe <__aeabi_dsub+0xce>
 8002148:	2600      	movs	r6, #0
 800214a:	2400      	movs	r4, #0
 800214c:	2500      	movs	r5, #0
 800214e:	e678      	b.n	8001e42 <__aeabi_dsub+0x152>
 8002150:	9902      	ldr	r1, [sp, #8]
 8002152:	4653      	mov	r3, sl
 8002154:	000d      	movs	r5, r1
 8002156:	3a20      	subs	r2, #32
 8002158:	40d5      	lsrs	r5, r2
 800215a:	2b20      	cmp	r3, #32
 800215c:	d006      	beq.n	800216c <__aeabi_dsub+0x47c>
 800215e:	2240      	movs	r2, #64	@ 0x40
 8002160:	1ad2      	subs	r2, r2, r3
 8002162:	000b      	movs	r3, r1
 8002164:	4093      	lsls	r3, r2
 8002166:	4662      	mov	r2, ip
 8002168:	431a      	orrs	r2, r3
 800216a:	4693      	mov	fp, r2
 800216c:	465b      	mov	r3, fp
 800216e:	1e5a      	subs	r2, r3, #1
 8002170:	4193      	sbcs	r3, r2
 8002172:	431d      	orrs	r5, r3
 8002174:	e619      	b.n	8001daa <__aeabi_dsub+0xba>
 8002176:	4653      	mov	r3, sl
 8002178:	1e5a      	subs	r2, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d100      	bne.n	8002180 <__aeabi_dsub+0x490>
 800217e:	e0c6      	b.n	800230e <__aeabi_dsub+0x61e>
 8002180:	4e9d      	ldr	r6, [pc, #628]	@ (80023f8 <__aeabi_dsub+0x708>)
 8002182:	45b2      	cmp	sl, r6
 8002184:	d100      	bne.n	8002188 <__aeabi_dsub+0x498>
 8002186:	e6bd      	b.n	8001f04 <__aeabi_dsub+0x214>
 8002188:	4688      	mov	r8, r1
 800218a:	000e      	movs	r6, r1
 800218c:	2501      	movs	r5, #1
 800218e:	2a38      	cmp	r2, #56	@ 0x38
 8002190:	dc10      	bgt.n	80021b4 <__aeabi_dsub+0x4c4>
 8002192:	2a1f      	cmp	r2, #31
 8002194:	dc7f      	bgt.n	8002296 <__aeabi_dsub+0x5a6>
 8002196:	2120      	movs	r1, #32
 8002198:	0025      	movs	r5, r4
 800219a:	1a89      	subs	r1, r1, r2
 800219c:	0007      	movs	r7, r0
 800219e:	4088      	lsls	r0, r1
 80021a0:	408d      	lsls	r5, r1
 80021a2:	40d7      	lsrs	r7, r2
 80021a4:	40d4      	lsrs	r4, r2
 80021a6:	1e41      	subs	r1, r0, #1
 80021a8:	4188      	sbcs	r0, r1
 80021aa:	9b02      	ldr	r3, [sp, #8]
 80021ac:	433d      	orrs	r5, r7
 80021ae:	1b1b      	subs	r3, r3, r4
 80021b0:	4305      	orrs	r5, r0
 80021b2:	9302      	str	r3, [sp, #8]
 80021b4:	4662      	mov	r2, ip
 80021b6:	1b55      	subs	r5, r2, r5
 80021b8:	45ac      	cmp	ip, r5
 80021ba:	4192      	sbcs	r2, r2
 80021bc:	9b02      	ldr	r3, [sp, #8]
 80021be:	4252      	negs	r2, r2
 80021c0:	464f      	mov	r7, r9
 80021c2:	1a9c      	subs	r4, r3, r2
 80021c4:	e5f6      	b.n	8001db4 <__aeabi_dsub+0xc4>
 80021c6:	2d00      	cmp	r5, #0
 80021c8:	d000      	beq.n	80021cc <__aeabi_dsub+0x4dc>
 80021ca:	e0b7      	b.n	800233c <__aeabi_dsub+0x64c>
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d100      	bne.n	80021d2 <__aeabi_dsub+0x4e2>
 80021d0:	e0f0      	b.n	80023b4 <__aeabi_dsub+0x6c4>
 80021d2:	2601      	movs	r6, #1
 80021d4:	400e      	ands	r6, r1
 80021d6:	4663      	mov	r3, ip
 80021d8:	9802      	ldr	r0, [sp, #8]
 80021da:	08d9      	lsrs	r1, r3, #3
 80021dc:	0742      	lsls	r2, r0, #29
 80021de:	430a      	orrs	r2, r1
 80021e0:	08c4      	lsrs	r4, r0, #3
 80021e2:	e696      	b.n	8001f12 <__aeabi_dsub+0x222>
 80021e4:	4c85      	ldr	r4, [pc, #532]	@ (80023fc <__aeabi_dsub+0x70c>)
 80021e6:	1aff      	subs	r7, r7, r3
 80021e8:	4014      	ands	r4, r2
 80021ea:	0762      	lsls	r2, r4, #29
 80021ec:	08e4      	lsrs	r4, r4, #3
 80021ee:	e760      	b.n	80020b2 <__aeabi_dsub+0x3c2>
 80021f0:	4981      	ldr	r1, [pc, #516]	@ (80023f8 <__aeabi_dsub+0x708>)
 80021f2:	428a      	cmp	r2, r1
 80021f4:	d100      	bne.n	80021f8 <__aeabi_dsub+0x508>
 80021f6:	e0c9      	b.n	800238c <__aeabi_dsub+0x69c>
 80021f8:	4663      	mov	r3, ip
 80021fa:	18c1      	adds	r1, r0, r3
 80021fc:	4281      	cmp	r1, r0
 80021fe:	4180      	sbcs	r0, r0
 8002200:	9b02      	ldr	r3, [sp, #8]
 8002202:	4240      	negs	r0, r0
 8002204:	18e3      	adds	r3, r4, r3
 8002206:	181b      	adds	r3, r3, r0
 8002208:	07dd      	lsls	r5, r3, #31
 800220a:	085c      	lsrs	r4, r3, #1
 800220c:	2307      	movs	r3, #7
 800220e:	0849      	lsrs	r1, r1, #1
 8002210:	430d      	orrs	r5, r1
 8002212:	0017      	movs	r7, r2
 8002214:	402b      	ands	r3, r5
 8002216:	e710      	b.n	800203a <__aeabi_dsub+0x34a>
 8002218:	4663      	mov	r3, ip
 800221a:	1a1d      	subs	r5, r3, r0
 800221c:	45ac      	cmp	ip, r5
 800221e:	4192      	sbcs	r2, r2
 8002220:	2601      	movs	r6, #1
 8002222:	9b02      	ldr	r3, [sp, #8]
 8002224:	4252      	negs	r2, r2
 8002226:	1b1c      	subs	r4, r3, r4
 8002228:	4688      	mov	r8, r1
 800222a:	1aa4      	subs	r4, r4, r2
 800222c:	400e      	ands	r6, r1
 800222e:	e5c6      	b.n	8001dbe <__aeabi_dsub+0xce>
 8002230:	4663      	mov	r3, ip
 8002232:	18c5      	adds	r5, r0, r3
 8002234:	9b02      	ldr	r3, [sp, #8]
 8002236:	4285      	cmp	r5, r0
 8002238:	4180      	sbcs	r0, r0
 800223a:	469c      	mov	ip, r3
 800223c:	4240      	negs	r0, r0
 800223e:	4464      	add	r4, ip
 8002240:	1824      	adds	r4, r4, r0
 8002242:	2701      	movs	r7, #1
 8002244:	0223      	lsls	r3, r4, #8
 8002246:	d400      	bmi.n	800224a <__aeabi_dsub+0x55a>
 8002248:	e6f5      	b.n	8002036 <__aeabi_dsub+0x346>
 800224a:	2702      	movs	r7, #2
 800224c:	e641      	b.n	8001ed2 <__aeabi_dsub+0x1e2>
 800224e:	4663      	mov	r3, ip
 8002250:	1ac5      	subs	r5, r0, r3
 8002252:	42a8      	cmp	r0, r5
 8002254:	4180      	sbcs	r0, r0
 8002256:	9b02      	ldr	r3, [sp, #8]
 8002258:	4240      	negs	r0, r0
 800225a:	1ae4      	subs	r4, r4, r3
 800225c:	2701      	movs	r7, #1
 800225e:	1a24      	subs	r4, r4, r0
 8002260:	e5a8      	b.n	8001db4 <__aeabi_dsub+0xc4>
 8002262:	9d02      	ldr	r5, [sp, #8]
 8002264:	4652      	mov	r2, sl
 8002266:	002b      	movs	r3, r5
 8002268:	3a20      	subs	r2, #32
 800226a:	40d3      	lsrs	r3, r2
 800226c:	0019      	movs	r1, r3
 800226e:	4653      	mov	r3, sl
 8002270:	2b20      	cmp	r3, #32
 8002272:	d006      	beq.n	8002282 <__aeabi_dsub+0x592>
 8002274:	2240      	movs	r2, #64	@ 0x40
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	002b      	movs	r3, r5
 800227a:	4093      	lsls	r3, r2
 800227c:	4662      	mov	r2, ip
 800227e:	431a      	orrs	r2, r3
 8002280:	4693      	mov	fp, r2
 8002282:	465d      	mov	r5, fp
 8002284:	1e6b      	subs	r3, r5, #1
 8002286:	419d      	sbcs	r5, r3
 8002288:	430d      	orrs	r5, r1
 800228a:	e615      	b.n	8001eb8 <__aeabi_dsub+0x1c8>
 800228c:	0762      	lsls	r2, r4, #29
 800228e:	08c0      	lsrs	r0, r0, #3
 8002290:	4302      	orrs	r2, r0
 8002292:	08e4      	lsrs	r4, r4, #3
 8002294:	e70d      	b.n	80020b2 <__aeabi_dsub+0x3c2>
 8002296:	0011      	movs	r1, r2
 8002298:	0027      	movs	r7, r4
 800229a:	3920      	subs	r1, #32
 800229c:	40cf      	lsrs	r7, r1
 800229e:	2a20      	cmp	r2, #32
 80022a0:	d005      	beq.n	80022ae <__aeabi_dsub+0x5be>
 80022a2:	2140      	movs	r1, #64	@ 0x40
 80022a4:	1a8a      	subs	r2, r1, r2
 80022a6:	4094      	lsls	r4, r2
 80022a8:	0025      	movs	r5, r4
 80022aa:	4305      	orrs	r5, r0
 80022ac:	9503      	str	r5, [sp, #12]
 80022ae:	9d03      	ldr	r5, [sp, #12]
 80022b0:	1e6a      	subs	r2, r5, #1
 80022b2:	4195      	sbcs	r5, r2
 80022b4:	433d      	orrs	r5, r7
 80022b6:	e77d      	b.n	80021b4 <__aeabi_dsub+0x4c4>
 80022b8:	2a00      	cmp	r2, #0
 80022ba:	d100      	bne.n	80022be <__aeabi_dsub+0x5ce>
 80022bc:	e744      	b.n	8002148 <__aeabi_dsub+0x458>
 80022be:	2601      	movs	r6, #1
 80022c0:	400e      	ands	r6, r1
 80022c2:	4663      	mov	r3, ip
 80022c4:	08d9      	lsrs	r1, r3, #3
 80022c6:	9b02      	ldr	r3, [sp, #8]
 80022c8:	075a      	lsls	r2, r3, #29
 80022ca:	430a      	orrs	r2, r1
 80022cc:	08dc      	lsrs	r4, r3, #3
 80022ce:	e6f0      	b.n	80020b2 <__aeabi_dsub+0x3c2>
 80022d0:	2a00      	cmp	r2, #0
 80022d2:	d028      	beq.n	8002326 <__aeabi_dsub+0x636>
 80022d4:	4662      	mov	r2, ip
 80022d6:	9f02      	ldr	r7, [sp, #8]
 80022d8:	08c0      	lsrs	r0, r0, #3
 80022da:	433a      	orrs	r2, r7
 80022dc:	d100      	bne.n	80022e0 <__aeabi_dsub+0x5f0>
 80022de:	e6dc      	b.n	800209a <__aeabi_dsub+0x3aa>
 80022e0:	0762      	lsls	r2, r4, #29
 80022e2:	4310      	orrs	r0, r2
 80022e4:	2280      	movs	r2, #128	@ 0x80
 80022e6:	08e4      	lsrs	r4, r4, #3
 80022e8:	0312      	lsls	r2, r2, #12
 80022ea:	4214      	tst	r4, r2
 80022ec:	d009      	beq.n	8002302 <__aeabi_dsub+0x612>
 80022ee:	08fd      	lsrs	r5, r7, #3
 80022f0:	4215      	tst	r5, r2
 80022f2:	d106      	bne.n	8002302 <__aeabi_dsub+0x612>
 80022f4:	4663      	mov	r3, ip
 80022f6:	2601      	movs	r6, #1
 80022f8:	002c      	movs	r4, r5
 80022fa:	08d8      	lsrs	r0, r3, #3
 80022fc:	077b      	lsls	r3, r7, #29
 80022fe:	4318      	orrs	r0, r3
 8002300:	400e      	ands	r6, r1
 8002302:	0f42      	lsrs	r2, r0, #29
 8002304:	00c0      	lsls	r0, r0, #3
 8002306:	08c0      	lsrs	r0, r0, #3
 8002308:	0752      	lsls	r2, r2, #29
 800230a:	4302      	orrs	r2, r0
 800230c:	e601      	b.n	8001f12 <__aeabi_dsub+0x222>
 800230e:	4663      	mov	r3, ip
 8002310:	1a1d      	subs	r5, r3, r0
 8002312:	45ac      	cmp	ip, r5
 8002314:	4192      	sbcs	r2, r2
 8002316:	9b02      	ldr	r3, [sp, #8]
 8002318:	4252      	negs	r2, r2
 800231a:	1b1c      	subs	r4, r3, r4
 800231c:	000e      	movs	r6, r1
 800231e:	4688      	mov	r8, r1
 8002320:	2701      	movs	r7, #1
 8002322:	1aa4      	subs	r4, r4, r2
 8002324:	e546      	b.n	8001db4 <__aeabi_dsub+0xc4>
 8002326:	4663      	mov	r3, ip
 8002328:	08d9      	lsrs	r1, r3, #3
 800232a:	9b02      	ldr	r3, [sp, #8]
 800232c:	075a      	lsls	r2, r3, #29
 800232e:	430a      	orrs	r2, r1
 8002330:	08dc      	lsrs	r4, r3, #3
 8002332:	e5ee      	b.n	8001f12 <__aeabi_dsub+0x222>
 8002334:	4663      	mov	r3, ip
 8002336:	9c02      	ldr	r4, [sp, #8]
 8002338:	9303      	str	r3, [sp, #12]
 800233a:	e6c7      	b.n	80020cc <__aeabi_dsub+0x3dc>
 800233c:	08c0      	lsrs	r0, r0, #3
 800233e:	2a00      	cmp	r2, #0
 8002340:	d100      	bne.n	8002344 <__aeabi_dsub+0x654>
 8002342:	e6aa      	b.n	800209a <__aeabi_dsub+0x3aa>
 8002344:	0762      	lsls	r2, r4, #29
 8002346:	4310      	orrs	r0, r2
 8002348:	2280      	movs	r2, #128	@ 0x80
 800234a:	08e4      	lsrs	r4, r4, #3
 800234c:	0312      	lsls	r2, r2, #12
 800234e:	4214      	tst	r4, r2
 8002350:	d0d7      	beq.n	8002302 <__aeabi_dsub+0x612>
 8002352:	9f02      	ldr	r7, [sp, #8]
 8002354:	08fd      	lsrs	r5, r7, #3
 8002356:	4215      	tst	r5, r2
 8002358:	d1d3      	bne.n	8002302 <__aeabi_dsub+0x612>
 800235a:	4663      	mov	r3, ip
 800235c:	2601      	movs	r6, #1
 800235e:	08d8      	lsrs	r0, r3, #3
 8002360:	077b      	lsls	r3, r7, #29
 8002362:	002c      	movs	r4, r5
 8002364:	4318      	orrs	r0, r3
 8002366:	400e      	ands	r6, r1
 8002368:	e7cb      	b.n	8002302 <__aeabi_dsub+0x612>
 800236a:	000a      	movs	r2, r1
 800236c:	0027      	movs	r7, r4
 800236e:	3a20      	subs	r2, #32
 8002370:	40d7      	lsrs	r7, r2
 8002372:	2920      	cmp	r1, #32
 8002374:	d005      	beq.n	8002382 <__aeabi_dsub+0x692>
 8002376:	2240      	movs	r2, #64	@ 0x40
 8002378:	1a52      	subs	r2, r2, r1
 800237a:	4094      	lsls	r4, r2
 800237c:	0025      	movs	r5, r4
 800237e:	4305      	orrs	r5, r0
 8002380:	9503      	str	r5, [sp, #12]
 8002382:	9d03      	ldr	r5, [sp, #12]
 8002384:	1e6a      	subs	r2, r5, #1
 8002386:	4195      	sbcs	r5, r2
 8002388:	432f      	orrs	r7, r5
 800238a:	e610      	b.n	8001fae <__aeabi_dsub+0x2be>
 800238c:	0014      	movs	r4, r2
 800238e:	2500      	movs	r5, #0
 8002390:	2200      	movs	r2, #0
 8002392:	e556      	b.n	8001e42 <__aeabi_dsub+0x152>
 8002394:	9b02      	ldr	r3, [sp, #8]
 8002396:	4460      	add	r0, ip
 8002398:	4699      	mov	r9, r3
 800239a:	4560      	cmp	r0, ip
 800239c:	4192      	sbcs	r2, r2
 800239e:	444c      	add	r4, r9
 80023a0:	4252      	negs	r2, r2
 80023a2:	0005      	movs	r5, r0
 80023a4:	18a4      	adds	r4, r4, r2
 80023a6:	e74c      	b.n	8002242 <__aeabi_dsub+0x552>
 80023a8:	001a      	movs	r2, r3
 80023aa:	001c      	movs	r4, r3
 80023ac:	432a      	orrs	r2, r5
 80023ae:	d000      	beq.n	80023b2 <__aeabi_dsub+0x6c2>
 80023b0:	e6b3      	b.n	800211a <__aeabi_dsub+0x42a>
 80023b2:	e6c9      	b.n	8002148 <__aeabi_dsub+0x458>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	2600      	movs	r6, #0
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	e5ae      	b.n	8001f1a <__aeabi_dsub+0x22a>
 80023bc:	2120      	movs	r1, #32
 80023be:	2500      	movs	r5, #0
 80023c0:	1a09      	subs	r1, r1, r0
 80023c2:	e517      	b.n	8001df4 <__aeabi_dsub+0x104>
 80023c4:	2200      	movs	r2, #0
 80023c6:	2500      	movs	r5, #0
 80023c8:	4c0b      	ldr	r4, [pc, #44]	@ (80023f8 <__aeabi_dsub+0x708>)
 80023ca:	e53a      	b.n	8001e42 <__aeabi_dsub+0x152>
 80023cc:	2d00      	cmp	r5, #0
 80023ce:	d100      	bne.n	80023d2 <__aeabi_dsub+0x6e2>
 80023d0:	e5f6      	b.n	8001fc0 <__aeabi_dsub+0x2d0>
 80023d2:	464b      	mov	r3, r9
 80023d4:	1bda      	subs	r2, r3, r7
 80023d6:	4692      	mov	sl, r2
 80023d8:	2f00      	cmp	r7, #0
 80023da:	d100      	bne.n	80023de <__aeabi_dsub+0x6ee>
 80023dc:	e66f      	b.n	80020be <__aeabi_dsub+0x3ce>
 80023de:	2a38      	cmp	r2, #56	@ 0x38
 80023e0:	dc05      	bgt.n	80023ee <__aeabi_dsub+0x6fe>
 80023e2:	2680      	movs	r6, #128	@ 0x80
 80023e4:	0436      	lsls	r6, r6, #16
 80023e6:	4334      	orrs	r4, r6
 80023e8:	4688      	mov	r8, r1
 80023ea:	000e      	movs	r6, r1
 80023ec:	e6d1      	b.n	8002192 <__aeabi_dsub+0x4a2>
 80023ee:	4688      	mov	r8, r1
 80023f0:	000e      	movs	r6, r1
 80023f2:	2501      	movs	r5, #1
 80023f4:	e6de      	b.n	80021b4 <__aeabi_dsub+0x4c4>
 80023f6:	46c0      	nop			@ (mov r8, r8)
 80023f8:	000007ff 	.word	0x000007ff
 80023fc:	ff7fffff 	.word	0xff7fffff
 8002400:	000007fe 	.word	0x000007fe
 8002404:	2d00      	cmp	r5, #0
 8002406:	d100      	bne.n	800240a <__aeabi_dsub+0x71a>
 8002408:	e668      	b.n	80020dc <__aeabi_dsub+0x3ec>
 800240a:	464b      	mov	r3, r9
 800240c:	1bd9      	subs	r1, r3, r7
 800240e:	2f00      	cmp	r7, #0
 8002410:	d101      	bne.n	8002416 <__aeabi_dsub+0x726>
 8002412:	468a      	mov	sl, r1
 8002414:	e5a7      	b.n	8001f66 <__aeabi_dsub+0x276>
 8002416:	2701      	movs	r7, #1
 8002418:	2938      	cmp	r1, #56	@ 0x38
 800241a:	dd00      	ble.n	800241e <__aeabi_dsub+0x72e>
 800241c:	e5c7      	b.n	8001fae <__aeabi_dsub+0x2be>
 800241e:	2280      	movs	r2, #128	@ 0x80
 8002420:	0412      	lsls	r2, r2, #16
 8002422:	4314      	orrs	r4, r2
 8002424:	e5af      	b.n	8001f86 <__aeabi_dsub+0x296>
 8002426:	46c0      	nop			@ (mov r8, r8)

08002428 <__aeabi_d2iz>:
 8002428:	000b      	movs	r3, r1
 800242a:	0002      	movs	r2, r0
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	4d16      	ldr	r5, [pc, #88]	@ (8002488 <__aeabi_d2iz+0x60>)
 8002430:	030c      	lsls	r4, r1, #12
 8002432:	b082      	sub	sp, #8
 8002434:	0049      	lsls	r1, r1, #1
 8002436:	2000      	movs	r0, #0
 8002438:	9200      	str	r2, [sp, #0]
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	0b24      	lsrs	r4, r4, #12
 800243e:	0d49      	lsrs	r1, r1, #21
 8002440:	0fde      	lsrs	r6, r3, #31
 8002442:	42a9      	cmp	r1, r5
 8002444:	dd04      	ble.n	8002450 <__aeabi_d2iz+0x28>
 8002446:	4811      	ldr	r0, [pc, #68]	@ (800248c <__aeabi_d2iz+0x64>)
 8002448:	4281      	cmp	r1, r0
 800244a:	dd03      	ble.n	8002454 <__aeabi_d2iz+0x2c>
 800244c:	4b10      	ldr	r3, [pc, #64]	@ (8002490 <__aeabi_d2iz+0x68>)
 800244e:	18f0      	adds	r0, r6, r3
 8002450:	b002      	add	sp, #8
 8002452:	bd70      	pop	{r4, r5, r6, pc}
 8002454:	2080      	movs	r0, #128	@ 0x80
 8002456:	0340      	lsls	r0, r0, #13
 8002458:	4320      	orrs	r0, r4
 800245a:	4c0e      	ldr	r4, [pc, #56]	@ (8002494 <__aeabi_d2iz+0x6c>)
 800245c:	1a64      	subs	r4, r4, r1
 800245e:	2c1f      	cmp	r4, #31
 8002460:	dd08      	ble.n	8002474 <__aeabi_d2iz+0x4c>
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <__aeabi_d2iz+0x70>)
 8002464:	1a5b      	subs	r3, r3, r1
 8002466:	40d8      	lsrs	r0, r3
 8002468:	0003      	movs	r3, r0
 800246a:	4258      	negs	r0, r3
 800246c:	2e00      	cmp	r6, #0
 800246e:	d1ef      	bne.n	8002450 <__aeabi_d2iz+0x28>
 8002470:	0018      	movs	r0, r3
 8002472:	e7ed      	b.n	8002450 <__aeabi_d2iz+0x28>
 8002474:	4b09      	ldr	r3, [pc, #36]	@ (800249c <__aeabi_d2iz+0x74>)
 8002476:	9a00      	ldr	r2, [sp, #0]
 8002478:	469c      	mov	ip, r3
 800247a:	0003      	movs	r3, r0
 800247c:	4461      	add	r1, ip
 800247e:	408b      	lsls	r3, r1
 8002480:	40e2      	lsrs	r2, r4
 8002482:	4313      	orrs	r3, r2
 8002484:	e7f1      	b.n	800246a <__aeabi_d2iz+0x42>
 8002486:	46c0      	nop			@ (mov r8, r8)
 8002488:	000003fe 	.word	0x000003fe
 800248c:	0000041d 	.word	0x0000041d
 8002490:	7fffffff 	.word	0x7fffffff
 8002494:	00000433 	.word	0x00000433
 8002498:	00000413 	.word	0x00000413
 800249c:	fffffbed 	.word	0xfffffbed

080024a0 <__aeabi_i2d>:
 80024a0:	b570      	push	{r4, r5, r6, lr}
 80024a2:	2800      	cmp	r0, #0
 80024a4:	d016      	beq.n	80024d4 <__aeabi_i2d+0x34>
 80024a6:	17c3      	asrs	r3, r0, #31
 80024a8:	18c5      	adds	r5, r0, r3
 80024aa:	405d      	eors	r5, r3
 80024ac:	0fc4      	lsrs	r4, r0, #31
 80024ae:	0028      	movs	r0, r5
 80024b0:	f000 f952 	bl	8002758 <__clzsi2>
 80024b4:	4b10      	ldr	r3, [pc, #64]	@ (80024f8 <__aeabi_i2d+0x58>)
 80024b6:	1a1b      	subs	r3, r3, r0
 80024b8:	055b      	lsls	r3, r3, #21
 80024ba:	0d5b      	lsrs	r3, r3, #21
 80024bc:	280a      	cmp	r0, #10
 80024be:	dc14      	bgt.n	80024ea <__aeabi_i2d+0x4a>
 80024c0:	0002      	movs	r2, r0
 80024c2:	002e      	movs	r6, r5
 80024c4:	3215      	adds	r2, #21
 80024c6:	4096      	lsls	r6, r2
 80024c8:	220b      	movs	r2, #11
 80024ca:	1a12      	subs	r2, r2, r0
 80024cc:	40d5      	lsrs	r5, r2
 80024ce:	032d      	lsls	r5, r5, #12
 80024d0:	0b2d      	lsrs	r5, r5, #12
 80024d2:	e003      	b.n	80024dc <__aeabi_i2d+0x3c>
 80024d4:	2400      	movs	r4, #0
 80024d6:	2300      	movs	r3, #0
 80024d8:	2500      	movs	r5, #0
 80024da:	2600      	movs	r6, #0
 80024dc:	051b      	lsls	r3, r3, #20
 80024de:	432b      	orrs	r3, r5
 80024e0:	07e4      	lsls	r4, r4, #31
 80024e2:	4323      	orrs	r3, r4
 80024e4:	0030      	movs	r0, r6
 80024e6:	0019      	movs	r1, r3
 80024e8:	bd70      	pop	{r4, r5, r6, pc}
 80024ea:	380b      	subs	r0, #11
 80024ec:	4085      	lsls	r5, r0
 80024ee:	032d      	lsls	r5, r5, #12
 80024f0:	2600      	movs	r6, #0
 80024f2:	0b2d      	lsrs	r5, r5, #12
 80024f4:	e7f2      	b.n	80024dc <__aeabi_i2d+0x3c>
 80024f6:	46c0      	nop			@ (mov r8, r8)
 80024f8:	0000041e 	.word	0x0000041e

080024fc <__aeabi_ui2d>:
 80024fc:	b510      	push	{r4, lr}
 80024fe:	1e04      	subs	r4, r0, #0
 8002500:	d010      	beq.n	8002524 <__aeabi_ui2d+0x28>
 8002502:	f000 f929 	bl	8002758 <__clzsi2>
 8002506:	4b0e      	ldr	r3, [pc, #56]	@ (8002540 <__aeabi_ui2d+0x44>)
 8002508:	1a1b      	subs	r3, r3, r0
 800250a:	055b      	lsls	r3, r3, #21
 800250c:	0d5b      	lsrs	r3, r3, #21
 800250e:	280a      	cmp	r0, #10
 8002510:	dc0f      	bgt.n	8002532 <__aeabi_ui2d+0x36>
 8002512:	220b      	movs	r2, #11
 8002514:	0021      	movs	r1, r4
 8002516:	1a12      	subs	r2, r2, r0
 8002518:	40d1      	lsrs	r1, r2
 800251a:	3015      	adds	r0, #21
 800251c:	030a      	lsls	r2, r1, #12
 800251e:	4084      	lsls	r4, r0
 8002520:	0b12      	lsrs	r2, r2, #12
 8002522:	e001      	b.n	8002528 <__aeabi_ui2d+0x2c>
 8002524:	2300      	movs	r3, #0
 8002526:	2200      	movs	r2, #0
 8002528:	051b      	lsls	r3, r3, #20
 800252a:	4313      	orrs	r3, r2
 800252c:	0020      	movs	r0, r4
 800252e:	0019      	movs	r1, r3
 8002530:	bd10      	pop	{r4, pc}
 8002532:	0022      	movs	r2, r4
 8002534:	380b      	subs	r0, #11
 8002536:	4082      	lsls	r2, r0
 8002538:	0312      	lsls	r2, r2, #12
 800253a:	2400      	movs	r4, #0
 800253c:	0b12      	lsrs	r2, r2, #12
 800253e:	e7f3      	b.n	8002528 <__aeabi_ui2d+0x2c>
 8002540:	0000041e 	.word	0x0000041e

08002544 <__aeabi_f2d>:
 8002544:	b570      	push	{r4, r5, r6, lr}
 8002546:	0242      	lsls	r2, r0, #9
 8002548:	0043      	lsls	r3, r0, #1
 800254a:	0fc4      	lsrs	r4, r0, #31
 800254c:	20fe      	movs	r0, #254	@ 0xfe
 800254e:	0e1b      	lsrs	r3, r3, #24
 8002550:	1c59      	adds	r1, r3, #1
 8002552:	0a55      	lsrs	r5, r2, #9
 8002554:	4208      	tst	r0, r1
 8002556:	d00c      	beq.n	8002572 <__aeabi_f2d+0x2e>
 8002558:	21e0      	movs	r1, #224	@ 0xe0
 800255a:	0089      	lsls	r1, r1, #2
 800255c:	468c      	mov	ip, r1
 800255e:	076d      	lsls	r5, r5, #29
 8002560:	0b12      	lsrs	r2, r2, #12
 8002562:	4463      	add	r3, ip
 8002564:	051b      	lsls	r3, r3, #20
 8002566:	4313      	orrs	r3, r2
 8002568:	07e4      	lsls	r4, r4, #31
 800256a:	4323      	orrs	r3, r4
 800256c:	0028      	movs	r0, r5
 800256e:	0019      	movs	r1, r3
 8002570:	bd70      	pop	{r4, r5, r6, pc}
 8002572:	2b00      	cmp	r3, #0
 8002574:	d114      	bne.n	80025a0 <__aeabi_f2d+0x5c>
 8002576:	2d00      	cmp	r5, #0
 8002578:	d01b      	beq.n	80025b2 <__aeabi_f2d+0x6e>
 800257a:	0028      	movs	r0, r5
 800257c:	f000 f8ec 	bl	8002758 <__clzsi2>
 8002580:	280a      	cmp	r0, #10
 8002582:	dc1c      	bgt.n	80025be <__aeabi_f2d+0x7a>
 8002584:	230b      	movs	r3, #11
 8002586:	002a      	movs	r2, r5
 8002588:	1a1b      	subs	r3, r3, r0
 800258a:	40da      	lsrs	r2, r3
 800258c:	0003      	movs	r3, r0
 800258e:	3315      	adds	r3, #21
 8002590:	409d      	lsls	r5, r3
 8002592:	4b0e      	ldr	r3, [pc, #56]	@ (80025cc <__aeabi_f2d+0x88>)
 8002594:	0312      	lsls	r2, r2, #12
 8002596:	1a1b      	subs	r3, r3, r0
 8002598:	055b      	lsls	r3, r3, #21
 800259a:	0b12      	lsrs	r2, r2, #12
 800259c:	0d5b      	lsrs	r3, r3, #21
 800259e:	e7e1      	b.n	8002564 <__aeabi_f2d+0x20>
 80025a0:	2d00      	cmp	r5, #0
 80025a2:	d009      	beq.n	80025b8 <__aeabi_f2d+0x74>
 80025a4:	0b13      	lsrs	r3, r2, #12
 80025a6:	2280      	movs	r2, #128	@ 0x80
 80025a8:	0312      	lsls	r2, r2, #12
 80025aa:	431a      	orrs	r2, r3
 80025ac:	076d      	lsls	r5, r5, #29
 80025ae:	4b08      	ldr	r3, [pc, #32]	@ (80025d0 <__aeabi_f2d+0x8c>)
 80025b0:	e7d8      	b.n	8002564 <__aeabi_f2d+0x20>
 80025b2:	2300      	movs	r3, #0
 80025b4:	2200      	movs	r2, #0
 80025b6:	e7d5      	b.n	8002564 <__aeabi_f2d+0x20>
 80025b8:	2200      	movs	r2, #0
 80025ba:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <__aeabi_f2d+0x8c>)
 80025bc:	e7d2      	b.n	8002564 <__aeabi_f2d+0x20>
 80025be:	0003      	movs	r3, r0
 80025c0:	002a      	movs	r2, r5
 80025c2:	3b0b      	subs	r3, #11
 80025c4:	409a      	lsls	r2, r3
 80025c6:	2500      	movs	r5, #0
 80025c8:	e7e3      	b.n	8002592 <__aeabi_f2d+0x4e>
 80025ca:	46c0      	nop			@ (mov r8, r8)
 80025cc:	00000389 	.word	0x00000389
 80025d0:	000007ff 	.word	0x000007ff

080025d4 <__aeabi_d2f>:
 80025d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025d6:	004b      	lsls	r3, r1, #1
 80025d8:	030f      	lsls	r7, r1, #12
 80025da:	0d5b      	lsrs	r3, r3, #21
 80025dc:	4c3b      	ldr	r4, [pc, #236]	@ (80026cc <__aeabi_d2f+0xf8>)
 80025de:	0f45      	lsrs	r5, r0, #29
 80025e0:	b083      	sub	sp, #12
 80025e2:	0a7f      	lsrs	r7, r7, #9
 80025e4:	1c5e      	adds	r6, r3, #1
 80025e6:	432f      	orrs	r7, r5
 80025e8:	9000      	str	r0, [sp, #0]
 80025ea:	9101      	str	r1, [sp, #4]
 80025ec:	0fca      	lsrs	r2, r1, #31
 80025ee:	00c5      	lsls	r5, r0, #3
 80025f0:	4226      	tst	r6, r4
 80025f2:	d00b      	beq.n	800260c <__aeabi_d2f+0x38>
 80025f4:	4936      	ldr	r1, [pc, #216]	@ (80026d0 <__aeabi_d2f+0xfc>)
 80025f6:	185c      	adds	r4, r3, r1
 80025f8:	2cfe      	cmp	r4, #254	@ 0xfe
 80025fa:	dd13      	ble.n	8002624 <__aeabi_d2f+0x50>
 80025fc:	20ff      	movs	r0, #255	@ 0xff
 80025fe:	2300      	movs	r3, #0
 8002600:	05c0      	lsls	r0, r0, #23
 8002602:	4318      	orrs	r0, r3
 8002604:	07d2      	lsls	r2, r2, #31
 8002606:	4310      	orrs	r0, r2
 8002608:	b003      	add	sp, #12
 800260a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <__aeabi_d2f+0x42>
 8002610:	2000      	movs	r0, #0
 8002612:	2300      	movs	r3, #0
 8002614:	e7f4      	b.n	8002600 <__aeabi_d2f+0x2c>
 8002616:	433d      	orrs	r5, r7
 8002618:	d0f0      	beq.n	80025fc <__aeabi_d2f+0x28>
 800261a:	2380      	movs	r3, #128	@ 0x80
 800261c:	03db      	lsls	r3, r3, #15
 800261e:	20ff      	movs	r0, #255	@ 0xff
 8002620:	433b      	orrs	r3, r7
 8002622:	e7ed      	b.n	8002600 <__aeabi_d2f+0x2c>
 8002624:	2c00      	cmp	r4, #0
 8002626:	dd14      	ble.n	8002652 <__aeabi_d2f+0x7e>
 8002628:	9b00      	ldr	r3, [sp, #0]
 800262a:	00ff      	lsls	r7, r7, #3
 800262c:	019b      	lsls	r3, r3, #6
 800262e:	1e58      	subs	r0, r3, #1
 8002630:	4183      	sbcs	r3, r0
 8002632:	0f69      	lsrs	r1, r5, #29
 8002634:	433b      	orrs	r3, r7
 8002636:	430b      	orrs	r3, r1
 8002638:	0759      	lsls	r1, r3, #29
 800263a:	d041      	beq.n	80026c0 <__aeabi_d2f+0xec>
 800263c:	210f      	movs	r1, #15
 800263e:	4019      	ands	r1, r3
 8002640:	2904      	cmp	r1, #4
 8002642:	d028      	beq.n	8002696 <__aeabi_d2f+0xc2>
 8002644:	3304      	adds	r3, #4
 8002646:	0159      	lsls	r1, r3, #5
 8002648:	d525      	bpl.n	8002696 <__aeabi_d2f+0xc2>
 800264a:	3401      	adds	r4, #1
 800264c:	2300      	movs	r3, #0
 800264e:	b2e0      	uxtb	r0, r4
 8002650:	e7d6      	b.n	8002600 <__aeabi_d2f+0x2c>
 8002652:	0021      	movs	r1, r4
 8002654:	3117      	adds	r1, #23
 8002656:	dbdb      	blt.n	8002610 <__aeabi_d2f+0x3c>
 8002658:	2180      	movs	r1, #128	@ 0x80
 800265a:	201e      	movs	r0, #30
 800265c:	0409      	lsls	r1, r1, #16
 800265e:	4339      	orrs	r1, r7
 8002660:	1b00      	subs	r0, r0, r4
 8002662:	281f      	cmp	r0, #31
 8002664:	dd1b      	ble.n	800269e <__aeabi_d2f+0xca>
 8002666:	2602      	movs	r6, #2
 8002668:	4276      	negs	r6, r6
 800266a:	1b34      	subs	r4, r6, r4
 800266c:	000e      	movs	r6, r1
 800266e:	40e6      	lsrs	r6, r4
 8002670:	0034      	movs	r4, r6
 8002672:	2820      	cmp	r0, #32
 8002674:	d004      	beq.n	8002680 <__aeabi_d2f+0xac>
 8002676:	4817      	ldr	r0, [pc, #92]	@ (80026d4 <__aeabi_d2f+0x100>)
 8002678:	4684      	mov	ip, r0
 800267a:	4463      	add	r3, ip
 800267c:	4099      	lsls	r1, r3
 800267e:	430d      	orrs	r5, r1
 8002680:	002b      	movs	r3, r5
 8002682:	1e59      	subs	r1, r3, #1
 8002684:	418b      	sbcs	r3, r1
 8002686:	4323      	orrs	r3, r4
 8002688:	0759      	lsls	r1, r3, #29
 800268a:	d015      	beq.n	80026b8 <__aeabi_d2f+0xe4>
 800268c:	210f      	movs	r1, #15
 800268e:	2400      	movs	r4, #0
 8002690:	4019      	ands	r1, r3
 8002692:	2904      	cmp	r1, #4
 8002694:	d117      	bne.n	80026c6 <__aeabi_d2f+0xf2>
 8002696:	019b      	lsls	r3, r3, #6
 8002698:	0a5b      	lsrs	r3, r3, #9
 800269a:	b2e0      	uxtb	r0, r4
 800269c:	e7b0      	b.n	8002600 <__aeabi_d2f+0x2c>
 800269e:	4c0e      	ldr	r4, [pc, #56]	@ (80026d8 <__aeabi_d2f+0x104>)
 80026a0:	191c      	adds	r4, r3, r4
 80026a2:	002b      	movs	r3, r5
 80026a4:	40a5      	lsls	r5, r4
 80026a6:	40c3      	lsrs	r3, r0
 80026a8:	40a1      	lsls	r1, r4
 80026aa:	1e68      	subs	r0, r5, #1
 80026ac:	4185      	sbcs	r5, r0
 80026ae:	4329      	orrs	r1, r5
 80026b0:	430b      	orrs	r3, r1
 80026b2:	2400      	movs	r4, #0
 80026b4:	0759      	lsls	r1, r3, #29
 80026b6:	d1c1      	bne.n	800263c <__aeabi_d2f+0x68>
 80026b8:	019b      	lsls	r3, r3, #6
 80026ba:	2000      	movs	r0, #0
 80026bc:	0a5b      	lsrs	r3, r3, #9
 80026be:	e79f      	b.n	8002600 <__aeabi_d2f+0x2c>
 80026c0:	08db      	lsrs	r3, r3, #3
 80026c2:	b2e0      	uxtb	r0, r4
 80026c4:	e79c      	b.n	8002600 <__aeabi_d2f+0x2c>
 80026c6:	3304      	adds	r3, #4
 80026c8:	e7e5      	b.n	8002696 <__aeabi_d2f+0xc2>
 80026ca:	46c0      	nop			@ (mov r8, r8)
 80026cc:	000007fe 	.word	0x000007fe
 80026d0:	fffffc80 	.word	0xfffffc80
 80026d4:	fffffca2 	.word	0xfffffca2
 80026d8:	fffffc82 	.word	0xfffffc82

080026dc <__aeabi_cdrcmple>:
 80026dc:	4684      	mov	ip, r0
 80026de:	0010      	movs	r0, r2
 80026e0:	4662      	mov	r2, ip
 80026e2:	468c      	mov	ip, r1
 80026e4:	0019      	movs	r1, r3
 80026e6:	4663      	mov	r3, ip
 80026e8:	e000      	b.n	80026ec <__aeabi_cdcmpeq>
 80026ea:	46c0      	nop			@ (mov r8, r8)

080026ec <__aeabi_cdcmpeq>:
 80026ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80026ee:	f000 f909 	bl	8002904 <__ledf2>
 80026f2:	2800      	cmp	r0, #0
 80026f4:	d401      	bmi.n	80026fa <__aeabi_cdcmpeq+0xe>
 80026f6:	2100      	movs	r1, #0
 80026f8:	42c8      	cmn	r0, r1
 80026fa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080026fc <__aeabi_dcmpeq>:
 80026fc:	b510      	push	{r4, lr}
 80026fe:	f000 f849 	bl	8002794 <__eqdf2>
 8002702:	4240      	negs	r0, r0
 8002704:	3001      	adds	r0, #1
 8002706:	bd10      	pop	{r4, pc}

08002708 <__aeabi_dcmplt>:
 8002708:	b510      	push	{r4, lr}
 800270a:	f000 f8fb 	bl	8002904 <__ledf2>
 800270e:	2800      	cmp	r0, #0
 8002710:	db01      	blt.n	8002716 <__aeabi_dcmplt+0xe>
 8002712:	2000      	movs	r0, #0
 8002714:	bd10      	pop	{r4, pc}
 8002716:	2001      	movs	r0, #1
 8002718:	bd10      	pop	{r4, pc}
 800271a:	46c0      	nop			@ (mov r8, r8)

0800271c <__aeabi_dcmple>:
 800271c:	b510      	push	{r4, lr}
 800271e:	f000 f8f1 	bl	8002904 <__ledf2>
 8002722:	2800      	cmp	r0, #0
 8002724:	dd01      	ble.n	800272a <__aeabi_dcmple+0xe>
 8002726:	2000      	movs	r0, #0
 8002728:	bd10      	pop	{r4, pc}
 800272a:	2001      	movs	r0, #1
 800272c:	bd10      	pop	{r4, pc}
 800272e:	46c0      	nop			@ (mov r8, r8)

08002730 <__aeabi_dcmpgt>:
 8002730:	b510      	push	{r4, lr}
 8002732:	f000 f873 	bl	800281c <__gedf2>
 8002736:	2800      	cmp	r0, #0
 8002738:	dc01      	bgt.n	800273e <__aeabi_dcmpgt+0xe>
 800273a:	2000      	movs	r0, #0
 800273c:	bd10      	pop	{r4, pc}
 800273e:	2001      	movs	r0, #1
 8002740:	bd10      	pop	{r4, pc}
 8002742:	46c0      	nop			@ (mov r8, r8)

08002744 <__aeabi_dcmpge>:
 8002744:	b510      	push	{r4, lr}
 8002746:	f000 f869 	bl	800281c <__gedf2>
 800274a:	2800      	cmp	r0, #0
 800274c:	da01      	bge.n	8002752 <__aeabi_dcmpge+0xe>
 800274e:	2000      	movs	r0, #0
 8002750:	bd10      	pop	{r4, pc}
 8002752:	2001      	movs	r0, #1
 8002754:	bd10      	pop	{r4, pc}
 8002756:	46c0      	nop			@ (mov r8, r8)

08002758 <__clzsi2>:
 8002758:	211c      	movs	r1, #28
 800275a:	2301      	movs	r3, #1
 800275c:	041b      	lsls	r3, r3, #16
 800275e:	4298      	cmp	r0, r3
 8002760:	d301      	bcc.n	8002766 <__clzsi2+0xe>
 8002762:	0c00      	lsrs	r0, r0, #16
 8002764:	3910      	subs	r1, #16
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	4298      	cmp	r0, r3
 800276a:	d301      	bcc.n	8002770 <__clzsi2+0x18>
 800276c:	0a00      	lsrs	r0, r0, #8
 800276e:	3908      	subs	r1, #8
 8002770:	091b      	lsrs	r3, r3, #4
 8002772:	4298      	cmp	r0, r3
 8002774:	d301      	bcc.n	800277a <__clzsi2+0x22>
 8002776:	0900      	lsrs	r0, r0, #4
 8002778:	3904      	subs	r1, #4
 800277a:	a202      	add	r2, pc, #8	@ (adr r2, 8002784 <__clzsi2+0x2c>)
 800277c:	5c10      	ldrb	r0, [r2, r0]
 800277e:	1840      	adds	r0, r0, r1
 8002780:	4770      	bx	lr
 8002782:	46c0      	nop			@ (mov r8, r8)
 8002784:	02020304 	.word	0x02020304
 8002788:	01010101 	.word	0x01010101
	...

08002794 <__eqdf2>:
 8002794:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002796:	4657      	mov	r7, sl
 8002798:	46de      	mov	lr, fp
 800279a:	464e      	mov	r6, r9
 800279c:	4645      	mov	r5, r8
 800279e:	b5e0      	push	{r5, r6, r7, lr}
 80027a0:	000d      	movs	r5, r1
 80027a2:	0004      	movs	r4, r0
 80027a4:	0fe8      	lsrs	r0, r5, #31
 80027a6:	4683      	mov	fp, r0
 80027a8:	0309      	lsls	r1, r1, #12
 80027aa:	0fd8      	lsrs	r0, r3, #31
 80027ac:	0b09      	lsrs	r1, r1, #12
 80027ae:	4682      	mov	sl, r0
 80027b0:	4819      	ldr	r0, [pc, #100]	@ (8002818 <__eqdf2+0x84>)
 80027b2:	468c      	mov	ip, r1
 80027b4:	031f      	lsls	r7, r3, #12
 80027b6:	0069      	lsls	r1, r5, #1
 80027b8:	005e      	lsls	r6, r3, #1
 80027ba:	0d49      	lsrs	r1, r1, #21
 80027bc:	0b3f      	lsrs	r7, r7, #12
 80027be:	0d76      	lsrs	r6, r6, #21
 80027c0:	4281      	cmp	r1, r0
 80027c2:	d018      	beq.n	80027f6 <__eqdf2+0x62>
 80027c4:	4286      	cmp	r6, r0
 80027c6:	d00f      	beq.n	80027e8 <__eqdf2+0x54>
 80027c8:	2001      	movs	r0, #1
 80027ca:	42b1      	cmp	r1, r6
 80027cc:	d10d      	bne.n	80027ea <__eqdf2+0x56>
 80027ce:	45bc      	cmp	ip, r7
 80027d0:	d10b      	bne.n	80027ea <__eqdf2+0x56>
 80027d2:	4294      	cmp	r4, r2
 80027d4:	d109      	bne.n	80027ea <__eqdf2+0x56>
 80027d6:	45d3      	cmp	fp, sl
 80027d8:	d01c      	beq.n	8002814 <__eqdf2+0x80>
 80027da:	2900      	cmp	r1, #0
 80027dc:	d105      	bne.n	80027ea <__eqdf2+0x56>
 80027de:	4660      	mov	r0, ip
 80027e0:	4320      	orrs	r0, r4
 80027e2:	1e43      	subs	r3, r0, #1
 80027e4:	4198      	sbcs	r0, r3
 80027e6:	e000      	b.n	80027ea <__eqdf2+0x56>
 80027e8:	2001      	movs	r0, #1
 80027ea:	bcf0      	pop	{r4, r5, r6, r7}
 80027ec:	46bb      	mov	fp, r7
 80027ee:	46b2      	mov	sl, r6
 80027f0:	46a9      	mov	r9, r5
 80027f2:	46a0      	mov	r8, r4
 80027f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027f6:	2001      	movs	r0, #1
 80027f8:	428e      	cmp	r6, r1
 80027fa:	d1f6      	bne.n	80027ea <__eqdf2+0x56>
 80027fc:	4661      	mov	r1, ip
 80027fe:	4339      	orrs	r1, r7
 8002800:	000f      	movs	r7, r1
 8002802:	4317      	orrs	r7, r2
 8002804:	4327      	orrs	r7, r4
 8002806:	d1f0      	bne.n	80027ea <__eqdf2+0x56>
 8002808:	465b      	mov	r3, fp
 800280a:	4652      	mov	r2, sl
 800280c:	1a98      	subs	r0, r3, r2
 800280e:	1e43      	subs	r3, r0, #1
 8002810:	4198      	sbcs	r0, r3
 8002812:	e7ea      	b.n	80027ea <__eqdf2+0x56>
 8002814:	2000      	movs	r0, #0
 8002816:	e7e8      	b.n	80027ea <__eqdf2+0x56>
 8002818:	000007ff 	.word	0x000007ff

0800281c <__gedf2>:
 800281c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800281e:	4657      	mov	r7, sl
 8002820:	464e      	mov	r6, r9
 8002822:	4645      	mov	r5, r8
 8002824:	46de      	mov	lr, fp
 8002826:	b5e0      	push	{r5, r6, r7, lr}
 8002828:	000d      	movs	r5, r1
 800282a:	030f      	lsls	r7, r1, #12
 800282c:	0b39      	lsrs	r1, r7, #12
 800282e:	b083      	sub	sp, #12
 8002830:	0004      	movs	r4, r0
 8002832:	4680      	mov	r8, r0
 8002834:	9101      	str	r1, [sp, #4]
 8002836:	0058      	lsls	r0, r3, #1
 8002838:	0fe9      	lsrs	r1, r5, #31
 800283a:	4f31      	ldr	r7, [pc, #196]	@ (8002900 <__gedf2+0xe4>)
 800283c:	0d40      	lsrs	r0, r0, #21
 800283e:	468c      	mov	ip, r1
 8002840:	006e      	lsls	r6, r5, #1
 8002842:	0319      	lsls	r1, r3, #12
 8002844:	4682      	mov	sl, r0
 8002846:	4691      	mov	r9, r2
 8002848:	0d76      	lsrs	r6, r6, #21
 800284a:	0b09      	lsrs	r1, r1, #12
 800284c:	0fd8      	lsrs	r0, r3, #31
 800284e:	42be      	cmp	r6, r7
 8002850:	d01f      	beq.n	8002892 <__gedf2+0x76>
 8002852:	45ba      	cmp	sl, r7
 8002854:	d00f      	beq.n	8002876 <__gedf2+0x5a>
 8002856:	2e00      	cmp	r6, #0
 8002858:	d12f      	bne.n	80028ba <__gedf2+0x9e>
 800285a:	4655      	mov	r5, sl
 800285c:	9e01      	ldr	r6, [sp, #4]
 800285e:	4334      	orrs	r4, r6
 8002860:	2d00      	cmp	r5, #0
 8002862:	d127      	bne.n	80028b4 <__gedf2+0x98>
 8002864:	430a      	orrs	r2, r1
 8002866:	d03a      	beq.n	80028de <__gedf2+0xc2>
 8002868:	2c00      	cmp	r4, #0
 800286a:	d145      	bne.n	80028f8 <__gedf2+0xdc>
 800286c:	2800      	cmp	r0, #0
 800286e:	d11a      	bne.n	80028a6 <__gedf2+0x8a>
 8002870:	2001      	movs	r0, #1
 8002872:	4240      	negs	r0, r0
 8002874:	e017      	b.n	80028a6 <__gedf2+0x8a>
 8002876:	4311      	orrs	r1, r2
 8002878:	d13b      	bne.n	80028f2 <__gedf2+0xd6>
 800287a:	2e00      	cmp	r6, #0
 800287c:	d102      	bne.n	8002884 <__gedf2+0x68>
 800287e:	9f01      	ldr	r7, [sp, #4]
 8002880:	4327      	orrs	r7, r4
 8002882:	d0f3      	beq.n	800286c <__gedf2+0x50>
 8002884:	4584      	cmp	ip, r0
 8002886:	d109      	bne.n	800289c <__gedf2+0x80>
 8002888:	4663      	mov	r3, ip
 800288a:	2b00      	cmp	r3, #0
 800288c:	d0f0      	beq.n	8002870 <__gedf2+0x54>
 800288e:	4660      	mov	r0, ip
 8002890:	e009      	b.n	80028a6 <__gedf2+0x8a>
 8002892:	9f01      	ldr	r7, [sp, #4]
 8002894:	4327      	orrs	r7, r4
 8002896:	d12c      	bne.n	80028f2 <__gedf2+0xd6>
 8002898:	45b2      	cmp	sl, r6
 800289a:	d024      	beq.n	80028e6 <__gedf2+0xca>
 800289c:	4663      	mov	r3, ip
 800289e:	2002      	movs	r0, #2
 80028a0:	3b01      	subs	r3, #1
 80028a2:	4018      	ands	r0, r3
 80028a4:	3801      	subs	r0, #1
 80028a6:	b003      	add	sp, #12
 80028a8:	bcf0      	pop	{r4, r5, r6, r7}
 80028aa:	46bb      	mov	fp, r7
 80028ac:	46b2      	mov	sl, r6
 80028ae:	46a9      	mov	r9, r5
 80028b0:	46a0      	mov	r8, r4
 80028b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b4:	2c00      	cmp	r4, #0
 80028b6:	d0d9      	beq.n	800286c <__gedf2+0x50>
 80028b8:	e7e4      	b.n	8002884 <__gedf2+0x68>
 80028ba:	4654      	mov	r4, sl
 80028bc:	2c00      	cmp	r4, #0
 80028be:	d0ed      	beq.n	800289c <__gedf2+0x80>
 80028c0:	4584      	cmp	ip, r0
 80028c2:	d1eb      	bne.n	800289c <__gedf2+0x80>
 80028c4:	4556      	cmp	r6, sl
 80028c6:	dce9      	bgt.n	800289c <__gedf2+0x80>
 80028c8:	dbde      	blt.n	8002888 <__gedf2+0x6c>
 80028ca:	9b01      	ldr	r3, [sp, #4]
 80028cc:	428b      	cmp	r3, r1
 80028ce:	d8e5      	bhi.n	800289c <__gedf2+0x80>
 80028d0:	d1da      	bne.n	8002888 <__gedf2+0x6c>
 80028d2:	45c8      	cmp	r8, r9
 80028d4:	d8e2      	bhi.n	800289c <__gedf2+0x80>
 80028d6:	2000      	movs	r0, #0
 80028d8:	45c8      	cmp	r8, r9
 80028da:	d2e4      	bcs.n	80028a6 <__gedf2+0x8a>
 80028dc:	e7d4      	b.n	8002888 <__gedf2+0x6c>
 80028de:	2000      	movs	r0, #0
 80028e0:	2c00      	cmp	r4, #0
 80028e2:	d0e0      	beq.n	80028a6 <__gedf2+0x8a>
 80028e4:	e7da      	b.n	800289c <__gedf2+0x80>
 80028e6:	4311      	orrs	r1, r2
 80028e8:	d103      	bne.n	80028f2 <__gedf2+0xd6>
 80028ea:	4584      	cmp	ip, r0
 80028ec:	d1d6      	bne.n	800289c <__gedf2+0x80>
 80028ee:	2000      	movs	r0, #0
 80028f0:	e7d9      	b.n	80028a6 <__gedf2+0x8a>
 80028f2:	2002      	movs	r0, #2
 80028f4:	4240      	negs	r0, r0
 80028f6:	e7d6      	b.n	80028a6 <__gedf2+0x8a>
 80028f8:	4584      	cmp	ip, r0
 80028fa:	d0e6      	beq.n	80028ca <__gedf2+0xae>
 80028fc:	e7ce      	b.n	800289c <__gedf2+0x80>
 80028fe:	46c0      	nop			@ (mov r8, r8)
 8002900:	000007ff 	.word	0x000007ff

08002904 <__ledf2>:
 8002904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002906:	4657      	mov	r7, sl
 8002908:	464e      	mov	r6, r9
 800290a:	4645      	mov	r5, r8
 800290c:	46de      	mov	lr, fp
 800290e:	b5e0      	push	{r5, r6, r7, lr}
 8002910:	000d      	movs	r5, r1
 8002912:	030f      	lsls	r7, r1, #12
 8002914:	0004      	movs	r4, r0
 8002916:	4680      	mov	r8, r0
 8002918:	0fe8      	lsrs	r0, r5, #31
 800291a:	0b39      	lsrs	r1, r7, #12
 800291c:	4684      	mov	ip, r0
 800291e:	b083      	sub	sp, #12
 8002920:	0058      	lsls	r0, r3, #1
 8002922:	4f30      	ldr	r7, [pc, #192]	@ (80029e4 <__ledf2+0xe0>)
 8002924:	0d40      	lsrs	r0, r0, #21
 8002926:	9101      	str	r1, [sp, #4]
 8002928:	031e      	lsls	r6, r3, #12
 800292a:	0069      	lsls	r1, r5, #1
 800292c:	4682      	mov	sl, r0
 800292e:	4691      	mov	r9, r2
 8002930:	0d49      	lsrs	r1, r1, #21
 8002932:	0b36      	lsrs	r6, r6, #12
 8002934:	0fd8      	lsrs	r0, r3, #31
 8002936:	42b9      	cmp	r1, r7
 8002938:	d020      	beq.n	800297c <__ledf2+0x78>
 800293a:	45ba      	cmp	sl, r7
 800293c:	d00f      	beq.n	800295e <__ledf2+0x5a>
 800293e:	2900      	cmp	r1, #0
 8002940:	d12b      	bne.n	800299a <__ledf2+0x96>
 8002942:	9901      	ldr	r1, [sp, #4]
 8002944:	430c      	orrs	r4, r1
 8002946:	4651      	mov	r1, sl
 8002948:	2900      	cmp	r1, #0
 800294a:	d137      	bne.n	80029bc <__ledf2+0xb8>
 800294c:	4332      	orrs	r2, r6
 800294e:	d038      	beq.n	80029c2 <__ledf2+0xbe>
 8002950:	2c00      	cmp	r4, #0
 8002952:	d144      	bne.n	80029de <__ledf2+0xda>
 8002954:	2800      	cmp	r0, #0
 8002956:	d119      	bne.n	800298c <__ledf2+0x88>
 8002958:	2001      	movs	r0, #1
 800295a:	4240      	negs	r0, r0
 800295c:	e016      	b.n	800298c <__ledf2+0x88>
 800295e:	4316      	orrs	r6, r2
 8002960:	d113      	bne.n	800298a <__ledf2+0x86>
 8002962:	2900      	cmp	r1, #0
 8002964:	d102      	bne.n	800296c <__ledf2+0x68>
 8002966:	9f01      	ldr	r7, [sp, #4]
 8002968:	4327      	orrs	r7, r4
 800296a:	d0f3      	beq.n	8002954 <__ledf2+0x50>
 800296c:	4584      	cmp	ip, r0
 800296e:	d020      	beq.n	80029b2 <__ledf2+0xae>
 8002970:	4663      	mov	r3, ip
 8002972:	2002      	movs	r0, #2
 8002974:	3b01      	subs	r3, #1
 8002976:	4018      	ands	r0, r3
 8002978:	3801      	subs	r0, #1
 800297a:	e007      	b.n	800298c <__ledf2+0x88>
 800297c:	9f01      	ldr	r7, [sp, #4]
 800297e:	4327      	orrs	r7, r4
 8002980:	d103      	bne.n	800298a <__ledf2+0x86>
 8002982:	458a      	cmp	sl, r1
 8002984:	d1f4      	bne.n	8002970 <__ledf2+0x6c>
 8002986:	4316      	orrs	r6, r2
 8002988:	d01f      	beq.n	80029ca <__ledf2+0xc6>
 800298a:	2002      	movs	r0, #2
 800298c:	b003      	add	sp, #12
 800298e:	bcf0      	pop	{r4, r5, r6, r7}
 8002990:	46bb      	mov	fp, r7
 8002992:	46b2      	mov	sl, r6
 8002994:	46a9      	mov	r9, r5
 8002996:	46a0      	mov	r8, r4
 8002998:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800299a:	4654      	mov	r4, sl
 800299c:	2c00      	cmp	r4, #0
 800299e:	d0e7      	beq.n	8002970 <__ledf2+0x6c>
 80029a0:	4584      	cmp	ip, r0
 80029a2:	d1e5      	bne.n	8002970 <__ledf2+0x6c>
 80029a4:	4551      	cmp	r1, sl
 80029a6:	dce3      	bgt.n	8002970 <__ledf2+0x6c>
 80029a8:	db03      	blt.n	80029b2 <__ledf2+0xae>
 80029aa:	9b01      	ldr	r3, [sp, #4]
 80029ac:	42b3      	cmp	r3, r6
 80029ae:	d8df      	bhi.n	8002970 <__ledf2+0x6c>
 80029b0:	d00f      	beq.n	80029d2 <__ledf2+0xce>
 80029b2:	4663      	mov	r3, ip
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0cf      	beq.n	8002958 <__ledf2+0x54>
 80029b8:	4660      	mov	r0, ip
 80029ba:	e7e7      	b.n	800298c <__ledf2+0x88>
 80029bc:	2c00      	cmp	r4, #0
 80029be:	d0c9      	beq.n	8002954 <__ledf2+0x50>
 80029c0:	e7d4      	b.n	800296c <__ledf2+0x68>
 80029c2:	2000      	movs	r0, #0
 80029c4:	2c00      	cmp	r4, #0
 80029c6:	d0e1      	beq.n	800298c <__ledf2+0x88>
 80029c8:	e7d2      	b.n	8002970 <__ledf2+0x6c>
 80029ca:	4584      	cmp	ip, r0
 80029cc:	d1d0      	bne.n	8002970 <__ledf2+0x6c>
 80029ce:	2000      	movs	r0, #0
 80029d0:	e7dc      	b.n	800298c <__ledf2+0x88>
 80029d2:	45c8      	cmp	r8, r9
 80029d4:	d8cc      	bhi.n	8002970 <__ledf2+0x6c>
 80029d6:	2000      	movs	r0, #0
 80029d8:	45c8      	cmp	r8, r9
 80029da:	d2d7      	bcs.n	800298c <__ledf2+0x88>
 80029dc:	e7e9      	b.n	80029b2 <__ledf2+0xae>
 80029de:	4584      	cmp	ip, r0
 80029e0:	d0e3      	beq.n	80029aa <__ledf2+0xa6>
 80029e2:	e7c5      	b.n	8002970 <__ledf2+0x6c>
 80029e4:	000007ff 	.word	0x000007ff

080029e8 <_ZN3Pin5WriteE13GPIO_PinState>:
		this->pin = pin;
		this->defaultState = defaultState;
		this->isOutput = isOutput;
	};

	void Write(GPIO_PinState state) {
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
 80029f0:	000a      	movs	r2, r1
 80029f2:	1cfb      	adds	r3, r7, #3
 80029f4:	701a      	strb	r2, [r3, #0]
		if (this->isOutput && this->state != state)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	7a1b      	ldrb	r3, [r3, #8]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d016      	beq.n	8002a2c <_ZN3Pin5WriteE13GPIO_PinState+0x44>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	79db      	ldrb	r3, [r3, #7]
 8002a02:	1cfa      	adds	r2, r7, #3
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d010      	beq.n	8002a2c <_ZN3Pin5WriteE13GPIO_PinState+0x44>
		{
			this->state = state;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	1cfa      	adds	r2, r7, #3
 8002a0e:	7812      	ldrb	r2, [r2, #0]
 8002a10:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(state ^ this->defaultState));
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6818      	ldr	r0, [r3, #0]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	8899      	ldrh	r1, [r3, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	799a      	ldrb	r2, [r3, #6]
 8002a1e:	1cfb      	adds	r3, r7, #3
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	4053      	eors	r3, r2
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	001a      	movs	r2, r3
 8002a28:	f003 ff1d 	bl	8006866 <HAL_GPIO_WritePin>
		}
	};
 8002a2c:	46c0      	nop			@ (mov r8, r8)
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	b002      	add	sp, #8
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <_ZN3Pin5WriteEb>:
	void Write(bool state) {
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b082      	sub	sp, #8
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	000a      	movs	r2, r1
 8002a3e:	1cfb      	adds	r3, r7, #3
 8002a40:	701a      	strb	r2, [r3, #0]
		this->Write((GPIO_PinState)state);
 8002a42:	1cfb      	adds	r3, r7, #3
 8002a44:	781a      	ldrb	r2, [r3, #0]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0011      	movs	r1, r2
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	f7ff ffcc 	bl	80029e8 <_ZN3Pin5WriteE13GPIO_PinState>
	};
 8002a50:	46c0      	nop			@ (mov r8, r8)
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <_ZN6PWMPin4InitEv>:
	PWMPin() { };
	PWMPin(TIM_HandleTypeDef* timerHandle, uint16_t channel) {
		this->timerHandle = timerHandle;
		this->channel = channel;
	};
	HAL_StatusTypeDef Init() {
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
		return HAL_TIM_PWM_Start(this->timerHandle, this->channel);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	889b      	ldrh	r3, [r3, #4]
 8002a68:	0019      	movs	r1, r3
 8002a6a:	0010      	movs	r0, r2
 8002a6c:	f008 f8c8 	bl	800ac00 <HAL_TIM_PWM_Start>
 8002a70:	0003      	movs	r3, r0
	};
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZN6PWMPin6SetPWMEt>:
	HAL_StatusTypeDef DeInit() {
		return HAL_TIM_PWM_Stop(this->timerHandle, this->channel);
	};
	void SetPWM(uint16_t value) {
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	000a      	movs	r2, r1
 8002a84:	1cbb      	adds	r3, r7, #2
 8002a86:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(this->timerHandle, this->channel, value);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	889b      	ldrh	r3, [r3, #4]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <_ZN6PWMPin6SetPWMEt+0x24>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	1cba      	adds	r2, r7, #2
 8002a98:	8812      	ldrh	r2, [r2, #0]
 8002a9a:	635a      	str	r2, [r3, #52]	@ 0x34
	};
 8002a9c:	e01b      	b.n	8002ad6 <_ZN6PWMPin6SetPWMEt+0x5c>
		__HAL_TIM_SET_COMPARE(this->timerHandle, this->channel, value);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	889b      	ldrh	r3, [r3, #4]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d106      	bne.n	8002ab4 <_ZN6PWMPin6SetPWMEt+0x3a>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	1cba      	adds	r2, r7, #2
 8002aae:	8812      	ldrh	r2, [r2, #0]
 8002ab0:	639a      	str	r2, [r3, #56]	@ 0x38
	};
 8002ab2:	e010      	b.n	8002ad6 <_ZN6PWMPin6SetPWMEt+0x5c>
		__HAL_TIM_SET_COMPARE(this->timerHandle, this->channel, value);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	889b      	ldrh	r3, [r3, #4]
 8002ab8:	2b08      	cmp	r3, #8
 8002aba:	d106      	bne.n	8002aca <_ZN6PWMPin6SetPWMEt+0x50>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	1cba      	adds	r2, r7, #2
 8002ac4:	8812      	ldrh	r2, [r2, #0]
 8002ac6:	63da      	str	r2, [r3, #60]	@ 0x3c
	};
 8002ac8:	e005      	b.n	8002ad6 <_ZN6PWMPin6SetPWMEt+0x5c>
		__HAL_TIM_SET_COMPARE(this->timerHandle, this->channel, value);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	1cba      	adds	r2, r7, #2
 8002ad2:	8812      	ldrh	r2, [r2, #0]
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40
	};
 8002ad6:	46c0      	nop			@ (mov r8, r8)
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	b002      	add	sp, #8
 8002adc:	bd80      	pop	{r7, pc}

08002ade <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b082      	sub	sp, #8
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	1c18      	adds	r0, r3, #0
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <_ZSt3powff>:
  using ::pow;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  pow(float __x, float __y)
  { return __builtin_powf(__x, __y); }
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	1c11      	adds	r1, r2, #0
 8002b04:	1c18      	adds	r0, r3, #0
 8002b06:	f00d fae3 	bl	80100d0 <powf>
 8002b0a:	1c03      	adds	r3, r0, #0
 8002b0c:	1c18      	adds	r0, r3, #0
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	b002      	add	sp, #8
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <_ZN15LightingManagerC1EP13AP33772DriverP6PWMPinP18LightingIndicatorsP23AP33772_PDRequestObject>:
 */

#include <LightingManager.h>
#include "math.h"

LightingManager::LightingManager(AP33772Driver *pdDriver, PWMPin *pins, LightingIndicators *indPins, AP33772_PDRequestObject *desiredPDO)
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
 8002b22:	4a21      	ldr	r2, [pc, #132]	@ (8002ba8 <_ZN15LightingManagerC1EP13AP33772DriverP6PWMPinP18LightingIndicatorsP23AP33772_PDRequestObject+0x94>)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	841a      	strh	r2, [r3, #32]
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	845a      	strh	r2, [r3, #34]	@ 0x22
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	625a      	str	r2, [r3, #36]	@ 0x24
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	851a      	strh	r2, [r3, #40]	@ 0x28
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	222c      	movs	r2, #44	@ 0x2c
 8002b50:	2100      	movs	r1, #0
 8002b52:	5499      	strb	r1, [r3, r2]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	222d      	movs	r2, #45	@ 0x2d
 8002b58:	2100      	movs	r1, #0
 8002b5a:	5499      	strb	r1, [r3, r2]
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	635a      	str	r2, [r3, #52]	@ 0x34
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4a10      	ldr	r2, [pc, #64]	@ (8002bac <_ZN15LightingManagerC1EP13AP33772DriverP6PWMPinP18LightingIndicatorsP23AP33772_PDRequestObject+0x98>)
 8002b6c:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	22fe      	movs	r2, #254	@ 0xfe
 8002b72:	0592      	lsls	r2, r2, #22
 8002b74:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <_ZN15LightingManagerC1EP13AP33772DriverP6PWMPinP18LightingIndicatorsP23AP33772_PDRequestObject+0x9c>)
 8002b7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2244      	movs	r2, #68	@ 0x44
 8002b80:	2100      	movs	r1, #0
 8002b82:	5499      	strb	r1, [r3, r2]
{
	PdDriver   = pdDriver;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	68ba      	ldr	r2, [r7, #8]
 8002b88:	605a      	str	r2, [r3, #4]
	Pins       = pins;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	609a      	str	r2, [r3, #8]
	IndPins    = indPins;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	60da      	str	r2, [r3, #12]
	DesiredPDO = desiredPDO;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	69ba      	ldr	r2, [r7, #24]
 8002b9a:	615a      	str	r2, [r3, #20]
}
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b004      	add	sp, #16
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			@ (mov r8, r8)
 8002ba8:	08010c8c 	.word	0x08010c8c
 8002bac:	40400000 	.word	0x40400000
 8002bb0:	42700000 	.word	0x42700000

08002bb4 <_ZN15LightingManagerD1Ev>:

LightingManager::~LightingManager()
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	4a09      	ldr	r2, [pc, #36]	@ (8002be4 <_ZN15LightingManagerD1Ev+0x30>)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	601a      	str	r2, [r3, #0]
{
	PdDriver   = nullptr;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	605a      	str	r2, [r3, #4]
	Pins       = nullptr;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	609a      	str	r2, [r3, #8]
	IndPins    = nullptr;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	60da      	str	r2, [r3, #12]
	DesiredPDO = nullptr;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	615a      	str	r2, [r3, #20]
}
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	0018      	movs	r0, r3
 8002bde:	46bd      	mov	sp, r7
 8002be0:	b002      	add	sp, #8
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	08010c8c 	.word	0x08010c8c

08002be8 <_ZN15LightingManagerD0Ev>:
LightingManager::~LightingManager()
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
}
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	0018      	movs	r0, r3
 8002bf4:	f7ff ffde 	bl	8002bb4 <_ZN15LightingManagerD1Ev>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2148      	movs	r1, #72	@ 0x48
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f00d fa5f 	bl	80100c0 <_ZdlPvj>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <_ZN15LightingManager4InitEv>:

HAL_StatusTypeDef LightingManager::Init()
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LED_COUNT; ++i) {
 8002c14:	2300      	movs	r3, #0
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	e012      	b.n	8002c40 <_ZN15LightingManager4InitEv+0x34>
		if (Pins[i].Init() != HAL_OK) {
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	00db      	lsls	r3, r3, #3
 8002c22:	18d3      	adds	r3, r2, r3
 8002c24:	0018      	movs	r0, r3
 8002c26:	f7ff ff17 	bl	8002a58 <_ZN6PWMPin4InitEv>
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	1e5a      	subs	r2, r3, #1
 8002c2e:	4193      	sbcs	r3, r2
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <_ZN15LightingManager4InitEv+0x2e>
			return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e00a      	b.n	8002c50 <_ZN15LightingManager4InitEv+0x44>
	for (int i = 0; i < LED_COUNT; ++i) {
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b07      	cmp	r3, #7
 8002c44:	dde9      	ble.n	8002c1a <_ZN15LightingManager4InitEv+0xe>
		}
	}
	UpdateFlag = true;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2244      	movs	r2, #68	@ 0x44
 8002c4a:	2101      	movs	r1, #1
 8002c4c:	5499      	strb	r1, [r3, r2]

	return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	0018      	movs	r0, r3
 8002c52:	46bd      	mov	sp, r7
 8002c54:	b004      	add	sp, #16
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <_ZN15LightingManager15StatusInterruptEv>:

void LightingManager::StatusInterrupt()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b082      	sub	sp, #8
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	PdDriver->StatusInterrupt();
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	0018      	movs	r0, r3
 8002c66:	f000 fbb4 	bl	80033d2 <_ZN13AP33772Driver15StatusInterruptEv>
}
 8002c6a:	46c0      	nop			@ (mov r8, r8)
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	b002      	add	sp, #8
 8002c70:	bd80      	pop	{r7, pc}

08002c72 <_ZN15LightingManager9LightsOFFEv>:
	Enable     = true;
	UpdateFlag = true;
}

void LightingManager::LightsOFF()
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
	Enable     = false;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	222c      	movs	r2, #44	@ 0x2c
 8002c7e:	2100      	movs	r1, #0
 8002c80:	5499      	strb	r1, [r3, r2]
	UpdateFlag = true;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2244      	movs	r2, #68	@ 0x44
 8002c86:	2101      	movs	r1, #1
 8002c88:	5499      	strb	r1, [r3, r2]
}
 8002c8a:	46c0      	nop			@ (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b002      	add	sp, #8
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <_ZN15LightingManager12LightsToggleEv>:

void LightingManager::LightsToggle()
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b082      	sub	sp, #8
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
	Enable     = !Enable;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	222c      	movs	r2, #44	@ 0x2c
 8002c9e:	5c9b      	ldrb	r3, [r3, r2]
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	4053      	eors	r3, r2
 8002ca4:	b2d9      	uxtb	r1, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	222c      	movs	r2, #44	@ 0x2c
 8002caa:	5499      	strb	r1, [r3, r2]
	UpdateFlag = true;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2244      	movs	r2, #68	@ 0x44
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	5499      	strb	r1, [r3, r2]
}
 8002cb4:	46c0      	nop			@ (mov r8, r8)
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	b002      	add	sp, #8
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <_ZN15LightingManager16SetPotBrightnessEt>:
	Brightness = bright;
	UpdateFlag = true;
}

void LightingManager::SetPotBrightness(uint16_t bright)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	000a      	movs	r2, r1
 8002cc6:	1cbb      	adds	r3, r7, #2
 8002cc8:	801a      	strh	r2, [r3, #0]
	PotPosition = bright;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	1cba      	adds	r2, r7, #2
 8002cce:	8812      	ldrh	r2, [r2, #0]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
	if (PotPosition > (bright - 1) && PotPosition < (bright + 1)) {
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd6:	1cba      	adds	r2, r7, #2
 8002cd8:	8812      	ldrh	r2, [r2, #0]
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d81b      	bhi.n	8002d16 <_ZN15LightingManager16SetPotBrightnessEt+0x5a>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ce2:	1cba      	adds	r2, r7, #2
 8002ce4:	8812      	ldrh	r2, [r2, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d315      	bcc.n	8002d16 <_ZN15LightingManager16SetPotBrightnessEt+0x5a>
		Brightness      = (float)PotPosition / UINT12_MAXF;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cee:	0018      	movs	r0, r3
 8002cf0:	f7fe f9da 	bl	80010a8 <__aeabi_ui2f>
 8002cf4:	1c03      	adds	r3, r0, #0
 8002cf6:	490a      	ldr	r1, [pc, #40]	@ (8002d20 <_ZN15LightingManager16SetPotBrightnessEt+0x64>)
 8002cf8:	1c18      	adds	r0, r3, #0
 8002cfa:	f7fd fc8b 	bl	8000614 <__aeabi_fdiv>
 8002cfe:	1c03      	adds	r3, r0, #0
 8002d00:	1c1a      	adds	r2, r3, #0
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	625a      	str	r2, [r3, #36]	@ 0x24
		PrevPotPosition = PotPosition;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	855a      	strh	r2, [r3, #42]	@ 0x2a
		UpdateFlag      = true;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2244      	movs	r2, #68	@ 0x44
 8002d12:	2101      	movs	r1, #1
 8002d14:	5499      	strb	r1, [r3, r2]
	}
}
 8002d16:	46c0      	nop			@ (mov r8, r8)
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	b002      	add	sp, #8
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	46c0      	nop			@ (mov r8, r8)
 8002d20:	457ff000 	.word	0x457ff000

08002d24 <_ZN15LightingManager19ToggleMaxBrightnessEv>:
	McuTemp    = (float)temp / UINT12_MAXF;
	UpdateFlag = true;
}

void LightingManager::ToggleMaxBrightness()
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
	MaxBrightMode = !MaxBrightMode;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	222d      	movs	r2, #45	@ 0x2d
 8002d30:	5c9b      	ldrb	r3, [r3, r2]
 8002d32:	2201      	movs	r2, #1
 8002d34:	4053      	eors	r3, r2
 8002d36:	b2d9      	uxtb	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	222d      	movs	r2, #45	@ 0x2d
 8002d3c:	5499      	strb	r1, [r3, r2]
	UpdateFlag    = true;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2244      	movs	r2, #68	@ 0x44
 8002d42:	2101      	movs	r1, #1
 8002d44:	5499      	strb	r1, [r3, r2]
}
 8002d46:	46c0      	nop			@ (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_ZN15LightingManager14SetSelectedPDOEP16AP33772_PDObject>:
	ManualDerate = derate;
	UpdateFlag   = true;
}

void LightingManager::SetSelectedPDO(AP33772_PDObject *selectedPDO)
{
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
	SelectedPDO = selectedPDO;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	611a      	str	r2, [r3, #16]
	if (SelectedPDO != nullptr) {
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d028      	beq.n	8002db8 <_ZN15LightingManager14SetSelectedPDOEP16AP33772_PDObject+0x6a>
		CalcSupplyDerate();
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f000 f835 	bl	8002dd8 <_ZN15LightingManager16CalcSupplyDerateEv>
		if (SelectedPDO->minVoltage)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	2100      	movs	r1, #0
 8002d76:	1c18      	adds	r0, r3, #0
 8002d78:	f7fd fa5e 	bl	8000238 <__aeabi_fcmpeq>
 8002d7c:	1e03      	subs	r3, r0, #0
 8002d7e:	d103      	bne.n	8002d88 <_ZN15LightingManager14SetSelectedPDOEP16AP33772_PDObject+0x3a>
		UpdateFlag    = true;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2244      	movs	r2, #68	@ 0x44
 8002d84:	2101      	movs	r1, #1
 8002d86:	5499      	strb	r1, [r3, r2]
		if (SupplyDerate < 1.0f) {
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d8c:	21fe      	movs	r1, #254	@ 0xfe
 8002d8e:	0589      	lsls	r1, r1, #22
 8002d90:	1c18      	adds	r0, r3, #0
 8002d92:	f7fd fa57 	bl	8000244 <__aeabi_fcmplt>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d007      	beq.n	8002daa <_ZN15LightingManager14SetSelectedPDOEP16AP33772_PDObject+0x5c>
			IndPins->struggleBus.Write(true);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68db      	ldr	r3, [r3, #12]
 8002d9e:	3318      	adds	r3, #24
 8002da0:	2101      	movs	r1, #1
 8002da2:	0018      	movs	r0, r3
 8002da4:	f7ff fe46 	bl	8002a34 <_ZN3Pin5WriteEb>
		} else {
			IndPins->struggleBus.Write(false);
		}
	}
}
 8002da8:	e006      	b.n	8002db8 <_ZN15LightingManager14SetSelectedPDOEP16AP33772_PDObject+0x6a>
			IndPins->struggleBus.Write(false);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	3318      	adds	r3, #24
 8002db0:	2100      	movs	r1, #0
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff fe3e 	bl	8002a34 <_ZN3Pin5WriteEb>
}
 8002db8:	46c0      	nop			@ (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <_ZN15LightingManager18SetMeasurementsPtrEP22AP33772_MeasuredValues>:
	MaxTemperature = maxTemp;
	UpdateFlag     = true;
}

void LightingManager::SetMeasurementsPtr(AP33772_MeasuredValues *measurements)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
	MeasuredValues = measurements;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	619a      	str	r2, [r3, #24]
}
 8002dd0:	46c0      	nop			@ (mov r8, r8)
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	b002      	add	sp, #8
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <_ZN15LightingManager16CalcSupplyDerateEv>:

void LightingManager::CalcSupplyDerate()
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
	// Calc Voltage Derate:
	if (SelectedPDO->minVoltage < 6) {
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	691b      	ldr	r3, [r3, #16]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	4916      	ldr	r1, [pc, #88]	@ (8002e40 <_ZN15LightingManager16CalcSupplyDerateEv+0x68>)
 8002de8:	1c18      	adds	r0, r3, #0
 8002dea:	f7fd fa2b 	bl	8000244 <__aeabi_fcmplt>
 8002dee:	1e03      	subs	r3, r0, #0
 8002df0:	d003      	beq.n	8002dfa <_ZN15LightingManager16CalcSupplyDerateEv+0x22>
		SupplyDerate = LED_PWR_DERATE_5V;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a13      	ldr	r2, [pc, #76]	@ (8002e44 <_ZN15LightingManager16CalcSupplyDerateEv+0x6c>)
 8002df6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002df8:	e010      	b.n	8002e1c <_ZN15LightingManager16CalcSupplyDerateEv+0x44>
	} else if (SelectedPDO->minVoltage < 10) {
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4911      	ldr	r1, [pc, #68]	@ (8002e48 <_ZN15LightingManager16CalcSupplyDerateEv+0x70>)
 8002e02:	1c18      	adds	r0, r3, #0
 8002e04:	f7fd fa1e 	bl	8000244 <__aeabi_fcmplt>
 8002e08:	1e03      	subs	r3, r0, #0
 8002e0a:	d003      	beq.n	8002e14 <_ZN15LightingManager16CalcSupplyDerateEv+0x3c>
		SupplyDerate = LED_PWR_DERATE_9V;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e4c <_ZN15LightingManager16CalcSupplyDerateEv+0x74>)
 8002e10:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e12:	e003      	b.n	8002e1c <_ZN15LightingManager16CalcSupplyDerateEv+0x44>
	} else {
		SupplyDerate = LED_PWR_DERATE_12V;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	22fe      	movs	r2, #254	@ 0xfe
 8002e18:	0592      	lsls	r2, r2, #22
 8002e1a:	63da      	str	r2, [r3, #60]	@ 0x3c
	}

	// Calc Current Derate:
	SupplyDerate = SelectedPDO->current / DesiredPDO->maxCurrent;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	695b      	ldr	r3, [r3, #20]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	1c19      	adds	r1, r3, #0
 8002e2a:	1c10      	adds	r0, r2, #0
 8002e2c:	f7fd fbf2 	bl	8000614 <__aeabi_fdiv>
 8002e30:	1c03      	adds	r3, r0, #0
 8002e32:	1c1a      	adds	r2, r3, #0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002e38:	46c0      	nop			@ (mov r8, r8)
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	b002      	add	sp, #8
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	40c00000 	.word	0x40c00000
 8002e44:	3f266666 	.word	0x3f266666
 8002e48:	41200000 	.word	0x41200000
 8002e4c:	3f4ccccd 	.word	0x3f4ccccd

08002e50 <_ZN15LightingManager10CalcDerateEv>:

void LightingManager::CalcDerate()
{
 8002e50:	b590      	push	{r4, r7, lr}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
	// Manual Derating Mode:
	// Activated via the USB 'ManualDerate' command.
	if (ManualDerate != 0) {
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	2100      	movs	r1, #0
 8002e5e:	1c18      	adds	r0, r3, #0
 8002e60:	f7fd f9ea 	bl	8000238 <__aeabi_fcmpeq>
 8002e64:	1e03      	subs	r3, r0, #0
 8002e66:	d147      	bne.n	8002ef8 <_ZN15LightingManager10CalcDerateEv+0xa8>
		Derate = ManualDerate * SupplyDerate;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	1c19      	adds	r1, r3, #0
 8002e72:	1c10      	adds	r0, r2, #0
 8002e74:	f7fd fdb4 	bl	80009e0 <__aeabi_fmul>
 8002e78:	1c03      	adds	r3, r0, #0
 8002e7a:	1c1a      	adds	r2, r3, #0
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	635a      	str	r2, [r3, #52]	@ 0x34
		if (MaxBrightMode) {
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	222d      	movs	r2, #45	@ 0x2d
 8002e84:	5c9b      	ldrb	r3, [r3, r2]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d012      	beq.n	8002eb0 <_ZN15LightingManager10CalcDerateEv+0x60>
			Brightness = Derate;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	625a      	str	r2, [r3, #36]	@ 0x24
			RawBrightness = Derate * UINT16_MAXF;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e96:	493b      	ldr	r1, [pc, #236]	@ (8002f84 <_ZN15LightingManager10CalcDerateEv+0x134>)
 8002e98:	1c18      	adds	r0, r3, #0
 8002e9a:	f7fd fda1 	bl	80009e0 <__aeabi_fmul>
 8002e9e:	1c03      	adds	r3, r0, #0
 8002ea0:	1c18      	adds	r0, r3, #0
 8002ea2:	f7fd f9f7 	bl	8000294 <__aeabi_f2uiz>
 8002ea6:	0003      	movs	r3, r0
 8002ea8:	b29a      	uxth	r2, r3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	841a      	strh	r2, [r3, #32]
//		Derate = std::pow(PwrTemp / LED_DEFAULT_MAX_TEMP, TempDerateScale) * SupplyDerate * (McuTemp / MCU_DEFAULT_MAX_TEMP);
		Derate = std::pow(MeasuredValues->temp / LED_DEFAULT_MAX_TEMP, TempDerateScale) * SupplyDerate;
		RawMaxBright = Derate * UINT16_MAXF;
		RawBrightness = Brightness * InvertScale(Derate) * UINT16_MAXF;
	}
}
 8002eae:	e064      	b.n	8002f7a <_ZN15LightingManager10CalcDerateEv+0x12a>
			RawBrightness = Brightness * Derate * UINT16_MAXF;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002eb8:	1c19      	adds	r1, r3, #0
 8002eba:	1c10      	adds	r0, r2, #0
 8002ebc:	f7fd fd90 	bl	80009e0 <__aeabi_fmul>
 8002ec0:	1c03      	adds	r3, r0, #0
 8002ec2:	4930      	ldr	r1, [pc, #192]	@ (8002f84 <_ZN15LightingManager10CalcDerateEv+0x134>)
 8002ec4:	1c18      	adds	r0, r3, #0
 8002ec6:	f7fd fd8b 	bl	80009e0 <__aeabi_fmul>
 8002eca:	1c03      	adds	r3, r0, #0
 8002ecc:	1c18      	adds	r0, r3, #0
 8002ece:	f7fd f9e1 	bl	8000294 <__aeabi_f2uiz>
 8002ed2:	0003      	movs	r3, r0
 8002ed4:	b29a      	uxth	r2, r3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	841a      	strh	r2, [r3, #32]
			RawMaxBright = Derate * UINT16_MAXF;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ede:	4929      	ldr	r1, [pc, #164]	@ (8002f84 <_ZN15LightingManager10CalcDerateEv+0x134>)
 8002ee0:	1c18      	adds	r0, r3, #0
 8002ee2:	f7fd fd7d 	bl	80009e0 <__aeabi_fmul>
 8002ee6:	1c03      	adds	r3, r0, #0
 8002ee8:	1c18      	adds	r0, r3, #0
 8002eea:	f7fd f9d3 	bl	8000294 <__aeabi_f2uiz>
 8002eee:	0003      	movs	r3, r0
 8002ef0:	b29a      	uxth	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	845a      	strh	r2, [r3, #34]	@ 0x22
}
 8002ef6:	e040      	b.n	8002f7a <_ZN15LightingManager10CalcDerateEv+0x12a>
		Derate = std::pow(MeasuredValues->temp / LED_DEFAULT_MAX_TEMP, TempDerateScale) * SupplyDerate;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	689b      	ldr	r3, [r3, #8]
 8002efe:	4922      	ldr	r1, [pc, #136]	@ (8002f88 <_ZN15LightingManager10CalcDerateEv+0x138>)
 8002f00:	1c18      	adds	r0, r3, #0
 8002f02:	f7fd fb87 	bl	8000614 <__aeabi_fdiv>
 8002f06:	1c03      	adds	r3, r0, #0
 8002f08:	1c1a      	adds	r2, r3, #0
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f0e:	1c19      	adds	r1, r3, #0
 8002f10:	1c10      	adds	r0, r2, #0
 8002f12:	f7ff fdef 	bl	8002af4 <_ZSt3powff>
 8002f16:	1c02      	adds	r2, r0, #0
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f1c:	1c19      	adds	r1, r3, #0
 8002f1e:	1c10      	adds	r0, r2, #0
 8002f20:	f7fd fd5e 	bl	80009e0 <__aeabi_fmul>
 8002f24:	1c03      	adds	r3, r0, #0
 8002f26:	1c1a      	adds	r2, r3, #0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	635a      	str	r2, [r3, #52]	@ 0x34
		RawMaxBright = Derate * UINT16_MAXF;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f30:	4914      	ldr	r1, [pc, #80]	@ (8002f84 <_ZN15LightingManager10CalcDerateEv+0x134>)
 8002f32:	1c18      	adds	r0, r3, #0
 8002f34:	f7fd fd54 	bl	80009e0 <__aeabi_fmul>
 8002f38:	1c03      	adds	r3, r0, #0
 8002f3a:	1c18      	adds	r0, r3, #0
 8002f3c:	f7fd f9aa 	bl	8000294 <__aeabi_f2uiz>
 8002f40:	0003      	movs	r3, r0
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	845a      	strh	r2, [r3, #34]	@ 0x22
		RawBrightness = Brightness * InvertScale(Derate) * UINT16_MAXF;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f50:	1c18      	adds	r0, r3, #0
 8002f52:	f000 f8a6 	bl	80030a2 <_ZN15LightingManager11InvertScaleEf>
 8002f56:	1c03      	adds	r3, r0, #0
 8002f58:	1c19      	adds	r1, r3, #0
 8002f5a:	1c20      	adds	r0, r4, #0
 8002f5c:	f7fd fd40 	bl	80009e0 <__aeabi_fmul>
 8002f60:	1c03      	adds	r3, r0, #0
 8002f62:	4908      	ldr	r1, [pc, #32]	@ (8002f84 <_ZN15LightingManager10CalcDerateEv+0x134>)
 8002f64:	1c18      	adds	r0, r3, #0
 8002f66:	f7fd fd3b 	bl	80009e0 <__aeabi_fmul>
 8002f6a:	1c03      	adds	r3, r0, #0
 8002f6c:	1c18      	adds	r0, r3, #0
 8002f6e:	f7fd f991 	bl	8000294 <__aeabi_f2uiz>
 8002f72:	0003      	movs	r3, r0
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	841a      	strh	r2, [r3, #32]
}
 8002f7a:	46c0      	nop			@ (mov r8, r8)
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	b003      	add	sp, #12
 8002f80:	bd90      	pop	{r4, r7, pc}
 8002f82:	46c0      	nop			@ (mov r8, r8)
 8002f84:	477fff00 	.word	0x477fff00
 8002f88:	42700000 	.word	0x42700000

08002f8c <_ZN15LightingManager7SetLEDsEv>:

void LightingManager::SetLEDs()
{
 8002f8c:	b590      	push	{r4, r7, lr}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
	if (Enable) {
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	222c      	movs	r2, #44	@ 0x2c
 8002f98:	5c9b      	ldrb	r3, [r3, r2]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01c      	beq.n	8002fd8 <_ZN15LightingManager7SetLEDsEv+0x4c>
		for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8002f9e:	230f      	movs	r3, #15
 8002fa0:	18fb      	adds	r3, r7, r3
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	e011      	b.n	8002fcc <_ZN15LightingManager7SetLEDsEv+0x40>
			Pins[i].SetPWM(RawBrightness);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	240f      	movs	r4, #15
 8002fae:	193b      	adds	r3, r7, r4
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	18d2      	adds	r2, r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	8c1b      	ldrh	r3, [r3, #32]
 8002fba:	0019      	movs	r1, r3
 8002fbc:	0010      	movs	r0, r2
 8002fbe:	f7ff fd5c 	bl	8002a7a <_ZN6PWMPin6SetPWMEt>
		for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8002fc2:	193b      	adds	r3, r7, r4
 8002fc4:	193a      	adds	r2, r7, r4
 8002fc6:	7812      	ldrb	r2, [r2, #0]
 8002fc8:	3201      	adds	r2, #1
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	230f      	movs	r3, #15
 8002fce:	18fb      	adds	r3, r7, r3
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b07      	cmp	r3, #7
 8002fd4:	d9e8      	bls.n	8002fa8 <_ZN15LightingManager7SetLEDsEv+0x1c>
	} else {
		for (uint8_t i = 0; i < LED_COUNT; ++i) {
			Pins[i].SetPWM(0);
		}
	}
}
 8002fd6:	e019      	b.n	800300c <_ZN15LightingManager7SetLEDsEv+0x80>
		for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8002fd8:	230e      	movs	r3, #14
 8002fda:	18fb      	adds	r3, r7, r3
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
 8002fe0:	e00f      	b.n	8003002 <_ZN15LightingManager7SetLEDsEv+0x76>
			Pins[i].SetPWM(0);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	240e      	movs	r4, #14
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	18d3      	adds	r3, r2, r3
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f7ff fd41 	bl	8002a7a <_ZN6PWMPin6SetPWMEt>
		for (uint8_t i = 0; i < LED_COUNT; ++i) {
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	193a      	adds	r2, r7, r4
 8002ffc:	7812      	ldrb	r2, [r2, #0]
 8002ffe:	3201      	adds	r2, #1
 8003000:	701a      	strb	r2, [r3, #0]
 8003002:	230e      	movs	r3, #14
 8003004:	18fb      	adds	r3, r7, r3
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b07      	cmp	r3, #7
 800300a:	d9ea      	bls.n	8002fe2 <_ZN15LightingManager7SetLEDsEv+0x56>
}
 800300c:	46c0      	nop			@ (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b005      	add	sp, #20
 8003012:	bd90      	pop	{r4, r7, pc}

08003014 <_ZN15LightingManager6UpdateEv>:

void LightingManager::Update()
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	if (!UpdateFlag) return;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2244      	movs	r2, #68	@ 0x44
 8003020:	5c9b      	ldrb	r3, [r3, r2]
 8003022:	2201      	movs	r2, #1
 8003024:	4053      	eors	r3, r2
 8003026:	b2db      	uxtb	r3, r3
 8003028:	2b00      	cmp	r3, #0
 800302a:	d134      	bne.n	8003096 <_ZN15LightingManager6UpdateEv+0x82>
	if (SelectedPDO == nullptr) return;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d032      	beq.n	800309a <_ZN15LightingManager6UpdateEv+0x86>

	if (MeasuredValues->current >= SelectedPDO->current) {
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c19      	adds	r1, r3, #0
 8003042:	1c10      	adds	r0, r2, #0
 8003044:	f7fd f91c 	bl	8000280 <__aeabi_fcmpge>
 8003048:	1e03      	subs	r3, r0, #0
 800304a:	d003      	beq.n	8003054 <_ZN15LightingManager6UpdateEv+0x40>
		LightsOFF();
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	0018      	movs	r0, r3
 8003050:	f7ff fe0f 	bl	8002c72 <_ZN15LightingManager9LightsOFFEv>
	}

	CalcDerate();
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	0018      	movs	r0, r3
 8003058:	f7ff fefa 	bl	8002e50 <_ZN15LightingManager10CalcDerateEv>
	SetLEDs();
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	0018      	movs	r0, r3
 8003060:	f7ff ff94 	bl	8002f8c <_ZN15LightingManager7SetLEDsEv>

	IndPins->status.Write(Enable);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	0018      	movs	r0, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	222c      	movs	r2, #44	@ 0x2c
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	0019      	movs	r1, r3
 8003072:	f7ff fcdf 	bl	8002a34 <_ZN3Pin5WriteEb>
	IndPins->maxBright.Write(MaxBrightMode);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68db      	ldr	r3, [r3, #12]
 800307a:	330c      	adds	r3, #12
 800307c:	001a      	movs	r2, r3
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	212d      	movs	r1, #45	@ 0x2d
 8003082:	5c5b      	ldrb	r3, [r3, r1]
 8003084:	0019      	movs	r1, r3
 8003086:	0010      	movs	r0, r2
 8003088:	f7ff fcd4 	bl	8002a34 <_ZN3Pin5WriteEb>

	UpdateFlag = false;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2244      	movs	r2, #68	@ 0x44
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
 8003094:	e002      	b.n	800309c <_ZN15LightingManager6UpdateEv+0x88>
	if (!UpdateFlag) return;
 8003096:	46c0      	nop			@ (mov r8, r8)
 8003098:	e000      	b.n	800309c <_ZN15LightingManager6UpdateEv+0x88>
	if (SelectedPDO == nullptr) return;
 800309a:	46c0      	nop			@ (mov r8, r8)
}
 800309c:	46bd      	mov	sp, r7
 800309e:	b002      	add	sp, #8
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <_ZN15LightingManager11InvertScaleEf>:

float LightingManager::InvertScale(float input)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b082      	sub	sp, #8
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
	return abs(input - 1);
 80030aa:	21fe      	movs	r1, #254	@ 0xfe
 80030ac:	0589      	lsls	r1, r1, #22
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f7fd fdd4 	bl	8000c5c <__aeabi_fsub>
 80030b4:	1c03      	adds	r3, r0, #0
 80030b6:	1c18      	adds	r0, r3, #0
 80030b8:	f7ff fd11 	bl	8002ade <_ZSt3absf>
 80030bc:	1c03      	adds	r3, r0, #0
}
 80030be:	1c18      	adds	r0, r3, #0
 80030c0:	46bd      	mov	sp, r7
 80030c2:	b002      	add	sp, #8
 80030c4:	bd80      	pop	{r7, pc}
	...

080030c8 <_ZN10UsbManagerC1EP19_USBD_HandleTypeDef>:
 *      Author: Daxxn
 */

#include <UsbManager.h>

UsbManager::UsbManager(_USBD_HandleTypeDef *usbHandle)
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	4a19      	ldr	r2, [pc, #100]	@ (8003138 <_ZN10UsbManagerC1EP19_USBD_HandleTypeDef+0x70>)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	601a      	str	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	669a      	str	r2, [r3, #104]	@ 0x68
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	66da      	str	r2, [r3, #108]	@ 0x6c
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2270      	movs	r2, #112	@ 0x70
 80030e8:	2100      	movs	r1, #0
 80030ea:	5499      	strb	r1, [r3, r2]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2271      	movs	r2, #113	@ 0x71
 80030f0:	2100      	movs	r1, #0
 80030f2:	5499      	strb	r1, [r3, r2]
{
	Handle = usbHandle;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	605a      	str	r2, [r3, #4]
	for (uint8_t i = 0; i < USB_CALLBACK_LIST_SIZE; ++i) {
 80030fa:	230f      	movs	r3, #15
 80030fc:	18fb      	adds	r3, r7, r3
 80030fe:	2200      	movs	r2, #0
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e00e      	b.n	8003122 <_ZN10UsbManagerC1EP19_USBD_HandleTypeDef+0x5a>
		Callbacks[i] = nullptr;
 8003104:	210f      	movs	r1, #15
 8003106:	187b      	adds	r3, r7, r1
 8003108:	781b      	ldrb	r3, [r3, #0]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	331c      	adds	r3, #28
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	18d3      	adds	r3, r2, r3
 8003112:	3304      	adds	r3, #4
 8003114:	2200      	movs	r2, #0
 8003116:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < USB_CALLBACK_LIST_SIZE; ++i) {
 8003118:	187b      	adds	r3, r7, r1
 800311a:	187a      	adds	r2, r7, r1
 800311c:	7812      	ldrb	r2, [r2, #0]
 800311e:	3201      	adds	r2, #1
 8003120:	701a      	strb	r2, [r3, #0]
 8003122:	230f      	movs	r3, #15
 8003124:	18fb      	adds	r3, r7, r3
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	2bff      	cmp	r3, #255	@ 0xff
 800312a:	d1eb      	bne.n	8003104 <_ZN10UsbManagerC1EP19_USBD_HandleTypeDef+0x3c>
	}
}
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	0018      	movs	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	b004      	add	sp, #16
 8003134:	bd80      	pop	{r7, pc}
 8003136:	46c0      	nop			@ (mov r8, r8)
 8003138:	08010c9c 	.word	0x08010c9c

0800313c <_ZN10UsbManagerD1Ev>:

UsbManager::~UsbManager()
 800313c:	b580      	push	{r7, lr}
 800313e:	b082      	sub	sp, #8
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	4a05      	ldr	r2, [pc, #20]	@ (800315c <_ZN10UsbManagerD1Ev+0x20>)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	601a      	str	r2, [r3, #0]
{
	Handle = nullptr;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2200      	movs	r2, #0
 800314e:	605a      	str	r2, [r3, #4]
}
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	0018      	movs	r0, r3
 8003154:	46bd      	mov	sp, r7
 8003156:	b002      	add	sp, #8
 8003158:	bd80      	pop	{r7, pc}
 800315a:	46c0      	nop			@ (mov r8, r8)
 800315c:	08010c9c 	.word	0x08010c9c

08003160 <_ZN10UsbManagerD0Ev>:
UsbManager::~UsbManager()
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
}
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	0018      	movs	r0, r3
 800316c:	f7ff ffe6 	bl	800313c <_ZN10UsbManagerD1Ev>
 8003170:	238e      	movs	r3, #142	@ 0x8e
 8003172:	00da      	lsls	r2, r3, #3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	0011      	movs	r1, r2
 8003178:	0018      	movs	r0, r3
 800317a:	f00c ffa1 	bl	80100c0 <_ZdlPvj>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	0018      	movs	r0, r3
 8003182:	46bd      	mov	sp, r7
 8003184:	b002      	add	sp, #8
 8003186:	bd80      	pop	{r7, pc}

08003188 <_ZN10UsbManager16ReceivedCallbackEPhPm>:
{
	Callbacks[cmd] = callback;
}

void UsbManager::ReceivedCallback(uint8_t *buffer, uint32_t *len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
	assert_param(*len <= USB_RX_BUFFER_SIZE);
	for (uint32_t i = 0; i < *len; ++i) {
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e00c      	b.n	80031b4 <_ZN10UsbManager16ReceivedCallbackEPhPm+0x2c>
		RxBuffer[i] = buffer[i];
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	18d3      	adds	r3, r2, r3
 80031a0:	7819      	ldrb	r1, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	18d3      	adds	r3, r2, r3
 80031a8:	3308      	adds	r3, #8
 80031aa:	1c0a      	adds	r2, r1, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	for (uint32_t i = 0; i < *len; ++i) {
 80031ae:	697b      	ldr	r3, [r7, #20]
 80031b0:	3301      	adds	r3, #1
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	697a      	ldr	r2, [r7, #20]
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d3ed      	bcc.n	800319a <_ZN10UsbManager16ReceivedCallbackEPhPm+0x12>
	}
	RxLen = *len;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	669a      	str	r2, [r3, #104]	@ 0x68
	RxFlag = true;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2270      	movs	r2, #112	@ 0x70
 80031ca:	2101      	movs	r1, #1
 80031cc:	5499      	strb	r1, [r3, r2]
}
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	46bd      	mov	sp, r7
 80031d2:	b006      	add	sp, #24
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <_ZN22AP33772_MeasuredValuesC1Ev>:

typedef struct {
	float voltage = 0;
	float current = 0;
	float temp    = 0;
} AP33772_MeasuredValues;
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b082      	sub	sp, #8
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	605a      	str	r2, [r3, #4]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	0018      	movs	r0, r3
 80031f4:	46bd      	mov	sp, r7
 80031f6:	b002      	add	sp, #8
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_ZN14AP33772_StatusC1Ev>:
} AP33772_Status;
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b082      	sub	sp, #8
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	701a      	strb	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	705a      	strb	r2, [r3, #1]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	709a      	strb	r2, [r3, #2]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	70da      	strb	r2, [r3, #3]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	711a      	strb	r2, [r3, #4]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2200      	movs	r2, #0
 8003224:	715a      	strb	r2, [r3, #5]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2200      	movs	r2, #0
 800322a:	719a      	strb	r2, [r3, #6]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	71da      	strb	r2, [r3, #7]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	b002      	add	sp, #8
 800323a:	bd80      	pop	{r7, pc}

0800323c <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject>:
	for (uint8_t i = 0; i < AP33772_TX_BUFFER_SIZE; ++i) {
		this->txBuffer[i] = 0;
	}
}

AP33772Driver::AP33772Driver(I2C_HandleTypeDef *hi2c, AP33772_PDRequestObject *desiredPDO)
 800323c:	b580      	push	{r7, lr}
 800323e:	b086      	sub	sp, #24
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
 8003248:	4a3c      	ldr	r2, [pc, #240]	@ (800333c <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject+0x100>)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	333c      	adds	r3, #60	@ 0x3c
 8003252:	0018      	movs	r0, r3
 8003254:	f7ff ffbf 	bl	80031d6 <_ZN22AP33772_MeasuredValuesC1Ev>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	3348      	adds	r3, #72	@ 0x48
 800325c:	0018      	movs	r0, r3
 800325e:	f7ff ffcc 	bl	80031fa <_ZN14AP33772_StatusC1Ev>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3350      	adds	r3, #80	@ 0x50
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff ffc7 	bl	80031fa <_ZN14AP33772_StatusC1Ev>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3358      	adds	r3, #88	@ 0x58
 8003270:	2270      	movs	r2, #112	@ 0x70
 8003272:	2100      	movs	r1, #0
 8003274:	0018      	movs	r0, r3
 8003276:	f00d fbf3 	bl	8010a60 <memset>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	22c8      	movs	r2, #200	@ 0xc8
 800327e:	2100      	movs	r1, #0
 8003280:	5499      	strb	r1, [r3, r2]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	22c9      	movs	r2, #201	@ 0xc9
 8003286:	2100      	movs	r1, #0
 8003288:	5499      	strb	r1, [r3, r2]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22d0      	movs	r2, #208	@ 0xd0
 800328e:	2100      	movs	r1, #0
 8003290:	5499      	strb	r1, [r3, r2]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	22d1      	movs	r2, #209	@ 0xd1
 8003296:	2100      	movs	r1, #0
 8003298:	5499      	strb	r1, [r3, r2]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	22d2      	movs	r2, #210	@ 0xd2
 800329e:	2100      	movs	r1, #0
 80032a0:	5499      	strb	r1, [r3, r2]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	22d4      	movs	r2, #212	@ 0xd4
 80032a6:	4926      	ldr	r1, [pc, #152]	@ (8003340 <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject+0x104>)
 80032a8:	189b      	adds	r3, r3, r2
 80032aa:	000a      	movs	r2, r1
 80032ac:	ca03      	ldmia	r2!, {r0, r1}
 80032ae:	c303      	stmia	r3!, {r0, r1}
{
	this->hi2c = hi2c;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	68ba      	ldr	r2, [r7, #8]
 80032b4:	605a      	str	r2, [r3, #4]
	this->address = AP33772_ADDRESS << 1;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	22a2      	movs	r2, #162	@ 0xa2
 80032ba:	721a      	strb	r2, [r3, #8]
	this->srcPDOCount = 0;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	22c8      	movs	r2, #200	@ 0xc8
 80032c0:	2100      	movs	r1, #0
 80032c2:	5499      	strb	r1, [r3, r2]
	this->desiredPDO = desiredPDO;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	21cc      	movs	r1, #204	@ 0xcc
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	505a      	str	r2, [r3, r1]
	this->temp.integer = 0;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	22dc      	movs	r2, #220	@ 0xdc
 80032d0:	2100      	movs	r1, #0
 80032d2:	5099      	str	r1, [r3, r2]
	for (uint8_t i = 0; i < AP33772_BUFFER_SIZE; ++i) {
 80032d4:	2317      	movs	r3, #23
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	2200      	movs	r2, #0
 80032da:	701a      	strb	r2, [r3, #0]
 80032dc:	e00b      	b.n	80032f6 <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject+0xba>
		this->buffer[i] = 0;
 80032de:	2117      	movs	r1, #23
 80032e0:	187b      	adds	r3, r7, r1
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	18d3      	adds	r3, r2, r3
 80032e8:	2200      	movs	r2, #0
 80032ea:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i < AP33772_BUFFER_SIZE; ++i) {
 80032ec:	187b      	adds	r3, r7, r1
 80032ee:	187a      	adds	r2, r7, r1
 80032f0:	7812      	ldrb	r2, [r2, #0]
 80032f2:	3201      	adds	r2, #1
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	2317      	movs	r3, #23
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b23      	cmp	r3, #35	@ 0x23
 80032fe:	d9ee      	bls.n	80032de <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject+0xa2>
	}
	for (uint8_t i = 0; i < AP33772_TX_BUFFER_SIZE; ++i) {
 8003300:	2316      	movs	r3, #22
 8003302:	18fb      	adds	r3, r7, r3
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	e00d      	b.n	8003326 <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject+0xea>
		this->txBuffer[i] = 0;
 800330a:	2016      	movs	r0, #22
 800330c:	183b      	adds	r3, r7, r0
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	212d      	movs	r1, #45	@ 0x2d
 8003314:	18d3      	adds	r3, r2, r3
 8003316:	185b      	adds	r3, r3, r1
 8003318:	2200      	movs	r2, #0
 800331a:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 0; i < AP33772_TX_BUFFER_SIZE; ++i) {
 800331c:	183b      	adds	r3, r7, r0
 800331e:	183a      	adds	r2, r7, r0
 8003320:	7812      	ldrb	r2, [r2, #0]
 8003322:	3201      	adds	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	2316      	movs	r3, #22
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b09      	cmp	r3, #9
 800332e:	d9ec      	bls.n	800330a <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject+0xce>
	}
}
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b006      	add	sp, #24
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			@ (mov r8, r8)
 800333c:	08010cb4 	.word	0x08010cb4
 8003340:	08010ca4 	.word	0x08010ca4

08003344 <_ZN13AP33772DriverD1Ev>:

AP33772Driver::~AP33772Driver()
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	4a05      	ldr	r2, [pc, #20]	@ (8003364 <_ZN13AP33772DriverD1Ev+0x20>)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	601a      	str	r2, [r3, #0]
{
	this->hi2c = nullptr;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2200      	movs	r2, #0
 8003356:	605a      	str	r2, [r3, #4]
}
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	0018      	movs	r0, r3
 800335c:	46bd      	mov	sp, r7
 800335e:	b002      	add	sp, #8
 8003360:	bd80      	pop	{r7, pc}
 8003362:	46c0      	nop			@ (mov r8, r8)
 8003364:	08010cb4 	.word	0x08010cb4

08003368 <_ZN13AP33772DriverD0Ev>:
AP33772Driver::~AP33772Driver()
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
}
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	0018      	movs	r0, r3
 8003374:	f7ff ffe6 	bl	8003344 <_ZN13AP33772DriverD1Ev>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	21e0      	movs	r1, #224	@ 0xe0
 800337c:	0018      	movs	r0, r3
 800337e:	f00c fe9f 	bl	80100c0 <_ZdlPvj>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	0018      	movs	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	b002      	add	sp, #8
 800338a:	bd80      	pop	{r7, pc}

0800338c <_ZN13AP33772Driver4InitEv>:

HAL_StatusTypeDef AP33772Driver::Init()
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
	// Read PDOs from the chip.
	if (this->ReadSourcePDOs() != HAL_OK) {
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	0018      	movs	r0, r3
 8003398:	f000 f99d 	bl	80036d6 <_ZN13AP33772Driver14ReadSourcePDOsEv>
 800339c:	0003      	movs	r3, r0
 800339e:	1e5a      	subs	r2, r3, #1
 80033a0:	4193      	sbcs	r3, r2
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <_ZN13AP33772Driver4InitEv+0x20>
		return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e00e      	b.n	80033ca <_ZN13AP33772Driver4InitEv+0x3e>
	}
	this->FindNearestPDO();
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 fb24 	bl	80039fc <_ZN13AP33772Driver14FindNearestPDOEv>
	if (!this->foundPDO) {
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	22d0      	movs	r2, #208	@ 0xd0
 80033b8:	5c9b      	ldrb	r3, [r3, r2]
 80033ba:	2201      	movs	r2, #1
 80033bc:	4053      	eors	r3, r2
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <_ZN13AP33772Driver4InitEv+0x3c>
		return HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	e000      	b.n	80033ca <_ZN13AP33772Driver4InitEv+0x3e>
	}
	return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	0018      	movs	r0, r3
 80033cc:	46bd      	mov	sp, r7
 80033ce:	b002      	add	sp, #8
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <_ZN13AP33772Driver15StatusInterruptEv>:

void AP33772Driver::StatusInterrupt()
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
	if (this->GetStatus() != HAL_OK) {
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0018      	movs	r0, r3
 80033de:	f000 f803 	bl	80033e8 <_ZN13AP33772Driver9GetStatusEv>
//	if (this->status.newPDO) {
//		foundPDO = false;
//		newPDOFlag = true;
//	}
	// handle the different types of status flags...
}
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b002      	add	sp, #8
 80033e6:	bd80      	pop	{r7, pc}

080033e8 <_ZN13AP33772Driver9GetStatusEv>:
//	uint32_t currTick = HAL_GetTick();
//	if (currTick )
}

HAL_StatusTypeDef AP33772Driver::GetStatus()
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
	if (this->ReadRegister(AP33772_CMD_STATUS, 1) != HAL_OK) {
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	211d      	movs	r1, #29
 80033f6:	0018      	movs	r0, r3
 80033f8:	f000 f9ca 	bl	8003790 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 80033fc:	0003      	movs	r3, r0
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	4193      	sbcs	r3, r2
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <_ZN13AP33772Driver9GetStatusEv+0x24>
		return HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e055      	b.n	80034b8 <_ZN13AP33772Driver9GetStatusEv+0xd0>
	}
	this->status.ready       = (this->buffer[0] & 0b00000001);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	7a5b      	ldrb	r3, [r3, #9]
 8003410:	001a      	movs	r2, r3
 8003412:	2301      	movs	r3, #1
 8003414:	4013      	ands	r3, r2
 8003416:	1e5a      	subs	r2, r3, #1
 8003418:	4193      	sbcs	r3, r2
 800341a:	b2d9      	uxtb	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2248      	movs	r2, #72	@ 0x48
 8003420:	5499      	strb	r1, [r3, r2]
	if (!this->status.ready) {
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2248      	movs	r2, #72	@ 0x48
 8003426:	5c9b      	ldrb	r3, [r3, r2]
 8003428:	2201      	movs	r2, #1
 800342a:	4053      	eors	r3, r2
 800342c:	b2db      	uxtb	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	d001      	beq.n	8003436 <_ZN13AP33772Driver9GetStatusEv+0x4e>
		return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e040      	b.n	80034b8 <_ZN13AP33772Driver9GetStatusEv+0xd0>
	}
	this->status.success     = (this->buffer[0] & 0b00000010) != 0;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	7a5b      	ldrb	r3, [r3, #9]
 800343a:	001a      	movs	r2, r3
 800343c:	2302      	movs	r3, #2
 800343e:	4013      	ands	r3, r2
 8003440:	1e5a      	subs	r2, r3, #1
 8003442:	4193      	sbcs	r3, r2
 8003444:	b2d9      	uxtb	r1, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2249      	movs	r2, #73	@ 0x49
 800344a:	5499      	strb	r1, [r3, r2]
	this->status.newPDO      = (this->buffer[0] & 0b00000100) != 0;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	7a5b      	ldrb	r3, [r3, #9]
 8003450:	001a      	movs	r2, r3
 8003452:	2304      	movs	r3, #4
 8003454:	4013      	ands	r3, r2
 8003456:	1e5a      	subs	r2, r3, #1
 8003458:	4193      	sbcs	r3, r2
 800345a:	b2d9      	uxtb	r1, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	224a      	movs	r2, #74	@ 0x4a
 8003460:	5499      	strb	r1, [r3, r2]
	this->status.overVolt    = (this->buffer[0] & 0b00010000) != 0;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	7a5b      	ldrb	r3, [r3, #9]
 8003466:	001a      	movs	r2, r3
 8003468:	2310      	movs	r3, #16
 800346a:	4013      	ands	r3, r2
 800346c:	1e5a      	subs	r2, r3, #1
 800346e:	4193      	sbcs	r3, r2
 8003470:	b2d9      	uxtb	r1, r3
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	224c      	movs	r2, #76	@ 0x4c
 8003476:	5499      	strb	r1, [r3, r2]
	this->status.overCurrent = (this->buffer[0] & 0b00100000) != 0;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7a5b      	ldrb	r3, [r3, #9]
 800347c:	001a      	movs	r2, r3
 800347e:	2320      	movs	r3, #32
 8003480:	4013      	ands	r3, r2
 8003482:	1e5a      	subs	r2, r3, #1
 8003484:	4193      	sbcs	r3, r2
 8003486:	b2d9      	uxtb	r1, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	224d      	movs	r2, #77	@ 0x4d
 800348c:	5499      	strb	r1, [r3, r2]
	this->status.overTemp    = (this->buffer[0] & 0b01000000) != 0;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	7a5b      	ldrb	r3, [r3, #9]
 8003492:	001a      	movs	r2, r3
 8003494:	2340      	movs	r3, #64	@ 0x40
 8003496:	4013      	ands	r3, r2
 8003498:	1e5a      	subs	r2, r3, #1
 800349a:	4193      	sbcs	r3, r2
 800349c:	b2d9      	uxtb	r1, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	224e      	movs	r2, #78	@ 0x4e
 80034a2:	5499      	strb	r1, [r3, r2]
	this->status.derating    = (this->buffer[0] & 0b10000000) != 0;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	7a5b      	ldrb	r3, [r3, #9]
 80034a8:	b25b      	sxtb	r3, r3
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	09db      	lsrs	r3, r3, #7
 80034ae:	b2d9      	uxtb	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	224f      	movs	r2, #79	@ 0x4f
 80034b4:	5499      	strb	r1, [r3, r2]
	return HAL_OK;
 80034b6:	2300      	movs	r3, #0
}
 80034b8:	0018      	movs	r0, r3
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b002      	add	sp, #8
 80034be:	bd80      	pop	{r7, pc}

080034c0 <_ZN13AP33772Driver10GetVoltageEv>:

HAL_StatusTypeDef AP33772Driver::GetVoltage()
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b082      	sub	sp, #8
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
	if (this->ReadRegister(AP33772_CMD_VOLTAGE, 1) != HAL_OK) {
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	2120      	movs	r1, #32
 80034ce:	0018      	movs	r0, r3
 80034d0:	f000 f95e 	bl	8003790 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 80034d4:	0003      	movs	r3, r0
 80034d6:	1e5a      	subs	r2, r3, #1
 80034d8:	4193      	sbcs	r3, r2
 80034da:	b2db      	uxtb	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d001      	beq.n	80034e4 <_ZN13AP33772Driver10GetVoltageEv+0x24>
		return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e012      	b.n	800350a <_ZN13AP33772Driver10GetVoltageEv+0x4a>
	}
	this->measured.voltage = this->buffer[0] * 0.08;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	7a5b      	ldrb	r3, [r3, #9]
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fe ffd9 	bl	80024a0 <__aeabi_i2d>
 80034ee:	4a09      	ldr	r2, [pc, #36]	@ (8003514 <_ZN13AP33772Driver10GetVoltageEv+0x54>)
 80034f0:	4b09      	ldr	r3, [pc, #36]	@ (8003518 <_ZN13AP33772Driver10GetVoltageEv+0x58>)
 80034f2:	f7fe f935 	bl	8001760 <__aeabi_dmul>
 80034f6:	0002      	movs	r2, r0
 80034f8:	000b      	movs	r3, r1
 80034fa:	0010      	movs	r0, r2
 80034fc:	0019      	movs	r1, r3
 80034fe:	f7ff f869 	bl	80025d4 <__aeabi_d2f>
 8003502:	1c02      	adds	r2, r0, #0
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	63da      	str	r2, [r3, #60]	@ 0x3c
	return HAL_OK;
 8003508:	2300      	movs	r3, #0
}
 800350a:	0018      	movs	r0, r3
 800350c:	46bd      	mov	sp, r7
 800350e:	b002      	add	sp, #8
 8003510:	bd80      	pop	{r7, pc}
 8003512:	46c0      	nop			@ (mov r8, r8)
 8003514:	47ae147b 	.word	0x47ae147b
 8003518:	3fb47ae1 	.word	0x3fb47ae1

0800351c <_ZN13AP33772Driver10GetCurrentEv>:

HAL_StatusTypeDef AP33772Driver::GetCurrent()
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
	if (this->ReadRegister(AP33772_CMD_CURRENT, 1) != HAL_OK) {
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	2121      	movs	r1, #33	@ 0x21
 800352a:	0018      	movs	r0, r3
 800352c:	f000 f930 	bl	8003790 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 8003530:	0003      	movs	r3, r0
 8003532:	1e5a      	subs	r2, r3, #1
 8003534:	4193      	sbcs	r3, r2
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <_ZN13AP33772Driver10GetCurrentEv+0x24>
		return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e012      	b.n	8003566 <_ZN13AP33772Driver10GetCurrentEv+0x4a>
	}
	this->measured.current = this->buffer[0] * 0.024;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	7a5b      	ldrb	r3, [r3, #9]
 8003544:	0018      	movs	r0, r3
 8003546:	f7fe ffab 	bl	80024a0 <__aeabi_i2d>
 800354a:	4a09      	ldr	r2, [pc, #36]	@ (8003570 <_ZN13AP33772Driver10GetCurrentEv+0x54>)
 800354c:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <_ZN13AP33772Driver10GetCurrentEv+0x58>)
 800354e:	f7fe f907 	bl	8001760 <__aeabi_dmul>
 8003552:	0002      	movs	r2, r0
 8003554:	000b      	movs	r3, r1
 8003556:	0010      	movs	r0, r2
 8003558:	0019      	movs	r1, r3
 800355a:	f7ff f83b 	bl	80025d4 <__aeabi_d2f>
 800355e:	1c02      	adds	r2, r0, #0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	641a      	str	r2, [r3, #64]	@ 0x40
	return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b002      	add	sp, #8
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			@ (mov r8, r8)
 8003570:	bc6a7efa 	.word	0xbc6a7efa
 8003574:	3f989374 	.word	0x3f989374

08003578 <_ZN13AP33772Driver7GetTempEv>:

HAL_StatusTypeDef AP33772Driver::GetTemp()
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
	if (this->ReadRegister(AP33772_CMD_TEMP, 1) != HAL_OK) {
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	2122      	movs	r1, #34	@ 0x22
 8003586:	0018      	movs	r0, r3
 8003588:	f000 f902 	bl	8003790 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 800358c:	0003      	movs	r3, r0
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	4193      	sbcs	r3, r2
 8003592:	b2db      	uxtb	r3, r3
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <_ZN13AP33772Driver7GetTempEv+0x24>
		return HAL_ERROR;
 8003598:	2301      	movs	r3, #1
 800359a:	e008      	b.n	80035ae <_ZN13AP33772Driver7GetTempEv+0x36>
	}
	this->measured.temp = (float)this->buffer[0];
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	7a5b      	ldrb	r3, [r3, #9]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f7fd fd81 	bl	80010a8 <__aeabi_ui2f>
 80035a6:	1c02      	adds	r2, r0, #0
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	645a      	str	r2, [r3, #68]	@ 0x44
	return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	0018      	movs	r0, r3
 80035b0:	46bd      	mov	sp, r7
 80035b2:	b002      	add	sp, #8
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <_ZN13AP33772Driver15GetMeasurementsEv>:

HAL_StatusTypeDef AP33772Driver::GetMeasurements()
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
	if (GetVoltage() != HAL_OK) {
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f7ff ff7d 	bl	80034c0 <_ZN13AP33772Driver10GetVoltageEv>
 80035c6:	0003      	movs	r3, r0
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	4193      	sbcs	r3, r2
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d001      	beq.n	80035d6 <_ZN13AP33772Driver15GetMeasurementsEv+0x20>
		return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e00c      	b.n	80035f0 <_ZN13AP33772Driver15GetMeasurementsEv+0x3a>
	}
	if (GetCurrent() != HAL_OK) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	0018      	movs	r0, r3
 80035da:	f7ff ff9f 	bl	800351c <_ZN13AP33772Driver10GetCurrentEv>
 80035de:	0003      	movs	r3, r0
 80035e0:	1e5a      	subs	r2, r3, #1
 80035e2:	4193      	sbcs	r3, r2
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d001      	beq.n	80035ee <_ZN13AP33772Driver15GetMeasurementsEv+0x38>
		return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e000      	b.n	80035f0 <_ZN13AP33772Driver15GetMeasurementsEv+0x3a>
	}
	return HAL_OK;
 80035ee:	2300      	movs	r3, #0
}
 80035f0:	0018      	movs	r0, r3
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <_ZN13AP33772Driver19SetThermistorValuesEv>:

HAL_StatusTypeDef AP33772Driver::SetThermistorValues()
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	UInt16Union tempUnion;
	tempUnion.integer = this->thermValues.t25;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	22d4      	movs	r2, #212	@ 0xd4
 8003604:	5a9a      	ldrh	r2, [r3, r2]
 8003606:	200c      	movs	r0, #12
 8003608:	183b      	adds	r3, r7, r0
 800360a:	801a      	strh	r2, [r3, #0]
	this->txBuffer[0] = tempUnion.bytes[0];
 800360c:	183b      	adds	r3, r7, r0
 800360e:	7819      	ldrb	r1, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	222d      	movs	r2, #45	@ 0x2d
 8003614:	5499      	strb	r1, [r3, r2]
	this->txBuffer[1] = tempUnion.bytes[1];
 8003616:	183b      	adds	r3, r7, r0
 8003618:	7859      	ldrb	r1, [r3, #1]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	222e      	movs	r2, #46	@ 0x2e
 800361e:	5499      	strb	r1, [r3, r2]
	tempUnion.integer = this->thermValues.t50;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	22d6      	movs	r2, #214	@ 0xd6
 8003624:	5a9a      	ldrh	r2, [r3, r2]
 8003626:	183b      	adds	r3, r7, r0
 8003628:	801a      	strh	r2, [r3, #0]
	this->txBuffer[2] = tempUnion.bytes[0];
 800362a:	183b      	adds	r3, r7, r0
 800362c:	7819      	ldrb	r1, [r3, #0]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	222f      	movs	r2, #47	@ 0x2f
 8003632:	5499      	strb	r1, [r3, r2]
	this->txBuffer[3] = tempUnion.bytes[1];
 8003634:	183b      	adds	r3, r7, r0
 8003636:	7859      	ldrb	r1, [r3, #1]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2230      	movs	r2, #48	@ 0x30
 800363c:	5499      	strb	r1, [r3, r2]
	tempUnion.integer = this->thermValues.t75;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	22d8      	movs	r2, #216	@ 0xd8
 8003642:	5a9a      	ldrh	r2, [r3, r2]
 8003644:	183b      	adds	r3, r7, r0
 8003646:	801a      	strh	r2, [r3, #0]
	this->txBuffer[4] = tempUnion.bytes[0];
 8003648:	183b      	adds	r3, r7, r0
 800364a:	7819      	ldrb	r1, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2231      	movs	r2, #49	@ 0x31
 8003650:	5499      	strb	r1, [r3, r2]
	this->txBuffer[5] = tempUnion.bytes[1];
 8003652:	183b      	adds	r3, r7, r0
 8003654:	7859      	ldrb	r1, [r3, #1]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2232      	movs	r2, #50	@ 0x32
 800365a:	5499      	strb	r1, [r3, r2]
	tempUnion.integer = this->thermValues.t100;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	22da      	movs	r2, #218	@ 0xda
 8003660:	5a9a      	ldrh	r2, [r3, r2]
 8003662:	183b      	adds	r3, r7, r0
 8003664:	801a      	strh	r2, [r3, #0]
	this->txBuffer[6] = tempUnion.bytes[0];
 8003666:	183b      	adds	r3, r7, r0
 8003668:	7819      	ldrb	r1, [r3, #0]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2233      	movs	r2, #51	@ 0x33
 800366e:	5499      	strb	r1, [r3, r2]
	this->txBuffer[7] = tempUnion.bytes[1];
 8003670:	183b      	adds	r3, r7, r0
 8003672:	7859      	ldrb	r1, [r3, #1]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2234      	movs	r2, #52	@ 0x34
 8003678:	5499      	strb	r1, [r3, r2]
	return this->WriteRegister(AP33772_CMD_TR25, 8);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2208      	movs	r2, #8
 800367e:	2128      	movs	r1, #40	@ 0x28
 8003680:	0018      	movs	r0, r3
 8003682:	f000 f8c7 	bl	8003814 <_ZN13AP33772Driver13WriteRegisterE16AP33772_Registerh>
 8003686:	0003      	movs	r3, r0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}

08003690 <_ZN13AP33772Driver14GetSelectedPDOEv>:

AP33772_PDObject* AP33772Driver::GetSelectedPDO()
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	if (selectedPDOIndex < srcPDOCount) {
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	22c9      	movs	r2, #201	@ 0xc9
 800369c:	5c9a      	ldrb	r2, [r3, r2]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	21c8      	movs	r1, #200	@ 0xc8
 80036a2:	5c5b      	ldrb	r3, [r3, r1]
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d207      	bcs.n	80036b8 <_ZN13AP33772Driver14GetSelectedPDOEv+0x28>
		return &srcPDOList[selectedPDOIndex];
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	22c9      	movs	r2, #201	@ 0xc9
 80036ac:	5c9b      	ldrb	r3, [r3, r2]
 80036ae:	011b      	lsls	r3, r3, #4
 80036b0:	3358      	adds	r3, #88	@ 0x58
 80036b2:	687a      	ldr	r2, [r7, #4]
 80036b4:	18d3      	adds	r3, r2, r3
 80036b6:	e000      	b.n	80036ba <_ZN13AP33772Driver14GetSelectedPDOEv+0x2a>
	}
	return nullptr;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	0018      	movs	r0, r3
 80036bc:	46bd      	mov	sp, r7
 80036be:	b002      	add	sp, #8
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_ZN13AP33772Driver20GetMeasuredValuesPtrEv>:

AP33772_MeasuredValues* AP33772Driver::GetMeasuredValuesPtr()
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
	return &this->measured;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	333c      	adds	r3, #60	@ 0x3c
}
 80036ce:	0018      	movs	r0, r3
 80036d0:	46bd      	mov	sp, r7
 80036d2:	b002      	add	sp, #8
 80036d4:	bd80      	pop	{r7, pc}

080036d6 <_ZN13AP33772Driver14ReadSourcePDOsEv>:

HAL_StatusTypeDef AP33772Driver::ReadSourcePDOs()
{
 80036d6:	b5b0      	push	{r4, r5, r7, lr}
 80036d8:	b088      	sub	sp, #32
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
	if (this->ReadRegister(AP33772_CMD_PDONUM, 1) != HAL_OK) {
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	211c      	movs	r1, #28
 80036e4:	0018      	movs	r0, r3
 80036e6:	f000 f853 	bl	8003790 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 80036ea:	0003      	movs	r3, r0
 80036ec:	1e5a      	subs	r2, r3, #1
 80036ee:	4193      	sbcs	r3, r2
 80036f0:	b2db      	uxtb	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <_ZN13AP33772Driver14ReadSourcePDOsEv+0x24>
		return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e046      	b.n	8003788 <_ZN13AP33772Driver14ReadSourcePDOsEv+0xb2>
	}
	this->srcPDOCount = this->buffer[0];
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	7a59      	ldrb	r1, [r3, #9]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	22c8      	movs	r2, #200	@ 0xc8
 8003702:	5499      	strb	r1, [r3, r2]

	if (this->srcPDOCount > 7) return HAL_ERROR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	22c8      	movs	r2, #200	@ 0xc8
 8003708:	5c9b      	ldrb	r3, [r3, r2]
 800370a:	2b07      	cmp	r3, #7
 800370c:	d901      	bls.n	8003712 <_ZN13AP33772Driver14ReadSourcePDOsEv+0x3c>
 800370e:	2301      	movs	r3, #1
 8003710:	e03a      	b.n	8003788 <_ZN13AP33772Driver14ReadSourcePDOsEv+0xb2>

	if (this->ReadRegister(AP33772_CMD_SRCPDO, 28) != HAL_OK) {
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	221c      	movs	r2, #28
 8003716:	2100      	movs	r1, #0
 8003718:	0018      	movs	r0, r3
 800371a:	f000 f839 	bl	8003790 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 800371e:	0003      	movs	r3, r0
 8003720:	1e5a      	subs	r2, r3, #1
 8003722:	4193      	sbcs	r3, r2
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d001      	beq.n	800372e <_ZN13AP33772Driver14ReadSourcePDOsEv+0x58>
		return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e02c      	b.n	8003788 <_ZN13AP33772Driver14ReadSourcePDOsEv+0xb2>
	}

	for (uint8_t i = 0; i < this->srcPDOCount; ++i) {
 800372e:	231f      	movs	r3, #31
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2200      	movs	r2, #0
 8003734:	701a      	strb	r2, [r3, #0]
 8003736:	e01e      	b.n	8003776 <_ZN13AP33772Driver14ReadSourcePDOsEv+0xa0>
		this->srcPDOList[i] = this->ParsePDO(this->buffer + (4 * i));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	3309      	adds	r3, #9
 800373c:	241f      	movs	r4, #31
 800373e:	193a      	adds	r2, r7, r4
 8003740:	7812      	ldrb	r2, [r2, #0]
 8003742:	0092      	lsls	r2, r2, #2
 8003744:	189a      	adds	r2, r3, r2
 8003746:	250c      	movs	r5, #12
 8003748:	197b      	adds	r3, r7, r5
 800374a:	6879      	ldr	r1, [r7, #4]
 800374c:	0018      	movs	r0, r3
 800374e:	f000 f8a9 	bl	80038a4 <_ZN13AP33772Driver8ParsePDOEPh>
 8003752:	193b      	adds	r3, r7, r4
 8003754:	781b      	ldrb	r3, [r3, #0]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	3358      	adds	r3, #88	@ 0x58
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	18d2      	adds	r2, r2, r3
 800375e:	197b      	adds	r3, r7, r5
 8003760:	0010      	movs	r0, r2
 8003762:	0019      	movs	r1, r3
 8003764:	230d      	movs	r3, #13
 8003766:	001a      	movs	r2, r3
 8003768:	f00d f9ae 	bl	8010ac8 <memcpy>
	for (uint8_t i = 0; i < this->srcPDOCount; ++i) {
 800376c:	193b      	adds	r3, r7, r4
 800376e:	193a      	adds	r2, r7, r4
 8003770:	7812      	ldrb	r2, [r2, #0]
 8003772:	3201      	adds	r2, #1
 8003774:	701a      	strb	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	22c8      	movs	r2, #200	@ 0xc8
 800377a:	5c9b      	ldrb	r3, [r3, r2]
 800377c:	221f      	movs	r2, #31
 800377e:	18ba      	adds	r2, r7, r2
 8003780:	7812      	ldrb	r2, [r2, #0]
 8003782:	429a      	cmp	r2, r3
 8003784:	d3d8      	bcc.n	8003738 <_ZN13AP33772Driver14ReadSourcePDOsEv+0x62>
	}

	return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b008      	add	sp, #32
 800378e:	bdb0      	pop	{r4, r5, r7, pc}

08003790 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>:

HAL_StatusTypeDef AP33772Driver::ReadRegister(AP33772_Register cmd, uint8_t len)
{
 8003790:	b590      	push	{r4, r7, lr}
 8003792:	b085      	sub	sp, #20
 8003794:	af02      	add	r7, sp, #8
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	0008      	movs	r0, r1
 800379a:	0011      	movs	r1, r2
 800379c:	1cfb      	adds	r3, r7, #3
 800379e:	1c02      	adds	r2, r0, #0
 80037a0:	701a      	strb	r2, [r3, #0]
 80037a2:	1cbb      	adds	r3, r7, #2
 80037a4:	1c0a      	adds	r2, r1, #0
 80037a6:	701a      	strb	r2, [r3, #0]
	this->buffer[0] = cmd;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	1cfa      	adds	r2, r7, #3
 80037ac:	7812      	ldrb	r2, [r2, #0]
 80037ae:	725a      	strb	r2, [r3, #9]
	if (HAL_I2C_Master_Transmit(this->hi2c, this->address, this->buffer, 1, 100) != HAL_OK) {
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6858      	ldr	r0, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	7a1b      	ldrb	r3, [r3, #8]
 80037b8:	0019      	movs	r1, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	3309      	adds	r3, #9
 80037be:	001a      	movs	r2, r3
 80037c0:	2364      	movs	r3, #100	@ 0x64
 80037c2:	9300      	str	r3, [sp, #0]
 80037c4:	2301      	movs	r3, #1
 80037c6:	f003 f92d 	bl	8006a24 <HAL_I2C_Master_Transmit>
 80037ca:	0003      	movs	r3, r0
 80037cc:	1e5a      	subs	r2, r3, #1
 80037ce:	4193      	sbcs	r3, r2
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x4a>
		return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e018      	b.n	800380c <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x7c>
	}
	if (HAL_I2C_Master_Receive(this->hi2c, this->address, this->buffer, len, 100) != HAL_OK) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6858      	ldr	r0, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	7a1b      	ldrb	r3, [r3, #8]
 80037e2:	001c      	movs	r4, r3
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	3309      	adds	r3, #9
 80037e8:	001a      	movs	r2, r3
 80037ea:	1cbb      	adds	r3, r7, #2
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2164      	movs	r1, #100	@ 0x64
 80037f2:	9100      	str	r1, [sp, #0]
 80037f4:	0021      	movs	r1, r4
 80037f6:	f003 fa3f 	bl	8006c78 <HAL_I2C_Master_Receive>
 80037fa:	0003      	movs	r3, r0
 80037fc:	1e5a      	subs	r2, r3, #1
 80037fe:	4193      	sbcs	r3, r2
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x7a>
		return HAL_ERROR;
 8003806:	2301      	movs	r3, #1
 8003808:	e000      	b.n	800380c <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x7c>
	}
	return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	0018      	movs	r0, r3
 800380e:	46bd      	mov	sp, r7
 8003810:	b003      	add	sp, #12
 8003812:	bd90      	pop	{r4, r7, pc}

08003814 <_ZN13AP33772Driver13WriteRegisterE16AP33772_Registerh>:

HAL_StatusTypeDef AP33772Driver::WriteRegister(AP33772_Register cmd, uint8_t len)
{
 8003814:	b590      	push	{r4, r7, lr}
 8003816:	b087      	sub	sp, #28
 8003818:	af02      	add	r7, sp, #8
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	0008      	movs	r0, r1
 800381e:	0011      	movs	r1, r2
 8003820:	1cfb      	adds	r3, r7, #3
 8003822:	1c02      	adds	r2, r0, #0
 8003824:	701a      	strb	r2, [r3, #0]
 8003826:	1cbb      	adds	r3, r7, #2
 8003828:	1c0a      	adds	r2, r1, #0
 800382a:	701a      	strb	r2, [r3, #0]
	this->buffer[0] = cmd;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	1cfa      	adds	r2, r7, #3
 8003830:	7812      	ldrb	r2, [r2, #0]
 8003832:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i < len; ++i) {
 8003834:	230f      	movs	r3, #15
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e013      	b.n	8003866 <_ZN13AP33772Driver13WriteRegisterE16AP33772_Registerh+0x52>
		this->buffer[i + 1] = this->txBuffer[i];
 800383e:	240f      	movs	r4, #15
 8003840:	193b      	adds	r3, r7, r4
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	193b      	adds	r3, r7, r4
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	3301      	adds	r3, #1
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	202d      	movs	r0, #45	@ 0x2d
 800384e:	188a      	adds	r2, r1, r2
 8003850:	1812      	adds	r2, r2, r0
 8003852:	7811      	ldrb	r1, [r2, #0]
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	18d3      	adds	r3, r2, r3
 8003858:	1c0a      	adds	r2, r1, #0
 800385a:	725a      	strb	r2, [r3, #9]
	for (uint8_t i = 0; i < len; ++i) {
 800385c:	193b      	adds	r3, r7, r4
 800385e:	193a      	adds	r2, r7, r4
 8003860:	7812      	ldrb	r2, [r2, #0]
 8003862:	3201      	adds	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
 8003866:	230f      	movs	r3, #15
 8003868:	18fa      	adds	r2, r7, r3
 800386a:	1cbb      	adds	r3, r7, #2
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d3e4      	bcc.n	800383e <_ZN13AP33772Driver13WriteRegisterE16AP33772_Registerh+0x2a>
	}
	return HAL_I2C_Master_Transmit(hi2c, address, buffer, len + 1, 200);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6858      	ldr	r0, [r3, #4]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7a1b      	ldrb	r3, [r3, #8]
 800387c:	001c      	movs	r4, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3309      	adds	r3, #9
 8003882:	001a      	movs	r2, r3
 8003884:	1cbb      	adds	r3, r7, #2
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	b29b      	uxth	r3, r3
 800388a:	3301      	adds	r3, #1
 800388c:	b29b      	uxth	r3, r3
 800388e:	21c8      	movs	r1, #200	@ 0xc8
 8003890:	9100      	str	r1, [sp, #0]
 8003892:	0021      	movs	r1, r4
 8003894:	f003 f8c6 	bl	8006a24 <HAL_I2C_Master_Transmit>
 8003898:	0003      	movs	r3, r0
}
 800389a:	0018      	movs	r0, r3
 800389c:	46bd      	mov	sp, r7
 800389e:	b005      	add	sp, #20
 80038a0:	bd90      	pop	{r4, r7, pc}
	...

080038a4 <_ZN13AP33772Driver8ParsePDOEPh>:

AP33772_PDObject AP33772Driver::ParsePDO(uint8_t *buf)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
	AP33772_PDObject output = {};
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	0018      	movs	r0, r3
 80038b4:	2310      	movs	r3, #16
 80038b6:	001a      	movs	r2, r3
 80038b8:	2100      	movs	r1, #0
 80038ba:	f00d f8d1 	bl	8010a60 <memset>
	this->temp.bytes[0] = buf[0];
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	7819      	ldrb	r1, [r3, #0]
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	22dc      	movs	r2, #220	@ 0xdc
 80038c6:	5499      	strb	r1, [r3, r2]
	this->temp.bytes[1] = buf[1];
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	7859      	ldrb	r1, [r3, #1]
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	22dd      	movs	r2, #221	@ 0xdd
 80038d0:	5499      	strb	r1, [r3, r2]
	this->temp.bytes[2] = buf[2];
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	7899      	ldrb	r1, [r3, #2]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	22de      	movs	r2, #222	@ 0xde
 80038da:	5499      	strb	r1, [r3, r2]
	this->temp.bytes[3] = buf[3];
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	78d9      	ldrb	r1, [r3, #3]
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	22df      	movs	r2, #223	@ 0xdf
 80038e4:	5499      	strb	r1, [r3, r2]

	output.pdoType = (AP33772_PDOType)(this->temp.bytes[3] >> 6);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	22df      	movs	r2, #223	@ 0xdf
 80038ea:	5c9b      	ldrb	r3, [r3, r2]
 80038ec:	099b      	lsrs	r3, r3, #6
 80038ee:	b2da      	uxtb	r2, r3
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	731a      	strb	r2, [r3, #12]

	if (output.pdoType == AP33772_FIXED_PDO) {
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	7b1b      	ldrb	r3, [r3, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d12e      	bne.n	800395a <_ZN13AP33772Driver8ParsePDOEPh+0xb6>
		output.current = (this->temp.integer & 0x3FF) * 0.01;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	22dc      	movs	r2, #220	@ 0xdc
 8003900:	589b      	ldr	r3, [r3, r2]
 8003902:	059b      	lsls	r3, r3, #22
 8003904:	0d9b      	lsrs	r3, r3, #22
 8003906:	0018      	movs	r0, r3
 8003908:	f7fe fdf8 	bl	80024fc <__aeabi_ui2d>
 800390c:	4a36      	ldr	r2, [pc, #216]	@ (80039e8 <_ZN13AP33772Driver8ParsePDOEPh+0x144>)
 800390e:	4b37      	ldr	r3, [pc, #220]	@ (80039ec <_ZN13AP33772Driver8ParsePDOEPh+0x148>)
 8003910:	f7fd ff26 	bl	8001760 <__aeabi_dmul>
 8003914:	0002      	movs	r2, r0
 8003916:	000b      	movs	r3, r1
 8003918:	0010      	movs	r0, r2
 800391a:	0019      	movs	r1, r3
 800391c:	f7fe fe5a 	bl	80025d4 <__aeabi_d2f>
 8003920:	1c02      	adds	r2, r0, #0
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	601a      	str	r2, [r3, #0]
		output.minVoltage = ((this->temp.integer >> 10) & 0x3FF) * 0.05;
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	22dc      	movs	r2, #220	@ 0xdc
 800392a:	589b      	ldr	r3, [r3, r2]
 800392c:	0a9b      	lsrs	r3, r3, #10
 800392e:	059b      	lsls	r3, r3, #22
 8003930:	0d9b      	lsrs	r3, r3, #22
 8003932:	0018      	movs	r0, r3
 8003934:	f7fe fde2 	bl	80024fc <__aeabi_ui2d>
 8003938:	4a2d      	ldr	r2, [pc, #180]	@ (80039f0 <_ZN13AP33772Driver8ParsePDOEPh+0x14c>)
 800393a:	4b2e      	ldr	r3, [pc, #184]	@ (80039f4 <_ZN13AP33772Driver8ParsePDOEPh+0x150>)
 800393c:	f7fd ff10 	bl	8001760 <__aeabi_dmul>
 8003940:	0002      	movs	r2, r0
 8003942:	000b      	movs	r3, r1
 8003944:	0010      	movs	r0, r2
 8003946:	0019      	movs	r1, r3
 8003948:	f7fe fe44 	bl	80025d4 <__aeabi_d2f>
 800394c:	1c02      	adds	r2, r0, #0
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	605a      	str	r2, [r3, #4]
		output.maxVoltage = 0;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	609a      	str	r2, [r3, #8]
	} else {
		output.current = (this->temp.integer & 0x3F) * 0.05;
		output.minVoltage = ((this->temp.integer >> 8) & 0x3F) * 0.1;
		output.maxVoltage = ((this->temp.integer >> 17) & 0x3F) * 0.1;
	}
	return output;
 8003958:	e040      	b.n	80039dc <_ZN13AP33772Driver8ParsePDOEPh+0x138>
		output.current = (this->temp.integer & 0x3F) * 0.05;
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	22dc      	movs	r2, #220	@ 0xdc
 800395e:	589b      	ldr	r3, [r3, r2]
 8003960:	223f      	movs	r2, #63	@ 0x3f
 8003962:	4013      	ands	r3, r2
 8003964:	0018      	movs	r0, r3
 8003966:	f7fe fdc9 	bl	80024fc <__aeabi_ui2d>
 800396a:	4a21      	ldr	r2, [pc, #132]	@ (80039f0 <_ZN13AP33772Driver8ParsePDOEPh+0x14c>)
 800396c:	4b21      	ldr	r3, [pc, #132]	@ (80039f4 <_ZN13AP33772Driver8ParsePDOEPh+0x150>)
 800396e:	f7fd fef7 	bl	8001760 <__aeabi_dmul>
 8003972:	0002      	movs	r2, r0
 8003974:	000b      	movs	r3, r1
 8003976:	0010      	movs	r0, r2
 8003978:	0019      	movs	r1, r3
 800397a:	f7fe fe2b 	bl	80025d4 <__aeabi_d2f>
 800397e:	1c02      	adds	r2, r0, #0
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	601a      	str	r2, [r3, #0]
		output.minVoltage = ((this->temp.integer >> 8) & 0x3F) * 0.1;
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	22dc      	movs	r2, #220	@ 0xdc
 8003988:	589b      	ldr	r3, [r3, r2]
 800398a:	0a1b      	lsrs	r3, r3, #8
 800398c:	223f      	movs	r2, #63	@ 0x3f
 800398e:	4013      	ands	r3, r2
 8003990:	0018      	movs	r0, r3
 8003992:	f7fe fdb3 	bl	80024fc <__aeabi_ui2d>
 8003996:	4a16      	ldr	r2, [pc, #88]	@ (80039f0 <_ZN13AP33772Driver8ParsePDOEPh+0x14c>)
 8003998:	4b17      	ldr	r3, [pc, #92]	@ (80039f8 <_ZN13AP33772Driver8ParsePDOEPh+0x154>)
 800399a:	f7fd fee1 	bl	8001760 <__aeabi_dmul>
 800399e:	0002      	movs	r2, r0
 80039a0:	000b      	movs	r3, r1
 80039a2:	0010      	movs	r0, r2
 80039a4:	0019      	movs	r1, r3
 80039a6:	f7fe fe15 	bl	80025d4 <__aeabi_d2f>
 80039aa:	1c02      	adds	r2, r0, #0
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	605a      	str	r2, [r3, #4]
		output.maxVoltage = ((this->temp.integer >> 17) & 0x3F) * 0.1;
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	22dc      	movs	r2, #220	@ 0xdc
 80039b4:	589b      	ldr	r3, [r3, r2]
 80039b6:	0c5b      	lsrs	r3, r3, #17
 80039b8:	223f      	movs	r2, #63	@ 0x3f
 80039ba:	4013      	ands	r3, r2
 80039bc:	0018      	movs	r0, r3
 80039be:	f7fe fd9d 	bl	80024fc <__aeabi_ui2d>
 80039c2:	4a0b      	ldr	r2, [pc, #44]	@ (80039f0 <_ZN13AP33772Driver8ParsePDOEPh+0x14c>)
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <_ZN13AP33772Driver8ParsePDOEPh+0x154>)
 80039c6:	f7fd fecb 	bl	8001760 <__aeabi_dmul>
 80039ca:	0002      	movs	r2, r0
 80039cc:	000b      	movs	r3, r1
 80039ce:	0010      	movs	r0, r2
 80039d0:	0019      	movs	r1, r3
 80039d2:	f7fe fdff 	bl	80025d4 <__aeabi_d2f>
 80039d6:	1c02      	adds	r2, r0, #0
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	609a      	str	r2, [r3, #8]
	return output;
 80039dc:	46c0      	nop			@ (mov r8, r8)
}
 80039de:	68f8      	ldr	r0, [r7, #12]
 80039e0:	46bd      	mov	sp, r7
 80039e2:	b004      	add	sp, #16
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	46c0      	nop			@ (mov r8, r8)
 80039e8:	47ae147b 	.word	0x47ae147b
 80039ec:	3f847ae1 	.word	0x3f847ae1
 80039f0:	9999999a 	.word	0x9999999a
 80039f4:	3fa99999 	.word	0x3fa99999
 80039f8:	3fb99999 	.word	0x3fb99999

080039fc <_ZN13AP33772Driver14FindNearestPDOEv>:
//
//	this->foundPDO = false;
//}

void AP33772Driver::FindNearestPDO()
{
 80039fc:	b590      	push	{r4, r7, lr}
 80039fe:	b085      	sub	sp, #20
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
	if (this->srcPDOCount == 0 || this->desiredPDO->voltage == 0) {
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	22c8      	movs	r2, #200	@ 0xc8
 8003a08:	5c9b      	ldrb	r3, [r3, r2]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d009      	beq.n	8003a22 <_ZN13AP33772Driver14FindNearestPDOEv+0x26>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	22cc      	movs	r2, #204	@ 0xcc
 8003a12:	589b      	ldr	r3, [r3, r2]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	2100      	movs	r1, #0
 8003a18:	1c18      	adds	r0, r3, #0
 8003a1a:	f7fc fc0d 	bl	8000238 <__aeabi_fcmpeq>
 8003a1e:	1e03      	subs	r3, r0, #0
 8003a20:	d008      	beq.n	8003a34 <_ZN13AP33772Driver14FindNearestPDOEv+0x38>
		this->foundPDO = false;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	22d0      	movs	r2, #208	@ 0xd0
 8003a26:	2100      	movs	r1, #0
 8003a28:	5499      	strb	r1, [r3, r2]
		this->voltageMismatch = false;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	22d1      	movs	r2, #209	@ 0xd1
 8003a2e:	2100      	movs	r1, #0
 8003a30:	5499      	strb	r1, [r3, r2]
		return;
 8003a32:	e0fc      	b.n	8003c2e <_ZN13AP33772Driver14FindNearestPDOEv+0x232>
	}

	uint8_t i = 0;
 8003a34:	210f      	movs	r1, #15
 8003a36:	187b      	adds	r3, r7, r1
 8003a38:	2200      	movs	r2, #0
 8003a3a:	701a      	strb	r2, [r3, #0]

	// Check fixed PDOs for an exact match:
	for (i = 0; i < this->srcPDOCount; ++i) {
 8003a3c:	187b      	adds	r3, r7, r1
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e040      	b.n	8003ac6 <_ZN13AP33772Driver14FindNearestPDOEv+0xca>
		if (this->srcPDOList[i].pdoType == AP33772_FIXED_PDO) {
 8003a44:	240f      	movs	r4, #15
 8003a46:	193b      	adds	r3, r7, r4
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	687a      	ldr	r2, [r7, #4]
 8003a4c:	3306      	adds	r3, #6
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	18d3      	adds	r3, r2, r3
 8003a52:	3304      	adds	r3, #4
 8003a54:	781b      	ldrb	r3, [r3, #0]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d12f      	bne.n	8003aba <_ZN13AP33772Driver14FindNearestPDOEv+0xbe>
			if (this->srcPDOList[i].minVoltage == this->desiredPDO->voltage) {
 8003a5a:	193b      	adds	r3, r7, r4
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	011b      	lsls	r3, r3, #4
 8003a62:	18d3      	adds	r3, r2, r3
 8003a64:	335c      	adds	r3, #92	@ 0x5c
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	21cc      	movs	r1, #204	@ 0xcc
 8003a6c:	585b      	ldr	r3, [r3, r1]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	1c19      	adds	r1, r3, #0
 8003a72:	1c10      	adds	r0, r2, #0
 8003a74:	f7fc fbe0 	bl	8000238 <__aeabi_fcmpeq>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d01e      	beq.n	8003aba <_ZN13AP33772Driver14FindNearestPDOEv+0xbe>
				if (this->srcPDOList[i].current >= this->desiredPDO->current) {
 8003a7c:	193b      	adds	r3, r7, r4
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	18d3      	adds	r3, r2, r3
 8003a86:	3358      	adds	r3, #88	@ 0x58
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	21cc      	movs	r1, #204	@ 0xcc
 8003a8e:	585b      	ldr	r3, [r3, r1]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	1c19      	adds	r1, r3, #0
 8003a94:	1c10      	adds	r0, r2, #0
 8003a96:	f7fc fbf3 	bl	8000280 <__aeabi_fcmpge>
 8003a9a:	1e03      	subs	r3, r0, #0
 8003a9c:	d00d      	beq.n	8003aba <_ZN13AP33772Driver14FindNearestPDOEv+0xbe>
					this->selectedPDOIndex = i;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	193a      	adds	r2, r7, r4
 8003aa2:	21c9      	movs	r1, #201	@ 0xc9
 8003aa4:	7812      	ldrb	r2, [r2, #0]
 8003aa6:	545a      	strb	r2, [r3, r1]
					this->foundPDO = true;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	22d0      	movs	r2, #208	@ 0xd0
 8003aac:	2101      	movs	r1, #1
 8003aae:	5499      	strb	r1, [r3, r2]
					this->voltageMismatch = false;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	22d1      	movs	r2, #209	@ 0xd1
 8003ab4:	2100      	movs	r1, #0
 8003ab6:	5499      	strb	r1, [r3, r2]
					return;
 8003ab8:	e0b9      	b.n	8003c2e <_ZN13AP33772Driver14FindNearestPDOEv+0x232>
	for (i = 0; i < this->srcPDOCount; ++i) {
 8003aba:	220f      	movs	r2, #15
 8003abc:	18bb      	adds	r3, r7, r2
 8003abe:	18ba      	adds	r2, r7, r2
 8003ac0:	7812      	ldrb	r2, [r2, #0]
 8003ac2:	3201      	adds	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	22c8      	movs	r2, #200	@ 0xc8
 8003aca:	5c9b      	ldrb	r3, [r3, r2]
 8003acc:	210f      	movs	r1, #15
 8003ace:	187a      	adds	r2, r7, r1
 8003ad0:	7812      	ldrb	r2, [r2, #0]
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d3b6      	bcc.n	8003a44 <_ZN13AP33772Driver14FindNearestPDOEv+0x48>
			}
		}
	}

	// Otherwise, check PDOs for an adjustable PDO:
	for (i = 0; i < this->srcPDOCount; ++i) {
 8003ad6:	187b      	adds	r3, r7, r1
 8003ad8:	2200      	movs	r2, #0
 8003ada:	701a      	strb	r2, [r3, #0]
 8003adc:	e050      	b.n	8003b80 <_ZN13AP33772Driver14FindNearestPDOEv+0x184>
		if (this->srcPDOList[i].pdoType == AP33772_ADJ_PDO) {
 8003ade:	240f      	movs	r4, #15
 8003ae0:	193b      	adds	r3, r7, r4
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	687a      	ldr	r2, [r7, #4]
 8003ae6:	3306      	adds	r3, #6
 8003ae8:	011b      	lsls	r3, r3, #4
 8003aea:	18d3      	adds	r3, r2, r3
 8003aec:	3304      	adds	r3, #4
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d13f      	bne.n	8003b74 <_ZN13AP33772Driver14FindNearestPDOEv+0x178>
			if (this->srcPDOList[i].minVoltage <= this->desiredPDO->voltage && this->srcPDOList[i].maxVoltage >= this->desiredPDO->voltage) {
 8003af4:	193b      	adds	r3, r7, r4
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	18d3      	adds	r3, r2, r3
 8003afe:	335c      	adds	r3, #92	@ 0x5c
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	21cc      	movs	r1, #204	@ 0xcc
 8003b06:	585b      	ldr	r3, [r3, r1]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	1c19      	adds	r1, r3, #0
 8003b0c:	1c10      	adds	r0, r2, #0
 8003b0e:	f7fc fba3 	bl	8000258 <__aeabi_fcmple>
 8003b12:	1e03      	subs	r3, r0, #0
 8003b14:	d02e      	beq.n	8003b74 <_ZN13AP33772Driver14FindNearestPDOEv+0x178>
 8003b16:	193b      	adds	r3, r7, r4
 8003b18:	781a      	ldrb	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3206      	adds	r2, #6
 8003b1e:	0112      	lsls	r2, r2, #4
 8003b20:	58d2      	ldr	r2, [r2, r3]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	21cc      	movs	r1, #204	@ 0xcc
 8003b26:	585b      	ldr	r3, [r3, r1]
 8003b28:	689b      	ldr	r3, [r3, #8]
 8003b2a:	1c19      	adds	r1, r3, #0
 8003b2c:	1c10      	adds	r0, r2, #0
 8003b2e:	f7fc fba7 	bl	8000280 <__aeabi_fcmpge>
 8003b32:	1e03      	subs	r3, r0, #0
 8003b34:	d01e      	beq.n	8003b74 <_ZN13AP33772Driver14FindNearestPDOEv+0x178>
				if (this->srcPDOList[i].current >= this->desiredPDO->current) {
 8003b36:	193b      	adds	r3, r7, r4
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	18d3      	adds	r3, r2, r3
 8003b40:	3358      	adds	r3, #88	@ 0x58
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	21cc      	movs	r1, #204	@ 0xcc
 8003b48:	585b      	ldr	r3, [r3, r1]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	1c19      	adds	r1, r3, #0
 8003b4e:	1c10      	adds	r0, r2, #0
 8003b50:	f7fc fb96 	bl	8000280 <__aeabi_fcmpge>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d00d      	beq.n	8003b74 <_ZN13AP33772Driver14FindNearestPDOEv+0x178>
					this->selectedPDOIndex = i;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	193a      	adds	r2, r7, r4
 8003b5c:	21c9      	movs	r1, #201	@ 0xc9
 8003b5e:	7812      	ldrb	r2, [r2, #0]
 8003b60:	545a      	strb	r2, [r3, r1]
					this->foundPDO = true;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	22d0      	movs	r2, #208	@ 0xd0
 8003b66:	2101      	movs	r1, #1
 8003b68:	5499      	strb	r1, [r3, r2]
					this->voltageMismatch = false;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	22d1      	movs	r2, #209	@ 0xd1
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]
					return;
 8003b72:	e05c      	b.n	8003c2e <_ZN13AP33772Driver14FindNearestPDOEv+0x232>
	for (i = 0; i < this->srcPDOCount; ++i) {
 8003b74:	220f      	movs	r2, #15
 8003b76:	18bb      	adds	r3, r7, r2
 8003b78:	18ba      	adds	r2, r7, r2
 8003b7a:	7812      	ldrb	r2, [r2, #0]
 8003b7c:	3201      	adds	r2, #1
 8003b7e:	701a      	strb	r2, [r3, #0]
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	22c8      	movs	r2, #200	@ 0xc8
 8003b84:	5c9b      	ldrb	r3, [r3, r2]
 8003b86:	210f      	movs	r1, #15
 8003b88:	187a      	adds	r2, r7, r1
 8003b8a:	7812      	ldrb	r2, [r2, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d3a6      	bcc.n	8003ade <_ZN13AP33772Driver14FindNearestPDOEv+0xe2>
		}
	}

	// Finally, check for a fixed PDO that can be derated to work:

	for (i = 0; i < this->srcPDOCount; ++i) {
 8003b90:	187b      	adds	r3, r7, r1
 8003b92:	2200      	movs	r2, #0
 8003b94:	701a      	strb	r2, [r3, #0]
 8003b96:	e03a      	b.n	8003c0e <_ZN13AP33772Driver14FindNearestPDOEv+0x212>
		if (this->srcPDOList[i].pdoType == AP33772_FIXED_PDO) {
 8003b98:	240f      	movs	r4, #15
 8003b9a:	193b      	adds	r3, r7, r4
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	3306      	adds	r3, #6
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	18d3      	adds	r3, r2, r3
 8003ba6:	3304      	adds	r3, #4
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d129      	bne.n	8003c02 <_ZN13AP33772Driver14FindNearestPDOEv+0x206>
			if (this->srcPDOList[i].minVoltage >= this->desiredPDO->voltage) {
 8003bae:	193b      	adds	r3, r7, r4
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	18d3      	adds	r3, r2, r3
 8003bb8:	335c      	adds	r3, #92	@ 0x5c
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	21cc      	movs	r1, #204	@ 0xcc
 8003bc0:	585b      	ldr	r3, [r3, r1]
 8003bc2:	689b      	ldr	r3, [r3, #8]
 8003bc4:	1c19      	adds	r1, r3, #0
 8003bc6:	1c10      	adds	r0, r2, #0
 8003bc8:	f7fc fb5a 	bl	8000280 <__aeabi_fcmpge>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d018      	beq.n	8003c02 <_ZN13AP33772Driver14FindNearestPDOEv+0x206>
				this->selectedPDOIndex = i;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	193a      	adds	r2, r7, r4
 8003bd4:	21c9      	movs	r1, #201	@ 0xc9
 8003bd6:	7812      	ldrb	r2, [r2, #0]
 8003bd8:	545a      	strb	r2, [r3, r1]
				this->desiredPDO->current = this->srcPDOList[i].current;
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	781a      	ldrb	r2, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	21cc      	movs	r1, #204	@ 0xcc
 8003be2:	585b      	ldr	r3, [r3, r1]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	0112      	lsls	r2, r2, #4
 8003be8:	188a      	adds	r2, r1, r2
 8003bea:	3258      	adds	r2, #88	@ 0x58
 8003bec:	6812      	ldr	r2, [r2, #0]
 8003bee:	605a      	str	r2, [r3, #4]
				this->foundPDO = true;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	22d0      	movs	r2, #208	@ 0xd0
 8003bf4:	2101      	movs	r1, #1
 8003bf6:	5499      	strb	r1, [r3, r2]
				this->voltageMismatch = false;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	22d1      	movs	r2, #209	@ 0xd1
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	5499      	strb	r1, [r3, r2]
				return;
 8003c00:	e015      	b.n	8003c2e <_ZN13AP33772Driver14FindNearestPDOEv+0x232>
	for (i = 0; i < this->srcPDOCount; ++i) {
 8003c02:	220f      	movs	r2, #15
 8003c04:	18bb      	adds	r3, r7, r2
 8003c06:	18ba      	adds	r2, r7, r2
 8003c08:	7812      	ldrb	r2, [r2, #0]
 8003c0a:	3201      	adds	r2, #1
 8003c0c:	701a      	strb	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	22c8      	movs	r2, #200	@ 0xc8
 8003c12:	5c9b      	ldrb	r3, [r3, r2]
 8003c14:	220f      	movs	r2, #15
 8003c16:	18ba      	adds	r2, r7, r2
 8003c18:	7812      	ldrb	r2, [r2, #0]
 8003c1a:	429a      	cmp	r2, r3
 8003c1c:	d3bc      	bcc.n	8003b98 <_ZN13AP33772Driver14FindNearestPDOEv+0x19c>
			}
		}
	}

	this->foundPDO = false;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	22d0      	movs	r2, #208	@ 0xd0
 8003c22:	2100      	movs	r1, #0
 8003c24:	5499      	strb	r1, [r3, r2]
	this->voltageMismatch = false;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	22d1      	movs	r2, #209	@ 0xd1
 8003c2a:	2100      	movs	r1, #0
 8003c2c:	5499      	strb	r1, [r3, r2]
}
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	b005      	add	sp, #20
 8003c32:	bd90      	pop	{r4, r7, pc}

08003c34 <_ZN13AP33772Driver16SendRequestedPDOEv>:

HAL_StatusTypeDef AP33772Driver::SendRequestedPDO()
{
 8003c34:	b590      	push	{r4, r7, lr}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	if (this->foundPDO) {
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	22d0      	movs	r2, #208	@ 0xd0
 8003c40:	5c9b      	ldrb	r3, [r3, r2]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d100      	bne.n	8003c48 <_ZN13AP33772Driver16SendRequestedPDOEv+0x14>
 8003c46:	e0f6      	b.n	8003e36 <_ZN13AP33772Driver16SendRequestedPDOEv+0x202>
		this->temp.integer = ((this->selectedPDOIndex + 1) << 28);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	22c9      	movs	r2, #201	@ 0xc9
 8003c4c:	5c9b      	ldrb	r3, [r3, r2]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	0019      	movs	r1, r3
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	22dc      	movs	r2, #220	@ 0xdc
 8003c58:	5099      	str	r1, [r3, r2]
		if (this->srcPDOList[this->selectedPDOIndex].pdoType == AP33772_FIXED_PDO) {
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	22c9      	movs	r2, #201	@ 0xc9
 8003c5e:	5c9b      	ldrb	r3, [r3, r2]
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	3306      	adds	r3, #6
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	18d3      	adds	r3, r2, r3
 8003c68:	3304      	adds	r3, #4
 8003c6a:	781b      	ldrb	r3, [r3, #0]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d000      	beq.n	8003c72 <_ZN13AP33772Driver16SendRequestedPDOEv+0x3e>
 8003c70:	e081      	b.n	8003d76 <_ZN13AP33772Driver16SendRequestedPDOEv+0x142>
			if (this->desiredPDO->maxCurrent > this->desiredPDO->current) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	22cc      	movs	r2, #204	@ 0xcc
 8003c76:	589b      	ldr	r3, [r3, r2]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	21cc      	movs	r1, #204	@ 0xcc
 8003c7e:	585b      	ldr	r3, [r3, r1]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	1c19      	adds	r1, r3, #0
 8003c84:	1c10      	adds	r0, r2, #0
 8003c86:	f7fc faf1 	bl	800026c <__aeabi_fcmpgt>
 8003c8a:	1e03      	subs	r3, r0, #0
 8003c8c:	d039      	beq.n	8003d02 <_ZN13AP33772Driver16SendRequestedPDOEv+0xce>
				this->temp.integer |= ((uint32_t)(this->desiredPDO->current / 0.01) & 0x3FF);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	22dc      	movs	r2, #220	@ 0xdc
 8003c92:	589c      	ldr	r4, [r3, r2]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	22cc      	movs	r2, #204	@ 0xcc
 8003c98:	589b      	ldr	r3, [r3, r2]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	1c18      	adds	r0, r3, #0
 8003c9e:	f7fe fc51 	bl	8002544 <__aeabi_f2d>
 8003ca2:	4a67      	ldr	r2, [pc, #412]	@ (8003e40 <_ZN13AP33772Driver16SendRequestedPDOEv+0x20c>)
 8003ca4:	4b67      	ldr	r3, [pc, #412]	@ (8003e44 <_ZN13AP33772Driver16SendRequestedPDOEv+0x210>)
 8003ca6:	f7fd fa41 	bl	800112c <__aeabi_ddiv>
 8003caa:	0002      	movs	r2, r0
 8003cac:	000b      	movs	r3, r1
 8003cae:	0010      	movs	r0, r2
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	f7fc fb07 	bl	80002c4 <__aeabi_d2uiz>
 8003cb6:	0003      	movs	r3, r0
 8003cb8:	059b      	lsls	r3, r3, #22
 8003cba:	0d9b      	lsrs	r3, r3, #22
 8003cbc:	0022      	movs	r2, r4
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	21dc      	movs	r1, #220	@ 0xdc
 8003cc4:	505a      	str	r2, [r3, r1]
				this->temp.integer |= (((uint32_t)(this->desiredPDO->current / 0.01) & 0x3FF) << 10);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	22dc      	movs	r2, #220	@ 0xdc
 8003cca:	589c      	ldr	r4, [r3, r2]
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	22cc      	movs	r2, #204	@ 0xcc
 8003cd0:	589b      	ldr	r3, [r3, r2]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	1c18      	adds	r0, r3, #0
 8003cd6:	f7fe fc35 	bl	8002544 <__aeabi_f2d>
 8003cda:	4a59      	ldr	r2, [pc, #356]	@ (8003e40 <_ZN13AP33772Driver16SendRequestedPDOEv+0x20c>)
 8003cdc:	4b59      	ldr	r3, [pc, #356]	@ (8003e44 <_ZN13AP33772Driver16SendRequestedPDOEv+0x210>)
 8003cde:	f7fd fa25 	bl	800112c <__aeabi_ddiv>
 8003ce2:	0002      	movs	r2, r0
 8003ce4:	000b      	movs	r3, r1
 8003ce6:	0010      	movs	r0, r2
 8003ce8:	0019      	movs	r1, r3
 8003cea:	f7fc faeb 	bl	80002c4 <__aeabi_d2uiz>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	4a55      	ldr	r2, [pc, #340]	@ (8003e48 <_ZN13AP33772Driver16SendRequestedPDOEv+0x214>)
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	0022      	movs	r2, r4
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	21dc      	movs	r1, #220	@ 0xdc
 8003cfe:	505a      	str	r2, [r3, r1]
 8003d00:	e072      	b.n	8003de8 <_ZN13AP33772Driver16SendRequestedPDOEv+0x1b4>
			} else {
				this->temp.integer |= ((uint32_t)(this->desiredPDO->maxCurrent / 0.01) & 0x3FF);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	22dc      	movs	r2, #220	@ 0xdc
 8003d06:	589c      	ldr	r4, [r3, r2]
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	22cc      	movs	r2, #204	@ 0xcc
 8003d0c:	589b      	ldr	r3, [r3, r2]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1c18      	adds	r0, r3, #0
 8003d12:	f7fe fc17 	bl	8002544 <__aeabi_f2d>
 8003d16:	4a4a      	ldr	r2, [pc, #296]	@ (8003e40 <_ZN13AP33772Driver16SendRequestedPDOEv+0x20c>)
 8003d18:	4b4a      	ldr	r3, [pc, #296]	@ (8003e44 <_ZN13AP33772Driver16SendRequestedPDOEv+0x210>)
 8003d1a:	f7fd fa07 	bl	800112c <__aeabi_ddiv>
 8003d1e:	0002      	movs	r2, r0
 8003d20:	000b      	movs	r3, r1
 8003d22:	0010      	movs	r0, r2
 8003d24:	0019      	movs	r1, r3
 8003d26:	f7fc facd 	bl	80002c4 <__aeabi_d2uiz>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	059b      	lsls	r3, r3, #22
 8003d2e:	0d9b      	lsrs	r3, r3, #22
 8003d30:	0022      	movs	r2, r4
 8003d32:	431a      	orrs	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	21dc      	movs	r1, #220	@ 0xdc
 8003d38:	505a      	str	r2, [r3, r1]
				this->temp.integer |= (((uint32_t)(this->desiredPDO->current / 0.01) & 0x3FF) << 10);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	22dc      	movs	r2, #220	@ 0xdc
 8003d3e:	589c      	ldr	r4, [r3, r2]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	22cc      	movs	r2, #204	@ 0xcc
 8003d44:	589b      	ldr	r3, [r3, r2]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	1c18      	adds	r0, r3, #0
 8003d4a:	f7fe fbfb 	bl	8002544 <__aeabi_f2d>
 8003d4e:	4a3c      	ldr	r2, [pc, #240]	@ (8003e40 <_ZN13AP33772Driver16SendRequestedPDOEv+0x20c>)
 8003d50:	4b3c      	ldr	r3, [pc, #240]	@ (8003e44 <_ZN13AP33772Driver16SendRequestedPDOEv+0x210>)
 8003d52:	f7fd f9eb 	bl	800112c <__aeabi_ddiv>
 8003d56:	0002      	movs	r2, r0
 8003d58:	000b      	movs	r3, r1
 8003d5a:	0010      	movs	r0, r2
 8003d5c:	0019      	movs	r1, r3
 8003d5e:	f7fc fab1 	bl	80002c4 <__aeabi_d2uiz>
 8003d62:	0003      	movs	r3, r0
 8003d64:	029b      	lsls	r3, r3, #10
 8003d66:	4a38      	ldr	r2, [pc, #224]	@ (8003e48 <_ZN13AP33772Driver16SendRequestedPDOEv+0x214>)
 8003d68:	4013      	ands	r3, r2
 8003d6a:	0022      	movs	r2, r4
 8003d6c:	431a      	orrs	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	21dc      	movs	r1, #220	@ 0xdc
 8003d72:	505a      	str	r2, [r3, r1]
 8003d74:	e038      	b.n	8003de8 <_ZN13AP33772Driver16SendRequestedPDOEv+0x1b4>
			}
		} else {
			this->temp.integer |= ((uint32_t)(this->desiredPDO->current / 0.05) & 0x3F);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	22dc      	movs	r2, #220	@ 0xdc
 8003d7a:	589c      	ldr	r4, [r3, r2]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	22cc      	movs	r2, #204	@ 0xcc
 8003d80:	589b      	ldr	r3, [r3, r2]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	1c18      	adds	r0, r3, #0
 8003d86:	f7fe fbdd 	bl	8002544 <__aeabi_f2d>
 8003d8a:	4a30      	ldr	r2, [pc, #192]	@ (8003e4c <_ZN13AP33772Driver16SendRequestedPDOEv+0x218>)
 8003d8c:	4b30      	ldr	r3, [pc, #192]	@ (8003e50 <_ZN13AP33772Driver16SendRequestedPDOEv+0x21c>)
 8003d8e:	f7fd f9cd 	bl	800112c <__aeabi_ddiv>
 8003d92:	0002      	movs	r2, r0
 8003d94:	000b      	movs	r3, r1
 8003d96:	0010      	movs	r0, r2
 8003d98:	0019      	movs	r1, r3
 8003d9a:	f7fc fa93 	bl	80002c4 <__aeabi_d2uiz>
 8003d9e:	0003      	movs	r3, r0
 8003da0:	223f      	movs	r2, #63	@ 0x3f
 8003da2:	4013      	ands	r3, r2
 8003da4:	0022      	movs	r2, r4
 8003da6:	431a      	orrs	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	21dc      	movs	r1, #220	@ 0xdc
 8003dac:	505a      	str	r2, [r3, r1]
			this->temp.integer |= (((uint32_t)(this->desiredPDO->voltage / 0.02) & 0x3FF) << 9);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	22dc      	movs	r2, #220	@ 0xdc
 8003db2:	589c      	ldr	r4, [r3, r2]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	22cc      	movs	r2, #204	@ 0xcc
 8003db8:	589b      	ldr	r3, [r3, r2]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	1c18      	adds	r0, r3, #0
 8003dbe:	f7fe fbc1 	bl	8002544 <__aeabi_f2d>
 8003dc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003e40 <_ZN13AP33772Driver16SendRequestedPDOEv+0x20c>)
 8003dc4:	4b23      	ldr	r3, [pc, #140]	@ (8003e54 <_ZN13AP33772Driver16SendRequestedPDOEv+0x220>)
 8003dc6:	f7fd f9b1 	bl	800112c <__aeabi_ddiv>
 8003dca:	0002      	movs	r2, r0
 8003dcc:	000b      	movs	r3, r1
 8003dce:	0010      	movs	r0, r2
 8003dd0:	0019      	movs	r1, r3
 8003dd2:	f7fc fa77 	bl	80002c4 <__aeabi_d2uiz>
 8003dd6:	0003      	movs	r3, r0
 8003dd8:	025b      	lsls	r3, r3, #9
 8003dda:	4a1f      	ldr	r2, [pc, #124]	@ (8003e58 <_ZN13AP33772Driver16SendRequestedPDOEv+0x224>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	0022      	movs	r2, r4
 8003de0:	431a      	orrs	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	21dc      	movs	r1, #220	@ 0xdc
 8003de6:	505a      	str	r2, [r3, r1]
//		this->buffer[4] = this->temp.bytes[3];
//		if (HAL_I2C_Master_Transmit(this->hi2c, this->address, this->buffer, 5, 200) != HAL_OK) {
//			return HAL_ERROR;
//		}

		for (uint8_t i = 0; i < 4; ++i) {
 8003de8:	230f      	movs	r3, #15
 8003dea:	18fb      	adds	r3, r7, r3
 8003dec:	2200      	movs	r2, #0
 8003dee:	701a      	strb	r2, [r3, #0]
 8003df0:	e014      	b.n	8003e1c <_ZN13AP33772Driver16SendRequestedPDOEv+0x1e8>
			this->txBuffer[i] = this->temp.bytes[i];
 8003df2:	240f      	movs	r4, #15
 8003df4:	193b      	adds	r3, r7, r4
 8003df6:	781a      	ldrb	r2, [r3, #0]
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	6879      	ldr	r1, [r7, #4]
 8003dfe:	20dc      	movs	r0, #220	@ 0xdc
 8003e00:	188a      	adds	r2, r1, r2
 8003e02:	1812      	adds	r2, r2, r0
 8003e04:	7810      	ldrb	r0, [r2, #0]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	212d      	movs	r1, #45	@ 0x2d
 8003e0a:	18d3      	adds	r3, r2, r3
 8003e0c:	185b      	adds	r3, r3, r1
 8003e0e:	1c02      	adds	r2, r0, #0
 8003e10:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < 4; ++i) {
 8003e12:	193b      	adds	r3, r7, r4
 8003e14:	193a      	adds	r2, r7, r4
 8003e16:	7812      	ldrb	r2, [r2, #0]
 8003e18:	3201      	adds	r2, #1
 8003e1a:	701a      	strb	r2, [r3, #0]
 8003e1c:	230f      	movs	r3, #15
 8003e1e:	18fb      	adds	r3, r7, r3
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d9e5      	bls.n	8003df2 <_ZN13AP33772Driver16SendRequestedPDOEv+0x1be>
		}
		this->WriteRegister(AP33772_CMD_RDO, 4);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2204      	movs	r2, #4
 8003e2a:	2130      	movs	r1, #48	@ 0x30
 8003e2c:	0018      	movs	r0, r3
 8003e2e:	f7ff fcf1 	bl	8003814 <_ZN13AP33772Driver13WriteRegisterE16AP33772_Registerh>

		return HAL_OK;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e000      	b.n	8003e38 <_ZN13AP33772Driver16SendRequestedPDOEv+0x204>
	}
	return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
}
 8003e38:	0018      	movs	r0, r3
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	b005      	add	sp, #20
 8003e3e:	bd90      	pop	{r4, r7, pc}
 8003e40:	47ae147b 	.word	0x47ae147b
 8003e44:	3f847ae1 	.word	0x3f847ae1
 8003e48:	000ffc00 	.word	0x000ffc00
 8003e4c:	9999999a 	.word	0x9999999a
 8003e50:	3fa99999 	.word	0x3fa99999
 8003e54:	3f947ae1 	.word	0x3f947ae1
 8003e58:	0007fe00 	.word	0x0007fe00

08003e5c <_ZN13AP33772Driver13SetInterruptsE14AP33772_Status>:

HAL_StatusTypeDef AP33772Driver::SetInterrupts(AP33772_Status enabledInts)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	60f8      	str	r0, [r7, #12]
 8003e64:	1d3b      	adds	r3, r7, #4
 8003e66:	6019      	str	r1, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
	this->enabledInterrupts = enabledInts;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1d3a      	adds	r2, r7, #4
 8003e6e:	3350      	adds	r3, #80	@ 0x50
 8003e70:	ca03      	ldmia	r2!, {r0, r1}
 8003e72:	c303      	stmia	r3!, {r0, r1}
//	this->buffer[1] = this->enabledInterrupts.value;
//	if (HAL_I2C_Master_Transmit(this->hi2c, this->address, this->buffer, 2, 100) != HAL_OK) {
//		return HAL_ERROR;
//	}
//	return HAL_OK;
	this->txBuffer[1]  = this->enabledInterrupts.ready;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2250      	movs	r2, #80	@ 0x50
 8003e78:	5c9b      	ldrb	r3, [r3, r2]
 8003e7a:	0019      	movs	r1, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	222e      	movs	r2, #46	@ 0x2e
 8003e80:	5499      	strb	r1, [r3, r2]
	this->txBuffer[1] |= this->enabledInterrupts.success     << 1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	222e      	movs	r2, #46	@ 0x2e
 8003e86:	5c9b      	ldrb	r3, [r3, r2]
 8003e88:	b25a      	sxtb	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2151      	movs	r1, #81	@ 0x51
 8003e8e:	5c5b      	ldrb	r3, [r3, r1]
 8003e90:	005b      	lsls	r3, r3, #1
 8003e92:	b25b      	sxtb	r3, r3
 8003e94:	4313      	orrs	r3, r2
 8003e96:	b25b      	sxtb	r3, r3
 8003e98:	b2d9      	uxtb	r1, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	222e      	movs	r2, #46	@ 0x2e
 8003e9e:	5499      	strb	r1, [r3, r2]
	this->txBuffer[1] |= this->enabledInterrupts.newPDO      << 2;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	222e      	movs	r2, #46	@ 0x2e
 8003ea4:	5c9b      	ldrb	r3, [r3, r2]
 8003ea6:	b25a      	sxtb	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2152      	movs	r1, #82	@ 0x52
 8003eac:	5c5b      	ldrb	r3, [r3, r1]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	b25b      	sxtb	r3, r3
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	b25b      	sxtb	r3, r3
 8003eb6:	b2d9      	uxtb	r1, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	222e      	movs	r2, #46	@ 0x2e
 8003ebc:	5499      	strb	r1, [r3, r2]
	this->txBuffer[1] |= this->enabledInterrupts.overVolt    << 3;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	222e      	movs	r2, #46	@ 0x2e
 8003ec2:	5c9b      	ldrb	r3, [r3, r2]
 8003ec4:	b25a      	sxtb	r2, r3
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2154      	movs	r1, #84	@ 0x54
 8003eca:	5c5b      	ldrb	r3, [r3, r1]
 8003ecc:	00db      	lsls	r3, r3, #3
 8003ece:	b25b      	sxtb	r3, r3
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	b25b      	sxtb	r3, r3
 8003ed4:	b2d9      	uxtb	r1, r3
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	222e      	movs	r2, #46	@ 0x2e
 8003eda:	5499      	strb	r1, [r3, r2]
	this->txBuffer[1] |= this->enabledInterrupts.overCurrent << 4;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	222e      	movs	r2, #46	@ 0x2e
 8003ee0:	5c9b      	ldrb	r3, [r3, r2]
 8003ee2:	b25a      	sxtb	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2155      	movs	r1, #85	@ 0x55
 8003ee8:	5c5b      	ldrb	r3, [r3, r1]
 8003eea:	011b      	lsls	r3, r3, #4
 8003eec:	b25b      	sxtb	r3, r3
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	b25b      	sxtb	r3, r3
 8003ef2:	b2d9      	uxtb	r1, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	222e      	movs	r2, #46	@ 0x2e
 8003ef8:	5499      	strb	r1, [r3, r2]
	this->txBuffer[1] |= this->enabledInterrupts.overTemp    << 5;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	222e      	movs	r2, #46	@ 0x2e
 8003efe:	5c9b      	ldrb	r3, [r3, r2]
 8003f00:	b25a      	sxtb	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2156      	movs	r1, #86	@ 0x56
 8003f06:	5c5b      	ldrb	r3, [r3, r1]
 8003f08:	015b      	lsls	r3, r3, #5
 8003f0a:	b25b      	sxtb	r3, r3
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	b25b      	sxtb	r3, r3
 8003f10:	b2d9      	uxtb	r1, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	222e      	movs	r2, #46	@ 0x2e
 8003f16:	5499      	strb	r1, [r3, r2]
	this->txBuffer[1] |= this->enabledInterrupts.derating    << 6;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	222e      	movs	r2, #46	@ 0x2e
 8003f1c:	5c9b      	ldrb	r3, [r3, r2]
 8003f1e:	b25a      	sxtb	r2, r3
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2157      	movs	r1, #87	@ 0x57
 8003f24:	5c5b      	ldrb	r3, [r3, r1]
 8003f26:	019b      	lsls	r3, r3, #6
 8003f28:	b25b      	sxtb	r3, r3
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	b2d9      	uxtb	r1, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	222e      	movs	r2, #46	@ 0x2e
 8003f34:	5499      	strb	r1, [r3, r2]
	return this->WriteRegister(AP33772_CMD_MASK, 1);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	211e      	movs	r1, #30
 8003f3c:	0018      	movs	r0, r3
 8003f3e:	f7ff fc69 	bl	8003814 <_ZN13AP33772Driver13WriteRegisterE16AP33772_Registerh>
 8003f42:	0003      	movs	r3, r0
}
 8003f44:	0018      	movs	r0, r3
 8003f46:	46bd      	mov	sp, r7
 8003f48:	b004      	add	sp, #16
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <_ZN13AP33772Driver11SetOverTempEh>:

HAL_StatusTypeDef AP33772Driver::SetOverTemp(uint8_t temp)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	000a      	movs	r2, r1
 8003f56:	1cfb      	adds	r3, r7, #3
 8003f58:	701a      	strb	r2, [r3, #0]
//	this->buffer[0] = AP33772_OTPTHR;
//	this->buffer[1] = temp;
//	return HAL_I2C_Master_Transmit(this->hi2c, this->address, this->buffer, 2, 200);
	this->txBuffer[0] = temp;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	1cfa      	adds	r2, r7, #3
 8003f5e:	212d      	movs	r1, #45	@ 0x2d
 8003f60:	7812      	ldrb	r2, [r2, #0]
 8003f62:	545a      	strb	r2, [r3, r1]
	return this->WriteRegister(AP33772_CMD_OTPTHR, 1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	2124      	movs	r1, #36	@ 0x24
 8003f6a:	0018      	movs	r0, r3
 8003f6c:	f7ff fc52 	bl	8003814 <_ZN13AP33772Driver13WriteRegisterE16AP33772_Registerh>
 8003f70:	0003      	movs	r3, r0
}
 8003f72:	0018      	movs	r0, r3
 8003f74:	46bd      	mov	sp, r7
 8003f76:	b002      	add	sp, #8
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_ZN3PinC1Ev>:
	Pin() {};
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	721a      	strb	r2, [r3, #8]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b002      	add	sp, #8
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <_ZN3PinC1EP12GPIO_TypeDeft>:
	Pin(GPIO_TypeDef* port, uint16_t pin)
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	1dbb      	adds	r3, r7, #6
 8003f9e:	801a      	strh	r2, [r3, #0]
	{
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	2201      	movs	r2, #1
 8003fa4:	721a      	strb	r2, [r3, #8]
		this->port = port;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	68ba      	ldr	r2, [r7, #8]
 8003faa:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	1dba      	adds	r2, r7, #6
 8003fb0:	8812      	ldrh	r2, [r2, #0]
 8003fb2:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	719a      	strb	r2, [r3, #6]
	};
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	b004      	add	sp, #16
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>:
	Pin(GPIO_TypeDef* port, uint16_t pin, GPIO_Default_State defaultState, bool isOutput)
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b084      	sub	sp, #16
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	60f8      	str	r0, [r7, #12]
 8003fcc:	60b9      	str	r1, [r7, #8]
 8003fce:	0019      	movs	r1, r3
 8003fd0:	1dbb      	adds	r3, r7, #6
 8003fd2:	801a      	strh	r2, [r3, #0]
 8003fd4:	1d7b      	adds	r3, r7, #5
 8003fd6:	1c0a      	adds	r2, r1, #0
 8003fd8:	701a      	strb	r2, [r3, #0]
	{
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	721a      	strb	r2, [r3, #8]
		this->port = port;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	1dba      	adds	r2, r7, #6
 8003fea:	8812      	ldrh	r2, [r2, #0]
 8003fec:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1d7a      	adds	r2, r7, #5
 8003ff2:	7812      	ldrb	r2, [r2, #0]
 8003ff4:	719a      	strb	r2, [r3, #6]
		this->isOutput = isOutput;
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	2318      	movs	r3, #24
 8003ffa:	18fb      	adds	r3, r7, r3
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	7213      	strb	r3, [r2, #8]
	};
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	0018      	movs	r0, r3
 8004004:	46bd      	mov	sp, r7
 8004006:	b004      	add	sp, #16
 8004008:	bd80      	pop	{r7, pc}

0800400a <_ZN3Pin4ReadEv>:
	GPIO_PinState Read() {
 800400a:	b580      	push	{r7, lr}
 800400c:	b082      	sub	sp, #8
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
		if (!this->isOutput)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	7a1b      	ldrb	r3, [r3, #8]
 8004016:	2201      	movs	r2, #1
 8004018:	4053      	eors	r3, r2
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d00f      	beq.n	8004040 <_ZN3Pin4ReadEv+0x36>
			this->state = (GPIO_PinState)(HAL_GPIO_ReadPin(this->port, this->pin) ^ this->defaultState);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	889b      	ldrh	r3, [r3, #4]
 8004028:	0019      	movs	r1, r3
 800402a:	0010      	movs	r0, r2
 800402c:	f002 fbfe 	bl	800682c <HAL_GPIO_ReadPin>
 8004030:	0003      	movs	r3, r0
 8004032:	001a      	movs	r2, r3
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	799b      	ldrb	r3, [r3, #6]
 8004038:	4053      	eors	r3, r2
 800403a:	b2da      	uxtb	r2, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	71da      	strb	r2, [r3, #7]
		return this->state;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	79db      	ldrb	r3, [r3, #7]
	};
 8004044:	0018      	movs	r0, r3
 8004046:	46bd      	mov	sp, r7
 8004048:	b002      	add	sp, #8
 800404a:	bd80      	pop	{r7, pc}

0800404c <_ZN6PWMPinC1Ev>:
	PWMPin() { };
 800404c:	b580      	push	{r7, lr}
 800404e:	b082      	sub	sp, #8
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	809a      	strh	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0018      	movs	r0, r3
 800405e:	46bd      	mov	sp, r7
 8004060:	b002      	add	sp, #8
 8004062:	bd80      	pop	{r7, pc}

08004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>:
	PWMPin(TIM_HandleTypeDef* timerHandle, uint16_t channel) {
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	1dbb      	adds	r3, r7, #6
 8004070:	801a      	strh	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	809a      	strh	r2, [r3, #4]
		this->timerHandle = timerHandle;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	68ba      	ldr	r2, [r7, #8]
 800407c:	601a      	str	r2, [r3, #0]
		this->channel = channel;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1dba      	adds	r2, r7, #6
 8004082:	8812      	ldrh	r2, [r2, #0]
 8004084:	809a      	strh	r2, [r3, #4]
	};
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	0018      	movs	r0, r3
 800408a:	46bd      	mov	sp, r7
 800408c:	b004      	add	sp, #16
 800408e:	bd80      	pop	{r7, pc}

08004090 <_ZN13AP33772DriverC1Ev>:
 *
 */
class AP33772Driver
{
public:
	AP33772Driver() { };
 8004090:	b580      	push	{r7, lr}
 8004092:	b082      	sub	sp, #8
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	4a1c      	ldr	r2, [pc, #112]	@ (800410c <_ZN13AP33772DriverC1Ev+0x7c>)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	333c      	adds	r3, #60	@ 0x3c
 80040a2:	0018      	movs	r0, r3
 80040a4:	f7ff f897 	bl	80031d6 <_ZN22AP33772_MeasuredValuesC1Ev>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	3348      	adds	r3, #72	@ 0x48
 80040ac:	0018      	movs	r0, r3
 80040ae:	f7ff f8a4 	bl	80031fa <_ZN14AP33772_StatusC1Ev>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	3350      	adds	r3, #80	@ 0x50
 80040b6:	0018      	movs	r0, r3
 80040b8:	f7ff f89f 	bl	80031fa <_ZN14AP33772_StatusC1Ev>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	3358      	adds	r3, #88	@ 0x58
 80040c0:	2270      	movs	r2, #112	@ 0x70
 80040c2:	2100      	movs	r1, #0
 80040c4:	0018      	movs	r0, r3
 80040c6:	f00c fccb 	bl	8010a60 <memset>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	22c8      	movs	r2, #200	@ 0xc8
 80040ce:	2100      	movs	r1, #0
 80040d0:	5499      	strb	r1, [r3, r2]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	22c9      	movs	r2, #201	@ 0xc9
 80040d6:	2100      	movs	r1, #0
 80040d8:	5499      	strb	r1, [r3, r2]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	22d0      	movs	r2, #208	@ 0xd0
 80040de:	2100      	movs	r1, #0
 80040e0:	5499      	strb	r1, [r3, r2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	22d1      	movs	r2, #209	@ 0xd1
 80040e6:	2100      	movs	r1, #0
 80040e8:	5499      	strb	r1, [r3, r2]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	22d2      	movs	r2, #210	@ 0xd2
 80040ee:	2100      	movs	r1, #0
 80040f0:	5499      	strb	r1, [r3, r2]
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	22d4      	movs	r2, #212	@ 0xd4
 80040f6:	4906      	ldr	r1, [pc, #24]	@ (8004110 <_ZN13AP33772DriverC1Ev+0x80>)
 80040f8:	189b      	adds	r3, r3, r2
 80040fa:	000a      	movs	r2, r1
 80040fc:	ca03      	ldmia	r2!, {r0, r1}
 80040fe:	c303      	stmia	r3!, {r0, r1}
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	0018      	movs	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	b002      	add	sp, #8
 8004108:	bd80      	pop	{r7, pc}
 800410a:	46c0      	nop			@ (mov r8, r8)
 800410c:	08010cb4 	.word	0x08010cb4
 8004110:	08010cc4 	.word	0x08010cc4

08004114 <_ZN13AP33772Driver13FoundPDOMatchEv>:
	HAL_StatusTypeDef SendRequestedPDO();
	HAL_StatusTypeDef SetInterrupts(AP33772_Status enabledInts);
	HAL_StatusTypeDef SetOverTemp(uint8_t temp);
	HAL_StatusTypeDef SetThermistorValues();

	bool FoundPDOMatch() { return this->foundPDO; };
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	22d0      	movs	r2, #208	@ 0xd0
 8004120:	5c9b      	ldrb	r3, [r3, r2]
 8004122:	0018      	movs	r0, r3
 8004124:	46bd      	mov	sp, r7
 8004126:	b002      	add	sp, #8
 8004128:	bd80      	pop	{r7, pc}
	...

0800412c <_ZN15LightingManagerC1Ev>:
 *
 */
class LightingManager
{
public:
	LightingManager() { };
 800412c:	b580      	push	{r7, lr}
 800412e:	b082      	sub	sp, #8
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	4a1a      	ldr	r2, [pc, #104]	@ (80041a0 <_ZN15LightingManagerC1Ev+0x74>)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	61da      	str	r2, [r3, #28]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	841a      	strh	r2, [r3, #32]
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	845a      	strh	r2, [r3, #34]	@ 0x22
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	625a      	str	r2, [r3, #36]	@ 0x24
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	222c      	movs	r2, #44	@ 0x2c
 8004162:	2100      	movs	r1, #0
 8004164:	5499      	strb	r1, [r3, r2]
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	222d      	movs	r2, #45	@ 0x2d
 800416a:	2100      	movs	r1, #0
 800416c:	5499      	strb	r1, [r3, r2]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	@ 0x30
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	635a      	str	r2, [r3, #52]	@ 0x34
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	4a09      	ldr	r2, [pc, #36]	@ (80041a4 <_ZN15LightingManagerC1Ev+0x78>)
 800417e:	639a      	str	r2, [r3, #56]	@ 0x38
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	22fe      	movs	r2, #254	@ 0xfe
 8004184:	0592      	lsls	r2, r2, #22
 8004186:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a07      	ldr	r2, [pc, #28]	@ (80041a8 <_ZN15LightingManagerC1Ev+0x7c>)
 800418c:	641a      	str	r2, [r3, #64]	@ 0x40
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2244      	movs	r2, #68	@ 0x44
 8004192:	2100      	movs	r1, #0
 8004194:	5499      	strb	r1, [r3, r2]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b002      	add	sp, #8
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	08010c8c 	.word	0x08010c8c
 80041a4:	40400000 	.word	0x40400000
 80041a8:	42700000 	.word	0x42700000

080041ac <_ZN10UsbManagerC1Ev>:
 *
 */
class UsbManager
{
public:
	UsbManager() { };
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	4a0a      	ldr	r2, [pc, #40]	@ (80041e0 <_ZN10UsbManagerC1Ev+0x34>)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2200      	movs	r2, #0
 80041be:	669a      	str	r2, [r3, #104]	@ 0x68
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2200      	movs	r2, #0
 80041c4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2270      	movs	r2, #112	@ 0x70
 80041ca:	2100      	movs	r1, #0
 80041cc:	5499      	strb	r1, [r3, r2]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2271      	movs	r2, #113	@ 0x71
 80041d2:	2100      	movs	r1, #0
 80041d4:	5499      	strb	r1, [r3, r2]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	0018      	movs	r0, r3
 80041da:	46bd      	mov	sp, r7
 80041dc:	b002      	add	sp, #8
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	08010c9c 	.word	0x08010c9c

080041e4 <_ZN11ControlPinsC1Ev>:
uint8_t normTempValue = NORMAL_TEMP_DEFAULT;

typedef struct {
	Pin enable;
	Pin maxBright;
} ControlPins;
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b082      	sub	sp, #8
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	0018      	movs	r0, r3
 80041f0:	f7ff fec3 	bl	8003f7a <_ZN3PinC1Ev>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	330c      	adds	r3, #12
 80041f8:	0018      	movs	r0, r3
 80041fa:	f7ff febe 	bl	8003f7a <_ZN3PinC1Ev>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}

08004208 <_ZN18LightingIndicatorsC1Ev>:
} LightingIndicators;
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	0018      	movs	r0, r3
 8004214:	f7ff feb1 	bl	8003f7a <_ZN3PinC1Ev>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	330c      	adds	r3, #12
 800421c:	0018      	movs	r0, r3
 800421e:	f7ff feac 	bl	8003f7a <_ZN3PinC1Ev>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3318      	adds	r3, #24
 8004226:	0018      	movs	r0, r3
 8004228:	f7ff fea7 	bl	8003f7a <_ZN3PinC1Ev>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	0018      	movs	r0, r3
 8004230:	46bd      	mov	sp, r7
 8004232:	b002      	add	sp, #8
 8004234:	bd80      	pop	{r7, pc}
	...

08004238 <_Z18UsbReceiveCallbackPhPm>:
static HAL_StatusTypeDef InitPower();

// Callback Functions:

void UsbReceiveCallback(uint8_t *buffer, uint32_t *len)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
	usb.ReceivedCallback(buffer, len);
 8004242:	683a      	ldr	r2, [r7, #0]
 8004244:	6879      	ldr	r1, [r7, #4]
 8004246:	4b04      	ldr	r3, [pc, #16]	@ (8004258 <_Z18UsbReceiveCallbackPhPm+0x20>)
 8004248:	0018      	movs	r0, r3
 800424a:	f7fe ff9d 	bl	8003188 <_ZN10UsbManager16ReceivedCallbackEPhPm>
}
 800424e:	46c0      	nop			@ (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			@ (mov r8, r8)
 8004258:	2000038c 	.word	0x2000038c

0800425c <ExtInterruptCallback>:
{
	potPosition = (uint16_t)HAL_ADC_GetValue(h_adc);
}

void ExtInterruptCallback(uint16_t pin)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	0002      	movs	r2, r0
 8004264:	1dbb      	adds	r3, r7, #6
 8004266:	801a      	strh	r2, [r3, #0]
	switch (pin) {
 8004268:	1dbb      	adds	r3, r7, #6
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	2280      	movs	r2, #128	@ 0x80
 800426e:	0152      	lsls	r2, r2, #5
 8004270:	4293      	cmp	r3, r2
 8004272:	d022      	beq.n	80042ba <ExtInterruptCallback+0x5e>
 8004274:	2280      	movs	r2, #128	@ 0x80
 8004276:	0152      	lsls	r2, r2, #5
 8004278:	4293      	cmp	r3, r2
 800427a:	dc23      	bgt.n	80042c4 <ExtInterruptCallback+0x68>
 800427c:	2280      	movs	r2, #128	@ 0x80
 800427e:	0092      	lsls	r2, r2, #2
 8004280:	4293      	cmp	r3, r2
 8004282:	d011      	beq.n	80042a8 <ExtInterruptCallback+0x4c>
 8004284:	2280      	movs	r2, #128	@ 0x80
 8004286:	0112      	lsls	r2, r2, #4
 8004288:	4293      	cmp	r3, r2
 800428a:	d11b      	bne.n	80042c4 <ExtInterruptCallback+0x68>
		case ENABLE_Pin:
			if (startup) {
 800428c:	4b10      	ldr	r3, [pc, #64]	@ (80042d0 <ExtInterruptCallback+0x74>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d004      	beq.n	800429e <ExtInterruptCallback+0x42>
				lighting.LightsOFF();
 8004294:	4b0f      	ldr	r3, [pc, #60]	@ (80042d4 <ExtInterruptCallback+0x78>)
 8004296:	0018      	movs	r0, r3
 8004298:	f7fe fceb 	bl	8002c72 <_ZN15LightingManager9LightsOFFEv>
				return;
 800429c:	e015      	b.n	80042ca <ExtInterruptCallback+0x6e>
			}
			lighting.LightsToggle();
 800429e:	4b0d      	ldr	r3, [pc, #52]	@ (80042d4 <ExtInterruptCallback+0x78>)
 80042a0:	0018      	movs	r0, r3
 80042a2:	f7fe fcf6 	bl	8002c92 <_ZN15LightingManager12LightsToggleEv>
			break;
 80042a6:	e010      	b.n	80042ca <ExtInterruptCallback+0x6e>
		case MAX_BRIGHT_Pin:
			if (startup) return;
 80042a8:	4b09      	ldr	r3, [pc, #36]	@ (80042d0 <ExtInterruptCallback+0x74>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <ExtInterruptCallback+0x6c>
			lighting.ToggleMaxBrightness();
 80042b0:	4b08      	ldr	r3, [pc, #32]	@ (80042d4 <ExtInterruptCallback+0x78>)
 80042b2:	0018      	movs	r0, r3
 80042b4:	f7fe fd36 	bl	8002d24 <_ZN15LightingManager19ToggleMaxBrightnessEv>
			break;
 80042b8:	e007      	b.n	80042ca <ExtInterruptCallback+0x6e>
		case I2C_INT_Pin:
			lighting.StatusInterrupt();
 80042ba:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <ExtInterruptCallback+0x78>)
 80042bc:	0018      	movs	r0, r3
 80042be:	f7fe fccb 	bl	8002c58 <_ZN15LightingManager15StatusInterruptEv>
			break;
 80042c2:	e002      	b.n	80042ca <ExtInterruptCallback+0x6e>
//		case USB_OVER_VOLT_Pin:
//			lightsEnable = false;
//			break;
		default:
			break;
 80042c4:	46c0      	nop			@ (mov r8, r8)
 80042c6:	e000      	b.n	80042ca <ExtInterruptCallback+0x6e>
			if (startup) return;
 80042c8:	46c0      	nop			@ (mov r8, r8)
	}
}
 80042ca:	46bd      	mov	sp, r7
 80042cc:	b002      	add	sp, #8
 80042ce:	bd80      	pop	{r7, pc}
 80042d0:	20000001 	.word	0x20000001
 80042d4:	20000344 	.word	0x20000344

080042d8 <TimerElapsedCallback>:

void TimerElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
	if (htim == h_tim_debounce) {
 80042e0:	4b0e      	ldr	r3, [pc, #56]	@ (800431c <TimerElapsedCallback+0x44>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d103      	bne.n	80042f2 <TimerElapsedCallback+0x1a>
		debounce = false;
 80042ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004320 <TimerElapsedCallback+0x48>)
 80042ec:	2200      	movs	r2, #0
 80042ee:	701a      	strb	r2, [r3, #0]
		checkTemp = true;
	}
	else if (htim == h_tim_rdData) {
		readData = true;
	}
}
 80042f0:	e010      	b.n	8004314 <TimerElapsedCallback+0x3c>
	else if (htim == h_tim_temp) {
 80042f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004324 <TimerElapsedCallback+0x4c>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d103      	bne.n	8004304 <TimerElapsedCallback+0x2c>
		checkTemp = true;
 80042fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004328 <TimerElapsedCallback+0x50>)
 80042fe:	2201      	movs	r2, #1
 8004300:	701a      	strb	r2, [r3, #0]
}
 8004302:	e007      	b.n	8004314 <TimerElapsedCallback+0x3c>
	else if (htim == h_tim_rdData) {
 8004304:	4b09      	ldr	r3, [pc, #36]	@ (800432c <TimerElapsedCallback+0x54>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	429a      	cmp	r2, r3
 800430c:	d102      	bne.n	8004314 <TimerElapsedCallback+0x3c>
		readData = true;
 800430e:	4b08      	ldr	r3, [pc, #32]	@ (8004330 <TimerElapsedCallback+0x58>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
}
 8004314:	46c0      	nop			@ (mov r8, r8)
 8004316:	46bd      	mov	sp, r7
 8004318:	b002      	add	sp, #8
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000210 	.word	0x20000210
 8004320:	20000838 	.word	0x20000838
 8004324:	20000214 	.word	0x20000214
 8004328:	20000839 	.word	0x20000839
 800432c:	20000218 	.word	0x20000218
 8004330:	2000083a 	.word	0x2000083a

08004334 <_ZN13AP33772DriveraSERKS_>:
class AP33772Driver
 8004334:	b590      	push	{r4, r7, lr}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	685a      	ldr	r2, [r3, #4]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	605a      	str	r2, [r3, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	7a1a      	ldrb	r2, [r3, #8]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	721a      	strb	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	3309      	adds	r3, #9
 8004352:	0019      	movs	r1, r3
 8004354:	2223      	movs	r2, #35	@ 0x23
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	3309      	adds	r3, #9
 800435a:	e004      	b.n	8004366 <_ZN13AP33772DriveraSERKS_+0x32>
 800435c:	7818      	ldrb	r0, [r3, #0]
 800435e:	7008      	strb	r0, [r1, #0]
 8004360:	3a01      	subs	r2, #1
 8004362:	3101      	adds	r1, #1
 8004364:	3301      	adds	r3, #1
 8004366:	2a00      	cmp	r2, #0
 8004368:	daf8      	bge.n	800435c <_ZN13AP33772DriveraSERKS_+0x28>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	332d      	adds	r3, #45	@ 0x2d
 800436e:	0019      	movs	r1, r3
 8004370:	2209      	movs	r2, #9
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	332d      	adds	r3, #45	@ 0x2d
 8004376:	e004      	b.n	8004382 <_ZN13AP33772DriveraSERKS_+0x4e>
 8004378:	7818      	ldrb	r0, [r3, #0]
 800437a:	7008      	strb	r0, [r1, #0]
 800437c:	3a01      	subs	r2, #1
 800437e:	3101      	adds	r1, #1
 8004380:	3301      	adds	r3, #1
 8004382:	2a00      	cmp	r2, #0
 8004384:	daf8      	bge.n	8004378 <_ZN13AP33772DriveraSERKS_+0x44>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	639a      	str	r2, [r3, #56]	@ 0x38
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	333c      	adds	r3, #60	@ 0x3c
 8004394:	323c      	adds	r2, #60	@ 0x3c
 8004396:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004398:	c313      	stmia	r3!, {r0, r1, r4}
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	3348      	adds	r3, #72	@ 0x48
 80043a0:	3248      	adds	r2, #72	@ 0x48
 80043a2:	ca03      	ldmia	r2!, {r0, r1}
 80043a4:	c303      	stmia	r3!, {r0, r1}
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	683a      	ldr	r2, [r7, #0]
 80043aa:	3350      	adds	r3, #80	@ 0x50
 80043ac:	3250      	adds	r2, #80	@ 0x50
 80043ae:	ca03      	ldmia	r2!, {r0, r1}
 80043b0:	c303      	stmia	r3!, {r0, r1}
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	3258      	adds	r2, #88	@ 0x58
 80043b8:	0010      	movs	r0, r2
 80043ba:	3358      	adds	r3, #88	@ 0x58
 80043bc:	2270      	movs	r2, #112	@ 0x70
 80043be:	0019      	movs	r1, r3
 80043c0:	f00c fb82 	bl	8010ac8 <memcpy>
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	22c8      	movs	r2, #200	@ 0xc8
 80043c8:	5c99      	ldrb	r1, [r3, r2]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	22c8      	movs	r2, #200	@ 0xc8
 80043ce:	5499      	strb	r1, [r3, r2]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	22c9      	movs	r2, #201	@ 0xc9
 80043d4:	5c99      	ldrb	r1, [r3, r2]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	22c9      	movs	r2, #201	@ 0xc9
 80043da:	5499      	strb	r1, [r3, r2]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	22cc      	movs	r2, #204	@ 0xcc
 80043e0:	589a      	ldr	r2, [r3, r2]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	21cc      	movs	r1, #204	@ 0xcc
 80043e6:	505a      	str	r2, [r3, r1]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	22d0      	movs	r2, #208	@ 0xd0
 80043ec:	5c99      	ldrb	r1, [r3, r2]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	22d0      	movs	r2, #208	@ 0xd0
 80043f2:	5499      	strb	r1, [r3, r2]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	22d1      	movs	r2, #209	@ 0xd1
 80043f8:	5c99      	ldrb	r1, [r3, r2]
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	22d1      	movs	r2, #209	@ 0xd1
 80043fe:	5499      	strb	r1, [r3, r2]
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	22d2      	movs	r2, #210	@ 0xd2
 8004404:	5c99      	ldrb	r1, [r3, r2]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	22d2      	movs	r2, #210	@ 0xd2
 800440a:	5499      	strb	r1, [r3, r2]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	20d4      	movs	r0, #212	@ 0xd4
 8004410:	683a      	ldr	r2, [r7, #0]
 8004412:	21d4      	movs	r1, #212	@ 0xd4
 8004414:	181b      	adds	r3, r3, r0
 8004416:	1852      	adds	r2, r2, r1
 8004418:	ca03      	ldmia	r2!, {r0, r1}
 800441a:	c303      	stmia	r3!, {r0, r1}
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	21dc      	movs	r1, #220	@ 0xdc
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	20dc      	movs	r0, #220	@ 0xdc
 8004424:	5812      	ldr	r2, [r2, r0]
 8004426:	505a      	str	r2, [r3, r1]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	0018      	movs	r0, r3
 800442c:	46bd      	mov	sp, r7
 800442e:	b003      	add	sp, #12
 8004430:	bd90      	pop	{r4, r7, pc}

08004432 <_ZN15LightingManageraSERKS_>:
class LightingManager
 8004432:	b580      	push	{r7, lr}
 8004434:	b082      	sub	sp, #8
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
 800443a:	6039      	str	r1, [r7, #0]
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	605a      	str	r2, [r3, #4]
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	689a      	ldr	r2, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	609a      	str	r2, [r3, #8]
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	68da      	ldr	r2, [r3, #12]
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	60da      	str	r2, [r3, #12]
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	611a      	str	r2, [r3, #16]
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	615a      	str	r2, [r3, #20]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	619a      	str	r2, [r3, #24]
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	69da      	ldr	r2, [r3, #28]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	61da      	str	r2, [r3, #28]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	8c1a      	ldrh	r2, [r3, #32]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	841a      	strh	r2, [r3, #32]
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	8c5a      	ldrh	r2, [r3, #34]	@ 0x22
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	845a      	strh	r2, [r3, #34]	@ 0x22
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	625a      	str	r2, [r3, #36]	@ 0x24
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	8d1a      	ldrh	r2, [r3, #40]	@ 0x28
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	851a      	strh	r2, [r3, #40]	@ 0x28
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	222c      	movs	r2, #44	@ 0x2c
 80044a0:	5c99      	ldrb	r1, [r3, r2]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	222c      	movs	r2, #44	@ 0x2c
 80044a6:	5499      	strb	r1, [r3, r2]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	222d      	movs	r2, #45	@ 0x2d
 80044ac:	5c99      	ldrb	r1, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	222d      	movs	r2, #45	@ 0x2d
 80044b2:	5499      	strb	r1, [r3, r2]
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	635a      	str	r2, [r3, #52]	@ 0x34
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	639a      	str	r2, [r3, #56]	@ 0x38
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	641a      	str	r2, [r3, #64]	@ 0x40
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	2244      	movs	r2, #68	@ 0x44
 80044e0:	5c99      	ldrb	r1, [r3, r2]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2244      	movs	r2, #68	@ 0x44
 80044e6:	5499      	strb	r1, [r3, r2]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	0018      	movs	r0, r3
 80044ec:	46bd      	mov	sp, r7
 80044ee:	b002      	add	sp, #8
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <_ZN10UsbManageraSERKS_>:
class UsbManager
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b082      	sub	sp, #8
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	605a      	str	r2, [r3, #4]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	3308      	adds	r3, #8
 8004508:	0019      	movs	r1, r3
 800450a:	223f      	movs	r2, #63	@ 0x3f
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	3308      	adds	r3, #8
 8004510:	e004      	b.n	800451c <_ZN10UsbManageraSERKS_+0x2a>
 8004512:	7818      	ldrb	r0, [r3, #0]
 8004514:	7008      	strb	r0, [r1, #0]
 8004516:	3a01      	subs	r2, #1
 8004518:	3101      	adds	r1, #1
 800451a:	3301      	adds	r3, #1
 800451c:	2a00      	cmp	r2, #0
 800451e:	daf8      	bge.n	8004512 <_ZN10UsbManageraSERKS_+0x20>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	3348      	adds	r3, #72	@ 0x48
 8004524:	0019      	movs	r1, r3
 8004526:	221f      	movs	r2, #31
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	3348      	adds	r3, #72	@ 0x48
 800452c:	e004      	b.n	8004538 <_ZN10UsbManageraSERKS_+0x46>
 800452e:	7818      	ldrb	r0, [r3, #0]
 8004530:	7008      	strb	r0, [r1, #0]
 8004532:	3a01      	subs	r2, #1
 8004534:	3101      	adds	r1, #1
 8004536:	3301      	adds	r3, #1
 8004538:	2a00      	cmp	r2, #0
 800453a:	daf8      	bge.n	800452e <_ZN10UsbManageraSERKS_+0x3c>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	669a      	str	r2, [r3, #104]	@ 0x68
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	66da      	str	r2, [r3, #108]	@ 0x6c
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	2270      	movs	r2, #112	@ 0x70
 8004550:	5c99      	ldrb	r1, [r3, r2]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2270      	movs	r2, #112	@ 0x70
 8004556:	5499      	strb	r1, [r3, r2]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	2271      	movs	r2, #113	@ 0x71
 800455c:	5c99      	ldrb	r1, [r3, r2]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2271      	movs	r2, #113	@ 0x71
 8004562:	5499      	strb	r1, [r3, r2]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3374      	adds	r3, #116	@ 0x74
 8004568:	001a      	movs	r2, r3
 800456a:	21fe      	movs	r1, #254	@ 0xfe
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	3374      	adds	r3, #116	@ 0x74
 8004570:	e004      	b.n	800457c <_ZN10UsbManageraSERKS_+0x8a>
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	6010      	str	r0, [r2, #0]
 8004576:	3901      	subs	r1, #1
 8004578:	3204      	adds	r2, #4
 800457a:	3304      	adds	r3, #4
 800457c:	2900      	cmp	r1, #0
 800457e:	daf8      	bge.n	8004572 <_ZN10UsbManageraSERKS_+0x80>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	0018      	movs	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	b002      	add	sp, #8
 8004588:	bd80      	pop	{r7, pc}
	...

0800458c <Init>:
		TIM_HandleTypeDef *htim14,
		TIM_HandleTypeDef *htim15,
		TIM_HandleTypeDef *htim16,
		I2C_HandleTypeDef *hi2c2
	)
{
 800458c:	b5b0      	push	{r4, r5, r7, lr}
 800458e:	4c60      	ldr	r4, [pc, #384]	@ (8004710 <Init+0x184>)
 8004590:	44a5      	add	sp, r4
 8004592:	af02      	add	r7, sp, #8
 8004594:	60f8      	str	r0, [r7, #12]
 8004596:	60b9      	str	r1, [r7, #8]
 8004598:	607a      	str	r2, [r7, #4]
 800459a:	603b      	str	r3, [r7, #0]
	h_adc          = hadc;
 800459c:	4b5d      	ldr	r3, [pc, #372]	@ (8004714 <Init+0x188>)
 800459e:	68fa      	ldr	r2, [r7, #12]
 80045a0:	601a      	str	r2, [r3, #0]
	h_tim2         = htim2;
 80045a2:	4b5d      	ldr	r3, [pc, #372]	@ (8004718 <Init+0x18c>)
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	601a      	str	r2, [r3, #0]
	h_tim3         = htim3;
 80045a8:	4b5c      	ldr	r3, [pc, #368]	@ (800471c <Init+0x190>)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	601a      	str	r2, [r3, #0]
	h_tim_debounce = htim7;
 80045ae:	4b5c      	ldr	r3, [pc, #368]	@ (8004720 <Init+0x194>)
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	601a      	str	r2, [r3, #0]
	h_tim_temp     = htim14;
 80045b4:	4b5b      	ldr	r3, [pc, #364]	@ (8004724 <Init+0x198>)
 80045b6:	22b7      	movs	r2, #183	@ 0xb7
 80045b8:	00d2      	lsls	r2, r2, #3
 80045ba:	18ba      	adds	r2, r7, r2
 80045bc:	6812      	ldr	r2, [r2, #0]
 80045be:	601a      	str	r2, [r3, #0]
	h_tim_pwrFault = htim15;
 80045c0:	4b59      	ldr	r3, [pc, #356]	@ (8004728 <Init+0x19c>)
 80045c2:	4a5a      	ldr	r2, [pc, #360]	@ (800472c <Init+0x1a0>)
 80045c4:	18ba      	adds	r2, r7, r2
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	601a      	str	r2, [r3, #0]
	h_tim_rdData   = htim16;
 80045ca:	4b59      	ldr	r3, [pc, #356]	@ (8004730 <Init+0x1a4>)
 80045cc:	22b8      	movs	r2, #184	@ 0xb8
 80045ce:	00d2      	lsls	r2, r2, #3
 80045d0:	18ba      	adds	r2, r7, r2
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	601a      	str	r2, [r3, #0]
	h_i2c          = hi2c2;
 80045d6:	4b57      	ldr	r3, [pc, #348]	@ (8004734 <Init+0x1a8>)
 80045d8:	4a57      	ldr	r2, [pc, #348]	@ (8004738 <Init+0x1ac>)
 80045da:	18ba      	adds	r2, r7, r2
 80045dc:	6812      	ldr	r2, [r2, #0]
 80045de:	601a      	str	r2, [r3, #0]

	RegisterUSBReceiveCallback(UsbReceiveCallback);
 80045e0:	4b56      	ldr	r3, [pc, #344]	@ (800473c <Init+0x1b0>)
 80045e2:	0018      	movs	r0, r3
 80045e4:	f00b f848 	bl	800f678 <RegisterUSBReceiveCallback>

	InitPins();
 80045e8:	f000 f916 	bl	8004818 <_ZL8InitPinsv>

	pwrDriver = AP33772Driver(h_i2c, &desiredPDO);
 80045ec:	4b51      	ldr	r3, [pc, #324]	@ (8004734 <Init+0x1a8>)
 80045ee:	6819      	ldr	r1, [r3, #0]
 80045f0:	4a53      	ldr	r2, [pc, #332]	@ (8004740 <Init+0x1b4>)
 80045f2:	2410      	movs	r4, #16
 80045f4:	193b      	adds	r3, r7, r4
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7fe fe20 	bl	800323c <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDefP23AP33772_PDRequestObject>
 80045fc:	193a      	adds	r2, r7, r4
 80045fe:	4b51      	ldr	r3, [pc, #324]	@ (8004744 <Init+0x1b8>)
 8004600:	0011      	movs	r1, r2
 8004602:	0018      	movs	r0, r3
 8004604:	f7ff fe96 	bl	8004334 <_ZN13AP33772DriveraSERKS_>
 8004608:	193b      	adds	r3, r7, r4
 800460a:	0018      	movs	r0, r3
 800460c:	f7fe fe9a 	bl	8003344 <_ZN13AP33772DriverD1Ev>

	lighting = LightingManager(&pwrDriver, pins, &indPins, &desiredPDO);
 8004610:	4c4d      	ldr	r4, [pc, #308]	@ (8004748 <Init+0x1bc>)
 8004612:	4a4e      	ldr	r2, [pc, #312]	@ (800474c <Init+0x1c0>)
 8004614:	494b      	ldr	r1, [pc, #300]	@ (8004744 <Init+0x1b8>)
 8004616:	25f0      	movs	r5, #240	@ 0xf0
 8004618:	1978      	adds	r0, r7, r5
 800461a:	4b49      	ldr	r3, [pc, #292]	@ (8004740 <Init+0x1b4>)
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	0023      	movs	r3, r4
 8004620:	f7fe fa78 	bl	8002b14 <_ZN15LightingManagerC1EP13AP33772DriverP6PWMPinP18LightingIndicatorsP23AP33772_PDRequestObject>
 8004624:	002c      	movs	r4, r5
 8004626:	193a      	adds	r2, r7, r4
 8004628:	4b49      	ldr	r3, [pc, #292]	@ (8004750 <Init+0x1c4>)
 800462a:	0011      	movs	r1, r2
 800462c:	0018      	movs	r0, r3
 800462e:	f7ff ff00 	bl	8004432 <_ZN15LightingManageraSERKS_>
 8004632:	193b      	adds	r3, r7, r4
 8004634:	0018      	movs	r0, r3
 8004636:	f7fe fabd 	bl	8002bb4 <_ZN15LightingManagerD1Ev>
	lighting.SetMeasurementsPtr(pwrDriver.GetMeasuredValuesPtr());
 800463a:	4b42      	ldr	r3, [pc, #264]	@ (8004744 <Init+0x1b8>)
 800463c:	0018      	movs	r0, r3
 800463e:	f7ff f840 	bl	80036c2 <_ZN13AP33772Driver20GetMeasuredValuesPtrEv>
 8004642:	0002      	movs	r2, r0
 8004644:	4b42      	ldr	r3, [pc, #264]	@ (8004750 <Init+0x1c4>)
 8004646:	0011      	movs	r1, r2
 8004648:	0018      	movs	r0, r3
 800464a:	f7fe fbb9 	bl	8002dc0 <_ZN15LightingManager18SetMeasurementsPtrEP22AP33772_MeasuredValues>

	usb = UsbManager(GetUSBHandle());
 800464e:	f00b f821 	bl	800f694 <GetUSBHandle>
 8004652:	0002      	movs	r2, r0
 8004654:	249c      	movs	r4, #156	@ 0x9c
 8004656:	0064      	lsls	r4, r4, #1
 8004658:	193b      	adds	r3, r7, r4
 800465a:	0011      	movs	r1, r2
 800465c:	0018      	movs	r0, r3
 800465e:	f7fe fd33 	bl	80030c8 <_ZN10UsbManagerC1EP19_USBD_HandleTypeDef>
 8004662:	193a      	adds	r2, r7, r4
 8004664:	4b3b      	ldr	r3, [pc, #236]	@ (8004754 <Init+0x1c8>)
 8004666:	0011      	movs	r1, r2
 8004668:	0018      	movs	r0, r3
 800466a:	f7ff ff42 	bl	80044f2 <_ZN10UsbManageraSERKS_>
 800466e:	193b      	adds	r3, r7, r4
 8004670:	0018      	movs	r0, r3
 8004672:	f7fe fd63 	bl	800313c <_ZN10UsbManagerD1Ev>

	// Some kind of problem during startup. possibly an issue with the status interrupt?
	// The MCU needs to be reset for the power setup to work.
	HAL_Delay(2000);
 8004676:	23fa      	movs	r3, #250	@ 0xfa
 8004678:	00db      	lsls	r3, r3, #3
 800467a:	0018      	movs	r0, r3
 800467c:	f001 fa40 	bl	8005b00 <HAL_Delay>

	if (InitPower() != HAL_OK) {
 8004680:	f000 f9a4 	bl	80049cc <_ZL9InitPowerv>
 8004684:	0003      	movs	r3, r0
 8004686:	1e5a      	subs	r2, r3, #1
 8004688:	4193      	sbcs	r3, r2
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b00      	cmp	r3, #0
 800468e:	d001      	beq.n	8004694 <Init+0x108>
		return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e037      	b.n	8004704 <Init+0x178>
	}

	if (lighting.Init() != HAL_OK) {
 8004694:	4b2e      	ldr	r3, [pc, #184]	@ (8004750 <Init+0x1c4>)
 8004696:	0018      	movs	r0, r3
 8004698:	f7fe fab8 	bl	8002c0c <_ZN15LightingManager4InitEv>
 800469c:	0003      	movs	r3, r0
 800469e:	1e5a      	subs	r2, r3, #1
 80046a0:	4193      	sbcs	r3, r2
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <Init+0x120>
		return HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	e02b      	b.n	8004704 <Init+0x178>
	}

	if (HAL_TIM_Base_Start_IT(h_tim_temp) != HAL_OK) {
 80046ac:	4b1d      	ldr	r3, [pc, #116]	@ (8004724 <Init+0x198>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	0018      	movs	r0, r3
 80046b2:	f006 f9fb 	bl	800aaac <HAL_TIM_Base_Start_IT>
 80046b6:	0003      	movs	r3, r0
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	4193      	sbcs	r3, r2
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d001      	beq.n	80046c6 <Init+0x13a>
		return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e01e      	b.n	8004704 <Init+0x178>
	}

	if (HAL_TIM_Base_Start_IT(h_tim_rdData) != HAL_OK) {
 80046c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <Init+0x1a4>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	0018      	movs	r0, r3
 80046cc:	f006 f9ee 	bl	800aaac <HAL_TIM_Base_Start_IT>
 80046d0:	0003      	movs	r3, r0
 80046d2:	1e5a      	subs	r2, r3, #1
 80046d4:	4193      	sbcs	r3, r2
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d001      	beq.n	80046e0 <Init+0x154>
		return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e011      	b.n	8004704 <Init+0x178>
	}

	if (pwrDriver.SetInterrupts(interruptMask) != HAL_OK) {
 80046e0:	4b1d      	ldr	r3, [pc, #116]	@ (8004758 <Init+0x1cc>)
 80046e2:	4818      	ldr	r0, [pc, #96]	@ (8004744 <Init+0x1b8>)
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	f7ff fbb8 	bl	8003e5c <_ZN13AP33772Driver13SetInterruptsE14AP33772_Status>
 80046ec:	0003      	movs	r3, r0
 80046ee:	1e5a      	subs	r2, r3, #1
 80046f0:	4193      	sbcs	r3, r2
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <Init+0x170>
		return HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e003      	b.n	8004704 <Init+0x178>
	}

	startup = false;
 80046fc:	4b17      	ldr	r3, [pc, #92]	@ (800475c <Init+0x1d0>)
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
	return HAL_OK;
 8004702:	2300      	movs	r3, #0
}
 8004704:	0018      	movs	r0, r3
 8004706:	46bd      	mov	sp, r7
 8004708:	23b5      	movs	r3, #181	@ 0xb5
 800470a:	00db      	lsls	r3, r3, #3
 800470c:	449d      	add	sp, r3
 800470e:	bdb0      	pop	{r4, r5, r7, pc}
 8004710:	fffffa50 	.word	0xfffffa50
 8004714:	20000204 	.word	0x20000204
 8004718:	20000208 	.word	0x20000208
 800471c:	2000020c 	.word	0x2000020c
 8004720:	20000210 	.word	0x20000210
 8004724:	20000214 	.word	0x20000214
 8004728:	2000021c 	.word	0x2000021c
 800472c:	000005bc 	.word	0x000005bc
 8004730:	20000218 	.word	0x20000218
 8004734:	20000220 	.word	0x20000220
 8004738:	000005c4 	.word	0x000005c4
 800473c:	08004239 	.word	0x08004239
 8004740:	20000004 	.word	0x20000004
 8004744:	20000264 	.word	0x20000264
 8004748:	20000814 	.word	0x20000814
 800474c:	20000224 	.word	0x20000224
 8004750:	20000344 	.word	0x20000344
 8004754:	2000038c 	.word	0x2000038c
 8004758:	08010cbc 	.word	0x08010cbc
 800475c:	20000001 	.word	0x20000001

08004760 <Main>:

void Main()
{
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
	if (ctrlPins.maxBright.Read()) {
 8004764:	4b26      	ldr	r3, [pc, #152]	@ (8004800 <Main+0xa0>)
 8004766:	0018      	movs	r0, r3
 8004768:	f7ff fc4f 	bl	800400a <_ZN3Pin4ReadEv>
 800476c:	0003      	movs	r3, r0
 800476e:	1e5a      	subs	r2, r3, #1
 8004770:	4193      	sbcs	r3, r2
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <Main+0x20>
		lighting.ToggleMaxBrightness();
 8004778:	4b22      	ldr	r3, [pc, #136]	@ (8004804 <Main+0xa4>)
 800477a:	0018      	movs	r0, r3
 800477c:	f7fe fad2 	bl	8002d24 <_ZN15LightingManager19ToggleMaxBrightnessEv>
//			maxBrightEnable = !maxBrightEnable;
//			StartDebounce();
//		}
	}

	if (HAL_ADC_Start(h_adc) == HAL_OK) {
 8004780:	4b21      	ldr	r3, [pc, #132]	@ (8004808 <Main+0xa8>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	0018      	movs	r0, r3
 8004786:	f001 fb1f 	bl	8005dc8 <HAL_ADC_Start>
 800478a:	0003      	movs	r3, r0
 800478c:	425a      	negs	r2, r3
 800478e:	4153      	adcs	r3, r2
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d017      	beq.n	80047c6 <Main+0x66>
		if (HAL_ADC_PollForConversion(h_adc, 100) == HAL_OK) {
 8004796:	4b1c      	ldr	r3, [pc, #112]	@ (8004808 <Main+0xa8>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2164      	movs	r1, #100	@ 0x64
 800479c:	0018      	movs	r0, r3
 800479e:	f001 fb67 	bl	8005e70 <HAL_ADC_PollForConversion>
 80047a2:	0003      	movs	r3, r0
 80047a4:	425a      	negs	r2, r3
 80047a6:	4153      	adcs	r3, r2
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00b      	beq.n	80047c6 <Main+0x66>
			lighting.SetPotBrightness((uint16_t)HAL_ADC_GetValue(h_adc));
 80047ae:	4b16      	ldr	r3, [pc, #88]	@ (8004808 <Main+0xa8>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	0018      	movs	r0, r3
 80047b4:	f001 fbf4 	bl	8005fa0 <HAL_ADC_GetValue>
 80047b8:	0003      	movs	r3, r0
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	4b11      	ldr	r3, [pc, #68]	@ (8004804 <Main+0xa4>)
 80047be:	0011      	movs	r1, r2
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fe fa7b 	bl	8002cbc <_ZN15LightingManager16SetPotBrightnessEt>
//		return;
//	}

//	lighting.SetPotBrightness(potPosition);

	if (checkTemp) {
 80047c6:	4b11      	ldr	r3, [pc, #68]	@ (800480c <Main+0xac>)
 80047c8:	781b      	ldrb	r3, [r3, #0]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d006      	beq.n	80047dc <Main+0x7c>
//		pwrDriver.GetMeasurements();
		pwrDriver.GetTemp();
 80047ce:	4b10      	ldr	r3, [pc, #64]	@ (8004810 <Main+0xb0>)
 80047d0:	0018      	movs	r0, r3
 80047d2:	f7fe fed1 	bl	8003578 <_ZN13AP33772Driver7GetTempEv>
		checkTemp = false;
 80047d6:	4b0d      	ldr	r3, [pc, #52]	@ (800480c <Main+0xac>)
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
	}
	if (readData) {
 80047dc:	4b0d      	ldr	r3, [pc, #52]	@ (8004814 <Main+0xb4>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d006      	beq.n	80047f2 <Main+0x92>
		pwrDriver.GetMeasurements();
 80047e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004810 <Main+0xb0>)
 80047e6:	0018      	movs	r0, r3
 80047e8:	f7fe fee5 	bl	80035b6 <_ZN13AP33772Driver15GetMeasurementsEv>
		readData = false;
 80047ec:	4b09      	ldr	r3, [pc, #36]	@ (8004814 <Main+0xb4>)
 80047ee:	2200      	movs	r2, #0
 80047f0:	701a      	strb	r2, [r3, #0]
	}

	lighting.Update();
 80047f2:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <Main+0xa4>)
 80047f4:	0018      	movs	r0, r3
 80047f6:	f7fe fc0d 	bl	8003014 <_ZN15LightingManager6UpdateEv>
}
 80047fa:	46c0      	nop			@ (mov r8, r8)
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000808 	.word	0x20000808
 8004804:	20000344 	.word	0x20000344
 8004808:	20000204 	.word	0x20000204
 800480c:	20000839 	.word	0x20000839
 8004810:	20000264 	.word	0x20000264
 8004814:	2000083a 	.word	0x2000083a

08004818 <_ZL8InitPinsv>:

void InitPins()
{
 8004818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800481a:	b0a3      	sub	sp, #140	@ 0x8c
 800481c:	af02      	add	r7, sp, #8
	PWMPin ch1 = PWMPin(h_tim2, TIM_CHANNEL_4);
 800481e:	4b65      	ldr	r3, [pc, #404]	@ (80049b4 <_ZL8InitPinsv+0x19c>)
 8004820:	6819      	ldr	r1, [r3, #0]
 8004822:	243c      	movs	r4, #60	@ 0x3c
 8004824:	193b      	adds	r3, r7, r4
 8004826:	220c      	movs	r2, #12
 8004828:	0018      	movs	r0, r3
 800482a:	f7ff fc1b 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>
	PWMPin ch2 = PWMPin(h_tim3, TIM_CHANNEL_1);
 800482e:	4b62      	ldr	r3, [pc, #392]	@ (80049b8 <_ZL8InitPinsv+0x1a0>)
 8004830:	6819      	ldr	r1, [r3, #0]
 8004832:	2534      	movs	r5, #52	@ 0x34
 8004834:	197b      	adds	r3, r7, r5
 8004836:	2200      	movs	r2, #0
 8004838:	0018      	movs	r0, r3
 800483a:	f7ff fc13 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>
	PWMPin ch3 = PWMPin(h_tim3, TIM_CHANNEL_2);
 800483e:	4b5e      	ldr	r3, [pc, #376]	@ (80049b8 <_ZL8InitPinsv+0x1a0>)
 8004840:	6819      	ldr	r1, [r3, #0]
 8004842:	262c      	movs	r6, #44	@ 0x2c
 8004844:	19bb      	adds	r3, r7, r6
 8004846:	2204      	movs	r2, #4
 8004848:	0018      	movs	r0, r3
 800484a:	f7ff fc0b 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>
	PWMPin ch4 = PWMPin(h_tim3, TIM_CHANNEL_3);
 800484e:	4b5a      	ldr	r3, [pc, #360]	@ (80049b8 <_ZL8InitPinsv+0x1a0>)
 8004850:	6819      	ldr	r1, [r3, #0]
 8004852:	2324      	movs	r3, #36	@ 0x24
 8004854:	18fb      	adds	r3, r7, r3
 8004856:	2208      	movs	r2, #8
 8004858:	0018      	movs	r0, r3
 800485a:	f7ff fc03 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>
	PWMPin ch5 = PWMPin(h_tim3, TIM_CHANNEL_4);
 800485e:	4b56      	ldr	r3, [pc, #344]	@ (80049b8 <_ZL8InitPinsv+0x1a0>)
 8004860:	6819      	ldr	r1, [r3, #0]
 8004862:	201c      	movs	r0, #28
 8004864:	183b      	adds	r3, r7, r0
 8004866:	220c      	movs	r2, #12
 8004868:	0018      	movs	r0, r3
 800486a:	f7ff fbfb 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>
	PWMPin ch6 = PWMPin(h_tim2, TIM_CHANNEL_1);
 800486e:	4b51      	ldr	r3, [pc, #324]	@ (80049b4 <_ZL8InitPinsv+0x19c>)
 8004870:	6819      	ldr	r1, [r3, #0]
 8004872:	2314      	movs	r3, #20
 8004874:	18fb      	adds	r3, r7, r3
 8004876:	2200      	movs	r2, #0
 8004878:	0018      	movs	r0, r3
 800487a:	f7ff fbf3 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>
	PWMPin ch7 = PWMPin(h_tim2, TIM_CHANNEL_2);
 800487e:	4b4d      	ldr	r3, [pc, #308]	@ (80049b4 <_ZL8InitPinsv+0x19c>)
 8004880:	6819      	ldr	r1, [r3, #0]
 8004882:	230c      	movs	r3, #12
 8004884:	18fb      	adds	r3, r7, r3
 8004886:	2204      	movs	r2, #4
 8004888:	0018      	movs	r0, r3
 800488a:	f7ff fbeb 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>
	PWMPin ch8 = PWMPin(h_tim2, TIM_CHANNEL_3);
 800488e:	4b49      	ldr	r3, [pc, #292]	@ (80049b4 <_ZL8InitPinsv+0x19c>)
 8004890:	6819      	ldr	r1, [r3, #0]
 8004892:	1d3b      	adds	r3, r7, #4
 8004894:	2208      	movs	r2, #8
 8004896:	0018      	movs	r0, r3
 8004898:	f7ff fbe4 	bl	8004064 <_ZN6PWMPinC1EP17TIM_HandleTypeDeft>

	pins[0] = ch1;
 800489c:	4b47      	ldr	r3, [pc, #284]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 800489e:	193a      	adds	r2, r7, r4
 80048a0:	6811      	ldr	r1, [r2, #0]
 80048a2:	6019      	str	r1, [r3, #0]
 80048a4:	8892      	ldrh	r2, [r2, #4]
 80048a6:	809a      	strh	r2, [r3, #4]
	pins[1] = ch2;
 80048a8:	4b44      	ldr	r3, [pc, #272]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 80048aa:	197a      	adds	r2, r7, r5
 80048ac:	3308      	adds	r3, #8
 80048ae:	6811      	ldr	r1, [r2, #0]
 80048b0:	6019      	str	r1, [r3, #0]
 80048b2:	8892      	ldrh	r2, [r2, #4]
 80048b4:	809a      	strh	r2, [r3, #4]
	pins[2] = ch3;
 80048b6:	4b41      	ldr	r3, [pc, #260]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 80048b8:	19ba      	adds	r2, r7, r6
 80048ba:	3310      	adds	r3, #16
 80048bc:	6811      	ldr	r1, [r2, #0]
 80048be:	6019      	str	r1, [r3, #0]
 80048c0:	8892      	ldrh	r2, [r2, #4]
 80048c2:	809a      	strh	r2, [r3, #4]
	pins[3] = ch4;
 80048c4:	4b3d      	ldr	r3, [pc, #244]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 80048c6:	2224      	movs	r2, #36	@ 0x24
 80048c8:	18ba      	adds	r2, r7, r2
 80048ca:	3318      	adds	r3, #24
 80048cc:	6811      	ldr	r1, [r2, #0]
 80048ce:	6019      	str	r1, [r3, #0]
 80048d0:	8892      	ldrh	r2, [r2, #4]
 80048d2:	809a      	strh	r2, [r3, #4]
	pins[4] = ch5;
 80048d4:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 80048d6:	201c      	movs	r0, #28
 80048d8:	183a      	adds	r2, r7, r0
 80048da:	3320      	adds	r3, #32
 80048dc:	6811      	ldr	r1, [r2, #0]
 80048de:	6019      	str	r1, [r3, #0]
 80048e0:	8892      	ldrh	r2, [r2, #4]
 80048e2:	809a      	strh	r2, [r3, #4]
	pins[5] = ch6;
 80048e4:	4b35      	ldr	r3, [pc, #212]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 80048e6:	2214      	movs	r2, #20
 80048e8:	18ba      	adds	r2, r7, r2
 80048ea:	3328      	adds	r3, #40	@ 0x28
 80048ec:	6811      	ldr	r1, [r2, #0]
 80048ee:	6019      	str	r1, [r3, #0]
 80048f0:	8892      	ldrh	r2, [r2, #4]
 80048f2:	809a      	strh	r2, [r3, #4]
	pins[6] = ch7;
 80048f4:	4b31      	ldr	r3, [pc, #196]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 80048f6:	220c      	movs	r2, #12
 80048f8:	18ba      	adds	r2, r7, r2
 80048fa:	3330      	adds	r3, #48	@ 0x30
 80048fc:	6811      	ldr	r1, [r2, #0]
 80048fe:	6019      	str	r1, [r3, #0]
 8004900:	8892      	ldrh	r2, [r2, #4]
 8004902:	809a      	strh	r2, [r3, #4]
	pins[7] = ch8;
 8004904:	4b2d      	ldr	r3, [pc, #180]	@ (80049bc <_ZL8InitPinsv+0x1a4>)
 8004906:	1d3a      	adds	r2, r7, #4
 8004908:	3338      	adds	r3, #56	@ 0x38
 800490a:	6811      	ldr	r1, [r2, #0]
 800490c:	6019      	str	r1, [r3, #0]
 800490e:	8892      	ldrh	r2, [r2, #4]
 8004910:	809a      	strh	r2, [r3, #4]

	indPins.maxBright   = Pin(MAX_BRIGHT_IND_GPIO_Port, MAX_BRIGHT_IND_Pin);
 8004912:	2390      	movs	r3, #144	@ 0x90
 8004914:	05d9      	lsls	r1, r3, #23
 8004916:	2444      	movs	r4, #68	@ 0x44
 8004918:	193b      	adds	r3, r7, r4
 800491a:	2210      	movs	r2, #16
 800491c:	0018      	movs	r0, r3
 800491e:	f7ff fb38 	bl	8003f92 <_ZN3PinC1EP12GPIO_TypeDeft>
 8004922:	4b27      	ldr	r3, [pc, #156]	@ (80049c0 <_ZL8InitPinsv+0x1a8>)
 8004924:	193a      	adds	r2, r7, r4
 8004926:	330c      	adds	r3, #12
 8004928:	ca03      	ldmia	r2!, {r0, r1}
 800492a:	c303      	stmia	r3!, {r0, r1}
 800492c:	7812      	ldrb	r2, [r2, #0]
 800492e:	701a      	strb	r2, [r3, #0]
	indPins.status      = Pin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 8004930:	4924      	ldr	r1, [pc, #144]	@ (80049c4 <_ZL8InitPinsv+0x1ac>)
 8004932:	2450      	movs	r4, #80	@ 0x50
 8004934:	193b      	adds	r3, r7, r4
 8004936:	2204      	movs	r2, #4
 8004938:	0018      	movs	r0, r3
 800493a:	f7ff fb2a 	bl	8003f92 <_ZN3PinC1EP12GPIO_TypeDeft>
 800493e:	4b20      	ldr	r3, [pc, #128]	@ (80049c0 <_ZL8InitPinsv+0x1a8>)
 8004940:	193a      	adds	r2, r7, r4
 8004942:	ca03      	ldmia	r2!, {r0, r1}
 8004944:	c303      	stmia	r3!, {r0, r1}
 8004946:	7812      	ldrb	r2, [r2, #0]
 8004948:	701a      	strb	r2, [r3, #0]
	indPins.struggleBus = Pin(UNDER_PWR_IND_GPIO_Port, UNDER_PWR_IND_Pin);
 800494a:	2390      	movs	r3, #144	@ 0x90
 800494c:	05d9      	lsls	r1, r3, #23
 800494e:	245c      	movs	r4, #92	@ 0x5c
 8004950:	193b      	adds	r3, r7, r4
 8004952:	2220      	movs	r2, #32
 8004954:	0018      	movs	r0, r3
 8004956:	f7ff fb1c 	bl	8003f92 <_ZN3PinC1EP12GPIO_TypeDeft>
 800495a:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <_ZL8InitPinsv+0x1a8>)
 800495c:	193a      	adds	r2, r7, r4
 800495e:	3318      	adds	r3, #24
 8004960:	ca03      	ldmia	r2!, {r0, r1}
 8004962:	c303      	stmia	r3!, {r0, r1}
 8004964:	7812      	ldrb	r2, [r2, #0]
 8004966:	701a      	strb	r2, [r3, #0]
	ctrlPins.enable     = Pin(ENABLE_GPIO_Port, ENABLE_Pin, ACTIVE_LOW, false);
 8004968:	2380      	movs	r3, #128	@ 0x80
 800496a:	011a      	lsls	r2, r3, #4
 800496c:	4915      	ldr	r1, [pc, #84]	@ (80049c4 <_ZL8InitPinsv+0x1ac>)
 800496e:	2468      	movs	r4, #104	@ 0x68
 8004970:	1938      	adds	r0, r7, r4
 8004972:	2300      	movs	r3, #0
 8004974:	9300      	str	r3, [sp, #0]
 8004976:	2301      	movs	r3, #1
 8004978:	f7ff fb24 	bl	8003fc4 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800497c:	4b12      	ldr	r3, [pc, #72]	@ (80049c8 <_ZL8InitPinsv+0x1b0>)
 800497e:	193a      	adds	r2, r7, r4
 8004980:	ca03      	ldmia	r2!, {r0, r1}
 8004982:	c303      	stmia	r3!, {r0, r1}
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	701a      	strb	r2, [r3, #0]
	ctrlPins.maxBright  = Pin(MAX_BRIGHT_GPIO_Port, MAX_BRIGHT_Pin, ACTIVE_LOW, false);
 8004988:	2380      	movs	r3, #128	@ 0x80
 800498a:	009a      	lsls	r2, r3, #2
 800498c:	2390      	movs	r3, #144	@ 0x90
 800498e:	05d9      	lsls	r1, r3, #23
 8004990:	2474      	movs	r4, #116	@ 0x74
 8004992:	1938      	adds	r0, r7, r4
 8004994:	2300      	movs	r3, #0
 8004996:	9300      	str	r3, [sp, #0]
 8004998:	2301      	movs	r3, #1
 800499a:	f7ff fb13 	bl	8003fc4 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
 800499e:	4b0a      	ldr	r3, [pc, #40]	@ (80049c8 <_ZL8InitPinsv+0x1b0>)
 80049a0:	193a      	adds	r2, r7, r4
 80049a2:	330c      	adds	r3, #12
 80049a4:	ca03      	ldmia	r2!, {r0, r1}
 80049a6:	c303      	stmia	r3!, {r0, r1}
 80049a8:	7812      	ldrb	r2, [r2, #0]
 80049aa:	701a      	strb	r2, [r3, #0]
}
 80049ac:	46c0      	nop			@ (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b021      	add	sp, #132	@ 0x84
 80049b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b4:	20000208 	.word	0x20000208
 80049b8:	2000020c 	.word	0x2000020c
 80049bc:	20000224 	.word	0x20000224
 80049c0:	20000814 	.word	0x20000814
 80049c4:	48000400 	.word	0x48000400
 80049c8:	200007fc 	.word	0x200007fc

080049cc <_ZL9InitPowerv>:

HAL_StatusTypeDef InitPower()
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b082      	sub	sp, #8
 80049d0:	af00      	add	r7, sp, #0
	if (pwrDriver.Init() != HAL_OK) {
 80049d2:	4b38      	ldr	r3, [pc, #224]	@ (8004ab4 <_ZL9InitPowerv+0xe8>)
 80049d4:	0018      	movs	r0, r3
 80049d6:	f7fe fcd9 	bl	800338c <_ZN13AP33772Driver4InitEv>
 80049da:	0003      	movs	r3, r0
 80049dc:	1e5a      	subs	r2, r3, #1
 80049de:	4193      	sbcs	r3, r2
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d02a      	beq.n	8004a3c <_ZL9InitPowerv+0x70>
		for (int i = 0; i < 100; ++i) {
 80049e6:	2300      	movs	r3, #0
 80049e8:	607b      	str	r3, [r7, #4]
 80049ea:	e024      	b.n	8004a36 <_ZL9InitPowerv+0x6a>
			indPins.status.Write(true);
 80049ec:	4b32      	ldr	r3, [pc, #200]	@ (8004ab8 <_ZL9InitPowerv+0xec>)
 80049ee:	2101      	movs	r1, #1
 80049f0:	0018      	movs	r0, r3
 80049f2:	f7fe f81f 	bl	8002a34 <_ZN3Pin5WriteEb>
			indPins.struggleBus.Write(true);
 80049f6:	4b31      	ldr	r3, [pc, #196]	@ (8004abc <_ZL9InitPowerv+0xf0>)
 80049f8:	2101      	movs	r1, #1
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7fe f81a 	bl	8002a34 <_ZN3Pin5WriteEb>
			if (pwrDriver.Init() == HAL_OK) {
 8004a00:	4b2c      	ldr	r3, [pc, #176]	@ (8004ab4 <_ZL9InitPowerv+0xe8>)
 8004a02:	0018      	movs	r0, r3
 8004a04:	f7fe fcc2 	bl	800338c <_ZN13AP33772Driver4InitEv>
 8004a08:	0003      	movs	r3, r0
 8004a0a:	425a      	negs	r2, r3
 8004a0c:	4153      	adcs	r3, r2
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00a      	beq.n	8004a2a <_ZL9InitPowerv+0x5e>
				indPins.status.Write(false);
 8004a14:	4b28      	ldr	r3, [pc, #160]	@ (8004ab8 <_ZL9InitPowerv+0xec>)
 8004a16:	2100      	movs	r1, #0
 8004a18:	0018      	movs	r0, r3
 8004a1a:	f7fe f80b 	bl	8002a34 <_ZN3Pin5WriteEb>
				indPins.struggleBus.Write(false);
 8004a1e:	4b27      	ldr	r3, [pc, #156]	@ (8004abc <_ZL9InitPowerv+0xf0>)
 8004a20:	2100      	movs	r1, #0
 8004a22:	0018      	movs	r0, r3
 8004a24:	f7fe f806 	bl	8002a34 <_ZN3Pin5WriteEb>
				break;
 8004a28:	e008      	b.n	8004a3c <_ZL9InitPowerv+0x70>
			}
			HAL_Delay(1);
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f001 f868 	bl	8005b00 <HAL_Delay>
		for (int i = 0; i < 100; ++i) {
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	3301      	adds	r3, #1
 8004a34:	607b      	str	r3, [r7, #4]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2b63      	cmp	r3, #99	@ 0x63
 8004a3a:	ddd7      	ble.n	80049ec <_ZL9InitPowerv+0x20>
		}
	}

	if (pwrDriver.FoundPDOMatch()) {
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ab4 <_ZL9InitPowerv+0xe8>)
 8004a3e:	0018      	movs	r0, r3
 8004a40:	f7ff fb68 	bl	8004114 <_ZN13AP33772Driver13FoundPDOMatchEv>
 8004a44:	1e03      	subs	r3, r0, #0
 8004a46:	d030      	beq.n	8004aaa <_ZL9InitPowerv+0xde>
		if (pwrDriver.SendRequestedPDO() != HAL_OK) {
 8004a48:	4b1a      	ldr	r3, [pc, #104]	@ (8004ab4 <_ZL9InitPowerv+0xe8>)
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f7ff f8f2 	bl	8003c34 <_ZN13AP33772Driver16SendRequestedPDOEv>
 8004a50:	0003      	movs	r3, r0
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	4193      	sbcs	r3, r2
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d001      	beq.n	8004a60 <_ZL9InitPowerv+0x94>
			return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e025      	b.n	8004aac <_ZL9InitPowerv+0xe0>
		}

		if (pwrDriver.SetThermistorValues() != HAL_OK) {
 8004a60:	4b14      	ldr	r3, [pc, #80]	@ (8004ab4 <_ZL9InitPowerv+0xe8>)
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fe fdc8 	bl	80035f8 <_ZN13AP33772Driver19SetThermistorValuesEv>
 8004a68:	0003      	movs	r3, r0
 8004a6a:	1e5a      	subs	r2, r3, #1
 8004a6c:	4193      	sbcs	r3, r2
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <_ZL9InitPowerv+0xac>
			return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e019      	b.n	8004aac <_ZL9InitPowerv+0xe0>
		}

		if (pwrDriver.SetOverTemp(overTempValue) != HAL_OK) {
 8004a78:	4b11      	ldr	r3, [pc, #68]	@ (8004ac0 <_ZL9InitPowerv+0xf4>)
 8004a7a:	781a      	ldrb	r2, [r3, #0]
 8004a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004ab4 <_ZL9InitPowerv+0xe8>)
 8004a7e:	0011      	movs	r1, r2
 8004a80:	0018      	movs	r0, r3
 8004a82:	f7ff fa63 	bl	8003f4c <_ZN13AP33772Driver11SetOverTempEh>
 8004a86:	0003      	movs	r3, r0
 8004a88:	1e5a      	subs	r2, r3, #1
 8004a8a:	4193      	sbcs	r3, r2
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d001      	beq.n	8004a96 <_ZL9InitPowerv+0xca>
			return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e00a      	b.n	8004aac <_ZL9InitPowerv+0xe0>
		}

		lighting.SetSelectedPDO(pwrDriver.GetSelectedPDO());
 8004a96:	4b07      	ldr	r3, [pc, #28]	@ (8004ab4 <_ZL9InitPowerv+0xe8>)
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7fe fdf9 	bl	8003690 <_ZN13AP33772Driver14GetSelectedPDOEv>
 8004a9e:	0002      	movs	r2, r0
 8004aa0:	4b08      	ldr	r3, [pc, #32]	@ (8004ac4 <_ZL9InitPowerv+0xf8>)
 8004aa2:	0011      	movs	r1, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f7fe f952 	bl	8002d4e <_ZN15LightingManager14SetSelectedPDOEP16AP33772_PDObject>
	}
	return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	0018      	movs	r0, r3
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	b002      	add	sp, #8
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000264 	.word	0x20000264
 8004ab8:	20000814 	.word	0x20000814
 8004abc:	2000082c 	.word	0x2000082c
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	20000344 	.word	0x20000344

08004ac8 <_Z41__static_initialization_and_destruction_0ii>:
 8004ac8:	b5b0      	push	{r4, r5, r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d122      	bne.n	8004b1e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	4a1c      	ldr	r2, [pc, #112]	@ (8004b4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d11e      	bne.n	8004b1e <_Z41__static_initialization_and_destruction_0ii+0x56>
PWMPin pins[LED_COUNT] = {};
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b50 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8004ae2:	2407      	movs	r4, #7
 8004ae4:	001d      	movs	r5, r3
 8004ae6:	e004      	b.n	8004af2 <_Z41__static_initialization_and_destruction_0ii+0x2a>
 8004ae8:	0028      	movs	r0, r5
 8004aea:	f7ff faaf 	bl	800404c <_ZN6PWMPinC1Ev>
 8004aee:	3c01      	subs	r4, #1
 8004af0:	3508      	adds	r5, #8
 8004af2:	2c00      	cmp	r4, #0
 8004af4:	daf8      	bge.n	8004ae8 <_Z41__static_initialization_and_destruction_0ii+0x20>
AP33772Driver pwrDriver;
 8004af6:	4b17      	ldr	r3, [pc, #92]	@ (8004b54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004af8:	0018      	movs	r0, r3
 8004afa:	f7ff fac9 	bl	8004090 <_ZN13AP33772DriverC1Ev>
LightingManager lighting;
 8004afe:	4b16      	ldr	r3, [pc, #88]	@ (8004b58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004b00:	0018      	movs	r0, r3
 8004b02:	f7ff fb13 	bl	800412c <_ZN15LightingManagerC1Ev>
UsbManager usb;
 8004b06:	4b15      	ldr	r3, [pc, #84]	@ (8004b5c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004b08:	0018      	movs	r0, r3
 8004b0a:	f7ff fb4f 	bl	80041ac <_ZN10UsbManagerC1Ev>
ControlPins ctrlPins;
 8004b0e:	4b14      	ldr	r3, [pc, #80]	@ (8004b60 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8004b10:	0018      	movs	r0, r3
 8004b12:	f7ff fb67 	bl	80041e4 <_ZN11ControlPinsC1Ev>
LightingIndicators indPins;
 8004b16:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8004b18:	0018      	movs	r0, r3
 8004b1a:	f7ff fb75 	bl	8004208 <_ZN18LightingIndicatorsC1Ev>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10f      	bne.n	8004b44 <_Z41__static_initialization_and_destruction_0ii+0x7c>
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	4a09      	ldr	r2, [pc, #36]	@ (8004b4c <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d10b      	bne.n	8004b44 <_Z41__static_initialization_and_destruction_0ii+0x7c>
UsbManager usb;
 8004b2c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b5c <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f7fe fb04 	bl	800313c <_ZN10UsbManagerD1Ev>
LightingManager lighting;
 8004b34:	4b08      	ldr	r3, [pc, #32]	@ (8004b58 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8004b36:	0018      	movs	r0, r3
 8004b38:	f7fe f83c 	bl	8002bb4 <_ZN15LightingManagerD1Ev>
AP33772Driver pwrDriver;
 8004b3c:	4b05      	ldr	r3, [pc, #20]	@ (8004b54 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8004b3e:	0018      	movs	r0, r3
 8004b40:	f7fe fc00 	bl	8003344 <_ZN13AP33772DriverD1Ev>
}
 8004b44:	46c0      	nop			@ (mov r8, r8)
 8004b46:	46bd      	mov	sp, r7
 8004b48:	b002      	add	sp, #8
 8004b4a:	bdb0      	pop	{r4, r5, r7, pc}
 8004b4c:	0000ffff 	.word	0x0000ffff
 8004b50:	20000224 	.word	0x20000224
 8004b54:	20000264 	.word	0x20000264
 8004b58:	20000344 	.word	0x20000344
 8004b5c:	2000038c 	.word	0x2000038c
 8004b60:	200007fc 	.word	0x200007fc
 8004b64:	20000814 	.word	0x20000814

08004b68 <_GLOBAL__sub_I_h_adc>:
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	4b03      	ldr	r3, [pc, #12]	@ (8004b7c <_GLOBAL__sub_I_h_adc+0x14>)
 8004b6e:	0019      	movs	r1, r3
 8004b70:	2001      	movs	r0, #1
 8004b72:	f7ff ffa9 	bl	8004ac8 <_Z41__static_initialization_and_destruction_0ii>
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	46c0      	nop			@ (mov r8, r8)
 8004b7c:	0000ffff 	.word	0x0000ffff

08004b80 <_GLOBAL__sub_D_h_adc>:
 8004b80:	b580      	push	{r7, lr}
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	4b03      	ldr	r3, [pc, #12]	@ (8004b94 <_GLOBAL__sub_D_h_adc+0x14>)
 8004b86:	0019      	movs	r1, r3
 8004b88:	2000      	movs	r0, #0
 8004b8a:	f7ff ff9d 	bl	8004ac8 <_Z41__static_initialization_and_destruction_0ii>
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	46c0      	nop			@ (mov r8, r8)
 8004b94:	0000ffff 	.word	0x0000ffff

08004b98 <HAL_GPIO_EXTI_Callback>:
{
	ADCConvCallback();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b082      	sub	sp, #8
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	0002      	movs	r2, r0
 8004ba0:	1dbb      	adds	r3, r7, #6
 8004ba2:	801a      	strh	r2, [r3, #0]
	ExtInterruptCallback(GPIO_Pin);
 8004ba4:	1dbb      	adds	r3, r7, #6
 8004ba6:	881b      	ldrh	r3, [r3, #0]
 8004ba8:	0018      	movs	r0, r3
 8004baa:	f7ff fb57 	bl	800425c <ExtInterruptCallback>
}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	b002      	add	sp, #8
 8004bb4:	bd80      	pop	{r7, pc}

08004bb6 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bb6:	b580      	push	{r7, lr}
 8004bb8:	b082      	sub	sp, #8
 8004bba:	af00      	add	r7, sp, #0
 8004bbc:	6078      	str	r0, [r7, #4]
	TimerElapsedCallback(htim);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	0018      	movs	r0, r3
 8004bc2:	f7ff fb89 	bl	80042d8 <TimerElapsedCallback>
}
 8004bc6:	46c0      	nop			@ (mov r8, r8)
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	b002      	add	sp, #8
 8004bcc:	bd80      	pop	{r7, pc}
	...

08004bd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004bd0:	b590      	push	{r4, r7, lr}
 8004bd2:	b085      	sub	sp, #20
 8004bd4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004bd6:	f000 ff2f 	bl	8005a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004bda:	f000 f83f 	bl	8004c5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004bde:	f000 fb97 	bl	8005310 <MX_GPIO_Init>
  MX_I2C2_Init();
 8004be2:	f000 f90b 	bl	8004dfc <MX_I2C2_Init>
  MX_TIM2_Init();
 8004be6:	f000 f949 	bl	8004e7c <MX_TIM2_Init>
  MX_TIM3_Init();
 8004bea:	f000 f9f7 	bl	8004fdc <MX_TIM3_Init>
  MX_ADC_Init();
 8004bee:	f000 f89d 	bl	8004d2c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 8004bf2:	f00a fd57 	bl	800f6a4 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 8004bf6:	f000 faa1 	bl	800513c <MX_TIM7_Init>
  MX_TIM14_Init();
 8004bfa:	f000 fae3 	bl	80051c4 <MX_TIM14_Init>
  MX_TIM15_Init();
 8004bfe:	f000 fb09 	bl	8005214 <MX_TIM15_Init>
  MX_TIM16_Init();
 8004c02:	f000 fb5d 	bl	80052c0 <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  if (Init(&hadc, &htim2, &htim3, &htim7, &htim14, &htim15, &htim16, &hi2c2) != HAL_OK) {
 8004c06:	4c0d      	ldr	r4, [pc, #52]	@ (8004c3c <main+0x6c>)
 8004c08:	4a0d      	ldr	r2, [pc, #52]	@ (8004c40 <main+0x70>)
 8004c0a:	490e      	ldr	r1, [pc, #56]	@ (8004c44 <main+0x74>)
 8004c0c:	480e      	ldr	r0, [pc, #56]	@ (8004c48 <main+0x78>)
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004c4c <main+0x7c>)
 8004c10:	9303      	str	r3, [sp, #12]
 8004c12:	4b0f      	ldr	r3, [pc, #60]	@ (8004c50 <main+0x80>)
 8004c14:	9302      	str	r3, [sp, #8]
 8004c16:	4b0f      	ldr	r3, [pc, #60]	@ (8004c54 <main+0x84>)
 8004c18:	9301      	str	r3, [sp, #4]
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8004c58 <main+0x88>)
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	0023      	movs	r3, r4
 8004c20:	f7ff fcb4 	bl	800458c <Init>
 8004c24:	1e03      	subs	r3, r0, #0
 8004c26:	d001      	beq.n	8004c2c <main+0x5c>
	return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e002      	b.n	8004c32 <main+0x62>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 8004c2c:	f7ff fd98 	bl	8004760 <Main>
 8004c30:	e7fc      	b.n	8004c2c <main+0x5c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8004c32:	0018      	movs	r0, r3
 8004c34:	46bd      	mov	sp, r7
 8004c36:	b001      	add	sp, #4
 8004c38:	bd90      	pop	{r4, r7, pc}
 8004c3a:	46c0      	nop			@ (mov r8, r8)
 8004c3c:	20000960 	.word	0x20000960
 8004c40:	20000918 	.word	0x20000918
 8004c44:	200008d0 	.word	0x200008d0
 8004c48:	2000083c 	.word	0x2000083c
 8004c4c:	2000087c 	.word	0x2000087c
 8004c50:	20000a38 	.word	0x20000a38
 8004c54:	200009f0 	.word	0x200009f0
 8004c58:	200009a8 	.word	0x200009a8

08004c5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004c5c:	b590      	push	{r4, r7, lr}
 8004c5e:	b099      	sub	sp, #100	@ 0x64
 8004c60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004c62:	242c      	movs	r4, #44	@ 0x2c
 8004c64:	193b      	adds	r3, r7, r4
 8004c66:	0018      	movs	r0, r3
 8004c68:	2334      	movs	r3, #52	@ 0x34
 8004c6a:	001a      	movs	r2, r3
 8004c6c:	2100      	movs	r1, #0
 8004c6e:	f00b fef7 	bl	8010a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004c72:	231c      	movs	r3, #28
 8004c74:	18fb      	adds	r3, r7, r3
 8004c76:	0018      	movs	r0, r3
 8004c78:	2310      	movs	r3, #16
 8004c7a:	001a      	movs	r2, r3
 8004c7c:	2100      	movs	r1, #0
 8004c7e:	f00b feef 	bl	8010a60 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004c82:	003b      	movs	r3, r7
 8004c84:	0018      	movs	r0, r3
 8004c86:	231c      	movs	r3, #28
 8004c88:	001a      	movs	r2, r3
 8004c8a:	2100      	movs	r1, #0
 8004c8c:	f00b fee8 	bl	8010a60 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48
 8004c90:	0021      	movs	r1, r4
 8004c92:	187b      	adds	r3, r7, r1
 8004c94:	2231      	movs	r2, #49	@ 0x31
 8004c96:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004c98:	187b      	adds	r3, r7, r1
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8004c9e:	187b      	adds	r3, r7, r1
 8004ca0:	2201      	movs	r2, #1
 8004ca2:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8004ca4:	187b      	adds	r3, r7, r1
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8004caa:	187b      	adds	r3, r7, r1
 8004cac:	2210      	movs	r2, #16
 8004cae:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004cb0:	187b      	adds	r3, r7, r1
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004cb6:	187b      	adds	r3, r7, r1
 8004cb8:	2280      	movs	r2, #128	@ 0x80
 8004cba:	0252      	lsls	r2, r2, #9
 8004cbc:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8004cbe:	187b      	adds	r3, r7, r1
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8004cc4:	187b      	adds	r3, r7, r1
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004cca:	187b      	adds	r3, r7, r1
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f005 f8cb 	bl	8009e68 <HAL_RCC_OscConfig>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8004cd6:	f000 fbdd 	bl	8005494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004cda:	211c      	movs	r1, #28
 8004cdc:	187b      	adds	r3, r7, r1
 8004cde:	2207      	movs	r2, #7
 8004ce0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004ce2:	187b      	adds	r3, r7, r1
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004ce8:	187b      	adds	r3, r7, r1
 8004cea:	2200      	movs	r2, #0
 8004cec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004cee:	187b      	adds	r3, r7, r1
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8004cf4:	187b      	adds	r3, r7, r1
 8004cf6:	2101      	movs	r1, #1
 8004cf8:	0018      	movs	r0, r3
 8004cfa:	f005 fc3b 	bl	800a574 <HAL_RCC_ClockConfig>
 8004cfe:	1e03      	subs	r3, r0, #0
 8004d00:	d001      	beq.n	8004d06 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8004d02:	f000 fbc7 	bl	8005494 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8004d06:	003b      	movs	r3, r7
 8004d08:	2280      	movs	r2, #128	@ 0x80
 8004d0a:	0292      	lsls	r2, r2, #10
 8004d0c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8004d0e:	003b      	movs	r3, r7
 8004d10:	2200      	movs	r2, #0
 8004d12:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004d14:	003b      	movs	r3, r7
 8004d16:	0018      	movs	r0, r3
 8004d18:	f005 fd7a 	bl	800a810 <HAL_RCCEx_PeriphCLKConfig>
 8004d1c:	1e03      	subs	r3, r0, #0
 8004d1e:	d001      	beq.n	8004d24 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8004d20:	f000 fbb8 	bl	8005494 <Error_Handler>
  }
}
 8004d24:	46c0      	nop			@ (mov r8, r8)
 8004d26:	46bd      	mov	sp, r7
 8004d28:	b019      	add	sp, #100	@ 0x64
 8004d2a:	bd90      	pop	{r4, r7, pc}

08004d2c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004d32:	1d3b      	adds	r3, r7, #4
 8004d34:	0018      	movs	r0, r3
 8004d36:	230c      	movs	r3, #12
 8004d38:	001a      	movs	r2, r3
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	f00b fe90 	bl	8010a60 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004d40:	4b2c      	ldr	r3, [pc, #176]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d42:	4a2d      	ldr	r2, [pc, #180]	@ (8004df8 <MX_ADC_Init+0xcc>)
 8004d44:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8004d46:	4b2b      	ldr	r3, [pc, #172]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004d4c:	4b29      	ldr	r3, [pc, #164]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d4e:	2200      	movs	r2, #0
 8004d50:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004d52:	4b28      	ldr	r3, [pc, #160]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d54:	2200      	movs	r2, #0
 8004d56:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004d58:	4b26      	ldr	r3, [pc, #152]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8004d5e:	4b25      	ldr	r3, [pc, #148]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d60:	2208      	movs	r2, #8
 8004d62:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004d64:	4b23      	ldr	r3, [pc, #140]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d66:	2200      	movs	r2, #0
 8004d68:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004d6a:	4b22      	ldr	r3, [pc, #136]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004d70:	4b20      	ldr	r3, [pc, #128]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8004d76:	4b1f      	ldr	r3, [pc, #124]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d78:	2200      	movs	r2, #0
 8004d7a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d7e:	22c2      	movs	r2, #194	@ 0xc2
 8004d80:	32ff      	adds	r2, #255	@ 0xff
 8004d82:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004d84:	4b1b      	ldr	r3, [pc, #108]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d86:	2200      	movs	r2, #0
 8004d88:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004d8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d8c:	2224      	movs	r2, #36	@ 0x24
 8004d8e:	2100      	movs	r1, #0
 8004d90:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004d92:	4b18      	ldr	r3, [pc, #96]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004d98:	4b16      	ldr	r3, [pc, #88]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004d9a:	0018      	movs	r0, r3
 8004d9c:	f000 fed4 	bl	8005b48 <HAL_ADC_Init>
 8004da0:	1e03      	subs	r3, r0, #0
 8004da2:	d001      	beq.n	8004da8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8004da4:	f000 fb76 	bl	8005494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8004da8:	1d3b      	adds	r3, r7, #4
 8004daa:	2202      	movs	r2, #2
 8004dac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004dae:	1d3b      	adds	r3, r7, #4
 8004db0:	2280      	movs	r2, #128	@ 0x80
 8004db2:	0152      	lsls	r2, r2, #5
 8004db4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 8004db6:	1d3b      	adds	r3, r7, #4
 8004db8:	2205      	movs	r2, #5
 8004dba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004dbc:	1d3a      	adds	r2, r7, #4
 8004dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004dc0:	0011      	movs	r1, r2
 8004dc2:	0018      	movs	r0, r3
 8004dc4:	f001 f8f8 	bl	8005fb8 <HAL_ADC_ConfigChannel>
 8004dc8:	1e03      	subs	r3, r0, #0
 8004dca:	d001      	beq.n	8004dd0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8004dcc:	f000 fb62 	bl	8005494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004dd0:	1d3b      	adds	r3, r7, #4
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004dd6:	1d3a      	adds	r2, r7, #4
 8004dd8:	4b06      	ldr	r3, [pc, #24]	@ (8004df4 <MX_ADC_Init+0xc8>)
 8004dda:	0011      	movs	r1, r2
 8004ddc:	0018      	movs	r0, r3
 8004dde:	f001 f8eb 	bl	8005fb8 <HAL_ADC_ConfigChannel>
 8004de2:	1e03      	subs	r3, r0, #0
 8004de4:	d001      	beq.n	8004dea <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8004de6:	f000 fb55 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004dea:	46c0      	nop			@ (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b004      	add	sp, #16
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	46c0      	nop			@ (mov r8, r8)
 8004df4:	2000083c 	.word	0x2000083c
 8004df8:	40012400 	.word	0x40012400

08004dfc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004e00:	4b1b      	ldr	r3, [pc, #108]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e02:	4a1c      	ldr	r2, [pc, #112]	@ (8004e74 <MX_I2C2_Init+0x78>)
 8004e04:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8004e06:	4b1a      	ldr	r3, [pc, #104]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e08:	4a1b      	ldr	r2, [pc, #108]	@ (8004e78 <MX_I2C2_Init+0x7c>)
 8004e0a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004e0c:	4b18      	ldr	r3, [pc, #96]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e0e:	2200      	movs	r2, #0
 8004e10:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004e12:	4b17      	ldr	r3, [pc, #92]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e14:	2201      	movs	r2, #1
 8004e16:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004e18:	4b15      	ldr	r3, [pc, #84]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004e1e:	4b14      	ldr	r3, [pc, #80]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e20:	2200      	movs	r2, #0
 8004e22:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004e24:	4b12      	ldr	r3, [pc, #72]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e26:	2200      	movs	r2, #0
 8004e28:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004e2a:	4b11      	ldr	r3, [pc, #68]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004e30:	4b0f      	ldr	r3, [pc, #60]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004e36:	4b0e      	ldr	r3, [pc, #56]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e38:	0018      	movs	r0, r3
 8004e3a:	f001 fd4d 	bl	80068d8 <HAL_I2C_Init>
 8004e3e:	1e03      	subs	r3, r0, #0
 8004e40:	d001      	beq.n	8004e46 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004e42:	f000 fb27 	bl	8005494 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004e46:	4b0a      	ldr	r3, [pc, #40]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e48:	2100      	movs	r1, #0
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f003 f932 	bl	80080b4 <HAL_I2CEx_ConfigAnalogFilter>
 8004e50:	1e03      	subs	r3, r0, #0
 8004e52:	d001      	beq.n	8004e58 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004e54:	f000 fb1e 	bl	8005494 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004e58:	4b05      	ldr	r3, [pc, #20]	@ (8004e70 <MX_I2C2_Init+0x74>)
 8004e5a:	2100      	movs	r1, #0
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f003 f975 	bl	800814c <HAL_I2CEx_ConfigDigitalFilter>
 8004e62:	1e03      	subs	r3, r0, #0
 8004e64:	d001      	beq.n	8004e6a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004e66:	f000 fb15 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004e6a:	46c0      	nop			@ (mov r8, r8)
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	2000087c 	.word	0x2000087c
 8004e74:	40005800 	.word	0x40005800
 8004e78:	00707cbb 	.word	0x00707cbb

08004e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b08e      	sub	sp, #56	@ 0x38
 8004e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004e82:	2328      	movs	r3, #40	@ 0x28
 8004e84:	18fb      	adds	r3, r7, r3
 8004e86:	0018      	movs	r0, r3
 8004e88:	2310      	movs	r3, #16
 8004e8a:	001a      	movs	r2, r3
 8004e8c:	2100      	movs	r1, #0
 8004e8e:	f00b fde7 	bl	8010a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004e92:	2320      	movs	r3, #32
 8004e94:	18fb      	adds	r3, r7, r3
 8004e96:	0018      	movs	r0, r3
 8004e98:	2308      	movs	r3, #8
 8004e9a:	001a      	movs	r2, r3
 8004e9c:	2100      	movs	r1, #0
 8004e9e:	f00b fddf 	bl	8010a60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004ea2:	1d3b      	adds	r3, r7, #4
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	231c      	movs	r3, #28
 8004ea8:	001a      	movs	r2, r3
 8004eaa:	2100      	movs	r1, #0
 8004eac:	f00b fdd8 	bl	8010a60 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004eb0:	4b48      	ldr	r3, [pc, #288]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004eb2:	2280      	movs	r2, #128	@ 0x80
 8004eb4:	05d2      	lsls	r2, r2, #23
 8004eb6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004eb8:	4b46      	ldr	r3, [pc, #280]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004eba:	2200      	movs	r2, #0
 8004ebc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004ebe:	4b45      	ldr	r3, [pc, #276]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8004ec4:	4b43      	ldr	r3, [pc, #268]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004ec6:	4a44      	ldr	r2, [pc, #272]	@ (8004fd8 <MX_TIM2_Init+0x15c>)
 8004ec8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004eca:	4b42      	ldr	r3, [pc, #264]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004ed0:	4b40      	ldr	r3, [pc, #256]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004ed2:	2280      	movs	r2, #128	@ 0x80
 8004ed4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8004ed6:	4b3f      	ldr	r3, [pc, #252]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004ed8:	0018      	movs	r0, r3
 8004eda:	f005 fd97 	bl	800aa0c <HAL_TIM_Base_Init>
 8004ede:	1e03      	subs	r3, r0, #0
 8004ee0:	d001      	beq.n	8004ee6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8004ee2:	f000 fad7 	bl	8005494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8004ee6:	2128      	movs	r1, #40	@ 0x28
 8004ee8:	187b      	adds	r3, r7, r1
 8004eea:	2280      	movs	r2, #128	@ 0x80
 8004eec:	0152      	lsls	r2, r2, #5
 8004eee:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8004ef0:	187a      	adds	r2, r7, r1
 8004ef2:	4b38      	ldr	r3, [pc, #224]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004ef4:	0011      	movs	r1, r2
 8004ef6:	0018      	movs	r0, r3
 8004ef8:	f006 f948 	bl	800b18c <HAL_TIM_ConfigClockSource>
 8004efc:	1e03      	subs	r3, r0, #0
 8004efe:	d001      	beq.n	8004f04 <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8004f00:	f000 fac8 	bl	8005494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004f04:	4b33      	ldr	r3, [pc, #204]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004f06:	0018      	movs	r0, r3
 8004f08:	f005 fe22 	bl	800ab50 <HAL_TIM_PWM_Init>
 8004f0c:	1e03      	subs	r3, r0, #0
 8004f0e:	d001      	beq.n	8004f14 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8004f10:	f000 fac0 	bl	8005494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004f14:	2120      	movs	r1, #32
 8004f16:	187b      	adds	r3, r7, r1
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004f1c:	187b      	adds	r3, r7, r1
 8004f1e:	2200      	movs	r2, #0
 8004f20:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8004f22:	187a      	adds	r2, r7, r1
 8004f24:	4b2b      	ldr	r3, [pc, #172]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004f26:	0011      	movs	r1, r2
 8004f28:	0018      	movs	r0, r3
 8004f2a:	f006 fd6b 	bl	800ba04 <HAL_TIMEx_MasterConfigSynchronization>
 8004f2e:	1e03      	subs	r3, r0, #0
 8004f30:	d001      	beq.n	8004f36 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8004f32:	f000 faaf 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f36:	1d3b      	adds	r3, r7, #4
 8004f38:	2260      	movs	r2, #96	@ 0x60
 8004f3a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8004f3c:	1d3b      	adds	r3, r7, #4
 8004f3e:	2200      	movs	r2, #0
 8004f40:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f42:	1d3b      	adds	r3, r7, #4
 8004f44:	2200      	movs	r2, #0
 8004f46:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004f48:	1d3b      	adds	r3, r7, #4
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004f4e:	1d39      	adds	r1, r7, #4
 8004f50:	4b20      	ldr	r3, [pc, #128]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004f52:	2200      	movs	r2, #0
 8004f54:	0018      	movs	r0, r3
 8004f56:	f006 f853 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d001      	beq.n	8004f62 <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 8004f5e:	f000 fa99 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004f62:	1d3b      	adds	r3, r7, #4
 8004f64:	2270      	movs	r2, #112	@ 0x70
 8004f66:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004f68:	1d3b      	adds	r3, r7, #4
 8004f6a:	2202      	movs	r2, #2
 8004f6c:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004f6e:	1d39      	adds	r1, r7, #4
 8004f70:	4b18      	ldr	r3, [pc, #96]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004f72:	2204      	movs	r2, #4
 8004f74:	0018      	movs	r0, r3
 8004f76:	f006 f843 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 8004f7a:	1e03      	subs	r3, r0, #0
 8004f7c:	d001      	beq.n	8004f82 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8004f7e:	f000 fa89 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004f82:	1d3b      	adds	r3, r7, #4
 8004f84:	2260      	movs	r2, #96	@ 0x60
 8004f86:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004f88:	1d3b      	adds	r3, r7, #4
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004f8e:	1d39      	adds	r1, r7, #4
 8004f90:	4b10      	ldr	r3, [pc, #64]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004f92:	2208      	movs	r2, #8
 8004f94:	0018      	movs	r0, r3
 8004f96:	f006 f833 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 8004f9a:	1e03      	subs	r3, r0, #0
 8004f9c:	d001      	beq.n	8004fa2 <MX_TIM2_Init+0x126>
  {
    Error_Handler();
 8004f9e:	f000 fa79 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8004fa2:	1d3b      	adds	r3, r7, #4
 8004fa4:	2270      	movs	r2, #112	@ 0x70
 8004fa6:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8004fa8:	1d3b      	adds	r3, r7, #4
 8004faa:	2202      	movs	r2, #2
 8004fac:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004fae:	1d39      	adds	r1, r7, #4
 8004fb0:	4b08      	ldr	r3, [pc, #32]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004fb2:	220c      	movs	r2, #12
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	f006 f823 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 8004fba:	1e03      	subs	r3, r0, #0
 8004fbc:	d001      	beq.n	8004fc2 <MX_TIM2_Init+0x146>
  {
    Error_Handler();
 8004fbe:	f000 fa69 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8004fc2:	4b04      	ldr	r3, [pc, #16]	@ (8004fd4 <MX_TIM2_Init+0x158>)
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f000 fbd1 	bl	800576c <HAL_TIM_MspPostInit>

}
 8004fca:	46c0      	nop			@ (mov r8, r8)
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	b00e      	add	sp, #56	@ 0x38
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	46c0      	nop			@ (mov r8, r8)
 8004fd4:	200008d0 	.word	0x200008d0
 8004fd8:	0000ffff 	.word	0x0000ffff

08004fdc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b08e      	sub	sp, #56	@ 0x38
 8004fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004fe2:	2328      	movs	r3, #40	@ 0x28
 8004fe4:	18fb      	adds	r3, r7, r3
 8004fe6:	0018      	movs	r0, r3
 8004fe8:	2310      	movs	r3, #16
 8004fea:	001a      	movs	r2, r3
 8004fec:	2100      	movs	r1, #0
 8004fee:	f00b fd37 	bl	8010a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004ff2:	2320      	movs	r3, #32
 8004ff4:	18fb      	adds	r3, r7, r3
 8004ff6:	0018      	movs	r0, r3
 8004ff8:	2308      	movs	r3, #8
 8004ffa:	001a      	movs	r2, r3
 8004ffc:	2100      	movs	r1, #0
 8004ffe:	f00b fd2f 	bl	8010a60 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005002:	1d3b      	adds	r3, r7, #4
 8005004:	0018      	movs	r0, r3
 8005006:	231c      	movs	r3, #28
 8005008:	001a      	movs	r2, r3
 800500a:	2100      	movs	r1, #0
 800500c:	f00b fd28 	bl	8010a60 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005010:	4b47      	ldr	r3, [pc, #284]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005012:	4a48      	ldr	r2, [pc, #288]	@ (8005134 <MX_TIM3_Init+0x158>)
 8005014:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8005016:	4b46      	ldr	r3, [pc, #280]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005018:	2200      	movs	r2, #0
 800501a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800501c:	4b44      	ldr	r3, [pc, #272]	@ (8005130 <MX_TIM3_Init+0x154>)
 800501e:	2200      	movs	r2, #0
 8005020:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8005022:	4b43      	ldr	r3, [pc, #268]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005024:	4a44      	ldr	r2, [pc, #272]	@ (8005138 <MX_TIM3_Init+0x15c>)
 8005026:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005028:	4b41      	ldr	r3, [pc, #260]	@ (8005130 <MX_TIM3_Init+0x154>)
 800502a:	2200      	movs	r2, #0
 800502c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800502e:	4b40      	ldr	r3, [pc, #256]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005030:	2280      	movs	r2, #128	@ 0x80
 8005032:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005034:	4b3e      	ldr	r3, [pc, #248]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005036:	0018      	movs	r0, r3
 8005038:	f005 fce8 	bl	800aa0c <HAL_TIM_Base_Init>
 800503c:	1e03      	subs	r3, r0, #0
 800503e:	d001      	beq.n	8005044 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8005040:	f000 fa28 	bl	8005494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005044:	2128      	movs	r1, #40	@ 0x28
 8005046:	187b      	adds	r3, r7, r1
 8005048:	2280      	movs	r2, #128	@ 0x80
 800504a:	0152      	lsls	r2, r2, #5
 800504c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800504e:	187a      	adds	r2, r7, r1
 8005050:	4b37      	ldr	r3, [pc, #220]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005052:	0011      	movs	r1, r2
 8005054:	0018      	movs	r0, r3
 8005056:	f006 f899 	bl	800b18c <HAL_TIM_ConfigClockSource>
 800505a:	1e03      	subs	r3, r0, #0
 800505c:	d001      	beq.n	8005062 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800505e:	f000 fa19 	bl	8005494 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8005062:	4b33      	ldr	r3, [pc, #204]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005064:	0018      	movs	r0, r3
 8005066:	f005 fd73 	bl	800ab50 <HAL_TIM_PWM_Init>
 800506a:	1e03      	subs	r3, r0, #0
 800506c:	d001      	beq.n	8005072 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 800506e:	f000 fa11 	bl	8005494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005072:	2120      	movs	r1, #32
 8005074:	187b      	adds	r3, r7, r1
 8005076:	2200      	movs	r2, #0
 8005078:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800507a:	187b      	adds	r3, r7, r1
 800507c:	2200      	movs	r2, #0
 800507e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005080:	187a      	adds	r2, r7, r1
 8005082:	4b2b      	ldr	r3, [pc, #172]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005084:	0011      	movs	r1, r2
 8005086:	0018      	movs	r0, r3
 8005088:	f006 fcbc 	bl	800ba04 <HAL_TIMEx_MasterConfigSynchronization>
 800508c:	1e03      	subs	r3, r0, #0
 800508e:	d001      	beq.n	8005094 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8005090:	f000 fa00 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8005094:	1d3b      	adds	r3, r7, #4
 8005096:	2260      	movs	r2, #96	@ 0x60
 8005098:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800509a:	1d3b      	adds	r3, r7, #4
 800509c:	2200      	movs	r2, #0
 800509e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050a0:	1d3b      	adds	r3, r7, #4
 80050a2:	2200      	movs	r2, #0
 80050a4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80050a6:	1d3b      	adds	r3, r7, #4
 80050a8:	2200      	movs	r2, #0
 80050aa:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80050ac:	1d39      	adds	r1, r7, #4
 80050ae:	4b20      	ldr	r3, [pc, #128]	@ (8005130 <MX_TIM3_Init+0x154>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	0018      	movs	r0, r3
 80050b4:	f005 ffa4 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 80050b8:	1e03      	subs	r3, r0, #0
 80050ba:	d001      	beq.n	80050c0 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 80050bc:	f000 f9ea 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80050c0:	1d3b      	adds	r3, r7, #4
 80050c2:	2270      	movs	r2, #112	@ 0x70
 80050c4:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80050c6:	1d3b      	adds	r3, r7, #4
 80050c8:	2202      	movs	r2, #2
 80050ca:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80050cc:	1d39      	adds	r1, r7, #4
 80050ce:	4b18      	ldr	r3, [pc, #96]	@ (8005130 <MX_TIM3_Init+0x154>)
 80050d0:	2204      	movs	r2, #4
 80050d2:	0018      	movs	r0, r3
 80050d4:	f005 ff94 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 80050d8:	1e03      	subs	r3, r0, #0
 80050da:	d001      	beq.n	80050e0 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80050dc:	f000 f9da 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80050e0:	1d3b      	adds	r3, r7, #4
 80050e2:	2260      	movs	r2, #96	@ 0x60
 80050e4:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80050e6:	1d3b      	adds	r3, r7, #4
 80050e8:	2200      	movs	r2, #0
 80050ea:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80050ec:	1d39      	adds	r1, r7, #4
 80050ee:	4b10      	ldr	r3, [pc, #64]	@ (8005130 <MX_TIM3_Init+0x154>)
 80050f0:	2208      	movs	r2, #8
 80050f2:	0018      	movs	r0, r3
 80050f4:	f005 ff84 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 80050f8:	1e03      	subs	r3, r0, #0
 80050fa:	d001      	beq.n	8005100 <MX_TIM3_Init+0x124>
  {
    Error_Handler();
 80050fc:	f000 f9ca 	bl	8005494 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8005100:	1d3b      	adds	r3, r7, #4
 8005102:	2270      	movs	r2, #112	@ 0x70
 8005104:	601a      	str	r2, [r3, #0]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8005106:	1d3b      	adds	r3, r7, #4
 8005108:	2202      	movs	r2, #2
 800510a:	609a      	str	r2, [r3, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800510c:	1d39      	adds	r1, r7, #4
 800510e:	4b08      	ldr	r3, [pc, #32]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005110:	220c      	movs	r2, #12
 8005112:	0018      	movs	r0, r3
 8005114:	f005 ff74 	bl	800b000 <HAL_TIM_PWM_ConfigChannel>
 8005118:	1e03      	subs	r3, r0, #0
 800511a:	d001      	beq.n	8005120 <MX_TIM3_Init+0x144>
  {
    Error_Handler();
 800511c:	f000 f9ba 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8005120:	4b03      	ldr	r3, [pc, #12]	@ (8005130 <MX_TIM3_Init+0x154>)
 8005122:	0018      	movs	r0, r3
 8005124:	f000 fb22 	bl	800576c <HAL_TIM_MspPostInit>

}
 8005128:	46c0      	nop			@ (mov r8, r8)
 800512a:	46bd      	mov	sp, r7
 800512c:	b00e      	add	sp, #56	@ 0x38
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000918 	.word	0x20000918
 8005134:	40000400 	.word	0x40000400
 8005138:	0000ffff 	.word	0x0000ffff

0800513c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b082      	sub	sp, #8
 8005140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005142:	003b      	movs	r3, r7
 8005144:	0018      	movs	r0, r3
 8005146:	2308      	movs	r3, #8
 8005148:	001a      	movs	r2, r3
 800514a:	2100      	movs	r1, #0
 800514c:	f00b fc88 	bl	8010a60 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8005150:	4b19      	ldr	r3, [pc, #100]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 8005152:	4a1a      	ldr	r2, [pc, #104]	@ (80051bc <MX_TIM7_Init+0x80>)
 8005154:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 220;
 8005156:	4b18      	ldr	r3, [pc, #96]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 8005158:	22dc      	movs	r2, #220	@ 0xdc
 800515a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800515c:	4b16      	ldr	r3, [pc, #88]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 800515e:	2200      	movs	r2, #0
 8005160:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 43439;
 8005162:	4b15      	ldr	r3, [pc, #84]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 8005164:	4a16      	ldr	r2, [pc, #88]	@ (80051c0 <MX_TIM7_Init+0x84>)
 8005166:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005168:	4b13      	ldr	r3, [pc, #76]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 800516a:	2200      	movs	r2, #0
 800516c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800516e:	4b12      	ldr	r3, [pc, #72]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 8005170:	0018      	movs	r0, r3
 8005172:	f005 fc4b 	bl	800aa0c <HAL_TIM_Base_Init>
 8005176:	1e03      	subs	r3, r0, #0
 8005178:	d001      	beq.n	800517e <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 800517a:	f000 f98b 	bl	8005494 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 800517e:	4b0e      	ldr	r3, [pc, #56]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 8005180:	2108      	movs	r1, #8
 8005182:	0018      	movs	r0, r3
 8005184:	f005 fdf4 	bl	800ad70 <HAL_TIM_OnePulse_Init>
 8005188:	1e03      	subs	r3, r0, #0
 800518a:	d001      	beq.n	8005190 <MX_TIM7_Init+0x54>
  {
    Error_Handler();
 800518c:	f000 f982 	bl	8005494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005190:	003b      	movs	r3, r7
 8005192:	2220      	movs	r2, #32
 8005194:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005196:	003b      	movs	r3, r7
 8005198:	2200      	movs	r2, #0
 800519a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800519c:	003a      	movs	r2, r7
 800519e:	4b06      	ldr	r3, [pc, #24]	@ (80051b8 <MX_TIM7_Init+0x7c>)
 80051a0:	0011      	movs	r1, r2
 80051a2:	0018      	movs	r0, r3
 80051a4:	f006 fc2e 	bl	800ba04 <HAL_TIMEx_MasterConfigSynchronization>
 80051a8:	1e03      	subs	r3, r0, #0
 80051aa:	d001      	beq.n	80051b0 <MX_TIM7_Init+0x74>
  {
    Error_Handler();
 80051ac:	f000 f972 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80051b0:	46c0      	nop			@ (mov r8, r8)
 80051b2:	46bd      	mov	sp, r7
 80051b4:	b002      	add	sp, #8
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	20000960 	.word	0x20000960
 80051bc:	40001400 	.word	0x40001400
 80051c0:	0000a9af 	.word	0x0000a9af

080051c4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80051c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005204 <MX_TIM14_Init+0x40>)
 80051ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005208 <MX_TIM14_Init+0x44>)
 80051cc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 3662;
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <MX_TIM14_Init+0x40>)
 80051d0:	4a0e      	ldr	r2, [pc, #56]	@ (800520c <MX_TIM14_Init+0x48>)
 80051d2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80051d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <MX_TIM14_Init+0x40>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 43680;
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <MX_TIM14_Init+0x40>)
 80051dc:	4a0c      	ldr	r2, [pc, #48]	@ (8005210 <MX_TIM14_Init+0x4c>)
 80051de:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80051e0:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <MX_TIM14_Init+0x40>)
 80051e2:	2200      	movs	r2, #0
 80051e4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80051e6:	4b07      	ldr	r3, [pc, #28]	@ (8005204 <MX_TIM14_Init+0x40>)
 80051e8:	2280      	movs	r2, #128	@ 0x80
 80051ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80051ec:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <MX_TIM14_Init+0x40>)
 80051ee:	0018      	movs	r0, r3
 80051f0:	f005 fc0c 	bl	800aa0c <HAL_TIM_Base_Init>
 80051f4:	1e03      	subs	r3, r0, #0
 80051f6:	d001      	beq.n	80051fc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80051f8:	f000 f94c 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80051fc:	46c0      	nop			@ (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	46c0      	nop			@ (mov r8, r8)
 8005204:	200009a8 	.word	0x200009a8
 8005208:	40002000 	.word	0x40002000
 800520c:	00000e4e 	.word	0x00000e4e
 8005210:	0000aaa0 	.word	0x0000aaa0

08005214 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b086      	sub	sp, #24
 8005218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800521a:	2308      	movs	r3, #8
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	0018      	movs	r0, r3
 8005220:	2310      	movs	r3, #16
 8005222:	001a      	movs	r2, r3
 8005224:	2100      	movs	r1, #0
 8005226:	f00b fc1b 	bl	8010a60 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800522a:	003b      	movs	r3, r7
 800522c:	0018      	movs	r0, r3
 800522e:	2308      	movs	r3, #8
 8005230:	001a      	movs	r2, r3
 8005232:	2100      	movs	r1, #0
 8005234:	f00b fc14 	bl	8010a60 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8005238:	4b1f      	ldr	r3, [pc, #124]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 800523a:	4a20      	ldr	r2, [pc, #128]	@ (80052bc <MX_TIM15_Init+0xa8>)
 800523c:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 800523e:	4b1e      	ldr	r3, [pc, #120]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 8005240:	2200      	movs	r2, #0
 8005242:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005244:	4b1c      	ldr	r3, [pc, #112]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 8005246:	2200      	movs	r2, #0
 8005248:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 100;
 800524a:	4b1b      	ldr	r3, [pc, #108]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 800524c:	2264      	movs	r2, #100	@ 0x64
 800524e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005250:	4b19      	ldr	r3, [pc, #100]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 8005252:	2200      	movs	r2, #0
 8005254:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005256:	4b18      	ldr	r3, [pc, #96]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 8005258:	2200      	movs	r2, #0
 800525a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800525c:	4b16      	ldr	r3, [pc, #88]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 800525e:	2280      	movs	r2, #128	@ 0x80
 8005260:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005262:	4b15      	ldr	r3, [pc, #84]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 8005264:	0018      	movs	r0, r3
 8005266:	f005 fbd1 	bl	800aa0c <HAL_TIM_Base_Init>
 800526a:	1e03      	subs	r3, r0, #0
 800526c:	d001      	beq.n	8005272 <MX_TIM15_Init+0x5e>
  {
    Error_Handler();
 800526e:	f000 f911 	bl	8005494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005272:	2108      	movs	r1, #8
 8005274:	187b      	adds	r3, r7, r1
 8005276:	2280      	movs	r2, #128	@ 0x80
 8005278:	0152      	lsls	r2, r2, #5
 800527a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800527c:	187a      	adds	r2, r7, r1
 800527e:	4b0e      	ldr	r3, [pc, #56]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 8005280:	0011      	movs	r1, r2
 8005282:	0018      	movs	r0, r3
 8005284:	f005 ff82 	bl	800b18c <HAL_TIM_ConfigClockSource>
 8005288:	1e03      	subs	r3, r0, #0
 800528a:	d001      	beq.n	8005290 <MX_TIM15_Init+0x7c>
  {
    Error_Handler();
 800528c:	f000 f902 	bl	8005494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005290:	003b      	movs	r3, r7
 8005292:	2220      	movs	r2, #32
 8005294:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005296:	003b      	movs	r3, r7
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 800529c:	003a      	movs	r2, r7
 800529e:	4b06      	ldr	r3, [pc, #24]	@ (80052b8 <MX_TIM15_Init+0xa4>)
 80052a0:	0011      	movs	r1, r2
 80052a2:	0018      	movs	r0, r3
 80052a4:	f006 fbae 	bl	800ba04 <HAL_TIMEx_MasterConfigSynchronization>
 80052a8:	1e03      	subs	r3, r0, #0
 80052aa:	d001      	beq.n	80052b0 <MX_TIM15_Init+0x9c>
  {
    Error_Handler();
 80052ac:	f000 f8f2 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */

}
 80052b0:	46c0      	nop			@ (mov r8, r8)
 80052b2:	46bd      	mov	sp, r7
 80052b4:	b006      	add	sp, #24
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	200009f0 	.word	0x200009f0
 80052bc:	40014000 	.word	0x40014000

080052c0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80052c4:	4b10      	ldr	r3, [pc, #64]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052c6:	4a11      	ldr	r2, [pc, #68]	@ (800530c <MX_TIM16_Init+0x4c>)
 80052c8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 3;
 80052ca:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052cc:	2203      	movs	r2, #3
 80052ce:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 32000;
 80052d6:	4b0c      	ldr	r3, [pc, #48]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052d8:	22fa      	movs	r2, #250	@ 0xfa
 80052da:	01d2      	lsls	r2, r2, #7
 80052dc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052de:	4b0a      	ldr	r3, [pc, #40]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80052e4:	4b08      	ldr	r3, [pc, #32]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80052ea:	4b07      	ldr	r3, [pc, #28]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052ec:	2280      	movs	r2, #128	@ 0x80
 80052ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80052f0:	4b05      	ldr	r3, [pc, #20]	@ (8005308 <MX_TIM16_Init+0x48>)
 80052f2:	0018      	movs	r0, r3
 80052f4:	f005 fb8a 	bl	800aa0c <HAL_TIM_Base_Init>
 80052f8:	1e03      	subs	r3, r0, #0
 80052fa:	d001      	beq.n	8005300 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80052fc:	f000 f8ca 	bl	8005494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8005300:	46c0      	nop			@ (mov r8, r8)
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			@ (mov r8, r8)
 8005308:	20000a38 	.word	0x20000a38
 800530c:	40014400 	.word	0x40014400

08005310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b089      	sub	sp, #36	@ 0x24
 8005314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005316:	240c      	movs	r4, #12
 8005318:	193b      	adds	r3, r7, r4
 800531a:	0018      	movs	r0, r3
 800531c:	2314      	movs	r3, #20
 800531e:	001a      	movs	r2, r3
 8005320:	2100      	movs	r1, #0
 8005322:	f00b fb9d 	bl	8010a60 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005326:	4b59      	ldr	r3, [pc, #356]	@ (800548c <MX_GPIO_Init+0x17c>)
 8005328:	695a      	ldr	r2, [r3, #20]
 800532a:	4b58      	ldr	r3, [pc, #352]	@ (800548c <MX_GPIO_Init+0x17c>)
 800532c:	2180      	movs	r1, #128	@ 0x80
 800532e:	03c9      	lsls	r1, r1, #15
 8005330:	430a      	orrs	r2, r1
 8005332:	615a      	str	r2, [r3, #20]
 8005334:	4b55      	ldr	r3, [pc, #340]	@ (800548c <MX_GPIO_Init+0x17c>)
 8005336:	695a      	ldr	r2, [r3, #20]
 8005338:	2380      	movs	r3, #128	@ 0x80
 800533a:	03db      	lsls	r3, r3, #15
 800533c:	4013      	ands	r3, r2
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005342:	4b52      	ldr	r3, [pc, #328]	@ (800548c <MX_GPIO_Init+0x17c>)
 8005344:	695a      	ldr	r2, [r3, #20]
 8005346:	4b51      	ldr	r3, [pc, #324]	@ (800548c <MX_GPIO_Init+0x17c>)
 8005348:	2180      	movs	r1, #128	@ 0x80
 800534a:	0289      	lsls	r1, r1, #10
 800534c:	430a      	orrs	r2, r1
 800534e:	615a      	str	r2, [r3, #20]
 8005350:	4b4e      	ldr	r3, [pc, #312]	@ (800548c <MX_GPIO_Init+0x17c>)
 8005352:	695a      	ldr	r2, [r3, #20]
 8005354:	2380      	movs	r3, #128	@ 0x80
 8005356:	029b      	lsls	r3, r3, #10
 8005358:	4013      	ands	r3, r2
 800535a:	607b      	str	r3, [r7, #4]
 800535c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800535e:	4b4b      	ldr	r3, [pc, #300]	@ (800548c <MX_GPIO_Init+0x17c>)
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	4b4a      	ldr	r3, [pc, #296]	@ (800548c <MX_GPIO_Init+0x17c>)
 8005364:	2180      	movs	r1, #128	@ 0x80
 8005366:	02c9      	lsls	r1, r1, #11
 8005368:	430a      	orrs	r2, r1
 800536a:	615a      	str	r2, [r3, #20]
 800536c:	4b47      	ldr	r3, [pc, #284]	@ (800548c <MX_GPIO_Init+0x17c>)
 800536e:	695a      	ldr	r2, [r3, #20]
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	02db      	lsls	r3, r3, #11
 8005374:	4013      	ands	r3, r2
 8005376:	603b      	str	r3, [r7, #0]
 8005378:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX_BRIGHT_IND_Pin|UNDER_PWR_IND_Pin, GPIO_PIN_RESET);
 800537a:	2390      	movs	r3, #144	@ 0x90
 800537c:	05db      	lsls	r3, r3, #23
 800537e:	2200      	movs	r2, #0
 8005380:	2130      	movs	r1, #48	@ 0x30
 8005382:	0018      	movs	r0, r3
 8005384:	f001 fa6f 	bl	8006866 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin, GPIO_PIN_RESET);
 8005388:	4b41      	ldr	r3, [pc, #260]	@ (8005490 <MX_GPIO_Init+0x180>)
 800538a:	2200      	movs	r2, #0
 800538c:	2104      	movs	r1, #4
 800538e:	0018      	movs	r0, r3
 8005390:	f001 fa69 	bl	8006866 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAX_BRIGHT_IND_Pin UNDER_PWR_IND_Pin */
  GPIO_InitStruct.Pin = MAX_BRIGHT_IND_Pin|UNDER_PWR_IND_Pin;
 8005394:	193b      	adds	r3, r7, r4
 8005396:	2230      	movs	r2, #48	@ 0x30
 8005398:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800539a:	193b      	adds	r3, r7, r4
 800539c:	2201      	movs	r2, #1
 800539e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a0:	193b      	adds	r3, r7, r4
 80053a2:	2200      	movs	r2, #0
 80053a4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a6:	193b      	adds	r3, r7, r4
 80053a8:	2200      	movs	r2, #0
 80053aa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053ac:	193a      	adds	r2, r7, r4
 80053ae:	2390      	movs	r3, #144	@ 0x90
 80053b0:	05db      	lsls	r3, r3, #23
 80053b2:	0011      	movs	r1, r2
 80053b4:	0018      	movs	r0, r3
 80053b6:	f001 f8c1 	bl	800653c <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_IND_Pin */
  GPIO_InitStruct.Pin = STATUS_IND_Pin;
 80053ba:	193b      	adds	r3, r7, r4
 80053bc:	2204      	movs	r2, #4
 80053be:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053c0:	193b      	adds	r3, r7, r4
 80053c2:	2201      	movs	r2, #1
 80053c4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053c6:	193b      	adds	r3, r7, r4
 80053c8:	2200      	movs	r2, #0
 80053ca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053cc:	193b      	adds	r3, r7, r4
 80053ce:	2200      	movs	r2, #0
 80053d0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_IND_GPIO_Port, &GPIO_InitStruct);
 80053d2:	193b      	adds	r3, r7, r4
 80053d4:	4a2e      	ldr	r2, [pc, #184]	@ (8005490 <MX_GPIO_Init+0x180>)
 80053d6:	0019      	movs	r1, r3
 80053d8:	0010      	movs	r0, r2
 80053da:	f001 f8af 	bl	800653c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80053de:	0021      	movs	r1, r4
 80053e0:	187b      	adds	r3, r7, r1
 80053e2:	2280      	movs	r2, #128	@ 0x80
 80053e4:	0112      	lsls	r2, r2, #4
 80053e6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80053e8:	187b      	adds	r3, r7, r1
 80053ea:	2288      	movs	r2, #136	@ 0x88
 80053ec:	0352      	lsls	r2, r2, #13
 80053ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053f0:	187b      	adds	r3, r7, r1
 80053f2:	2200      	movs	r2, #0
 80053f4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80053f6:	000c      	movs	r4, r1
 80053f8:	187b      	adds	r3, r7, r1
 80053fa:	4a25      	ldr	r2, [pc, #148]	@ (8005490 <MX_GPIO_Init+0x180>)
 80053fc:	0019      	movs	r1, r3
 80053fe:	0010      	movs	r0, r2
 8005400:	f001 f89c 	bl	800653c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 8005404:	0021      	movs	r1, r4
 8005406:	187b      	adds	r3, r7, r1
 8005408:	2280      	movs	r2, #128	@ 0x80
 800540a:	0152      	lsls	r2, r2, #5
 800540c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800540e:	187b      	adds	r3, r7, r1
 8005410:	2284      	movs	r2, #132	@ 0x84
 8005412:	0392      	lsls	r2, r2, #14
 8005414:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005416:	187b      	adds	r3, r7, r1
 8005418:	2200      	movs	r2, #0
 800541a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 800541c:	000c      	movs	r4, r1
 800541e:	187b      	adds	r3, r7, r1
 8005420:	4a1b      	ldr	r2, [pc, #108]	@ (8005490 <MX_GPIO_Init+0x180>)
 8005422:	0019      	movs	r1, r3
 8005424:	0010      	movs	r0, r2
 8005426:	f001 f889 	bl	800653c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_FAULT_Pin USB_OVER_VOLT_Pin */
  GPIO_InitStruct.Pin = USB_FAULT_Pin|USB_OVER_VOLT_Pin;
 800542a:	0021      	movs	r1, r4
 800542c:	187b      	adds	r3, r7, r1
 800542e:	2282      	movs	r2, #130	@ 0x82
 8005430:	0212      	lsls	r2, r2, #8
 8005432:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005434:	000c      	movs	r4, r1
 8005436:	193b      	adds	r3, r7, r4
 8005438:	2200      	movs	r2, #0
 800543a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800543c:	193b      	adds	r3, r7, r4
 800543e:	2200      	movs	r2, #0
 8005440:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005442:	193b      	adds	r3, r7, r4
 8005444:	4a12      	ldr	r2, [pc, #72]	@ (8005490 <MX_GPIO_Init+0x180>)
 8005446:	0019      	movs	r1, r3
 8005448:	0010      	movs	r0, r2
 800544a:	f001 f877 	bl	800653c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_BRIGHT_Pin */
  GPIO_InitStruct.Pin = MAX_BRIGHT_Pin;
 800544e:	0021      	movs	r1, r4
 8005450:	187b      	adds	r3, r7, r1
 8005452:	2280      	movs	r2, #128	@ 0x80
 8005454:	0092      	lsls	r2, r2, #2
 8005456:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005458:	187b      	adds	r3, r7, r1
 800545a:	2288      	movs	r2, #136	@ 0x88
 800545c:	0352      	lsls	r2, r2, #13
 800545e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005460:	187b      	adds	r3, r7, r1
 8005462:	2200      	movs	r2, #0
 8005464:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MAX_BRIGHT_GPIO_Port, &GPIO_InitStruct);
 8005466:	187a      	adds	r2, r7, r1
 8005468:	2390      	movs	r3, #144	@ 0x90
 800546a:	05db      	lsls	r3, r3, #23
 800546c:	0011      	movs	r1, r2
 800546e:	0018      	movs	r0, r3
 8005470:	f001 f864 	bl	800653c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8005474:	2200      	movs	r2, #0
 8005476:	2100      	movs	r1, #0
 8005478:	2007      	movs	r0, #7
 800547a:	f000 ffdb 	bl	8006434 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800547e:	2007      	movs	r0, #7
 8005480:	f000 ffed 	bl	800645e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8005484:	46c0      	nop			@ (mov r8, r8)
 8005486:	46bd      	mov	sp, r7
 8005488:	b009      	add	sp, #36	@ 0x24
 800548a:	bd90      	pop	{r4, r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	48000400 	.word	0x48000400

08005494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005498:	b672      	cpsid	i
}
 800549a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800549c:	46c0      	nop			@ (mov r8, r8)
 800549e:	e7fd      	b.n	800549c <Error_Handler+0x8>

080054a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b082      	sub	sp, #8
 80054a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80054a6:	4b0f      	ldr	r3, [pc, #60]	@ (80054e4 <HAL_MspInit+0x44>)
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	4b0e      	ldr	r3, [pc, #56]	@ (80054e4 <HAL_MspInit+0x44>)
 80054ac:	2101      	movs	r1, #1
 80054ae:	430a      	orrs	r2, r1
 80054b0:	619a      	str	r2, [r3, #24]
 80054b2:	4b0c      	ldr	r3, [pc, #48]	@ (80054e4 <HAL_MspInit+0x44>)
 80054b4:	699b      	ldr	r3, [r3, #24]
 80054b6:	2201      	movs	r2, #1
 80054b8:	4013      	ands	r3, r2
 80054ba:	607b      	str	r3, [r7, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80054be:	4b09      	ldr	r3, [pc, #36]	@ (80054e4 <HAL_MspInit+0x44>)
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	4b08      	ldr	r3, [pc, #32]	@ (80054e4 <HAL_MspInit+0x44>)
 80054c4:	2180      	movs	r1, #128	@ 0x80
 80054c6:	0549      	lsls	r1, r1, #21
 80054c8:	430a      	orrs	r2, r1
 80054ca:	61da      	str	r2, [r3, #28]
 80054cc:	4b05      	ldr	r3, [pc, #20]	@ (80054e4 <HAL_MspInit+0x44>)
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	2380      	movs	r3, #128	@ 0x80
 80054d2:	055b      	lsls	r3, r3, #21
 80054d4:	4013      	ands	r3, r2
 80054d6:	603b      	str	r3, [r7, #0]
 80054d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80054da:	46c0      	nop			@ (mov r8, r8)
 80054dc:	46bd      	mov	sp, r7
 80054de:	b002      	add	sp, #8
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	46c0      	nop			@ (mov r8, r8)
 80054e4:	40021000 	.word	0x40021000

080054e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80054e8:	b590      	push	{r4, r7, lr}
 80054ea:	b08b      	sub	sp, #44	@ 0x2c
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054f0:	2414      	movs	r4, #20
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	0018      	movs	r0, r3
 80054f6:	2314      	movs	r3, #20
 80054f8:	001a      	movs	r2, r3
 80054fa:	2100      	movs	r1, #0
 80054fc:	f00b fab0 	bl	8010a60 <memset>
  if(hadc->Instance==ADC1)
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a19      	ldr	r2, [pc, #100]	@ (800556c <HAL_ADC_MspInit+0x84>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d12b      	bne.n	8005562 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800550a:	4b19      	ldr	r3, [pc, #100]	@ (8005570 <HAL_ADC_MspInit+0x88>)
 800550c:	699a      	ldr	r2, [r3, #24]
 800550e:	4b18      	ldr	r3, [pc, #96]	@ (8005570 <HAL_ADC_MspInit+0x88>)
 8005510:	2180      	movs	r1, #128	@ 0x80
 8005512:	0089      	lsls	r1, r1, #2
 8005514:	430a      	orrs	r2, r1
 8005516:	619a      	str	r2, [r3, #24]
 8005518:	4b15      	ldr	r3, [pc, #84]	@ (8005570 <HAL_ADC_MspInit+0x88>)
 800551a:	699a      	ldr	r2, [r3, #24]
 800551c:	2380      	movs	r3, #128	@ 0x80
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	4013      	ands	r3, r2
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005526:	4b12      	ldr	r3, [pc, #72]	@ (8005570 <HAL_ADC_MspInit+0x88>)
 8005528:	695a      	ldr	r2, [r3, #20]
 800552a:	4b11      	ldr	r3, [pc, #68]	@ (8005570 <HAL_ADC_MspInit+0x88>)
 800552c:	2180      	movs	r1, #128	@ 0x80
 800552e:	0289      	lsls	r1, r1, #10
 8005530:	430a      	orrs	r2, r1
 8005532:	615a      	str	r2, [r3, #20]
 8005534:	4b0e      	ldr	r3, [pc, #56]	@ (8005570 <HAL_ADC_MspInit+0x88>)
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	2380      	movs	r3, #128	@ 0x80
 800553a:	029b      	lsls	r3, r3, #10
 800553c:	4013      	ands	r3, r2
 800553e:	60fb      	str	r3, [r7, #12]
 8005540:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = BRIGHTNESS_Pin;
 8005542:	193b      	adds	r3, r7, r4
 8005544:	2204      	movs	r2, #4
 8005546:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005548:	193b      	adds	r3, r7, r4
 800554a:	2203      	movs	r2, #3
 800554c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800554e:	193b      	adds	r3, r7, r4
 8005550:	2200      	movs	r2, #0
 8005552:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BRIGHTNESS_GPIO_Port, &GPIO_InitStruct);
 8005554:	193a      	adds	r2, r7, r4
 8005556:	2390      	movs	r3, #144	@ 0x90
 8005558:	05db      	lsls	r3, r3, #23
 800555a:	0011      	movs	r1, r2
 800555c:	0018      	movs	r0, r3
 800555e:	f000 ffed 	bl	800653c <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8005562:	46c0      	nop			@ (mov r8, r8)
 8005564:	46bd      	mov	sp, r7
 8005566:	b00b      	add	sp, #44	@ 0x2c
 8005568:	bd90      	pop	{r4, r7, pc}
 800556a:	46c0      	nop			@ (mov r8, r8)
 800556c:	40012400 	.word	0x40012400
 8005570:	40021000 	.word	0x40021000

08005574 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005574:	b590      	push	{r4, r7, lr}
 8005576:	b08b      	sub	sp, #44	@ 0x2c
 8005578:	af00      	add	r7, sp, #0
 800557a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800557c:	2414      	movs	r4, #20
 800557e:	193b      	adds	r3, r7, r4
 8005580:	0018      	movs	r0, r3
 8005582:	2314      	movs	r3, #20
 8005584:	001a      	movs	r2, r3
 8005586:	2100      	movs	r1, #0
 8005588:	f00b fa6a 	bl	8010a60 <memset>
  if(hi2c->Instance==I2C2)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a20      	ldr	r2, [pc, #128]	@ (8005614 <HAL_I2C_MspInit+0xa0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d13a      	bne.n	800560c <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005596:	4b20      	ldr	r3, [pc, #128]	@ (8005618 <HAL_I2C_MspInit+0xa4>)
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	4b1f      	ldr	r3, [pc, #124]	@ (8005618 <HAL_I2C_MspInit+0xa4>)
 800559c:	2180      	movs	r1, #128	@ 0x80
 800559e:	02c9      	lsls	r1, r1, #11
 80055a0:	430a      	orrs	r2, r1
 80055a2:	615a      	str	r2, [r3, #20]
 80055a4:	4b1c      	ldr	r3, [pc, #112]	@ (8005618 <HAL_I2C_MspInit+0xa4>)
 80055a6:	695a      	ldr	r2, [r3, #20]
 80055a8:	2380      	movs	r3, #128	@ 0x80
 80055aa:	02db      	lsls	r3, r3, #11
 80055ac:	4013      	ands	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
 80055b0:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 80055b2:	193b      	adds	r3, r7, r4
 80055b4:	22c0      	movs	r2, #192	@ 0xc0
 80055b6:	01d2      	lsls	r2, r2, #7
 80055b8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055ba:	0021      	movs	r1, r4
 80055bc:	187b      	adds	r3, r7, r1
 80055be:	2212      	movs	r2, #18
 80055c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c2:	187b      	adds	r3, r7, r1
 80055c4:	2200      	movs	r2, #0
 80055c6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80055c8:	187b      	adds	r3, r7, r1
 80055ca:	2203      	movs	r2, #3
 80055cc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 80055ce:	187b      	adds	r3, r7, r1
 80055d0:	2205      	movs	r2, #5
 80055d2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055d4:	187b      	adds	r3, r7, r1
 80055d6:	4a11      	ldr	r2, [pc, #68]	@ (800561c <HAL_I2C_MspInit+0xa8>)
 80055d8:	0019      	movs	r1, r3
 80055da:	0010      	movs	r0, r2
 80055dc:	f000 ffae 	bl	800653c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80055e0:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <HAL_I2C_MspInit+0xa4>)
 80055e2:	69da      	ldr	r2, [r3, #28]
 80055e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <HAL_I2C_MspInit+0xa4>)
 80055e6:	2180      	movs	r1, #128	@ 0x80
 80055e8:	03c9      	lsls	r1, r1, #15
 80055ea:	430a      	orrs	r2, r1
 80055ec:	61da      	str	r2, [r3, #28]
 80055ee:	4b0a      	ldr	r3, [pc, #40]	@ (8005618 <HAL_I2C_MspInit+0xa4>)
 80055f0:	69da      	ldr	r2, [r3, #28]
 80055f2:	2380      	movs	r3, #128	@ 0x80
 80055f4:	03db      	lsls	r3, r3, #15
 80055f6:	4013      	ands	r3, r2
 80055f8:	60fb      	str	r3, [r7, #12]
 80055fa:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80055fc:	2200      	movs	r2, #0
 80055fe:	2100      	movs	r1, #0
 8005600:	2018      	movs	r0, #24
 8005602:	f000 ff17 	bl	8006434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8005606:	2018      	movs	r0, #24
 8005608:	f000 ff29 	bl	800645e <HAL_NVIC_EnableIRQ>

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800560c:	46c0      	nop			@ (mov r8, r8)
 800560e:	46bd      	mov	sp, r7
 8005610:	b00b      	add	sp, #44	@ 0x2c
 8005612:	bd90      	pop	{r4, r7, pc}
 8005614:	40005800 	.word	0x40005800
 8005618:	40021000 	.word	0x40021000
 800561c:	48000400 	.word	0x48000400

08005620 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	05db      	lsls	r3, r3, #23
 8005630:	429a      	cmp	r2, r3
 8005632:	d10c      	bne.n	800564e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005634:	4b47      	ldr	r3, [pc, #284]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	4b46      	ldr	r3, [pc, #280]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 800563a:	2101      	movs	r1, #1
 800563c:	430a      	orrs	r2, r1
 800563e:	61da      	str	r2, [r3, #28]
 8005640:	4b44      	ldr	r3, [pc, #272]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	2201      	movs	r2, #1
 8005646:	4013      	ands	r3, r2
 8005648:	61fb      	str	r3, [r7, #28]
 800564a:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800564c:	e07e      	b.n	800574c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM3)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a41      	ldr	r2, [pc, #260]	@ (8005758 <HAL_TIM_Base_MspInit+0x138>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d10c      	bne.n	8005672 <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005658:	4b3e      	ldr	r3, [pc, #248]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	4b3d      	ldr	r3, [pc, #244]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 800565e:	2102      	movs	r1, #2
 8005660:	430a      	orrs	r2, r1
 8005662:	61da      	str	r2, [r3, #28]
 8005664:	4b3b      	ldr	r3, [pc, #236]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 8005666:	69db      	ldr	r3, [r3, #28]
 8005668:	2202      	movs	r2, #2
 800566a:	4013      	ands	r3, r2
 800566c:	61bb      	str	r3, [r7, #24]
 800566e:	69bb      	ldr	r3, [r7, #24]
}
 8005670:	e06c      	b.n	800574c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM7)
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	4a39      	ldr	r2, [pc, #228]	@ (800575c <HAL_TIM_Base_MspInit+0x13c>)
 8005678:	4293      	cmp	r3, r2
 800567a:	d114      	bne.n	80056a6 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800567c:	4b35      	ldr	r3, [pc, #212]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	4b34      	ldr	r3, [pc, #208]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 8005682:	2120      	movs	r1, #32
 8005684:	430a      	orrs	r2, r1
 8005686:	61da      	str	r2, [r3, #28]
 8005688:	4b32      	ldr	r3, [pc, #200]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 800568a:	69db      	ldr	r3, [r3, #28]
 800568c:	2220      	movs	r2, #32
 800568e:	4013      	ands	r3, r2
 8005690:	617b      	str	r3, [r7, #20]
 8005692:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005694:	2200      	movs	r2, #0
 8005696:	2100      	movs	r1, #0
 8005698:	2012      	movs	r0, #18
 800569a:	f000 fecb 	bl	8006434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800569e:	2012      	movs	r0, #18
 80056a0:	f000 fedd 	bl	800645e <HAL_NVIC_EnableIRQ>
}
 80056a4:	e052      	b.n	800574c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM14)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a2d      	ldr	r2, [pc, #180]	@ (8005760 <HAL_TIM_Base_MspInit+0x140>)
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d116      	bne.n	80056de <HAL_TIM_Base_MspInit+0xbe>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80056b0:	4b28      	ldr	r3, [pc, #160]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 80056b2:	69da      	ldr	r2, [r3, #28]
 80056b4:	4b27      	ldr	r3, [pc, #156]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 80056b6:	2180      	movs	r1, #128	@ 0x80
 80056b8:	0049      	lsls	r1, r1, #1
 80056ba:	430a      	orrs	r2, r1
 80056bc:	61da      	str	r2, [r3, #28]
 80056be:	4b25      	ldr	r3, [pc, #148]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 80056c0:	69da      	ldr	r2, [r3, #28]
 80056c2:	2380      	movs	r3, #128	@ 0x80
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4013      	ands	r3, r2
 80056c8:	613b      	str	r3, [r7, #16]
 80056ca:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 80056cc:	2200      	movs	r2, #0
 80056ce:	2100      	movs	r1, #0
 80056d0:	2013      	movs	r0, #19
 80056d2:	f000 feaf 	bl	8006434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 80056d6:	2013      	movs	r0, #19
 80056d8:	f000 fec1 	bl	800645e <HAL_NVIC_EnableIRQ>
}
 80056dc:	e036      	b.n	800574c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM15)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a20      	ldr	r2, [pc, #128]	@ (8005764 <HAL_TIM_Base_MspInit+0x144>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d116      	bne.n	8005716 <HAL_TIM_Base_MspInit+0xf6>
    __HAL_RCC_TIM15_CLK_ENABLE();
 80056e8:	4b1a      	ldr	r3, [pc, #104]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 80056ea:	699a      	ldr	r2, [r3, #24]
 80056ec:	4b19      	ldr	r3, [pc, #100]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 80056ee:	2180      	movs	r1, #128	@ 0x80
 80056f0:	0249      	lsls	r1, r1, #9
 80056f2:	430a      	orrs	r2, r1
 80056f4:	619a      	str	r2, [r3, #24]
 80056f6:	4b17      	ldr	r3, [pc, #92]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	2380      	movs	r3, #128	@ 0x80
 80056fc:	025b      	lsls	r3, r3, #9
 80056fe:	4013      	ands	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
 8005702:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM15_IRQn, 0, 0);
 8005704:	2200      	movs	r2, #0
 8005706:	2100      	movs	r1, #0
 8005708:	2014      	movs	r0, #20
 800570a:	f000 fe93 	bl	8006434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM15_IRQn);
 800570e:	2014      	movs	r0, #20
 8005710:	f000 fea5 	bl	800645e <HAL_NVIC_EnableIRQ>
}
 8005714:	e01a      	b.n	800574c <HAL_TIM_Base_MspInit+0x12c>
  else if(htim_base->Instance==TIM16)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a13      	ldr	r2, [pc, #76]	@ (8005768 <HAL_TIM_Base_MspInit+0x148>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d115      	bne.n	800574c <HAL_TIM_Base_MspInit+0x12c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005720:	4b0c      	ldr	r3, [pc, #48]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 8005722:	699a      	ldr	r2, [r3, #24]
 8005724:	4b0b      	ldr	r3, [pc, #44]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 8005726:	2180      	movs	r1, #128	@ 0x80
 8005728:	0289      	lsls	r1, r1, #10
 800572a:	430a      	orrs	r2, r1
 800572c:	619a      	str	r2, [r3, #24]
 800572e:	4b09      	ldr	r3, [pc, #36]	@ (8005754 <HAL_TIM_Base_MspInit+0x134>)
 8005730:	699a      	ldr	r2, [r3, #24]
 8005732:	2380      	movs	r3, #128	@ 0x80
 8005734:	029b      	lsls	r3, r3, #10
 8005736:	4013      	ands	r3, r2
 8005738:	60bb      	str	r3, [r7, #8]
 800573a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 800573c:	2200      	movs	r2, #0
 800573e:	2100      	movs	r1, #0
 8005740:	2015      	movs	r0, #21
 8005742:	f000 fe77 	bl	8006434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8005746:	2015      	movs	r0, #21
 8005748:	f000 fe89 	bl	800645e <HAL_NVIC_EnableIRQ>
}
 800574c:	46c0      	nop			@ (mov r8, r8)
 800574e:	46bd      	mov	sp, r7
 8005750:	b008      	add	sp, #32
 8005752:	bd80      	pop	{r7, pc}
 8005754:	40021000 	.word	0x40021000
 8005758:	40000400 	.word	0x40000400
 800575c:	40001400 	.word	0x40001400
 8005760:	40002000 	.word	0x40002000
 8005764:	40014000 	.word	0x40014000
 8005768:	40014400 	.word	0x40014400

0800576c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800576c:	b590      	push	{r4, r7, lr}
 800576e:	b08d      	sub	sp, #52	@ 0x34
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005774:	241c      	movs	r4, #28
 8005776:	193b      	adds	r3, r7, r4
 8005778:	0018      	movs	r0, r3
 800577a:	2314      	movs	r3, #20
 800577c:	001a      	movs	r2, r3
 800577e:	2100      	movs	r1, #0
 8005780:	f00b f96e 	bl	8010a60 <memset>
  if(htim->Instance==TIM2)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	2380      	movs	r3, #128	@ 0x80
 800578a:	05db      	lsls	r3, r3, #23
 800578c:	429a      	cmp	r2, r3
 800578e:	d149      	bne.n	8005824 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005790:	4b4d      	ldr	r3, [pc, #308]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 8005792:	695a      	ldr	r2, [r3, #20]
 8005794:	4b4c      	ldr	r3, [pc, #304]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 8005796:	2180      	movs	r1, #128	@ 0x80
 8005798:	0289      	lsls	r1, r1, #10
 800579a:	430a      	orrs	r2, r1
 800579c:	615a      	str	r2, [r3, #20]
 800579e:	4b4a      	ldr	r3, [pc, #296]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 80057a0:	695a      	ldr	r2, [r3, #20]
 80057a2:	2380      	movs	r3, #128	@ 0x80
 80057a4:	029b      	lsls	r3, r3, #10
 80057a6:	4013      	ands	r3, r2
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057ac:	4b46      	ldr	r3, [pc, #280]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 80057ae:	695a      	ldr	r2, [r3, #20]
 80057b0:	4b45      	ldr	r3, [pc, #276]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 80057b2:	2180      	movs	r1, #128	@ 0x80
 80057b4:	02c9      	lsls	r1, r1, #11
 80057b6:	430a      	orrs	r2, r1
 80057b8:	615a      	str	r2, [r3, #20]
 80057ba:	4b43      	ldr	r3, [pc, #268]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 80057bc:	695a      	ldr	r2, [r3, #20]
 80057be:	2380      	movs	r3, #128	@ 0x80
 80057c0:	02db      	lsls	r3, r3, #11
 80057c2:	4013      	ands	r3, r2
 80057c4:	617b      	str	r3, [r7, #20]
 80057c6:	697b      	ldr	r3, [r7, #20]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED1_Pin;
 80057c8:	193b      	adds	r3, r7, r4
 80057ca:	220b      	movs	r2, #11
 80057cc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	193b      	adds	r3, r7, r4
 80057d0:	2202      	movs	r2, #2
 80057d2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d4:	193b      	adds	r3, r7, r4
 80057d6:	2200      	movs	r2, #0
 80057d8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057da:	193b      	adds	r3, r7, r4
 80057dc:	2200      	movs	r2, #0
 80057de:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80057e0:	193b      	adds	r3, r7, r4
 80057e2:	2202      	movs	r2, #2
 80057e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057e6:	193a      	adds	r2, r7, r4
 80057e8:	2390      	movs	r3, #144	@ 0x90
 80057ea:	05db      	lsls	r3, r3, #23
 80057ec:	0011      	movs	r1, r2
 80057ee:	0018      	movs	r0, r3
 80057f0:	f000 fea4 	bl	800653c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED8_Pin;
 80057f4:	0021      	movs	r1, r4
 80057f6:	187b      	adds	r3, r7, r1
 80057f8:	2280      	movs	r2, #128	@ 0x80
 80057fa:	00d2      	lsls	r2, r2, #3
 80057fc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057fe:	187b      	adds	r3, r7, r1
 8005800:	2202      	movs	r2, #2
 8005802:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005804:	187b      	adds	r3, r7, r1
 8005806:	2200      	movs	r2, #0
 8005808:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800580a:	187b      	adds	r3, r7, r1
 800580c:	2200      	movs	r2, #0
 800580e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8005810:	187b      	adds	r3, r7, r1
 8005812:	2202      	movs	r2, #2
 8005814:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED8_GPIO_Port, &GPIO_InitStruct);
 8005816:	187b      	adds	r3, r7, r1
 8005818:	4a2c      	ldr	r2, [pc, #176]	@ (80058cc <HAL_TIM_MspPostInit+0x160>)
 800581a:	0019      	movs	r1, r3
 800581c:	0010      	movs	r0, r2
 800581e:	f000 fe8d 	bl	800653c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8005822:	e04d      	b.n	80058c0 <HAL_TIM_MspPostInit+0x154>
  else if(htim->Instance==TIM3)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a29      	ldr	r2, [pc, #164]	@ (80058d0 <HAL_TIM_MspPostInit+0x164>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d148      	bne.n	80058c0 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800582e:	4b26      	ldr	r3, [pc, #152]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 8005830:	695a      	ldr	r2, [r3, #20]
 8005832:	4b25      	ldr	r3, [pc, #148]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 8005834:	2180      	movs	r1, #128	@ 0x80
 8005836:	0289      	lsls	r1, r1, #10
 8005838:	430a      	orrs	r2, r1
 800583a:	615a      	str	r2, [r3, #20]
 800583c:	4b22      	ldr	r3, [pc, #136]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 800583e:	695a      	ldr	r2, [r3, #20]
 8005840:	2380      	movs	r3, #128	@ 0x80
 8005842:	029b      	lsls	r3, r3, #10
 8005844:	4013      	ands	r3, r2
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800584a:	4b1f      	ldr	r3, [pc, #124]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 800584c:	695a      	ldr	r2, [r3, #20]
 800584e:	4b1e      	ldr	r3, [pc, #120]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 8005850:	2180      	movs	r1, #128	@ 0x80
 8005852:	02c9      	lsls	r1, r1, #11
 8005854:	430a      	orrs	r2, r1
 8005856:	615a      	str	r2, [r3, #20]
 8005858:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <HAL_TIM_MspPostInit+0x15c>)
 800585a:	695a      	ldr	r2, [r3, #20]
 800585c:	2380      	movs	r3, #128	@ 0x80
 800585e:	02db      	lsls	r3, r3, #11
 8005860:	4013      	ands	r3, r2
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8005866:	241c      	movs	r4, #28
 8005868:	193b      	adds	r3, r7, r4
 800586a:	22c0      	movs	r2, #192	@ 0xc0
 800586c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586e:	193b      	adds	r3, r7, r4
 8005870:	2202      	movs	r2, #2
 8005872:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005874:	193b      	adds	r3, r7, r4
 8005876:	2200      	movs	r2, #0
 8005878:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800587a:	193b      	adds	r3, r7, r4
 800587c:	2200      	movs	r2, #0
 800587e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8005880:	193b      	adds	r3, r7, r4
 8005882:	2201      	movs	r2, #1
 8005884:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005886:	193a      	adds	r2, r7, r4
 8005888:	2390      	movs	r3, #144	@ 0x90
 800588a:	05db      	lsls	r3, r3, #23
 800588c:	0011      	movs	r1, r2
 800588e:	0018      	movs	r0, r3
 8005890:	f000 fe54 	bl	800653c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin;
 8005894:	0021      	movs	r1, r4
 8005896:	187b      	adds	r3, r7, r1
 8005898:	2203      	movs	r2, #3
 800589a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800589c:	187b      	adds	r3, r7, r1
 800589e:	2202      	movs	r2, #2
 80058a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80058a2:	187b      	adds	r3, r7, r1
 80058a4:	2200      	movs	r2, #0
 80058a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80058a8:	187b      	adds	r3, r7, r1
 80058aa:	2200      	movs	r2, #0
 80058ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 80058ae:	187b      	adds	r3, r7, r1
 80058b0:	2201      	movs	r2, #1
 80058b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80058b4:	187b      	adds	r3, r7, r1
 80058b6:	4a05      	ldr	r2, [pc, #20]	@ (80058cc <HAL_TIM_MspPostInit+0x160>)
 80058b8:	0019      	movs	r1, r3
 80058ba:	0010      	movs	r0, r2
 80058bc:	f000 fe3e 	bl	800653c <HAL_GPIO_Init>
}
 80058c0:	46c0      	nop			@ (mov r8, r8)
 80058c2:	46bd      	mov	sp, r7
 80058c4:	b00d      	add	sp, #52	@ 0x34
 80058c6:	bd90      	pop	{r4, r7, pc}
 80058c8:	40021000 	.word	0x40021000
 80058cc:	48000400 	.word	0x48000400
 80058d0:	40000400 	.word	0x40000400

080058d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80058d8:	46c0      	nop			@ (mov r8, r8)
 80058da:	e7fd      	b.n	80058d8 <NMI_Handler+0x4>

080058dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058e0:	46c0      	nop			@ (mov r8, r8)
 80058e2:	e7fd      	b.n	80058e0 <HardFault_Handler+0x4>

080058e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80058e8:	46c0      	nop			@ (mov r8, r8)
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058f2:	46c0      	nop			@ (mov r8, r8)
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058fc:	f000 f8e4 	bl	8005ac8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005900:	46c0      	nop			@ (mov r8, r8)
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005906:	b580      	push	{r7, lr}
 8005908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX_BRIGHT_Pin);
 800590a:	2380      	movs	r3, #128	@ 0x80
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	0018      	movs	r0, r3
 8005910:	f000 ffc6 	bl	80068a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENABLE_Pin);
 8005914:	2380      	movs	r3, #128	@ 0x80
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	0018      	movs	r0, r3
 800591a:	f000 ffc1 	bl	80068a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(I2C_INT_Pin);
 800591e:	2380      	movs	r3, #128	@ 0x80
 8005920:	015b      	lsls	r3, r3, #5
 8005922:	0018      	movs	r0, r3
 8005924:	f000 ffbc 	bl	80068a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005928:	46c0      	nop			@ (mov r8, r8)
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
	...

08005930 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005934:	4b03      	ldr	r3, [pc, #12]	@ (8005944 <TIM7_IRQHandler+0x14>)
 8005936:	0018      	movs	r0, r3
 8005938:	f005 fa73 	bl	800ae22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800593c:	46c0      	nop			@ (mov r8, r8)
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	46c0      	nop			@ (mov r8, r8)
 8005944:	20000960 	.word	0x20000960

08005948 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800594c:	4b03      	ldr	r3, [pc, #12]	@ (800595c <TIM14_IRQHandler+0x14>)
 800594e:	0018      	movs	r0, r3
 8005950:	f005 fa67 	bl	800ae22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8005954:	46c0      	nop			@ (mov r8, r8)
 8005956:	46bd      	mov	sp, r7
 8005958:	bd80      	pop	{r7, pc}
 800595a:	46c0      	nop			@ (mov r8, r8)
 800595c:	200009a8 	.word	0x200009a8

08005960 <TIM15_IRQHandler>:

/**
  * @brief This function handles TIM15 global interrupt.
  */
void TIM15_IRQHandler(void)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM15_IRQn 0 */

  /* USER CODE END TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8005964:	4b03      	ldr	r3, [pc, #12]	@ (8005974 <TIM15_IRQHandler+0x14>)
 8005966:	0018      	movs	r0, r3
 8005968:	f005 fa5b 	bl	800ae22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM15_IRQn 1 */

  /* USER CODE END TIM15_IRQn 1 */
}
 800596c:	46c0      	nop			@ (mov r8, r8)
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	200009f0 	.word	0x200009f0

08005978 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800597c:	4b03      	ldr	r3, [pc, #12]	@ (800598c <TIM16_IRQHandler+0x14>)
 800597e:	0018      	movs	r0, r3
 8005980:	f005 fa4f 	bl	800ae22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 8005984:	46c0      	nop			@ (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
 800598a:	46c0      	nop			@ (mov r8, r8)
 800598c:	20000a38 	.word	0x20000a38

08005990 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 8005994:	4b09      	ldr	r3, [pc, #36]	@ (80059bc <I2C2_IRQHandler+0x2c>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	699a      	ldr	r2, [r3, #24]
 800599a:	23e0      	movs	r3, #224	@ 0xe0
 800599c:	00db      	lsls	r3, r3, #3
 800599e:	4013      	ands	r3, r2
 80059a0:	d004      	beq.n	80059ac <I2C2_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c2);
 80059a2:	4b06      	ldr	r3, [pc, #24]	@ (80059bc <I2C2_IRQHandler+0x2c>)
 80059a4:	0018      	movs	r0, r3
 80059a6:	f001 fa89 	bl	8006ebc <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 80059aa:	e003      	b.n	80059b4 <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 80059ac:	4b03      	ldr	r3, [pc, #12]	@ (80059bc <I2C2_IRQHandler+0x2c>)
 80059ae:	0018      	movs	r0, r3
 80059b0:	f001 fa6a 	bl	8006e88 <HAL_I2C_EV_IRQHandler>
}
 80059b4:	46c0      	nop			@ (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	46c0      	nop			@ (mov r8, r8)
 80059bc:	2000087c 	.word	0x2000087c

080059c0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80059c4:	4b03      	ldr	r3, [pc, #12]	@ (80059d4 <USB_IRQHandler+0x14>)
 80059c6:	0018      	movs	r0, r3
 80059c8:	f002 fd26 	bl	8008418 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80059cc:	46c0      	nop			@ (mov r8, r8)
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	46c0      	nop			@ (mov r8, r8)
 80059d4:	20001750 	.word	0x20001750

080059d8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80059dc:	46c0      	nop			@ (mov r8, r8)
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
	...

080059e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80059e4:	480d      	ldr	r0, [pc, #52]	@ (8005a1c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80059e6:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 80059e8:	f7ff fff6 	bl	80059d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80059ec:	480c      	ldr	r0, [pc, #48]	@ (8005a20 <LoopForever+0x6>)
  ldr r1, =_edata
 80059ee:	490d      	ldr	r1, [pc, #52]	@ (8005a24 <LoopForever+0xa>)
  ldr r2, =_sidata
 80059f0:	4a0d      	ldr	r2, [pc, #52]	@ (8005a28 <LoopForever+0xe>)
  movs r3, #0
 80059f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80059f4:	e002      	b.n	80059fc <LoopCopyDataInit>

080059f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80059f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80059f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80059fa:	3304      	adds	r3, #4

080059fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80059fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80059fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a00:	d3f9      	bcc.n	80059f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a02:	4a0a      	ldr	r2, [pc, #40]	@ (8005a2c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a04:	4c0a      	ldr	r4, [pc, #40]	@ (8005a30 <LoopForever+0x16>)
  movs r3, #0
 8005a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a08:	e001      	b.n	8005a0e <LoopFillZerobss>

08005a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a0c:	3204      	adds	r2, #4

08005a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a10:	d3fb      	bcc.n	8005a0a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005a12:	f00b f833 	bl	8010a7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8005a16:	f7ff f8db 	bl	8004bd0 <main>

08005a1a <LoopForever>:

LoopForever:
    b LoopForever
 8005a1a:	e7fe      	b.n	8005a1a <LoopForever>
  ldr   r0, =_estack
 8005a1c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8005a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a24:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8005a28:	08010e14 	.word	0x08010e14
  ldr r2, =_sbss
 8005a2c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005a30:	20001d8c 	.word	0x20001d8c

08005a34 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005a34:	e7fe      	b.n	8005a34 <ADC1_COMP_IRQHandler>
	...

08005a38 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005a3c:	4b07      	ldr	r3, [pc, #28]	@ (8005a5c <HAL_Init+0x24>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b06      	ldr	r3, [pc, #24]	@ (8005a5c <HAL_Init+0x24>)
 8005a42:	2110      	movs	r1, #16
 8005a44:	430a      	orrs	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8005a48:	2003      	movs	r0, #3
 8005a4a:	f000 f809 	bl	8005a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005a4e:	f7ff fd27 	bl	80054a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	0018      	movs	r0, r3
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
 8005a5a:	46c0      	nop			@ (mov r8, r8)
 8005a5c:	40022000 	.word	0x40022000

08005a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005a60:	b590      	push	{r4, r7, lr}
 8005a62:	b083      	sub	sp, #12
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005a68:	4b14      	ldr	r3, [pc, #80]	@ (8005abc <HAL_InitTick+0x5c>)
 8005a6a:	681c      	ldr	r4, [r3, #0]
 8005a6c:	4b14      	ldr	r3, [pc, #80]	@ (8005ac0 <HAL_InitTick+0x60>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	0019      	movs	r1, r3
 8005a72:	23fa      	movs	r3, #250	@ 0xfa
 8005a74:	0098      	lsls	r0, r3, #2
 8005a76:	f7fa fb47 	bl	8000108 <__udivsi3>
 8005a7a:	0003      	movs	r3, r0
 8005a7c:	0019      	movs	r1, r3
 8005a7e:	0020      	movs	r0, r4
 8005a80:	f7fa fb42 	bl	8000108 <__udivsi3>
 8005a84:	0003      	movs	r3, r0
 8005a86:	0018      	movs	r0, r3
 8005a88:	f000 fcf9 	bl	800647e <HAL_SYSTICK_Config>
 8005a8c:	1e03      	subs	r3, r0, #0
 8005a8e:	d001      	beq.n	8005a94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e00f      	b.n	8005ab4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2b03      	cmp	r3, #3
 8005a98:	d80b      	bhi.n	8005ab2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005a9a:	6879      	ldr	r1, [r7, #4]
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	425b      	negs	r3, r3
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	0018      	movs	r0, r3
 8005aa4:	f000 fcc6 	bl	8006434 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005aa8:	4b06      	ldr	r3, [pc, #24]	@ (8005ac4 <HAL_InitTick+0x64>)
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	e000      	b.n	8005ab4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
}
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	b003      	add	sp, #12
 8005aba:	bd90      	pop	{r4, r7, pc}
 8005abc:	20000014 	.word	0x20000014
 8005ac0:	2000001c 	.word	0x2000001c
 8005ac4:	20000018 	.word	0x20000018

08005ac8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005acc:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <HAL_IncTick+0x1c>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	001a      	movs	r2, r3
 8005ad2:	4b05      	ldr	r3, [pc, #20]	@ (8005ae8 <HAL_IncTick+0x20>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	18d2      	adds	r2, r2, r3
 8005ad8:	4b03      	ldr	r3, [pc, #12]	@ (8005ae8 <HAL_IncTick+0x20>)
 8005ada:	601a      	str	r2, [r3, #0]
}
 8005adc:	46c0      	nop			@ (mov r8, r8)
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}
 8005ae2:	46c0      	nop			@ (mov r8, r8)
 8005ae4:	2000001c 	.word	0x2000001c
 8005ae8:	20000a80 	.word	0x20000a80

08005aec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	af00      	add	r7, sp, #0
  return uwTick;
 8005af0:	4b02      	ldr	r3, [pc, #8]	@ (8005afc <HAL_GetTick+0x10>)
 8005af2:	681b      	ldr	r3, [r3, #0]
}
 8005af4:	0018      	movs	r0, r3
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	46c0      	nop			@ (mov r8, r8)
 8005afc:	20000a80 	.word	0x20000a80

08005b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b08:	f7ff fff0 	bl	8005aec <HAL_GetTick>
 8005b0c:	0003      	movs	r3, r0
 8005b0e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	d005      	beq.n	8005b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8005b44 <HAL_Delay+0x44>)
 8005b1c:	781b      	ldrb	r3, [r3, #0]
 8005b1e:	001a      	movs	r2, r3
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	189b      	adds	r3, r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	f7ff ffe0 	bl	8005aec <HAL_GetTick>
 8005b2c:	0002      	movs	r2, r0
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	1ad3      	subs	r3, r2, r3
 8005b32:	68fa      	ldr	r2, [r7, #12]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d8f7      	bhi.n	8005b28 <HAL_Delay+0x28>
  {
  }
}
 8005b38:	46c0      	nop			@ (mov r8, r8)
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	b004      	add	sp, #16
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	46c0      	nop			@ (mov r8, r8)
 8005b44:	2000001c 	.word	0x2000001c

08005b48 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b50:	230f      	movs	r3, #15
 8005b52:	18fb      	adds	r3, r7, r3
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8005b58:	2300      	movs	r3, #0
 8005b5a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e125      	b.n	8005db2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d10a      	bne.n	8005b84 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2234      	movs	r2, #52	@ 0x34
 8005b78:	2100      	movs	r1, #0
 8005b7a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	0018      	movs	r0, r3
 8005b80:	f7ff fcb2 	bl	80054e8 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	2210      	movs	r2, #16
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	d000      	beq.n	8005b90 <HAL_ADC_Init+0x48>
 8005b8e:	e103      	b.n	8005d98 <HAL_ADC_Init+0x250>
 8005b90:	230f      	movs	r3, #15
 8005b92:	18fb      	adds	r3, r7, r3
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d000      	beq.n	8005b9c <HAL_ADC_Init+0x54>
 8005b9a:	e0fd      	b.n	8005d98 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	689b      	ldr	r3, [r3, #8]
 8005ba2:	2204      	movs	r2, #4
 8005ba4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8005ba6:	d000      	beq.n	8005baa <HAL_ADC_Init+0x62>
 8005ba8:	e0f6      	b.n	8005d98 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005bae:	4a83      	ldr	r2, [pc, #524]	@ (8005dbc <HAL_ADC_Init+0x274>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2202      	movs	r2, #2
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	2203      	movs	r2, #3
 8005bc2:	4013      	ands	r3, r2
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d112      	bne.n	8005bee <HAL_ADC_Init+0xa6>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d009      	beq.n	8005bea <HAL_ADC_Init+0xa2>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68da      	ldr	r2, [r3, #12]
 8005bdc:	2380      	movs	r3, #128	@ 0x80
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	401a      	ands	r2, r3
 8005be2:	2380      	movs	r3, #128	@ 0x80
 8005be4:	021b      	lsls	r3, r3, #8
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d101      	bne.n	8005bee <HAL_ADC_Init+0xa6>
 8005bea:	2301      	movs	r3, #1
 8005bec:	e000      	b.n	8005bf0 <HAL_ADC_Init+0xa8>
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d116      	bne.n	8005c22 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	2218      	movs	r2, #24
 8005bfc:	4393      	bics	r3, r2
 8005bfe:	0019      	movs	r1, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689a      	ldr	r2, [r3, #8]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	691b      	ldr	r3, [r3, #16]
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	0899      	lsrs	r1, r3, #2
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	68da      	ldr	r2, [r3, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4964      	ldr	r1, [pc, #400]	@ (8005dc0 <HAL_ADC_Init+0x278>)
 8005c2e:	400a      	ands	r2, r1
 8005c30:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	7e1b      	ldrb	r3, [r3, #24]
 8005c36:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	7e5b      	ldrb	r3, [r3, #25]
 8005c3c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c3e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7e9b      	ldrb	r3, [r3, #26]
 8005c44:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8005c46:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d002      	beq.n	8005c56 <HAL_ADC_Init+0x10e>
 8005c50:	2380      	movs	r3, #128	@ 0x80
 8005c52:	015b      	lsls	r3, r3, #5
 8005c54:	e000      	b.n	8005c58 <HAL_ADC_Init+0x110>
 8005c56:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005c58:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8005c5e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	691b      	ldr	r3, [r3, #16]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d101      	bne.n	8005c6c <HAL_ADC_Init+0x124>
 8005c68:	2304      	movs	r3, #4
 8005c6a:	e000      	b.n	8005c6e <HAL_ADC_Init+0x126>
 8005c6c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8005c6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2124      	movs	r1, #36	@ 0x24
 8005c74:	5c5b      	ldrb	r3, [r3, r1]
 8005c76:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8005c78:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005c7a:	68ba      	ldr	r2, [r7, #8]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	7edb      	ldrb	r3, [r3, #27]
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d115      	bne.n	8005cb4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	7e9b      	ldrb	r3, [r3, #26]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d105      	bne.n	8005c9c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2280      	movs	r2, #128	@ 0x80
 8005c94:	0252      	lsls	r2, r2, #9
 8005c96:	4313      	orrs	r3, r2
 8005c98:	60bb      	str	r3, [r7, #8]
 8005c9a:	e00b      	b.n	8005cb4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cac:	2201      	movs	r2, #1
 8005cae:	431a      	orrs	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	69da      	ldr	r2, [r3, #28]
 8005cb8:	23c2      	movs	r3, #194	@ 0xc2
 8005cba:	33ff      	adds	r3, #255	@ 0xff
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d007      	beq.n	8005cd0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	68ba      	ldr	r2, [r7, #8]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68d9      	ldr	r1, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	430a      	orrs	r2, r1
 8005cde:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ce4:	2380      	movs	r3, #128	@ 0x80
 8005ce6:	055b      	lsls	r3, r3, #21
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d01b      	beq.n	8005d24 <HAL_ADC_Init+0x1dc>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d017      	beq.n	8005d24 <HAL_ADC_Init+0x1dc>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d013      	beq.n	8005d24 <HAL_ADC_Init+0x1dc>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d00:	2b03      	cmp	r3, #3
 8005d02:	d00f      	beq.n	8005d24 <HAL_ADC_Init+0x1dc>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d08:	2b04      	cmp	r3, #4
 8005d0a:	d00b      	beq.n	8005d24 <HAL_ADC_Init+0x1dc>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d007      	beq.n	8005d24 <HAL_ADC_Init+0x1dc>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d18:	2b06      	cmp	r3, #6
 8005d1a:	d003      	beq.n	8005d24 <HAL_ADC_Init+0x1dc>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d20:	2b07      	cmp	r3, #7
 8005d22:	d112      	bne.n	8005d4a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	695a      	ldr	r2, [r3, #20]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2107      	movs	r1, #7
 8005d30:	438a      	bics	r2, r1
 8005d32:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	6959      	ldr	r1, [r3, #20]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d3e:	2207      	movs	r2, #7
 8005d40:	401a      	ands	r2, r3
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	430a      	orrs	r2, r1
 8005d48:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	68db      	ldr	r3, [r3, #12]
 8005d50:	4a1c      	ldr	r2, [pc, #112]	@ (8005dc4 <HAL_ADC_Init+0x27c>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	68ba      	ldr	r2, [r7, #8]
 8005d56:	429a      	cmp	r2, r3
 8005d58:	d10b      	bne.n	8005d72 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d64:	2203      	movs	r2, #3
 8005d66:	4393      	bics	r3, r2
 8005d68:	2201      	movs	r2, #1
 8005d6a:	431a      	orrs	r2, r3
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005d70:	e01c      	b.n	8005dac <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d76:	2212      	movs	r2, #18
 8005d78:	4393      	bics	r3, r2
 8005d7a:	2210      	movs	r2, #16
 8005d7c:	431a      	orrs	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d86:	2201      	movs	r2, #1
 8005d88:	431a      	orrs	r2, r3
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8005d8e:	230f      	movs	r3, #15
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	2201      	movs	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8005d96:	e009      	b.n	8005dac <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d9c:	2210      	movs	r2, #16
 8005d9e:	431a      	orrs	r2, r3
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 8005da4:	230f      	movs	r3, #15
 8005da6:	18fb      	adds	r3, r7, r3
 8005da8:	2201      	movs	r2, #1
 8005daa:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005dac:	230f      	movs	r3, #15
 8005dae:	18fb      	adds	r3, r7, r3
 8005db0:	781b      	ldrb	r3, [r3, #0]
}
 8005db2:	0018      	movs	r0, r3
 8005db4:	46bd      	mov	sp, r7
 8005db6:	b004      	add	sp, #16
 8005db8:	bd80      	pop	{r7, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	fffffefd 	.word	0xfffffefd
 8005dc0:	fffe0219 	.word	0xfffe0219
 8005dc4:	833fffe7 	.word	0x833fffe7

08005dc8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005dc8:	b590      	push	{r4, r7, lr}
 8005dca:	b085      	sub	sp, #20
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005dd0:	230f      	movs	r3, #15
 8005dd2:	18fb      	adds	r3, r7, r3
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	2204      	movs	r2, #4
 8005de0:	4013      	ands	r3, r2
 8005de2:	d138      	bne.n	8005e56 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2234      	movs	r2, #52	@ 0x34
 8005de8:	5c9b      	ldrb	r3, [r3, r2]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d101      	bne.n	8005df2 <HAL_ADC_Start+0x2a>
 8005dee:	2302      	movs	r3, #2
 8005df0:	e038      	b.n	8005e64 <HAL_ADC_Start+0x9c>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2234      	movs	r2, #52	@ 0x34
 8005df6:	2101      	movs	r1, #1
 8005df8:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	7e5b      	ldrb	r3, [r3, #25]
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d007      	beq.n	8005e12 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8005e02:	230f      	movs	r3, #15
 8005e04:	18fc      	adds	r4, r7, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	0018      	movs	r0, r3
 8005e0a:	f000 f9e3 	bl	80061d4 <ADC_Enable>
 8005e0e:	0003      	movs	r3, r0
 8005e10:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8005e12:	230f      	movs	r3, #15
 8005e14:	18fb      	adds	r3, r7, r3
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d120      	bne.n	8005e5e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e20:	4a12      	ldr	r2, [pc, #72]	@ (8005e6c <HAL_ADC_Start+0xa4>)
 8005e22:	4013      	ands	r3, r2
 8005e24:	2280      	movs	r2, #128	@ 0x80
 8005e26:	0052      	lsls	r2, r2, #1
 8005e28:	431a      	orrs	r2, r3
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2234      	movs	r2, #52	@ 0x34
 8005e38:	2100      	movs	r1, #0
 8005e3a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	221c      	movs	r2, #28
 8005e42:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2104      	movs	r1, #4
 8005e50:	430a      	orrs	r2, r1
 8005e52:	609a      	str	r2, [r3, #8]
 8005e54:	e003      	b.n	8005e5e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005e56:	230f      	movs	r3, #15
 8005e58:	18fb      	adds	r3, r7, r3
 8005e5a:	2202      	movs	r2, #2
 8005e5c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8005e5e:	230f      	movs	r3, #15
 8005e60:	18fb      	adds	r3, r7, r3
 8005e62:	781b      	ldrb	r3, [r3, #0]
}
 8005e64:	0018      	movs	r0, r3
 8005e66:	46bd      	mov	sp, r7
 8005e68:	b005      	add	sp, #20
 8005e6a:	bd90      	pop	{r4, r7, pc}
 8005e6c:	fffff0fe 	.word	0xfffff0fe

08005e70 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	2b08      	cmp	r3, #8
 8005e80:	d102      	bne.n	8005e88 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8005e82:	2308      	movs	r3, #8
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	e014      	b.n	8005eb2 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	2201      	movs	r2, #1
 8005e90:	4013      	ands	r3, r2
 8005e92:	2b01      	cmp	r3, #1
 8005e94:	d10b      	bne.n	8005eae <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	431a      	orrs	r2, r3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2234      	movs	r2, #52	@ 0x34
 8005ea6:	2100      	movs	r1, #0
 8005ea8:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e071      	b.n	8005f92 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8005eae:	230c      	movs	r3, #12
 8005eb0:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8005eb2:	f7ff fe1b 	bl	8005aec <HAL_GetTick>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005eba:	e01f      	b.n	8005efc <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	d01c      	beq.n	8005efc <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <HAL_ADC_PollForConversion+0x68>
 8005ec8:	f7ff fe10 	bl	8005aec <HAL_GetTick>
 8005ecc:	0002      	movs	r2, r0
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d211      	bcs.n	8005efc <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	4013      	ands	r3, r2
 8005ee2:	d10b      	bne.n	8005efc <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee8:	2204      	movs	r2, #4
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2234      	movs	r2, #52	@ 0x34
 8005ef4:	2100      	movs	r1, #0
 8005ef6:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e04a      	b.n	8005f92 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	4013      	ands	r3, r2
 8005f06:	d0d9      	beq.n	8005ebc <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f0c:	2280      	movs	r2, #128	@ 0x80
 8005f0e:	0092      	lsls	r2, r2, #2
 8005f10:	431a      	orrs	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68da      	ldr	r2, [r3, #12]
 8005f1c:	23c0      	movs	r3, #192	@ 0xc0
 8005f1e:	011b      	lsls	r3, r3, #4
 8005f20:	4013      	ands	r3, r2
 8005f22:	d12d      	bne.n	8005f80 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d129      	bne.n	8005f80 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	2208      	movs	r2, #8
 8005f34:	4013      	ands	r3, r2
 8005f36:	2b08      	cmp	r3, #8
 8005f38:	d122      	bne.n	8005f80 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	2204      	movs	r2, #4
 8005f42:	4013      	ands	r3, r2
 8005f44:	d110      	bne.n	8005f68 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	210c      	movs	r1, #12
 8005f52:	438a      	bics	r2, r1
 8005f54:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f5a:	4a10      	ldr	r2, [pc, #64]	@ (8005f9c <HAL_ADC_PollForConversion+0x12c>)
 8005f5c:	4013      	ands	r3, r2
 8005f5e:	2201      	movs	r2, #1
 8005f60:	431a      	orrs	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	639a      	str	r2, [r3, #56]	@ 0x38
 8005f66:	e00b      	b.n	8005f80 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	2220      	movs	r2, #32
 8005f6e:	431a      	orrs	r2, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f78:	2201      	movs	r2, #1
 8005f7a:	431a      	orrs	r2, r3
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	7e1b      	ldrb	r3, [r3, #24]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d103      	bne.n	8005f90 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	220c      	movs	r2, #12
 8005f8e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005f90:	2300      	movs	r3, #0
}
 8005f92:	0018      	movs	r0, r3
 8005f94:	46bd      	mov	sp, r7
 8005f96:	b004      	add	sp, #16
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	46c0      	nop			@ (mov r8, r8)
 8005f9c:	fffffefe 	.word	0xfffffefe

08005fa0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b082      	sub	sp, #8
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8005fae:	0018      	movs	r0, r3
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	b002      	add	sp, #8
 8005fb4:	bd80      	pop	{r7, pc}
	...

08005fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005fc2:	230f      	movs	r3, #15
 8005fc4:	18fb      	adds	r3, r7, r3
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fd2:	2380      	movs	r3, #128	@ 0x80
 8005fd4:	055b      	lsls	r3, r3, #21
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d011      	beq.n	8005ffe <HAL_ADC_ConfigChannel+0x46>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d00d      	beq.n	8005ffe <HAL_ADC_ConfigChannel+0x46>
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fe6:	2b02      	cmp	r3, #2
 8005fe8:	d009      	beq.n	8005ffe <HAL_ADC_ConfigChannel+0x46>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fee:	2b03      	cmp	r3, #3
 8005ff0:	d005      	beq.n	8005ffe <HAL_ADC_ConfigChannel+0x46>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	d001      	beq.n	8005ffe <HAL_ADC_ConfigChannel+0x46>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2234      	movs	r2, #52	@ 0x34
 8006002:	5c9b      	ldrb	r3, [r3, r2]
 8006004:	2b01      	cmp	r3, #1
 8006006:	d101      	bne.n	800600c <HAL_ADC_ConfigChannel+0x54>
 8006008:	2302      	movs	r3, #2
 800600a:	e0d0      	b.n	80061ae <HAL_ADC_ConfigChannel+0x1f6>
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2234      	movs	r2, #52	@ 0x34
 8006010:	2101      	movs	r1, #1
 8006012:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2204      	movs	r2, #4
 800601c:	4013      	ands	r3, r2
 800601e:	d000      	beq.n	8006022 <HAL_ADC_ConfigChannel+0x6a>
 8006020:	e0b4      	b.n	800618c <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	4a64      	ldr	r2, [pc, #400]	@ (80061b8 <HAL_ADC_ConfigChannel+0x200>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d100      	bne.n	800602e <HAL_ADC_ConfigChannel+0x76>
 800602c:	e082      	b.n	8006134 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	2201      	movs	r2, #1
 800603a:	409a      	lsls	r2, r3
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006048:	2380      	movs	r3, #128	@ 0x80
 800604a:	055b      	lsls	r3, r3, #21
 800604c:	429a      	cmp	r2, r3
 800604e:	d037      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006054:	2b01      	cmp	r3, #1
 8006056:	d033      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800605c:	2b02      	cmp	r3, #2
 800605e:	d02f      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006064:	2b03      	cmp	r3, #3
 8006066:	d02b      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606c:	2b04      	cmp	r3, #4
 800606e:	d027      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006074:	2b05      	cmp	r3, #5
 8006076:	d023      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800607c:	2b06      	cmp	r3, #6
 800607e:	d01f      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006084:	2b07      	cmp	r3, #7
 8006086:	d01b      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	689a      	ldr	r2, [r3, #8]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	695b      	ldr	r3, [r3, #20]
 8006092:	2107      	movs	r1, #7
 8006094:	400b      	ands	r3, r1
 8006096:	429a      	cmp	r2, r3
 8006098:	d012      	beq.n	80060c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	695a      	ldr	r2, [r3, #20]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2107      	movs	r1, #7
 80060a6:	438a      	bics	r2, r1
 80060a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	6959      	ldr	r1, [r3, #20]
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2207      	movs	r2, #7
 80060b6:	401a      	ands	r2, r3
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b10      	cmp	r3, #16
 80060c6:	d007      	beq.n	80060d8 <HAL_ADC_ConfigChannel+0x120>
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2b11      	cmp	r3, #17
 80060ce:	d003      	beq.n	80060d8 <HAL_ADC_ConfigChannel+0x120>
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b12      	cmp	r3, #18
 80060d6:	d163      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80060d8:	4b38      	ldr	r3, [pc, #224]	@ (80061bc <HAL_ADC_ConfigChannel+0x204>)
 80060da:	6819      	ldr	r1, [r3, #0]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b10      	cmp	r3, #16
 80060e2:	d009      	beq.n	80060f8 <HAL_ADC_ConfigChannel+0x140>
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b11      	cmp	r3, #17
 80060ea:	d102      	bne.n	80060f2 <HAL_ADC_ConfigChannel+0x13a>
 80060ec:	2380      	movs	r3, #128	@ 0x80
 80060ee:	03db      	lsls	r3, r3, #15
 80060f0:	e004      	b.n	80060fc <HAL_ADC_ConfigChannel+0x144>
 80060f2:	2380      	movs	r3, #128	@ 0x80
 80060f4:	045b      	lsls	r3, r3, #17
 80060f6:	e001      	b.n	80060fc <HAL_ADC_ConfigChannel+0x144>
 80060f8:	2380      	movs	r3, #128	@ 0x80
 80060fa:	041b      	lsls	r3, r3, #16
 80060fc:	4a2f      	ldr	r2, [pc, #188]	@ (80061bc <HAL_ADC_ConfigChannel+0x204>)
 80060fe:	430b      	orrs	r3, r1
 8006100:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b10      	cmp	r3, #16
 8006108:	d14a      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800610a:	4b2d      	ldr	r3, [pc, #180]	@ (80061c0 <HAL_ADC_ConfigChannel+0x208>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	492d      	ldr	r1, [pc, #180]	@ (80061c4 <HAL_ADC_ConfigChannel+0x20c>)
 8006110:	0018      	movs	r0, r3
 8006112:	f7f9 fff9 	bl	8000108 <__udivsi3>
 8006116:	0003      	movs	r3, r0
 8006118:	001a      	movs	r2, r3
 800611a:	0013      	movs	r3, r2
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	189b      	adds	r3, r3, r2
 8006120:	005b      	lsls	r3, r3, #1
 8006122:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8006124:	e002      	b.n	800612c <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	3b01      	subs	r3, #1
 800612a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d1f9      	bne.n	8006126 <HAL_ADC_ConfigChannel+0x16e>
 8006132:	e035      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	2101      	movs	r1, #1
 8006140:	4099      	lsls	r1, r3
 8006142:	000b      	movs	r3, r1
 8006144:	43d9      	mvns	r1, r3
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	400a      	ands	r2, r1
 800614c:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b10      	cmp	r3, #16
 8006154:	d007      	beq.n	8006166 <HAL_ADC_ConfigChannel+0x1ae>
 8006156:	683b      	ldr	r3, [r7, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2b11      	cmp	r3, #17
 800615c:	d003      	beq.n	8006166 <HAL_ADC_ConfigChannel+0x1ae>
 800615e:	683b      	ldr	r3, [r7, #0]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	2b12      	cmp	r3, #18
 8006164:	d11c      	bne.n	80061a0 <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8006166:	4b15      	ldr	r3, [pc, #84]	@ (80061bc <HAL_ADC_ConfigChannel+0x204>)
 8006168:	6819      	ldr	r1, [r3, #0]
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b10      	cmp	r3, #16
 8006170:	d007      	beq.n	8006182 <HAL_ADC_ConfigChannel+0x1ca>
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2b11      	cmp	r3, #17
 8006178:	d101      	bne.n	800617e <HAL_ADC_ConfigChannel+0x1c6>
 800617a:	4b13      	ldr	r3, [pc, #76]	@ (80061c8 <HAL_ADC_ConfigChannel+0x210>)
 800617c:	e002      	b.n	8006184 <HAL_ADC_ConfigChannel+0x1cc>
 800617e:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <HAL_ADC_ConfigChannel+0x214>)
 8006180:	e000      	b.n	8006184 <HAL_ADC_ConfigChannel+0x1cc>
 8006182:	4b13      	ldr	r3, [pc, #76]	@ (80061d0 <HAL_ADC_ConfigChannel+0x218>)
 8006184:	4a0d      	ldr	r2, [pc, #52]	@ (80061bc <HAL_ADC_ConfigChannel+0x204>)
 8006186:	400b      	ands	r3, r1
 8006188:	6013      	str	r3, [r2, #0]
 800618a:	e009      	b.n	80061a0 <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006190:	2220      	movs	r2, #32
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 8006198:	230f      	movs	r3, #15
 800619a:	18fb      	adds	r3, r7, r3
 800619c:	2201      	movs	r2, #1
 800619e:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2234      	movs	r2, #52	@ 0x34
 80061a4:	2100      	movs	r1, #0
 80061a6:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80061a8:	230f      	movs	r3, #15
 80061aa:	18fb      	adds	r3, r7, r3
 80061ac:	781b      	ldrb	r3, [r3, #0]
}
 80061ae:	0018      	movs	r0, r3
 80061b0:	46bd      	mov	sp, r7
 80061b2:	b004      	add	sp, #16
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	46c0      	nop			@ (mov r8, r8)
 80061b8:	00001001 	.word	0x00001001
 80061bc:	40012708 	.word	0x40012708
 80061c0:	20000014 	.word	0x20000014
 80061c4:	000f4240 	.word	0x000f4240
 80061c8:	ffbfffff 	.word	0xffbfffff
 80061cc:	feffffff 	.word	0xfeffffff
 80061d0:	ff7fffff 	.word	0xff7fffff

080061d4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80061dc:	2300      	movs	r3, #0
 80061de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80061e0:	2300      	movs	r3, #0
 80061e2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	2203      	movs	r2, #3
 80061ec:	4013      	ands	r3, r2
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d112      	bne.n	8006218 <ADC_Enable+0x44>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	2201      	movs	r2, #1
 80061fa:	4013      	ands	r3, r2
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d009      	beq.n	8006214 <ADC_Enable+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	68da      	ldr	r2, [r3, #12]
 8006206:	2380      	movs	r3, #128	@ 0x80
 8006208:	021b      	lsls	r3, r3, #8
 800620a:	401a      	ands	r2, r3
 800620c:	2380      	movs	r3, #128	@ 0x80
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	429a      	cmp	r2, r3
 8006212:	d101      	bne.n	8006218 <ADC_Enable+0x44>
 8006214:	2301      	movs	r3, #1
 8006216:	e000      	b.n	800621a <ADC_Enable+0x46>
 8006218:	2300      	movs	r3, #0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d152      	bne.n	80062c4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	4a2a      	ldr	r2, [pc, #168]	@ (80062d0 <ADC_Enable+0xfc>)
 8006226:	4013      	ands	r3, r2
 8006228:	d00d      	beq.n	8006246 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	2210      	movs	r2, #16
 8006230:	431a      	orrs	r2, r3
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800623a:	2201      	movs	r2, #1
 800623c:	431a      	orrs	r2, r3
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e03f      	b.n	80062c6 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	689a      	ldr	r2, [r3, #8]
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2101      	movs	r1, #1
 8006252:	430a      	orrs	r2, r1
 8006254:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8006256:	4b1f      	ldr	r3, [pc, #124]	@ (80062d4 <ADC_Enable+0x100>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	491f      	ldr	r1, [pc, #124]	@ (80062d8 <ADC_Enable+0x104>)
 800625c:	0018      	movs	r0, r3
 800625e:	f7f9 ff53 	bl	8000108 <__udivsi3>
 8006262:	0003      	movs	r3, r0
 8006264:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8006266:	e002      	b.n	800626e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	3b01      	subs	r3, #1
 800626c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d1f9      	bne.n	8006268 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8006274:	f7ff fc3a 	bl	8005aec <HAL_GetTick>
 8006278:	0003      	movs	r3, r0
 800627a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800627c:	e01b      	b.n	80062b6 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800627e:	f7ff fc35 	bl	8005aec <HAL_GetTick>
 8006282:	0002      	movs	r2, r0
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d914      	bls.n	80062b6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2201      	movs	r2, #1
 8006294:	4013      	ands	r3, r2
 8006296:	2b01      	cmp	r3, #1
 8006298:	d00d      	beq.n	80062b6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629e:	2210      	movs	r2, #16
 80062a0:	431a      	orrs	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062aa:	2201      	movs	r2, #1
 80062ac:	431a      	orrs	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80062b2:	2301      	movs	r3, #1
 80062b4:	e007      	b.n	80062c6 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2201      	movs	r2, #1
 80062be:	4013      	ands	r3, r2
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d1dc      	bne.n	800627e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80062c4:	2300      	movs	r3, #0
}
 80062c6:	0018      	movs	r0, r3
 80062c8:	46bd      	mov	sp, r7
 80062ca:	b004      	add	sp, #16
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	46c0      	nop			@ (mov r8, r8)
 80062d0:	80000017 	.word	0x80000017
 80062d4:	20000014 	.word	0x20000014
 80062d8:	000f4240 	.word	0x000f4240

080062dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b082      	sub	sp, #8
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	0002      	movs	r2, r0
 80062e4:	1dfb      	adds	r3, r7, #7
 80062e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80062e8:	1dfb      	adds	r3, r7, #7
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ee:	d809      	bhi.n	8006304 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80062f0:	1dfb      	adds	r3, r7, #7
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	001a      	movs	r2, r3
 80062f6:	231f      	movs	r3, #31
 80062f8:	401a      	ands	r2, r3
 80062fa:	4b04      	ldr	r3, [pc, #16]	@ (800630c <__NVIC_EnableIRQ+0x30>)
 80062fc:	2101      	movs	r1, #1
 80062fe:	4091      	lsls	r1, r2
 8006300:	000a      	movs	r2, r1
 8006302:	601a      	str	r2, [r3, #0]
  }
}
 8006304:	46c0      	nop			@ (mov r8, r8)
 8006306:	46bd      	mov	sp, r7
 8006308:	b002      	add	sp, #8
 800630a:	bd80      	pop	{r7, pc}
 800630c:	e000e100 	.word	0xe000e100

08006310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006310:	b590      	push	{r4, r7, lr}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	0002      	movs	r2, r0
 8006318:	6039      	str	r1, [r7, #0]
 800631a:	1dfb      	adds	r3, r7, #7
 800631c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800631e:	1dfb      	adds	r3, r7, #7
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b7f      	cmp	r3, #127	@ 0x7f
 8006324:	d828      	bhi.n	8006378 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006326:	4a2f      	ldr	r2, [pc, #188]	@ (80063e4 <__NVIC_SetPriority+0xd4>)
 8006328:	1dfb      	adds	r3, r7, #7
 800632a:	781b      	ldrb	r3, [r3, #0]
 800632c:	b25b      	sxtb	r3, r3
 800632e:	089b      	lsrs	r3, r3, #2
 8006330:	33c0      	adds	r3, #192	@ 0xc0
 8006332:	009b      	lsls	r3, r3, #2
 8006334:	589b      	ldr	r3, [r3, r2]
 8006336:	1dfa      	adds	r2, r7, #7
 8006338:	7812      	ldrb	r2, [r2, #0]
 800633a:	0011      	movs	r1, r2
 800633c:	2203      	movs	r2, #3
 800633e:	400a      	ands	r2, r1
 8006340:	00d2      	lsls	r2, r2, #3
 8006342:	21ff      	movs	r1, #255	@ 0xff
 8006344:	4091      	lsls	r1, r2
 8006346:	000a      	movs	r2, r1
 8006348:	43d2      	mvns	r2, r2
 800634a:	401a      	ands	r2, r3
 800634c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	019b      	lsls	r3, r3, #6
 8006352:	22ff      	movs	r2, #255	@ 0xff
 8006354:	401a      	ands	r2, r3
 8006356:	1dfb      	adds	r3, r7, #7
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	0018      	movs	r0, r3
 800635c:	2303      	movs	r3, #3
 800635e:	4003      	ands	r3, r0
 8006360:	00db      	lsls	r3, r3, #3
 8006362:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006364:	481f      	ldr	r0, [pc, #124]	@ (80063e4 <__NVIC_SetPriority+0xd4>)
 8006366:	1dfb      	adds	r3, r7, #7
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	b25b      	sxtb	r3, r3
 800636c:	089b      	lsrs	r3, r3, #2
 800636e:	430a      	orrs	r2, r1
 8006370:	33c0      	adds	r3, #192	@ 0xc0
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006376:	e031      	b.n	80063dc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006378:	4a1b      	ldr	r2, [pc, #108]	@ (80063e8 <__NVIC_SetPriority+0xd8>)
 800637a:	1dfb      	adds	r3, r7, #7
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	0019      	movs	r1, r3
 8006380:	230f      	movs	r3, #15
 8006382:	400b      	ands	r3, r1
 8006384:	3b08      	subs	r3, #8
 8006386:	089b      	lsrs	r3, r3, #2
 8006388:	3306      	adds	r3, #6
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	18d3      	adds	r3, r2, r3
 800638e:	3304      	adds	r3, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	1dfa      	adds	r2, r7, #7
 8006394:	7812      	ldrb	r2, [r2, #0]
 8006396:	0011      	movs	r1, r2
 8006398:	2203      	movs	r2, #3
 800639a:	400a      	ands	r2, r1
 800639c:	00d2      	lsls	r2, r2, #3
 800639e:	21ff      	movs	r1, #255	@ 0xff
 80063a0:	4091      	lsls	r1, r2
 80063a2:	000a      	movs	r2, r1
 80063a4:	43d2      	mvns	r2, r2
 80063a6:	401a      	ands	r2, r3
 80063a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	019b      	lsls	r3, r3, #6
 80063ae:	22ff      	movs	r2, #255	@ 0xff
 80063b0:	401a      	ands	r2, r3
 80063b2:	1dfb      	adds	r3, r7, #7
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	0018      	movs	r0, r3
 80063b8:	2303      	movs	r3, #3
 80063ba:	4003      	ands	r3, r0
 80063bc:	00db      	lsls	r3, r3, #3
 80063be:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80063c0:	4809      	ldr	r0, [pc, #36]	@ (80063e8 <__NVIC_SetPriority+0xd8>)
 80063c2:	1dfb      	adds	r3, r7, #7
 80063c4:	781b      	ldrb	r3, [r3, #0]
 80063c6:	001c      	movs	r4, r3
 80063c8:	230f      	movs	r3, #15
 80063ca:	4023      	ands	r3, r4
 80063cc:	3b08      	subs	r3, #8
 80063ce:	089b      	lsrs	r3, r3, #2
 80063d0:	430a      	orrs	r2, r1
 80063d2:	3306      	adds	r3, #6
 80063d4:	009b      	lsls	r3, r3, #2
 80063d6:	18c3      	adds	r3, r0, r3
 80063d8:	3304      	adds	r3, #4
 80063da:	601a      	str	r2, [r3, #0]
}
 80063dc:	46c0      	nop			@ (mov r8, r8)
 80063de:	46bd      	mov	sp, r7
 80063e0:	b003      	add	sp, #12
 80063e2:	bd90      	pop	{r4, r7, pc}
 80063e4:	e000e100 	.word	0xe000e100
 80063e8:	e000ed00 	.word	0xe000ed00

080063ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	1e5a      	subs	r2, r3, #1
 80063f8:	2380      	movs	r3, #128	@ 0x80
 80063fa:	045b      	lsls	r3, r3, #17
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d301      	bcc.n	8006404 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006400:	2301      	movs	r3, #1
 8006402:	e010      	b.n	8006426 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006404:	4b0a      	ldr	r3, [pc, #40]	@ (8006430 <SysTick_Config+0x44>)
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	3a01      	subs	r2, #1
 800640a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800640c:	2301      	movs	r3, #1
 800640e:	425b      	negs	r3, r3
 8006410:	2103      	movs	r1, #3
 8006412:	0018      	movs	r0, r3
 8006414:	f7ff ff7c 	bl	8006310 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006418:	4b05      	ldr	r3, [pc, #20]	@ (8006430 <SysTick_Config+0x44>)
 800641a:	2200      	movs	r2, #0
 800641c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800641e:	4b04      	ldr	r3, [pc, #16]	@ (8006430 <SysTick_Config+0x44>)
 8006420:	2207      	movs	r2, #7
 8006422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006424:	2300      	movs	r3, #0
}
 8006426:	0018      	movs	r0, r3
 8006428:	46bd      	mov	sp, r7
 800642a:	b002      	add	sp, #8
 800642c:	bd80      	pop	{r7, pc}
 800642e:	46c0      	nop			@ (mov r8, r8)
 8006430:	e000e010 	.word	0xe000e010

08006434 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b084      	sub	sp, #16
 8006438:	af00      	add	r7, sp, #0
 800643a:	60b9      	str	r1, [r7, #8]
 800643c:	607a      	str	r2, [r7, #4]
 800643e:	210f      	movs	r1, #15
 8006440:	187b      	adds	r3, r7, r1
 8006442:	1c02      	adds	r2, r0, #0
 8006444:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006446:	68ba      	ldr	r2, [r7, #8]
 8006448:	187b      	adds	r3, r7, r1
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b25b      	sxtb	r3, r3
 800644e:	0011      	movs	r1, r2
 8006450:	0018      	movs	r0, r3
 8006452:	f7ff ff5d 	bl	8006310 <__NVIC_SetPriority>

  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
}
 8006456:	46c0      	nop			@ (mov r8, r8)
 8006458:	46bd      	mov	sp, r7
 800645a:	b004      	add	sp, #16
 800645c:	bd80      	pop	{r7, pc}

0800645e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b082      	sub	sp, #8
 8006462:	af00      	add	r7, sp, #0
 8006464:	0002      	movs	r2, r0
 8006466:	1dfb      	adds	r3, r7, #7
 8006468:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800646a:	1dfb      	adds	r3, r7, #7
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	b25b      	sxtb	r3, r3
 8006470:	0018      	movs	r0, r3
 8006472:	f7ff ff33 	bl	80062dc <__NVIC_EnableIRQ>
}
 8006476:	46c0      	nop			@ (mov r8, r8)
 8006478:	46bd      	mov	sp, r7
 800647a:	b002      	add	sp, #8
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b082      	sub	sp, #8
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	0018      	movs	r0, r3
 800648a:	f7ff ffaf 	bl	80063ec <SysTick_Config>
 800648e:	0003      	movs	r3, r0
}
 8006490:	0018      	movs	r0, r3
 8006492:	46bd      	mov	sp, r7
 8006494:	b002      	add	sp, #8
 8006496:	bd80      	pop	{r7, pc}

08006498 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064a0:	210f      	movs	r1, #15
 80064a2:	187b      	adds	r3, r7, r1
 80064a4:	2200      	movs	r2, #0
 80064a6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2221      	movs	r2, #33	@ 0x21
 80064ac:	5c9b      	ldrb	r3, [r3, r2]
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d006      	beq.n	80064c2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2204      	movs	r2, #4
 80064b8:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 80064ba:	187b      	adds	r3, r7, r1
 80064bc:	2201      	movs	r2, #1
 80064be:	701a      	strb	r2, [r3, #0]
 80064c0:	e028      	b.n	8006514 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	210e      	movs	r1, #14
 80064ce:	438a      	bics	r2, r1
 80064d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2101      	movs	r1, #1
 80064de:	438a      	bics	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064ea:	2101      	movs	r1, #1
 80064ec:	4091      	lsls	r1, r2
 80064ee:	000a      	movs	r2, r1
 80064f0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2221      	movs	r2, #33	@ 0x21
 80064f6:	2101      	movs	r1, #1
 80064f8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2220      	movs	r2, #32
 80064fe:	2100      	movs	r1, #0
 8006500:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006506:	2b00      	cmp	r3, #0
 8006508:	d004      	beq.n	8006514 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800650e:	687a      	ldr	r2, [r7, #4]
 8006510:	0010      	movs	r0, r2
 8006512:	4798      	blx	r3
    }
  }
  return status;
 8006514:	230f      	movs	r3, #15
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	781b      	ldrb	r3, [r3, #0]
}
 800651a:	0018      	movs	r0, r3
 800651c:	46bd      	mov	sp, r7
 800651e:	b004      	add	sp, #16
 8006520:	bd80      	pop	{r7, pc}

08006522 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b082      	sub	sp, #8
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2221      	movs	r2, #33	@ 0x21
 800652e:	5c9b      	ldrb	r3, [r3, r2]
 8006530:	b2db      	uxtb	r3, r3
}
 8006532:	0018      	movs	r0, r3
 8006534:	46bd      	mov	sp, r7
 8006536:	b002      	add	sp, #8
 8006538:	bd80      	pop	{r7, pc}
	...

0800653c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800653c:	b580      	push	{r7, lr}
 800653e:	b086      	sub	sp, #24
 8006540:	af00      	add	r7, sp, #0
 8006542:	6078      	str	r0, [r7, #4]
 8006544:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006546:	2300      	movs	r3, #0
 8006548:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800654a:	e155      	b.n	80067f8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2101      	movs	r1, #1
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	4091      	lsls	r1, r2
 8006556:	000a      	movs	r2, r1
 8006558:	4013      	ands	r3, r2
 800655a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d100      	bne.n	8006564 <HAL_GPIO_Init+0x28>
 8006562:	e146      	b.n	80067f2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	2203      	movs	r2, #3
 800656a:	4013      	ands	r3, r2
 800656c:	2b01      	cmp	r3, #1
 800656e:	d005      	beq.n	800657c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2203      	movs	r2, #3
 8006576:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006578:	2b02      	cmp	r3, #2
 800657a:	d130      	bne.n	80065de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	2203      	movs	r2, #3
 8006588:	409a      	lsls	r2, r3
 800658a:	0013      	movs	r3, r2
 800658c:	43da      	mvns	r2, r3
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	4013      	ands	r3, r2
 8006592:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	68da      	ldr	r2, [r3, #12]
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	409a      	lsls	r2, r3
 800659e:	0013      	movs	r3, r2
 80065a0:	693a      	ldr	r2, [r7, #16]
 80065a2:	4313      	orrs	r3, r2
 80065a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	693a      	ldr	r2, [r7, #16]
 80065aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065b2:	2201      	movs	r2, #1
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	409a      	lsls	r2, r3
 80065b8:	0013      	movs	r3, r2
 80065ba:	43da      	mvns	r2, r3
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	4013      	ands	r3, r2
 80065c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	091b      	lsrs	r3, r3, #4
 80065c8:	2201      	movs	r2, #1
 80065ca:	401a      	ands	r2, r3
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	409a      	lsls	r2, r3
 80065d0:	0013      	movs	r3, r2
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	693a      	ldr	r2, [r7, #16]
 80065dc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	2203      	movs	r2, #3
 80065e4:	4013      	ands	r3, r2
 80065e6:	2b03      	cmp	r3, #3
 80065e8:	d017      	beq.n	800661a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	2203      	movs	r2, #3
 80065f6:	409a      	lsls	r2, r3
 80065f8:	0013      	movs	r3, r2
 80065fa:	43da      	mvns	r2, r3
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	4013      	ands	r3, r2
 8006600:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	689a      	ldr	r2, [r3, #8]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	005b      	lsls	r3, r3, #1
 800660a:	409a      	lsls	r2, r3
 800660c:	0013      	movs	r3, r2
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	4313      	orrs	r3, r2
 8006612:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2203      	movs	r2, #3
 8006620:	4013      	ands	r3, r2
 8006622:	2b02      	cmp	r3, #2
 8006624:	d123      	bne.n	800666e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	08da      	lsrs	r2, r3, #3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3208      	adds	r2, #8
 800662e:	0092      	lsls	r2, r2, #2
 8006630:	58d3      	ldr	r3, [r2, r3]
 8006632:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2207      	movs	r2, #7
 8006638:	4013      	ands	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	220f      	movs	r2, #15
 800663e:	409a      	lsls	r2, r3
 8006640:	0013      	movs	r3, r2
 8006642:	43da      	mvns	r2, r3
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	4013      	ands	r3, r2
 8006648:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2107      	movs	r1, #7
 8006652:	400b      	ands	r3, r1
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	409a      	lsls	r2, r3
 8006658:	0013      	movs	r3, r2
 800665a:	693a      	ldr	r2, [r7, #16]
 800665c:	4313      	orrs	r3, r2
 800665e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	08da      	lsrs	r2, r3, #3
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3208      	adds	r2, #8
 8006668:	0092      	lsls	r2, r2, #2
 800666a:	6939      	ldr	r1, [r7, #16]
 800666c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	2203      	movs	r2, #3
 800667a:	409a      	lsls	r2, r3
 800667c:	0013      	movs	r3, r2
 800667e:	43da      	mvns	r2, r3
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	4013      	ands	r3, r2
 8006684:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	685b      	ldr	r3, [r3, #4]
 800668a:	2203      	movs	r2, #3
 800668c:	401a      	ands	r2, r3
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	005b      	lsls	r3, r3, #1
 8006692:	409a      	lsls	r2, r3
 8006694:	0013      	movs	r3, r2
 8006696:	693a      	ldr	r2, [r7, #16]
 8006698:	4313      	orrs	r3, r2
 800669a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	693a      	ldr	r2, [r7, #16]
 80066a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	685a      	ldr	r2, [r3, #4]
 80066a6:	23c0      	movs	r3, #192	@ 0xc0
 80066a8:	029b      	lsls	r3, r3, #10
 80066aa:	4013      	ands	r3, r2
 80066ac:	d100      	bne.n	80066b0 <HAL_GPIO_Init+0x174>
 80066ae:	e0a0      	b.n	80067f2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066b0:	4b57      	ldr	r3, [pc, #348]	@ (8006810 <HAL_GPIO_Init+0x2d4>)
 80066b2:	699a      	ldr	r2, [r3, #24]
 80066b4:	4b56      	ldr	r3, [pc, #344]	@ (8006810 <HAL_GPIO_Init+0x2d4>)
 80066b6:	2101      	movs	r1, #1
 80066b8:	430a      	orrs	r2, r1
 80066ba:	619a      	str	r2, [r3, #24]
 80066bc:	4b54      	ldr	r3, [pc, #336]	@ (8006810 <HAL_GPIO_Init+0x2d4>)
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	2201      	movs	r2, #1
 80066c2:	4013      	ands	r3, r2
 80066c4:	60bb      	str	r3, [r7, #8]
 80066c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80066c8:	4a52      	ldr	r2, [pc, #328]	@ (8006814 <HAL_GPIO_Init+0x2d8>)
 80066ca:	697b      	ldr	r3, [r7, #20]
 80066cc:	089b      	lsrs	r3, r3, #2
 80066ce:	3302      	adds	r3, #2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	589b      	ldr	r3, [r3, r2]
 80066d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	2203      	movs	r2, #3
 80066da:	4013      	ands	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	220f      	movs	r2, #15
 80066e0:	409a      	lsls	r2, r3
 80066e2:	0013      	movs	r3, r2
 80066e4:	43da      	mvns	r2, r3
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4013      	ands	r3, r2
 80066ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80066ec:	687a      	ldr	r2, [r7, #4]
 80066ee:	2390      	movs	r3, #144	@ 0x90
 80066f0:	05db      	lsls	r3, r3, #23
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d019      	beq.n	800672a <HAL_GPIO_Init+0x1ee>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a47      	ldr	r2, [pc, #284]	@ (8006818 <HAL_GPIO_Init+0x2dc>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d013      	beq.n	8006726 <HAL_GPIO_Init+0x1ea>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a46      	ldr	r2, [pc, #280]	@ (800681c <HAL_GPIO_Init+0x2e0>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d00d      	beq.n	8006722 <HAL_GPIO_Init+0x1e6>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a45      	ldr	r2, [pc, #276]	@ (8006820 <HAL_GPIO_Init+0x2e4>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d007      	beq.n	800671e <HAL_GPIO_Init+0x1e2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a44      	ldr	r2, [pc, #272]	@ (8006824 <HAL_GPIO_Init+0x2e8>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d101      	bne.n	800671a <HAL_GPIO_Init+0x1de>
 8006716:	2304      	movs	r3, #4
 8006718:	e008      	b.n	800672c <HAL_GPIO_Init+0x1f0>
 800671a:	2305      	movs	r3, #5
 800671c:	e006      	b.n	800672c <HAL_GPIO_Init+0x1f0>
 800671e:	2303      	movs	r3, #3
 8006720:	e004      	b.n	800672c <HAL_GPIO_Init+0x1f0>
 8006722:	2302      	movs	r3, #2
 8006724:	e002      	b.n	800672c <HAL_GPIO_Init+0x1f0>
 8006726:	2301      	movs	r3, #1
 8006728:	e000      	b.n	800672c <HAL_GPIO_Init+0x1f0>
 800672a:	2300      	movs	r3, #0
 800672c:	697a      	ldr	r2, [r7, #20]
 800672e:	2103      	movs	r1, #3
 8006730:	400a      	ands	r2, r1
 8006732:	0092      	lsls	r2, r2, #2
 8006734:	4093      	lsls	r3, r2
 8006736:	693a      	ldr	r2, [r7, #16]
 8006738:	4313      	orrs	r3, r2
 800673a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800673c:	4935      	ldr	r1, [pc, #212]	@ (8006814 <HAL_GPIO_Init+0x2d8>)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	089b      	lsrs	r3, r3, #2
 8006742:	3302      	adds	r3, #2
 8006744:	009b      	lsls	r3, r3, #2
 8006746:	693a      	ldr	r2, [r7, #16]
 8006748:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800674a:	4b37      	ldr	r3, [pc, #220]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	43da      	mvns	r2, r3
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	4013      	ands	r3, r2
 8006758:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	685a      	ldr	r2, [r3, #4]
 800675e:	2380      	movs	r3, #128	@ 0x80
 8006760:	035b      	lsls	r3, r3, #13
 8006762:	4013      	ands	r3, r2
 8006764:	d003      	beq.n	800676e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4313      	orrs	r3, r2
 800676c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800676e:	4b2e      	ldr	r3, [pc, #184]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006774:	4b2c      	ldr	r3, [pc, #176]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 8006776:	68db      	ldr	r3, [r3, #12]
 8006778:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	43da      	mvns	r2, r3
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	4013      	ands	r3, r2
 8006782:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	685a      	ldr	r2, [r3, #4]
 8006788:	2380      	movs	r3, #128	@ 0x80
 800678a:	039b      	lsls	r3, r3, #14
 800678c:	4013      	ands	r3, r2
 800678e:	d003      	beq.n	8006798 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8006790:	693a      	ldr	r2, [r7, #16]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006798:	4b23      	ldr	r3, [pc, #140]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800679e:	4b22      	ldr	r3, [pc, #136]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	43da      	mvns	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	4013      	ands	r3, r2
 80067ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	685a      	ldr	r2, [r3, #4]
 80067b2:	2380      	movs	r3, #128	@ 0x80
 80067b4:	029b      	lsls	r3, r3, #10
 80067b6:	4013      	ands	r3, r2
 80067b8:	d003      	beq.n	80067c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80067c2:	4b19      	ldr	r3, [pc, #100]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80067c8:	4b17      	ldr	r3, [pc, #92]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	43da      	mvns	r2, r3
 80067d2:	693b      	ldr	r3, [r7, #16]
 80067d4:	4013      	ands	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	685a      	ldr	r2, [r3, #4]
 80067dc:	2380      	movs	r3, #128	@ 0x80
 80067de:	025b      	lsls	r3, r3, #9
 80067e0:	4013      	ands	r3, r2
 80067e2:	d003      	beq.n	80067ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80067ec:	4b0e      	ldr	r3, [pc, #56]	@ (8006828 <HAL_GPIO_Init+0x2ec>)
 80067ee:	693a      	ldr	r2, [r7, #16]
 80067f0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3301      	adds	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	40da      	lsrs	r2, r3
 8006800:	1e13      	subs	r3, r2, #0
 8006802:	d000      	beq.n	8006806 <HAL_GPIO_Init+0x2ca>
 8006804:	e6a2      	b.n	800654c <HAL_GPIO_Init+0x10>
  } 
}
 8006806:	46c0      	nop			@ (mov r8, r8)
 8006808:	46c0      	nop			@ (mov r8, r8)
 800680a:	46bd      	mov	sp, r7
 800680c:	b006      	add	sp, #24
 800680e:	bd80      	pop	{r7, pc}
 8006810:	40021000 	.word	0x40021000
 8006814:	40010000 	.word	0x40010000
 8006818:	48000400 	.word	0x48000400
 800681c:	48000800 	.word	0x48000800
 8006820:	48000c00 	.word	0x48000c00
 8006824:	48001000 	.word	0x48001000
 8006828:	40010400 	.word	0x40010400

0800682c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	000a      	movs	r2, r1
 8006836:	1cbb      	adds	r3, r7, #2
 8006838:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	1cba      	adds	r2, r7, #2
 8006840:	8812      	ldrh	r2, [r2, #0]
 8006842:	4013      	ands	r3, r2
 8006844:	d004      	beq.n	8006850 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8006846:	230f      	movs	r3, #15
 8006848:	18fb      	adds	r3, r7, r3
 800684a:	2201      	movs	r2, #1
 800684c:	701a      	strb	r2, [r3, #0]
 800684e:	e003      	b.n	8006858 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006850:	230f      	movs	r3, #15
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	2200      	movs	r2, #0
 8006856:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8006858:	230f      	movs	r3, #15
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	781b      	ldrb	r3, [r3, #0]
  }
 800685e:	0018      	movs	r0, r3
 8006860:	46bd      	mov	sp, r7
 8006862:	b004      	add	sp, #16
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b082      	sub	sp, #8
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	0008      	movs	r0, r1
 8006870:	0011      	movs	r1, r2
 8006872:	1cbb      	adds	r3, r7, #2
 8006874:	1c02      	adds	r2, r0, #0
 8006876:	801a      	strh	r2, [r3, #0]
 8006878:	1c7b      	adds	r3, r7, #1
 800687a:	1c0a      	adds	r2, r1, #0
 800687c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800687e:	1c7b      	adds	r3, r7, #1
 8006880:	781b      	ldrb	r3, [r3, #0]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d004      	beq.n	8006890 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006886:	1cbb      	adds	r3, r7, #2
 8006888:	881a      	ldrh	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800688e:	e003      	b.n	8006898 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006890:	1cbb      	adds	r3, r7, #2
 8006892:	881a      	ldrh	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8006898:	46c0      	nop			@ (mov r8, r8)
 800689a:	46bd      	mov	sp, r7
 800689c:	b002      	add	sp, #8
 800689e:	bd80      	pop	{r7, pc}

080068a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b082      	sub	sp, #8
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	0002      	movs	r2, r0
 80068a8:	1dbb      	adds	r3, r7, #6
 80068aa:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80068ac:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80068ae:	695b      	ldr	r3, [r3, #20]
 80068b0:	1dba      	adds	r2, r7, #6
 80068b2:	8812      	ldrh	r2, [r2, #0]
 80068b4:	4013      	ands	r3, r2
 80068b6:	d008      	beq.n	80068ca <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80068b8:	4b06      	ldr	r3, [pc, #24]	@ (80068d4 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80068ba:	1dba      	adds	r2, r7, #6
 80068bc:	8812      	ldrh	r2, [r2, #0]
 80068be:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80068c0:	1dbb      	adds	r3, r7, #6
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	0018      	movs	r0, r3
 80068c6:	f7fe f967 	bl	8004b98 <HAL_GPIO_EXTI_Callback>
  }
}
 80068ca:	46c0      	nop			@ (mov r8, r8)
 80068cc:	46bd      	mov	sp, r7
 80068ce:	b002      	add	sp, #8
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	40010400 	.word	0x40010400

080068d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d101      	bne.n	80068ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e08f      	b.n	8006a0a <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2241      	movs	r2, #65	@ 0x41
 80068ee:	5c9b      	ldrb	r3, [r3, r2]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d107      	bne.n	8006906 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2240      	movs	r2, #64	@ 0x40
 80068fa:	2100      	movs	r1, #0
 80068fc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	0018      	movs	r0, r3
 8006902:	f7fe fe37 	bl	8005574 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2241      	movs	r2, #65	@ 0x41
 800690a:	2124      	movs	r1, #36	@ 0x24
 800690c:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2101      	movs	r1, #1
 800691a:	438a      	bics	r2, r1
 800691c:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	493b      	ldr	r1, [pc, #236]	@ (8006a14 <HAL_I2C_Init+0x13c>)
 8006928:	400a      	ands	r2, r1
 800692a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689a      	ldr	r2, [r3, #8]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4938      	ldr	r1, [pc, #224]	@ (8006a18 <HAL_I2C_Init+0x140>)
 8006938:	400a      	ands	r2, r1
 800693a:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d108      	bne.n	8006956 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	689a      	ldr	r2, [r3, #8]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2180      	movs	r1, #128	@ 0x80
 800694e:	0209      	lsls	r1, r1, #8
 8006950:	430a      	orrs	r2, r1
 8006952:	609a      	str	r2, [r3, #8]
 8006954:	e007      	b.n	8006966 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2184      	movs	r1, #132	@ 0x84
 8006960:	0209      	lsls	r1, r1, #8
 8006962:	430a      	orrs	r2, r1
 8006964:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68db      	ldr	r3, [r3, #12]
 800696a:	2b02      	cmp	r3, #2
 800696c:	d109      	bne.n	8006982 <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2180      	movs	r1, #128	@ 0x80
 800697a:	0109      	lsls	r1, r1, #4
 800697c:	430a      	orrs	r2, r1
 800697e:	605a      	str	r2, [r3, #4]
 8006980:	e007      	b.n	8006992 <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	4923      	ldr	r1, [pc, #140]	@ (8006a1c <HAL_I2C_Init+0x144>)
 800698e:	400a      	ands	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685a      	ldr	r2, [r3, #4]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4920      	ldr	r1, [pc, #128]	@ (8006a20 <HAL_I2C_Init+0x148>)
 800699e:	430a      	orrs	r2, r1
 80069a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	68da      	ldr	r2, [r3, #12]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	491a      	ldr	r1, [pc, #104]	@ (8006a18 <HAL_I2C_Init+0x140>)
 80069ae:	400a      	ands	r2, r1
 80069b0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	691a      	ldr	r2, [r3, #16]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	430a      	orrs	r2, r1
 80069ca:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	69d9      	ldr	r1, [r3, #28]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a1a      	ldr	r2, [r3, #32]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	430a      	orrs	r2, r1
 80069da:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	681a      	ldr	r2, [r3, #0]
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2101      	movs	r1, #1
 80069e8:	430a      	orrs	r2, r1
 80069ea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2200      	movs	r2, #0
 80069f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2241      	movs	r2, #65	@ 0x41
 80069f6:	2120      	movs	r1, #32
 80069f8:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2242      	movs	r2, #66	@ 0x42
 8006a04:	2100      	movs	r1, #0
 8006a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006a08:	2300      	movs	r3, #0
}
 8006a0a:	0018      	movs	r0, r3
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	b002      	add	sp, #8
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	46c0      	nop			@ (mov r8, r8)
 8006a14:	f0ffffff 	.word	0xf0ffffff
 8006a18:	ffff7fff 	.word	0xffff7fff
 8006a1c:	fffff7ff 	.word	0xfffff7ff
 8006a20:	02008000 	.word	0x02008000

08006a24 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006a24:	b590      	push	{r4, r7, lr}
 8006a26:	b089      	sub	sp, #36	@ 0x24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	0008      	movs	r0, r1
 8006a2e:	607a      	str	r2, [r7, #4]
 8006a30:	0019      	movs	r1, r3
 8006a32:	230a      	movs	r3, #10
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	1c02      	adds	r2, r0, #0
 8006a38:	801a      	strh	r2, [r3, #0]
 8006a3a:	2308      	movs	r3, #8
 8006a3c:	18fb      	adds	r3, r7, r3
 8006a3e:	1c0a      	adds	r2, r1, #0
 8006a40:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2241      	movs	r2, #65	@ 0x41
 8006a46:	5c9b      	ldrb	r3, [r3, r2]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	2b20      	cmp	r3, #32
 8006a4c:	d000      	beq.n	8006a50 <HAL_I2C_Master_Transmit+0x2c>
 8006a4e:	e10a      	b.n	8006c66 <HAL_I2C_Master_Transmit+0x242>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	2240      	movs	r2, #64	@ 0x40
 8006a54:	5c9b      	ldrb	r3, [r3, r2]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d101      	bne.n	8006a5e <HAL_I2C_Master_Transmit+0x3a>
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e104      	b.n	8006c68 <HAL_I2C_Master_Transmit+0x244>
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	2240      	movs	r2, #64	@ 0x40
 8006a62:	2101      	movs	r1, #1
 8006a64:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a66:	f7ff f841 	bl	8005aec <HAL_GetTick>
 8006a6a:	0003      	movs	r3, r0
 8006a6c:	613b      	str	r3, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a6e:	2380      	movs	r3, #128	@ 0x80
 8006a70:	0219      	lsls	r1, r3, #8
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2319      	movs	r3, #25
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f001 f804 	bl	8007a88 <I2C_WaitOnFlagUntilTimeout>
 8006a80:	1e03      	subs	r3, r0, #0
 8006a82:	d001      	beq.n	8006a88 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e0ef      	b.n	8006c68 <HAL_I2C_Master_Transmit+0x244>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2241      	movs	r2, #65	@ 0x41
 8006a8c:	2121      	movs	r1, #33	@ 0x21
 8006a8e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2242      	movs	r2, #66	@ 0x42
 8006a94:	2110      	movs	r1, #16
 8006a96:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2200      	movs	r2, #0
 8006a9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	2208      	movs	r2, #8
 8006aa8:	18ba      	adds	r2, r7, r2
 8006aaa:	8812      	ldrh	r2, [r2, #0]
 8006aac:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	2bff      	cmp	r3, #255	@ 0xff
 8006abc:	d906      	bls.n	8006acc <HAL_I2C_Master_Transmit+0xa8>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	22ff      	movs	r2, #255	@ 0xff
 8006ac2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8006ac4:	2380      	movs	r3, #128	@ 0x80
 8006ac6:	045b      	lsls	r3, r3, #17
 8006ac8:	617b      	str	r3, [r7, #20]
 8006aca:	e007      	b.n	8006adc <HAL_I2C_Master_Transmit+0xb8>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006ad6:	2380      	movs	r3, #128	@ 0x80
 8006ad8:	049b      	lsls	r3, r3, #18
 8006ada:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d027      	beq.n	8006b34 <HAL_I2C_Master_Transmit+0x110>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae8:	781a      	ldrb	r2, [r3, #0]
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af4:	1c5a      	adds	r2, r3, #1
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006afe:	b29b      	uxth	r3, r3
 8006b00:	3b01      	subs	r3, #1
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	3301      	adds	r3, #1
 8006b1c:	b2da      	uxtb	r2, r3
 8006b1e:	697c      	ldr	r4, [r7, #20]
 8006b20:	230a      	movs	r3, #10
 8006b22:	18fb      	adds	r3, r7, r3
 8006b24:	8819      	ldrh	r1, [r3, #0]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	4b51      	ldr	r3, [pc, #324]	@ (8006c70 <HAL_I2C_Master_Transmit+0x24c>)
 8006b2a:	9300      	str	r3, [sp, #0]
 8006b2c:	0023      	movs	r3, r4
 8006b2e:	f001 fa23 	bl	8007f78 <I2C_TransferConfig>
 8006b32:	e06f      	b.n	8006c14 <HAL_I2C_Master_Transmit+0x1f0>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b38:	b2da      	uxtb	r2, r3
 8006b3a:	697c      	ldr	r4, [r7, #20]
 8006b3c:	230a      	movs	r3, #10
 8006b3e:	18fb      	adds	r3, r7, r3
 8006b40:	8819      	ldrh	r1, [r3, #0]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	4b4a      	ldr	r3, [pc, #296]	@ (8006c70 <HAL_I2C_Master_Transmit+0x24c>)
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	0023      	movs	r3, r4
 8006b4a:	f001 fa15 	bl	8007f78 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006b4e:	e061      	b.n	8006c14 <HAL_I2C_Master_Transmit+0x1f0>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b50:	693a      	ldr	r2, [r7, #16]
 8006b52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	0018      	movs	r0, r3
 8006b58:	f000 ffee 	bl	8007b38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b5c:	1e03      	subs	r3, r0, #0
 8006b5e:	d001      	beq.n	8006b64 <HAL_I2C_Master_Transmit+0x140>
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e081      	b.n	8006c68 <HAL_I2C_Master_Transmit+0x244>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b68:	781a      	ldrb	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	b29a      	uxth	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d03a      	beq.n	8006c14 <HAL_I2C_Master_Transmit+0x1f0>
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d136      	bne.n	8006c14 <HAL_I2C_Master_Transmit+0x1f0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006ba8:	68f8      	ldr	r0, [r7, #12]
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	9300      	str	r3, [sp, #0]
 8006bae:	0013      	movs	r3, r2
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2180      	movs	r1, #128	@ 0x80
 8006bb4:	f000 ff68 	bl	8007a88 <I2C_WaitOnFlagUntilTimeout>
 8006bb8:	1e03      	subs	r3, r0, #0
 8006bba:	d001      	beq.n	8006bc0 <HAL_I2C_Master_Transmit+0x19c>
        {
          return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e053      	b.n	8006c68 <HAL_I2C_Master_Transmit+0x244>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bc4:	b29b      	uxth	r3, r3
 8006bc6:	2bff      	cmp	r3, #255	@ 0xff
 8006bc8:	d911      	bls.n	8006bee <HAL_I2C_Master_Transmit+0x1ca>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	22ff      	movs	r2, #255	@ 0xff
 8006bce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bd4:	b2da      	uxtb	r2, r3
 8006bd6:	2380      	movs	r3, #128	@ 0x80
 8006bd8:	045c      	lsls	r4, r3, #17
 8006bda:	230a      	movs	r3, #10
 8006bdc:	18fb      	adds	r3, r7, r3
 8006bde:	8819      	ldrh	r1, [r3, #0]
 8006be0:	68f8      	ldr	r0, [r7, #12]
 8006be2:	2300      	movs	r3, #0
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	0023      	movs	r3, r4
 8006be8:	f001 f9c6 	bl	8007f78 <I2C_TransferConfig>
 8006bec:	e012      	b.n	8006c14 <HAL_I2C_Master_Transmit+0x1f0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006bf2:	b29a      	uxth	r2, r3
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006bfc:	b2da      	uxtb	r2, r3
 8006bfe:	2380      	movs	r3, #128	@ 0x80
 8006c00:	049c      	lsls	r4, r3, #18
 8006c02:	230a      	movs	r3, #10
 8006c04:	18fb      	adds	r3, r7, r3
 8006c06:	8819      	ldrh	r1, [r3, #0]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	9300      	str	r3, [sp, #0]
 8006c0e:	0023      	movs	r3, r4
 8006c10:	f001 f9b2 	bl	8007f78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006c18:	b29b      	uxth	r3, r3
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d198      	bne.n	8006b50 <HAL_I2C_Master_Transmit+0x12c>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	0018      	movs	r0, r3
 8006c26:	f000 ffcd 	bl	8007bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006c2a:	1e03      	subs	r3, r0, #0
 8006c2c:	d001      	beq.n	8006c32 <HAL_I2C_Master_Transmit+0x20e>
    {
      return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e01a      	b.n	8006c68 <HAL_I2C_Master_Transmit+0x244>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2220      	movs	r2, #32
 8006c38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	490b      	ldr	r1, [pc, #44]	@ (8006c74 <HAL_I2C_Master_Transmit+0x250>)
 8006c46:	400a      	ands	r2, r1
 8006c48:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2241      	movs	r2, #65	@ 0x41
 8006c4e:	2120      	movs	r1, #32
 8006c50:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2242      	movs	r2, #66	@ 0x42
 8006c56:	2100      	movs	r1, #0
 8006c58:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2240      	movs	r2, #64	@ 0x40
 8006c5e:	2100      	movs	r1, #0
 8006c60:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006c62:	2300      	movs	r3, #0
 8006c64:	e000      	b.n	8006c68 <HAL_I2C_Master_Transmit+0x244>
  }
  else
  {
    return HAL_BUSY;
 8006c66:	2302      	movs	r3, #2
  }
}
 8006c68:	0018      	movs	r0, r3
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	b007      	add	sp, #28
 8006c6e:	bd90      	pop	{r4, r7, pc}
 8006c70:	80002000 	.word	0x80002000
 8006c74:	fe00e800 	.word	0xfe00e800

08006c78 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8006c78:	b590      	push	{r4, r7, lr}
 8006c7a:	b089      	sub	sp, #36	@ 0x24
 8006c7c:	af02      	add	r7, sp, #8
 8006c7e:	60f8      	str	r0, [r7, #12]
 8006c80:	0008      	movs	r0, r1
 8006c82:	607a      	str	r2, [r7, #4]
 8006c84:	0019      	movs	r1, r3
 8006c86:	230a      	movs	r3, #10
 8006c88:	18fb      	adds	r3, r7, r3
 8006c8a:	1c02      	adds	r2, r0, #0
 8006c8c:	801a      	strh	r2, [r3, #0]
 8006c8e:	2308      	movs	r3, #8
 8006c90:	18fb      	adds	r3, r7, r3
 8006c92:	1c0a      	adds	r2, r1, #0
 8006c94:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2241      	movs	r2, #65	@ 0x41
 8006c9a:	5c9b      	ldrb	r3, [r3, r2]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	2b20      	cmp	r3, #32
 8006ca0:	d000      	beq.n	8006ca4 <HAL_I2C_Master_Receive+0x2c>
 8006ca2:	e0e8      	b.n	8006e76 <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2240      	movs	r2, #64	@ 0x40
 8006ca8:	5c9b      	ldrb	r3, [r3, r2]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d101      	bne.n	8006cb2 <HAL_I2C_Master_Receive+0x3a>
 8006cae:	2302      	movs	r3, #2
 8006cb0:	e0e2      	b.n	8006e78 <HAL_I2C_Master_Receive+0x200>
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2240      	movs	r2, #64	@ 0x40
 8006cb6:	2101      	movs	r1, #1
 8006cb8:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006cba:	f7fe ff17 	bl	8005aec <HAL_GetTick>
 8006cbe:	0003      	movs	r3, r0
 8006cc0:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006cc2:	2380      	movs	r3, #128	@ 0x80
 8006cc4:	0219      	lsls	r1, r3, #8
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	697b      	ldr	r3, [r7, #20]
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	2319      	movs	r3, #25
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f000 feda 	bl	8007a88 <I2C_WaitOnFlagUntilTimeout>
 8006cd4:	1e03      	subs	r3, r0, #0
 8006cd6:	d001      	beq.n	8006cdc <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0cd      	b.n	8006e78 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2241      	movs	r2, #65	@ 0x41
 8006ce0:	2122      	movs	r1, #34	@ 0x22
 8006ce2:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2242      	movs	r2, #66	@ 0x42
 8006ce8:	2110      	movs	r1, #16
 8006cea:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2208      	movs	r2, #8
 8006cfc:	18ba      	adds	r2, r7, r2
 8006cfe:	8812      	ldrh	r2, [r2, #0]
 8006d00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d0c:	b29b      	uxth	r3, r3
 8006d0e:	2bff      	cmp	r3, #255	@ 0xff
 8006d10:	d911      	bls.n	8006d36 <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = 1U;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	2380      	movs	r3, #128	@ 0x80
 8006d20:	045c      	lsls	r4, r3, #17
 8006d22:	230a      	movs	r3, #10
 8006d24:	18fb      	adds	r3, r7, r3
 8006d26:	8819      	ldrh	r1, [r3, #0]
 8006d28:	68f8      	ldr	r0, [r7, #12]
 8006d2a:	4b55      	ldr	r3, [pc, #340]	@ (8006e80 <HAL_I2C_Master_Receive+0x208>)
 8006d2c:	9300      	str	r3, [sp, #0]
 8006d2e:	0023      	movs	r3, r4
 8006d30:	f001 f922 	bl	8007f78 <I2C_TransferConfig>
 8006d34:	e076      	b.n	8006e24 <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d44:	b2da      	uxtb	r2, r3
 8006d46:	2380      	movs	r3, #128	@ 0x80
 8006d48:	049c      	lsls	r4, r3, #18
 8006d4a:	230a      	movs	r3, #10
 8006d4c:	18fb      	adds	r3, r7, r3
 8006d4e:	8819      	ldrh	r1, [r3, #0]
 8006d50:	68f8      	ldr	r0, [r7, #12]
 8006d52:	4b4b      	ldr	r3, [pc, #300]	@ (8006e80 <HAL_I2C_Master_Receive+0x208>)
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	0023      	movs	r3, r4
 8006d58:	f001 f90e 	bl	8007f78 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8006d5c:	e062      	b.n	8006e24 <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	0018      	movs	r0, r3
 8006d66:	f000 ff71 	bl	8007c4c <I2C_WaitOnRXNEFlagUntilTimeout>
 8006d6a:	1e03      	subs	r3, r0, #0
 8006d6c:	d001      	beq.n	8006d72 <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e082      	b.n	8006e78 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	b2d2      	uxtb	r2, r2
 8006d7e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d84:	1c5a      	adds	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006d8e:	3b01      	subs	r3, #1
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	3b01      	subs	r3, #1
 8006d9e:	b29a      	uxth	r2, r3
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d03a      	beq.n	8006e24 <HAL_I2C_Master_Receive+0x1ac>
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d136      	bne.n	8006e24 <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006db6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	697b      	ldr	r3, [r7, #20]
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	0013      	movs	r3, r2
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	2180      	movs	r1, #128	@ 0x80
 8006dc4:	f000 fe60 	bl	8007a88 <I2C_WaitOnFlagUntilTimeout>
 8006dc8:	1e03      	subs	r3, r0, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e053      	b.n	8006e78 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006dd4:	b29b      	uxth	r3, r3
 8006dd6:	2bff      	cmp	r3, #255	@ 0xff
 8006dd8:	d911      	bls.n	8006dfe <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	22ff      	movs	r2, #255	@ 0xff
 8006dde:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006de4:	b2da      	uxtb	r2, r3
 8006de6:	2380      	movs	r3, #128	@ 0x80
 8006de8:	045c      	lsls	r4, r3, #17
 8006dea:	230a      	movs	r3, #10
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	8819      	ldrh	r1, [r3, #0]
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	2300      	movs	r3, #0
 8006df4:	9300      	str	r3, [sp, #0]
 8006df6:	0023      	movs	r3, r4
 8006df8:	f001 f8be 	bl	8007f78 <I2C_TransferConfig>
 8006dfc:	e012      	b.n	8006e24 <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e02:	b29a      	uxth	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006e0c:	b2da      	uxtb	r2, r3
 8006e0e:	2380      	movs	r3, #128	@ 0x80
 8006e10:	049c      	lsls	r4, r3, #18
 8006e12:	230a      	movs	r3, #10
 8006e14:	18fb      	adds	r3, r7, r3
 8006e16:	8819      	ldrh	r1, [r3, #0]
 8006e18:	68f8      	ldr	r0, [r7, #12]
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	0023      	movs	r3, r4
 8006e20:	f001 f8aa 	bl	8007f78 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d197      	bne.n	8006d5e <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f000 fec5 	bl	8007bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006e3a:	1e03      	subs	r3, r0, #0
 8006e3c:	d001      	beq.n	8006e42 <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e01a      	b.n	8006e78 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	2220      	movs	r2, #32
 8006e48:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	490b      	ldr	r1, [pc, #44]	@ (8006e84 <HAL_I2C_Master_Receive+0x20c>)
 8006e56:	400a      	ands	r2, r1
 8006e58:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	2241      	movs	r2, #65	@ 0x41
 8006e5e:	2120      	movs	r1, #32
 8006e60:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2242      	movs	r2, #66	@ 0x42
 8006e66:	2100      	movs	r1, #0
 8006e68:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2240      	movs	r2, #64	@ 0x40
 8006e6e:	2100      	movs	r1, #0
 8006e70:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8006e72:	2300      	movs	r3, #0
 8006e74:	e000      	b.n	8006e78 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 8006e76:	2302      	movs	r3, #2
  }
}
 8006e78:	0018      	movs	r0, r3
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	b007      	add	sp, #28
 8006e7e:	bd90      	pop	{r4, r7, pc}
 8006e80:	80002400 	.word	0x80002400
 8006e84:	fe00e800 	.word	0xfe00e800

08006e88 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	699b      	ldr	r3, [r3, #24]
 8006e96:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d005      	beq.n	8006eb4 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	68f9      	ldr	r1, [r7, #12]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	4798      	blx	r3
  }
}
 8006eb4:	46c0      	nop			@ (mov r8, r8)
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	b004      	add	sp, #16
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699b      	ldr	r3, [r3, #24]
 8006eca:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	2380      	movs	r3, #128	@ 0x80
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	4013      	ands	r3, r2
 8006edc:	d00e      	beq.n	8006efc <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	2280      	movs	r2, #128	@ 0x80
 8006ee2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006ee4:	d00a      	beq.n	8006efc <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006eea:	2201      	movs	r2, #1
 8006eec:	431a      	orrs	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	2280      	movs	r2, #128	@ 0x80
 8006ef8:	0052      	lsls	r2, r2, #1
 8006efa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	2380      	movs	r3, #128	@ 0x80
 8006f00:	00db      	lsls	r3, r3, #3
 8006f02:	4013      	ands	r3, r2
 8006f04:	d00e      	beq.n	8006f24 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	2280      	movs	r2, #128	@ 0x80
 8006f0a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006f0c:	d00a      	beq.n	8006f24 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f12:	2208      	movs	r2, #8
 8006f14:	431a      	orrs	r2, r3
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2280      	movs	r2, #128	@ 0x80
 8006f20:	00d2      	lsls	r2, r2, #3
 8006f22:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006f24:	697a      	ldr	r2, [r7, #20]
 8006f26:	2380      	movs	r3, #128	@ 0x80
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	d00e      	beq.n	8006f4c <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	2280      	movs	r2, #128	@ 0x80
 8006f32:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006f34:	d00a      	beq.n	8006f4c <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f3a:	2202      	movs	r2, #2
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	2280      	movs	r2, #128	@ 0x80
 8006f48:	0092      	lsls	r2, r2, #2
 8006f4a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f50:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	220b      	movs	r2, #11
 8006f56:	4013      	ands	r3, r2
 8006f58:	d005      	beq.n	8006f66 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	0011      	movs	r1, r2
 8006f60:	0018      	movs	r0, r3
 8006f62:	f000 fc25 	bl	80077b0 <I2C_ITError>
  }
}
 8006f66:	46c0      	nop			@ (mov r8, r8)
 8006f68:	46bd      	mov	sp, r7
 8006f6a:	b006      	add	sp, #24
 8006f6c:	bd80      	pop	{r7, pc}

08006f6e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f6e:	b580      	push	{r7, lr}
 8006f70:	b082      	sub	sp, #8
 8006f72:	af00      	add	r7, sp, #0
 8006f74:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006f76:	46c0      	nop			@ (mov r8, r8)
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	b002      	add	sp, #8
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b082      	sub	sp, #8
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006f86:	46c0      	nop			@ (mov r8, r8)
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	b002      	add	sp, #8
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b082      	sub	sp, #8
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	0008      	movs	r0, r1
 8006f98:	0011      	movs	r1, r2
 8006f9a:	1cfb      	adds	r3, r7, #3
 8006f9c:	1c02      	adds	r2, r0, #0
 8006f9e:	701a      	strb	r2, [r3, #0]
 8006fa0:	003b      	movs	r3, r7
 8006fa2:	1c0a      	adds	r2, r1, #0
 8006fa4:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006fa6:	46c0      	nop			@ (mov r8, r8)
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	b002      	add	sp, #8
 8006fac:	bd80      	pop	{r7, pc}

08006fae <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fae:	b580      	push	{r7, lr}
 8006fb0:	b082      	sub	sp, #8
 8006fb2:	af00      	add	r7, sp, #0
 8006fb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006fb6:	46c0      	nop			@ (mov r8, r8)
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	b002      	add	sp, #8
 8006fbc:	bd80      	pop	{r7, pc}

08006fbe <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b082      	sub	sp, #8
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006fc6:	46c0      	nop			@ (mov r8, r8)
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	b002      	add	sp, #8
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006fd6:	46c0      	nop			@ (mov r8, r8)
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	b002      	add	sp, #8
 8006fdc:	bd80      	pop	{r7, pc}
	...

08006fe0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b086      	sub	sp, #24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ff0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
 8006ff4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2240      	movs	r2, #64	@ 0x40
 8006ffa:	5c9b      	ldrb	r3, [r3, r2]
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d101      	bne.n	8007004 <I2C_Slave_ISR_IT+0x24>
 8007000:	2302      	movs	r3, #2
 8007002:	e0e7      	b.n	80071d4 <I2C_Slave_ISR_IT+0x1f4>
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2240      	movs	r2, #64	@ 0x40
 8007008:	2101      	movs	r1, #1
 800700a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2220      	movs	r2, #32
 8007010:	4013      	ands	r3, r2
 8007012:	d00a      	beq.n	800702a <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2220      	movs	r2, #32
 8007018:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800701a:	d006      	beq.n	800702a <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800701c:	693a      	ldr	r2, [r7, #16]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	0011      	movs	r1, r2
 8007022:	0018      	movs	r0, r3
 8007024:	f000 f9e4 	bl	80073f0 <I2C_ITSlaveCplt>
 8007028:	e0cf      	b.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	2210      	movs	r2, #16
 800702e:	4013      	ands	r3, r2
 8007030:	d052      	beq.n	80070d8 <I2C_Slave_ISR_IT+0xf8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2210      	movs	r2, #16
 8007036:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007038:	d04e      	beq.n	80070d8 <I2C_Slave_ISR_IT+0xf8>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800703e:	b29b      	uxth	r3, r3
 8007040:	2b00      	cmp	r3, #0
 8007042:	d12d      	bne.n	80070a0 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2241      	movs	r2, #65	@ 0x41
 8007048:	5c9b      	ldrb	r3, [r3, r2]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	2b28      	cmp	r3, #40	@ 0x28
 800704e:	d10b      	bne.n	8007068 <I2C_Slave_ISR_IT+0x88>
 8007050:	697a      	ldr	r2, [r7, #20]
 8007052:	2380      	movs	r3, #128	@ 0x80
 8007054:	049b      	lsls	r3, r3, #18
 8007056:	429a      	cmp	r2, r3
 8007058:	d106      	bne.n	8007068 <I2C_Slave_ISR_IT+0x88>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	0011      	movs	r1, r2
 8007060:	0018      	movs	r0, r3
 8007062:	f000 fb4d 	bl	8007700 <I2C_ITListenCplt>
 8007066:	e036      	b.n	80070d6 <I2C_Slave_ISR_IT+0xf6>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2241      	movs	r2, #65	@ 0x41
 800706c:	5c9b      	ldrb	r3, [r3, r2]
 800706e:	b2db      	uxtb	r3, r3
 8007070:	2b29      	cmp	r3, #41	@ 0x29
 8007072:	d110      	bne.n	8007096 <I2C_Slave_ISR_IT+0xb6>
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	4a59      	ldr	r2, [pc, #356]	@ (80071dc <I2C_Slave_ISR_IT+0x1fc>)
 8007078:	4293      	cmp	r3, r2
 800707a:	d00c      	beq.n	8007096 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	2210      	movs	r2, #16
 8007082:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	0018      	movs	r0, r3
 8007088:	f000 fcbd 	bl	8007a06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	0018      	movs	r0, r3
 8007090:	f000 f94a 	bl	8007328 <I2C_ITSlaveSeqCplt>
 8007094:	e01f      	b.n	80070d6 <I2C_Slave_ISR_IT+0xf6>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2210      	movs	r2, #16
 800709c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800709e:	e091      	b.n	80071c4 <I2C_Slave_ISR_IT+0x1e4>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2210      	movs	r2, #16
 80070a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80070ac:	2204      	movs	r2, #4
 80070ae:	431a      	orrs	r2, r3
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d005      	beq.n	80070c6 <I2C_Slave_ISR_IT+0xe6>
 80070ba:	697a      	ldr	r2, [r7, #20]
 80070bc:	2380      	movs	r3, #128	@ 0x80
 80070be:	045b      	lsls	r3, r3, #17
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d000      	beq.n	80070c6 <I2C_Slave_ISR_IT+0xe6>
 80070c4:	e07e      	b.n	80071c4 <I2C_Slave_ISR_IT+0x1e4>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	0011      	movs	r1, r2
 80070ce:	0018      	movs	r0, r3
 80070d0:	f000 fb6e 	bl	80077b0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80070d4:	e076      	b.n	80071c4 <I2C_Slave_ISR_IT+0x1e4>
 80070d6:	e075      	b.n	80071c4 <I2C_Slave_ISR_IT+0x1e4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	2204      	movs	r2, #4
 80070dc:	4013      	ands	r3, r2
 80070de:	d02f      	beq.n	8007140 <I2C_Slave_ISR_IT+0x160>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2204      	movs	r2, #4
 80070e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80070e6:	d02b      	beq.n	8007140 <I2C_Slave_ISR_IT+0x160>
  {
    if (hi2c->XferCount > 0U)
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80070ec:	b29b      	uxth	r3, r3
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d018      	beq.n	8007124 <I2C_Slave_ISR_IT+0x144>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800710e:	3b01      	subs	r3, #1
 8007110:	b29a      	uxth	r2, r3
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007128:	b29b      	uxth	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d14c      	bne.n	80071c8 <I2C_Slave_ISR_IT+0x1e8>
 800712e:	697b      	ldr	r3, [r7, #20]
 8007130:	4a2a      	ldr	r2, [pc, #168]	@ (80071dc <I2C_Slave_ISR_IT+0x1fc>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d048      	beq.n	80071c8 <I2C_Slave_ISR_IT+0x1e8>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	0018      	movs	r0, r3
 800713a:	f000 f8f5 	bl	8007328 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800713e:	e043      	b.n	80071c8 <I2C_Slave_ISR_IT+0x1e8>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	2208      	movs	r2, #8
 8007144:	4013      	ands	r3, r2
 8007146:	d00a      	beq.n	800715e <I2C_Slave_ISR_IT+0x17e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2208      	movs	r2, #8
 800714c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800714e:	d006      	beq.n	800715e <I2C_Slave_ISR_IT+0x17e>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007150:	693a      	ldr	r2, [r7, #16]
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	0011      	movs	r1, r2
 8007156:	0018      	movs	r0, r3
 8007158:	f000 f842 	bl	80071e0 <I2C_ITAddrCplt>
 800715c:	e035      	b.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2202      	movs	r2, #2
 8007162:	4013      	ands	r3, r2
 8007164:	d031      	beq.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2202      	movs	r2, #2
 800716a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800716c:	d02d      	beq.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	2b00      	cmp	r3, #0
 8007176:	d018      	beq.n	80071aa <I2C_Slave_ISR_IT+0x1ca>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800717c:	781a      	ldrb	r2, [r3, #0]
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007192:	b29b      	uxth	r3, r3
 8007194:	3b01      	subs	r3, #1
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80071a0:	3b01      	subs	r3, #1
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	851a      	strh	r2, [r3, #40]	@ 0x28
 80071a8:	e00f      	b.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	2380      	movs	r3, #128	@ 0x80
 80071ae:	045b      	lsls	r3, r3, #17
 80071b0:	429a      	cmp	r2, r3
 80071b2:	d002      	beq.n	80071ba <I2C_Slave_ISR_IT+0x1da>
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d107      	bne.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	0018      	movs	r0, r3
 80071be:	f000 f8b3 	bl	8007328 <I2C_ITSlaveSeqCplt>
 80071c2:	e002      	b.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
    if (hi2c->XferCount == 0U)
 80071c4:	46c0      	nop			@ (mov r8, r8)
 80071c6:	e000      	b.n	80071ca <I2C_Slave_ISR_IT+0x1ea>
    if ((hi2c->XferCount == 0U) && \
 80071c8:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2240      	movs	r2, #64	@ 0x40
 80071ce:	2100      	movs	r1, #0
 80071d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80071d2:	2300      	movs	r3, #0
}
 80071d4:	0018      	movs	r0, r3
 80071d6:	46bd      	mov	sp, r7
 80071d8:	b006      	add	sp, #24
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	ffff0000 	.word	0xffff0000

080071e0 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80071e0:	b5b0      	push	{r4, r5, r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2241      	movs	r2, #65	@ 0x41
 80071ee:	5c9b      	ldrb	r3, [r3, r2]
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	001a      	movs	r2, r3
 80071f4:	2328      	movs	r3, #40	@ 0x28
 80071f6:	4013      	ands	r3, r2
 80071f8:	2b28      	cmp	r3, #40	@ 0x28
 80071fa:	d000      	beq.n	80071fe <I2C_ITAddrCplt+0x1e>
 80071fc:	e088      	b.n	8007310 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	0c1b      	lsrs	r3, r3, #16
 8007206:	b2da      	uxtb	r2, r3
 8007208:	250f      	movs	r5, #15
 800720a:	197b      	adds	r3, r7, r5
 800720c:	2101      	movs	r1, #1
 800720e:	400a      	ands	r2, r1
 8007210:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	0c1b      	lsrs	r3, r3, #16
 800721a:	b29a      	uxth	r2, r3
 800721c:	200c      	movs	r0, #12
 800721e:	183b      	adds	r3, r7, r0
 8007220:	21fe      	movs	r1, #254	@ 0xfe
 8007222:	400a      	ands	r2, r1
 8007224:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689b      	ldr	r3, [r3, #8]
 800722c:	b29a      	uxth	r2, r3
 800722e:	240a      	movs	r4, #10
 8007230:	193b      	adds	r3, r7, r4
 8007232:	0592      	lsls	r2, r2, #22
 8007234:	0d92      	lsrs	r2, r2, #22
 8007236:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	b29a      	uxth	r2, r3
 8007240:	2308      	movs	r3, #8
 8007242:	18fb      	adds	r3, r7, r3
 8007244:	21fe      	movs	r1, #254	@ 0xfe
 8007246:	400a      	ands	r2, r1
 8007248:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d148      	bne.n	80072e4 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007252:	0021      	movs	r1, r4
 8007254:	187b      	adds	r3, r7, r1
 8007256:	881b      	ldrh	r3, [r3, #0]
 8007258:	09db      	lsrs	r3, r3, #7
 800725a:	b29a      	uxth	r2, r3
 800725c:	183b      	adds	r3, r7, r0
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	4053      	eors	r3, r2
 8007262:	b29b      	uxth	r3, r3
 8007264:	001a      	movs	r2, r3
 8007266:	2306      	movs	r3, #6
 8007268:	4013      	ands	r3, r2
 800726a:	d120      	bne.n	80072ae <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800726c:	183b      	adds	r3, r7, r0
 800726e:	187a      	adds	r2, r7, r1
 8007270:	8812      	ldrh	r2, [r2, #0]
 8007272:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007278:	1c5a      	adds	r2, r3, #1
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007282:	2b02      	cmp	r3, #2
 8007284:	d14c      	bne.n	8007320 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	2200      	movs	r2, #0
 800728a:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2208      	movs	r2, #8
 8007292:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2240      	movs	r2, #64	@ 0x40
 8007298:	2100      	movs	r1, #0
 800729a:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800729c:	183b      	adds	r3, r7, r0
 800729e:	881a      	ldrh	r2, [r3, #0]
 80072a0:	197b      	adds	r3, r7, r5
 80072a2:	7819      	ldrb	r1, [r3, #0]
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	0018      	movs	r0, r3
 80072a8:	f7ff fe71 	bl	8006f8e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80072ac:	e038      	b.n	8007320 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 80072ae:	240c      	movs	r4, #12
 80072b0:	193b      	adds	r3, r7, r4
 80072b2:	2208      	movs	r2, #8
 80072b4:	18ba      	adds	r2, r7, r2
 80072b6:	8812      	ldrh	r2, [r2, #0]
 80072b8:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80072ba:	2380      	movs	r3, #128	@ 0x80
 80072bc:	021a      	lsls	r2, r3, #8
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	0011      	movs	r1, r2
 80072c2:	0018      	movs	r0, r3
 80072c4:	f000 fe92 	bl	8007fec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2240      	movs	r2, #64	@ 0x40
 80072cc:	2100      	movs	r1, #0
 80072ce:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80072d0:	193b      	adds	r3, r7, r4
 80072d2:	881a      	ldrh	r2, [r3, #0]
 80072d4:	230f      	movs	r3, #15
 80072d6:	18fb      	adds	r3, r7, r3
 80072d8:	7819      	ldrb	r1, [r3, #0]
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	0018      	movs	r0, r3
 80072de:	f7ff fe56 	bl	8006f8e <HAL_I2C_AddrCallback>
}
 80072e2:	e01d      	b.n	8007320 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80072e4:	2380      	movs	r3, #128	@ 0x80
 80072e6:	021a      	lsls	r2, r3, #8
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	0011      	movs	r1, r2
 80072ec:	0018      	movs	r0, r3
 80072ee:	f000 fe7d 	bl	8007fec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2240      	movs	r2, #64	@ 0x40
 80072f6:	2100      	movs	r1, #0
 80072f8:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80072fa:	230c      	movs	r3, #12
 80072fc:	18fb      	adds	r3, r7, r3
 80072fe:	881a      	ldrh	r2, [r3, #0]
 8007300:	230f      	movs	r3, #15
 8007302:	18fb      	adds	r3, r7, r3
 8007304:	7819      	ldrb	r1, [r3, #0]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	0018      	movs	r0, r3
 800730a:	f7ff fe40 	bl	8006f8e <HAL_I2C_AddrCallback>
}
 800730e:	e007      	b.n	8007320 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	2208      	movs	r2, #8
 8007316:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2240      	movs	r2, #64	@ 0x40
 800731c:	2100      	movs	r1, #0
 800731e:	5499      	strb	r1, [r3, r2]
}
 8007320:	46c0      	nop			@ (mov r8, r8)
 8007322:	46bd      	mov	sp, r7
 8007324:	b004      	add	sp, #16
 8007326:	bdb0      	pop	{r4, r5, r7, pc}

08007328 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2242      	movs	r2, #66	@ 0x42
 800733c:	2100      	movs	r1, #0
 800733e:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	2380      	movs	r3, #128	@ 0x80
 8007344:	01db      	lsls	r3, r3, #7
 8007346:	4013      	ands	r3, r2
 8007348:	d008      	beq.n	800735c <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681a      	ldr	r2, [r3, #0]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4924      	ldr	r1, [pc, #144]	@ (80073e8 <I2C_ITSlaveSeqCplt+0xc0>)
 8007356:	400a      	ands	r2, r1
 8007358:	601a      	str	r2, [r3, #0]
 800735a:	e00c      	b.n	8007376 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800735c:	68fa      	ldr	r2, [r7, #12]
 800735e:	2380      	movs	r3, #128	@ 0x80
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	4013      	ands	r3, r2
 8007364:	d007      	beq.n	8007376 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	491e      	ldr	r1, [pc, #120]	@ (80073ec <I2C_ITSlaveSeqCplt+0xc4>)
 8007372:	400a      	ands	r2, r1
 8007374:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2241      	movs	r2, #65	@ 0x41
 800737a:	5c9b      	ldrb	r3, [r3, r2]
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b29      	cmp	r3, #41	@ 0x29
 8007380:	d114      	bne.n	80073ac <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2241      	movs	r2, #65	@ 0x41
 8007386:	2128      	movs	r1, #40	@ 0x28
 8007388:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2221      	movs	r2, #33	@ 0x21
 800738e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2101      	movs	r1, #1
 8007394:	0018      	movs	r0, r3
 8007396:	f000 fe29 	bl	8007fec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2240      	movs	r2, #64	@ 0x40
 800739e:	2100      	movs	r1, #0
 80073a0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	0018      	movs	r0, r3
 80073a6:	f7ff fde2 	bl	8006f6e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80073aa:	e019      	b.n	80073e0 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2241      	movs	r2, #65	@ 0x41
 80073b0:	5c9b      	ldrb	r3, [r3, r2]
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b6:	d113      	bne.n	80073e0 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2241      	movs	r2, #65	@ 0x41
 80073bc:	2128      	movs	r1, #40	@ 0x28
 80073be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2222      	movs	r2, #34	@ 0x22
 80073c4:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2102      	movs	r1, #2
 80073ca:	0018      	movs	r0, r3
 80073cc:	f000 fe0e 	bl	8007fec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2240      	movs	r2, #64	@ 0x40
 80073d4:	2100      	movs	r1, #0
 80073d6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	0018      	movs	r0, r3
 80073dc:	f7ff fdcf 	bl	8006f7e <HAL_I2C_SlaveRxCpltCallback>
}
 80073e0:	46c0      	nop			@ (mov r8, r8)
 80073e2:	46bd      	mov	sp, r7
 80073e4:	b004      	add	sp, #16
 80073e6:	bd80      	pop	{r7, pc}
 80073e8:	ffffbfff 	.word	0xffffbfff
 80073ec:	ffff7fff 	.word	0xffff7fff

080073f0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b086      	sub	sp, #24
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
 80073f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800740a:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800740c:	200b      	movs	r0, #11
 800740e:	183b      	adds	r3, r7, r0
 8007410:	687a      	ldr	r2, [r7, #4]
 8007412:	2141      	movs	r1, #65	@ 0x41
 8007414:	5c52      	ldrb	r2, [r2, r1]
 8007416:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	2220      	movs	r2, #32
 800741e:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007420:	183b      	adds	r3, r7, r0
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b21      	cmp	r3, #33	@ 0x21
 8007426:	d003      	beq.n	8007430 <I2C_ITSlaveCplt+0x40>
 8007428:	183b      	adds	r3, r7, r0
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b29      	cmp	r3, #41	@ 0x29
 800742e:	d109      	bne.n	8007444 <I2C_ITSlaveCplt+0x54>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8007430:	4aac      	ldr	r2, [pc, #688]	@ (80076e4 <I2C_ITSlaveCplt+0x2f4>)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0011      	movs	r1, r2
 8007436:	0018      	movs	r0, r3
 8007438:	f000 fdd8 	bl	8007fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2221      	movs	r2, #33	@ 0x21
 8007440:	631a      	str	r2, [r3, #48]	@ 0x30
 8007442:	e020      	b.n	8007486 <I2C_ITSlaveCplt+0x96>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007444:	220b      	movs	r2, #11
 8007446:	18bb      	adds	r3, r7, r2
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	2b22      	cmp	r3, #34	@ 0x22
 800744c:	d003      	beq.n	8007456 <I2C_ITSlaveCplt+0x66>
 800744e:	18bb      	adds	r3, r7, r2
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b2a      	cmp	r3, #42	@ 0x2a
 8007454:	d109      	bne.n	800746a <I2C_ITSlaveCplt+0x7a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007456:	4aa4      	ldr	r2, [pc, #656]	@ (80076e8 <I2C_ITSlaveCplt+0x2f8>)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	0011      	movs	r1, r2
 800745c:	0018      	movs	r0, r3
 800745e:	f000 fdc5 	bl	8007fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2222      	movs	r2, #34	@ 0x22
 8007466:	631a      	str	r2, [r3, #48]	@ 0x30
 8007468:	e00d      	b.n	8007486 <I2C_ITSlaveCplt+0x96>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 800746a:	230b      	movs	r3, #11
 800746c:	18fb      	adds	r3, r7, r3
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b28      	cmp	r3, #40	@ 0x28
 8007472:	d108      	bne.n	8007486 <I2C_ITSlaveCplt+0x96>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007474:	4a9d      	ldr	r2, [pc, #628]	@ (80076ec <I2C_ITSlaveCplt+0x2fc>)
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	0011      	movs	r1, r2
 800747a:	0018      	movs	r0, r3
 800747c:	f000 fdb6 	bl	8007fec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2200      	movs	r2, #0
 8007484:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685a      	ldr	r2, [r3, #4]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	2180      	movs	r1, #128	@ 0x80
 8007492:	0209      	lsls	r1, r1, #8
 8007494:	430a      	orrs	r2, r1
 8007496:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	685a      	ldr	r2, [r3, #4]
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4993      	ldr	r1, [pc, #588]	@ (80076f0 <I2C_ITSlaveCplt+0x300>)
 80074a4:	400a      	ands	r2, r1
 80074a6:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	0018      	movs	r0, r3
 80074ac:	f000 faab 	bl	8007a06 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80074b0:	693a      	ldr	r2, [r7, #16]
 80074b2:	2380      	movs	r3, #128	@ 0x80
 80074b4:	01db      	lsls	r3, r3, #7
 80074b6:	4013      	ands	r3, r2
 80074b8:	d013      	beq.n	80074e2 <I2C_ITSlaveCplt+0xf2>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681a      	ldr	r2, [r3, #0]
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	498b      	ldr	r1, [pc, #556]	@ (80076f4 <I2C_ITSlaveCplt+0x304>)
 80074c6:	400a      	ands	r2, r1
 80074c8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d01f      	beq.n	8007512 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	b29a      	uxth	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80074e0:	e017      	b.n	8007512 <I2C_ITSlaveCplt+0x122>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80074e2:	693a      	ldr	r2, [r7, #16]
 80074e4:	2380      	movs	r3, #128	@ 0x80
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	4013      	ands	r3, r2
 80074ea:	d012      	beq.n	8007512 <I2C_ITSlaveCplt+0x122>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4980      	ldr	r1, [pc, #512]	@ (80076f8 <I2C_ITSlaveCplt+0x308>)
 80074f8:	400a      	ands	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007500:	2b00      	cmp	r3, #0
 8007502:	d006      	beq.n	8007512 <I2C_ITSlaveCplt+0x122>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	685b      	ldr	r3, [r3, #4]
 800750c:	b29a      	uxth	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2204      	movs	r2, #4
 8007516:	4013      	ands	r3, r2
 8007518:	d020      	beq.n	800755c <I2C_ITSlaveCplt+0x16c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2204      	movs	r2, #4
 800751e:	4393      	bics	r3, r2
 8007520:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800752c:	b2d2      	uxtb	r2, r2
 800752e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007534:	1c5a      	adds	r2, r3, #1
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800753e:	2b00      	cmp	r3, #0
 8007540:	d00c      	beq.n	800755c <I2C_ITSlaveCplt+0x16c>
    {
      hi2c->XferSize--;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007546:	3b01      	subs	r3, #1
 8007548:	b29a      	uxth	r2, r3
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007552:	b29b      	uxth	r3, r3
 8007554:	3b01      	subs	r3, #1
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007560:	b29b      	uxth	r3, r3
 8007562:	2b00      	cmp	r3, #0
 8007564:	d005      	beq.n	8007572 <I2C_ITSlaveCplt+0x182>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756a:	2204      	movs	r2, #4
 800756c:	431a      	orrs	r2, r3
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	2210      	movs	r2, #16
 8007576:	4013      	ands	r3, r2
 8007578:	d04f      	beq.n	800761a <I2C_ITSlaveCplt+0x22a>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	2210      	movs	r2, #16
 800757e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007580:	d04b      	beq.n	800761a <I2C_ITSlaveCplt+0x22a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d12d      	bne.n	80075e8 <I2C_ITSlaveCplt+0x1f8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2241      	movs	r2, #65	@ 0x41
 8007590:	5c9b      	ldrb	r3, [r3, r2]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b28      	cmp	r3, #40	@ 0x28
 8007596:	d10b      	bne.n	80075b0 <I2C_ITSlaveCplt+0x1c0>
 8007598:	68fa      	ldr	r2, [r7, #12]
 800759a:	2380      	movs	r3, #128	@ 0x80
 800759c:	049b      	lsls	r3, r3, #18
 800759e:	429a      	cmp	r2, r3
 80075a0:	d106      	bne.n	80075b0 <I2C_ITSlaveCplt+0x1c0>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80075a2:	697a      	ldr	r2, [r7, #20]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	0011      	movs	r1, r2
 80075a8:	0018      	movs	r0, r3
 80075aa:	f000 f8a9 	bl	8007700 <I2C_ITListenCplt>
 80075ae:	e034      	b.n	800761a <I2C_ITSlaveCplt+0x22a>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2241      	movs	r2, #65	@ 0x41
 80075b4:	5c9b      	ldrb	r3, [r3, r2]
 80075b6:	b2db      	uxtb	r3, r3
 80075b8:	2b29      	cmp	r3, #41	@ 0x29
 80075ba:	d110      	bne.n	80075de <I2C_ITSlaveCplt+0x1ee>
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4a4f      	ldr	r2, [pc, #316]	@ (80076fc <I2C_ITSlaveCplt+0x30c>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d00c      	beq.n	80075de <I2C_ITSlaveCplt+0x1ee>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2210      	movs	r2, #16
 80075ca:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	0018      	movs	r0, r3
 80075d0:	f000 fa19 	bl	8007a06 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	0018      	movs	r0, r3
 80075d8:	f7ff fea6 	bl	8007328 <I2C_ITSlaveSeqCplt>
 80075dc:	e01d      	b.n	800761a <I2C_ITSlaveCplt+0x22a>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	2210      	movs	r2, #16
 80075e4:	61da      	str	r2, [r3, #28]
 80075e6:	e018      	b.n	800761a <I2C_ITSlaveCplt+0x22a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	2210      	movs	r2, #16
 80075ee:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075f4:	2204      	movs	r2, #4
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d004      	beq.n	800760c <I2C_ITSlaveCplt+0x21c>
 8007602:	68fa      	ldr	r2, [r7, #12]
 8007604:	2380      	movs	r3, #128	@ 0x80
 8007606:	045b      	lsls	r3, r3, #17
 8007608:	429a      	cmp	r2, r3
 800760a:	d106      	bne.n	800761a <I2C_ITSlaveCplt+0x22a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	0011      	movs	r1, r2
 8007614:	0018      	movs	r0, r3
 8007616:	f000 f8cb 	bl	80077b0 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2242      	movs	r2, #66	@ 0x42
 800761e:	2100      	movs	r1, #0
 8007620:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2200      	movs	r2, #0
 8007626:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762c:	2b00      	cmp	r3, #0
 800762e:	d013      	beq.n	8007658 <I2C_ITSlaveCplt+0x268>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	0011      	movs	r1, r2
 8007638:	0018      	movs	r0, r3
 800763a:	f000 f8b9 	bl	80077b0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2241      	movs	r2, #65	@ 0x41
 8007642:	5c9b      	ldrb	r3, [r3, r2]
 8007644:	b2db      	uxtb	r3, r3
 8007646:	2b28      	cmp	r3, #40	@ 0x28
 8007648:	d147      	bne.n	80076da <I2C_ITSlaveCplt+0x2ea>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	0011      	movs	r1, r2
 8007650:	0018      	movs	r0, r3
 8007652:	f000 f855 	bl	8007700 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007656:	e040      	b.n	80076da <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800765c:	4a27      	ldr	r2, [pc, #156]	@ (80076fc <I2C_ITSlaveCplt+0x30c>)
 800765e:	4293      	cmp	r3, r2
 8007660:	d016      	beq.n	8007690 <I2C_ITSlaveCplt+0x2a0>
    I2C_ITSlaveSeqCplt(hi2c);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	0018      	movs	r0, r3
 8007666:	f7ff fe5f 	bl	8007328 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a23      	ldr	r2, [pc, #140]	@ (80076fc <I2C_ITSlaveCplt+0x30c>)
 800766e:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2241      	movs	r2, #65	@ 0x41
 8007674:	2120      	movs	r1, #32
 8007676:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2240      	movs	r2, #64	@ 0x40
 8007682:	2100      	movs	r1, #0
 8007684:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	0018      	movs	r0, r3
 800768a:	f7ff fc90 	bl	8006fae <HAL_I2C_ListenCpltCallback>
}
 800768e:	e024      	b.n	80076da <I2C_ITSlaveCplt+0x2ea>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2241      	movs	r2, #65	@ 0x41
 8007694:	5c9b      	ldrb	r3, [r3, r2]
 8007696:	b2db      	uxtb	r3, r3
 8007698:	2b22      	cmp	r3, #34	@ 0x22
 800769a:	d10f      	bne.n	80076bc <I2C_ITSlaveCplt+0x2cc>
    hi2c->State = HAL_I2C_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2241      	movs	r2, #65	@ 0x41
 80076a0:	2120      	movs	r1, #32
 80076a2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2240      	movs	r2, #64	@ 0x40
 80076ae:	2100      	movs	r1, #0
 80076b0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	0018      	movs	r0, r3
 80076b6:	f7ff fc62 	bl	8006f7e <HAL_I2C_SlaveRxCpltCallback>
}
 80076ba:	e00e      	b.n	80076da <I2C_ITSlaveCplt+0x2ea>
    hi2c->State = HAL_I2C_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2241      	movs	r2, #65	@ 0x41
 80076c0:	2120      	movs	r1, #32
 80076c2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2240      	movs	r2, #64	@ 0x40
 80076ce:	2100      	movs	r1, #0
 80076d0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	0018      	movs	r0, r3
 80076d6:	f7ff fc4a 	bl	8006f6e <HAL_I2C_SlaveTxCpltCallback>
}
 80076da:	46c0      	nop			@ (mov r8, r8)
 80076dc:	46bd      	mov	sp, r7
 80076de:	b006      	add	sp, #24
 80076e0:	bd80      	pop	{r7, pc}
 80076e2:	46c0      	nop			@ (mov r8, r8)
 80076e4:	00008001 	.word	0x00008001
 80076e8:	00008002 	.word	0x00008002
 80076ec:	00008003 	.word	0x00008003
 80076f0:	fe00e800 	.word	0xfe00e800
 80076f4:	ffffbfff 	.word	0xffffbfff
 80076f8:	ffff7fff 	.word	0xffff7fff
 80076fc:	ffff0000 	.word	0xffff0000

08007700 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b082      	sub	sp, #8
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a26      	ldr	r2, [pc, #152]	@ (80077a8 <I2C_ITListenCplt+0xa8>)
 800770e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2241      	movs	r2, #65	@ 0x41
 800771a:	2120      	movs	r1, #32
 800771c:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2242      	movs	r2, #66	@ 0x42
 8007722:	2100      	movs	r1, #0
 8007724:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	2204      	movs	r2, #4
 8007730:	4013      	ands	r3, r2
 8007732:	d022      	beq.n	800777a <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800773e:	b2d2      	uxtb	r2, r2
 8007740:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007746:	1c5a      	adds	r2, r3, #1
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007750:	2b00      	cmp	r3, #0
 8007752:	d012      	beq.n	800777a <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007758:	3b01      	subs	r3, #1
 800775a:	b29a      	uxth	r2, r3
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007764:	b29b      	uxth	r3, r3
 8007766:	3b01      	subs	r3, #1
 8007768:	b29a      	uxth	r2, r3
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007772:	2204      	movs	r2, #4
 8007774:	431a      	orrs	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800777a:	4a0c      	ldr	r2, [pc, #48]	@ (80077ac <I2C_ITListenCplt+0xac>)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	0011      	movs	r1, r2
 8007780:	0018      	movs	r0, r3
 8007782:	f000 fc33 	bl	8007fec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	2210      	movs	r2, #16
 800778c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2240      	movs	r2, #64	@ 0x40
 8007792:	2100      	movs	r1, #0
 8007794:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	0018      	movs	r0, r3
 800779a:	f7ff fc08 	bl	8006fae <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800779e:	46c0      	nop			@ (mov r8, r8)
 80077a0:	46bd      	mov	sp, r7
 80077a2:	b002      	add	sp, #8
 80077a4:	bd80      	pop	{r7, pc}
 80077a6:	46c0      	nop			@ (mov r8, r8)
 80077a8:	ffff0000 	.word	0xffff0000
 80077ac:	00008003 	.word	0x00008003

080077b0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
 80077b8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80077ba:	200f      	movs	r0, #15
 80077bc:	183b      	adds	r3, r7, r0
 80077be:	687a      	ldr	r2, [r7, #4]
 80077c0:	2141      	movs	r1, #65	@ 0x41
 80077c2:	5c52      	ldrb	r2, [r2, r1]
 80077c4:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2242      	movs	r2, #66	@ 0x42
 80077ca:	2100      	movs	r1, #0
 80077cc:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	4a72      	ldr	r2, [pc, #456]	@ (800799c <I2C_ITError+0x1ec>)
 80077d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80077de:	683b      	ldr	r3, [r7, #0]
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80077e6:	183b      	adds	r3, r7, r0
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b28      	cmp	r3, #40	@ 0x28
 80077ec:	d007      	beq.n	80077fe <I2C_ITError+0x4e>
 80077ee:	183b      	adds	r3, r7, r0
 80077f0:	781b      	ldrb	r3, [r3, #0]
 80077f2:	2b29      	cmp	r3, #41	@ 0x29
 80077f4:	d003      	beq.n	80077fe <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80077f6:	183b      	adds	r3, r7, r0
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b2a      	cmp	r3, #42	@ 0x2a
 80077fc:	d10c      	bne.n	8007818 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2103      	movs	r1, #3
 8007802:	0018      	movs	r0, r3
 8007804:	f000 fbf2 	bl	8007fec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	2241      	movs	r2, #65	@ 0x41
 800780c:	2128      	movs	r1, #40	@ 0x28
 800780e:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a63      	ldr	r2, [pc, #396]	@ (80079a0 <I2C_ITError+0x1f0>)
 8007814:	635a      	str	r2, [r3, #52]	@ 0x34
 8007816:	e032      	b.n	800787e <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007818:	4a62      	ldr	r2, [pc, #392]	@ (80079a4 <I2C_ITError+0x1f4>)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	0011      	movs	r1, r2
 800781e:	0018      	movs	r0, r3
 8007820:	f000 fbe4 	bl	8007fec <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	0018      	movs	r0, r3
 8007828:	f000 f8ed 	bl	8007a06 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2241      	movs	r2, #65	@ 0x41
 8007830:	5c9b      	ldrb	r3, [r3, r2]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	2b60      	cmp	r3, #96	@ 0x60
 8007836:	d01f      	beq.n	8007878 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2241      	movs	r2, #65	@ 0x41
 800783c:	2120      	movs	r1, #32
 800783e:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	699b      	ldr	r3, [r3, #24]
 8007846:	2220      	movs	r2, #32
 8007848:	4013      	ands	r3, r2
 800784a:	2b20      	cmp	r3, #32
 800784c:	d114      	bne.n	8007878 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	2210      	movs	r2, #16
 8007856:	4013      	ands	r3, r2
 8007858:	2b10      	cmp	r3, #16
 800785a:	d109      	bne.n	8007870 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	2210      	movs	r2, #16
 8007862:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007868:	2204      	movs	r2, #4
 800786a:	431a      	orrs	r2, r3
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	2220      	movs	r2, #32
 8007876:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007882:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007888:	2b00      	cmp	r3, #0
 800788a:	d03b      	beq.n	8007904 <I2C_ITError+0x154>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	2b11      	cmp	r3, #17
 8007890:	d002      	beq.n	8007898 <I2C_ITError+0xe8>
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	2b21      	cmp	r3, #33	@ 0x21
 8007896:	d135      	bne.n	8007904 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681a      	ldr	r2, [r3, #0]
 800789e:	2380      	movs	r3, #128	@ 0x80
 80078a0:	01db      	lsls	r3, r3, #7
 80078a2:	401a      	ands	r2, r3
 80078a4:	2380      	movs	r3, #128	@ 0x80
 80078a6:	01db      	lsls	r3, r3, #7
 80078a8:	429a      	cmp	r2, r3
 80078aa:	d107      	bne.n	80078bc <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681a      	ldr	r2, [r3, #0]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	493c      	ldr	r1, [pc, #240]	@ (80079a8 <I2C_ITError+0x1f8>)
 80078b8:	400a      	ands	r2, r1
 80078ba:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	0018      	movs	r0, r3
 80078c2:	f7fe fe2e 	bl	8006522 <HAL_DMA_GetState>
 80078c6:	0003      	movs	r3, r0
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d016      	beq.n	80078fa <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	4a36      	ldr	r2, [pc, #216]	@ (80079ac <I2C_ITError+0x1fc>)
 80078d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	2240      	movs	r2, #64	@ 0x40
 80078d8:	2100      	movs	r1, #0
 80078da:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078e0:	0018      	movs	r0, r3
 80078e2:	f7fe fdd9 	bl	8006498 <HAL_DMA_Abort_IT>
 80078e6:	1e03      	subs	r3, r0, #0
 80078e8:	d051      	beq.n	800798e <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078f4:	0018      	movs	r0, r3
 80078f6:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80078f8:	e049      	b.n	800798e <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	0018      	movs	r0, r3
 80078fe:	f000 f859 	bl	80079b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007902:	e044      	b.n	800798e <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d03b      	beq.n	8007984 <I2C_ITError+0x1d4>
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	2b12      	cmp	r3, #18
 8007910:	d002      	beq.n	8007918 <I2C_ITError+0x168>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b22      	cmp	r3, #34	@ 0x22
 8007916:	d135      	bne.n	8007984 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	2380      	movs	r3, #128	@ 0x80
 8007920:	021b      	lsls	r3, r3, #8
 8007922:	401a      	ands	r2, r3
 8007924:	2380      	movs	r3, #128	@ 0x80
 8007926:	021b      	lsls	r3, r3, #8
 8007928:	429a      	cmp	r2, r3
 800792a:	d107      	bne.n	800793c <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	681a      	ldr	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	491e      	ldr	r1, [pc, #120]	@ (80079b0 <I2C_ITError+0x200>)
 8007938:	400a      	ands	r2, r1
 800793a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007940:	0018      	movs	r0, r3
 8007942:	f7fe fdee 	bl	8006522 <HAL_DMA_GetState>
 8007946:	0003      	movs	r3, r0
 8007948:	2b01      	cmp	r3, #1
 800794a:	d016      	beq.n	800797a <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007950:	4a16      	ldr	r2, [pc, #88]	@ (80079ac <I2C_ITError+0x1fc>)
 8007952:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2240      	movs	r2, #64	@ 0x40
 8007958:	2100      	movs	r1, #0
 800795a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007960:	0018      	movs	r0, r3
 8007962:	f7fe fd99 	bl	8006498 <HAL_DMA_Abort_IT>
 8007966:	1e03      	subs	r3, r0, #0
 8007968:	d013      	beq.n	8007992 <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800796e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007974:	0018      	movs	r0, r3
 8007976:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007978:	e00b      	b.n	8007992 <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	0018      	movs	r0, r3
 800797e:	f000 f819 	bl	80079b4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007982:	e006      	b.n	8007992 <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	0018      	movs	r0, r3
 8007988:	f000 f814 	bl	80079b4 <I2C_TreatErrorCallback>
  }
}
 800798c:	e002      	b.n	8007994 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800798e:	46c0      	nop			@ (mov r8, r8)
 8007990:	e000      	b.n	8007994 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007992:	46c0      	nop			@ (mov r8, r8)
}
 8007994:	46c0      	nop			@ (mov r8, r8)
 8007996:	46bd      	mov	sp, r7
 8007998:	b004      	add	sp, #16
 800799a:	bd80      	pop	{r7, pc}
 800799c:	ffff0000 	.word	0xffff0000
 80079a0:	08006fe1 	.word	0x08006fe1
 80079a4:	00008003 	.word	0x00008003
 80079a8:	ffffbfff 	.word	0xffffbfff
 80079ac:	08007a4b 	.word	0x08007a4b
 80079b0:	ffff7fff 	.word	0xffff7fff

080079b4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2241      	movs	r2, #65	@ 0x41
 80079c0:	5c9b      	ldrb	r3, [r3, r2]
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	2b60      	cmp	r3, #96	@ 0x60
 80079c6:	d10f      	bne.n	80079e8 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2241      	movs	r2, #65	@ 0x41
 80079cc:	2120      	movs	r1, #32
 80079ce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2200      	movs	r2, #0
 80079d4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2240      	movs	r2, #64	@ 0x40
 80079da:	2100      	movs	r1, #0
 80079dc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	0018      	movs	r0, r3
 80079e2:	f7ff faf4 	bl	8006fce <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80079e6:	e00a      	b.n	80079fe <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2200      	movs	r2, #0
 80079ec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2240      	movs	r2, #64	@ 0x40
 80079f2:	2100      	movs	r1, #0
 80079f4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	0018      	movs	r0, r3
 80079fa:	f7ff fae0 	bl	8006fbe <HAL_I2C_ErrorCallback>
}
 80079fe:	46c0      	nop			@ (mov r8, r8)
 8007a00:	46bd      	mov	sp, r7
 8007a02:	b002      	add	sp, #8
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b082      	sub	sp, #8
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	699b      	ldr	r3, [r3, #24]
 8007a14:	2202      	movs	r2, #2
 8007a16:	4013      	ands	r3, r2
 8007a18:	2b02      	cmp	r3, #2
 8007a1a:	d103      	bne.n	8007a24 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2200      	movs	r2, #0
 8007a22:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d007      	beq.n	8007a42 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2101      	movs	r1, #1
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	619a      	str	r2, [r3, #24]
  }
}
 8007a42:	46c0      	nop			@ (mov r8, r8)
 8007a44:	46bd      	mov	sp, r7
 8007a46:	b002      	add	sp, #8
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b084      	sub	sp, #16
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d003      	beq.n	8007a68 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a64:	2200      	movs	r2, #0
 8007a66:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d003      	beq.n	8007a78 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a74:	2200      	movs	r2, #0
 8007a76:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	0018      	movs	r0, r3
 8007a7c:	f7ff ff9a 	bl	80079b4 <I2C_TreatErrorCallback>
}
 8007a80:	46c0      	nop			@ (mov r8, r8)
 8007a82:	46bd      	mov	sp, r7
 8007a84:	b004      	add	sp, #16
 8007a86:	bd80      	pop	{r7, pc}

08007a88 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007a88:	b580      	push	{r7, lr}
 8007a8a:	b084      	sub	sp, #16
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	60f8      	str	r0, [r7, #12]
 8007a90:	60b9      	str	r1, [r7, #8]
 8007a92:	603b      	str	r3, [r7, #0]
 8007a94:	1dfb      	adds	r3, r7, #7
 8007a96:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007a98:	e03a      	b.n	8007b10 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a9a:	69ba      	ldr	r2, [r7, #24]
 8007a9c:	6839      	ldr	r1, [r7, #0]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	0018      	movs	r0, r3
 8007aa2:	f000 f971 	bl	8007d88 <I2C_IsErrorOccurred>
 8007aa6:	1e03      	subs	r3, r0, #0
 8007aa8:	d001      	beq.n	8007aae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	e040      	b.n	8007b30 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	3301      	adds	r3, #1
 8007ab2:	d02d      	beq.n	8007b10 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab4:	f7fe f81a 	bl	8005aec <HAL_GetTick>
 8007ab8:	0002      	movs	r2, r0
 8007aba:	69bb      	ldr	r3, [r7, #24]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	683a      	ldr	r2, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d302      	bcc.n	8007aca <I2C_WaitOnFlagUntilTimeout+0x42>
 8007ac4:	683b      	ldr	r3, [r7, #0]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d122      	bne.n	8007b10 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	699b      	ldr	r3, [r3, #24]
 8007ad0:	68ba      	ldr	r2, [r7, #8]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	1ad3      	subs	r3, r2, r3
 8007ad8:	425a      	negs	r2, r3
 8007ada:	4153      	adcs	r3, r2
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	001a      	movs	r2, r3
 8007ae0:	1dfb      	adds	r3, r7, #7
 8007ae2:	781b      	ldrb	r3, [r3, #0]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d113      	bne.n	8007b10 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007aec:	2220      	movs	r2, #32
 8007aee:	431a      	orrs	r2, r3
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2241      	movs	r2, #65	@ 0x41
 8007af8:	2120      	movs	r1, #32
 8007afa:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2242      	movs	r2, #66	@ 0x42
 8007b00:	2100      	movs	r1, #0
 8007b02:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2240      	movs	r2, #64	@ 0x40
 8007b08:	2100      	movs	r1, #0
 8007b0a:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e00f      	b.n	8007b30 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	699b      	ldr	r3, [r3, #24]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	4013      	ands	r3, r2
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	1ad3      	subs	r3, r2, r3
 8007b1e:	425a      	negs	r2, r3
 8007b20:	4153      	adcs	r3, r2
 8007b22:	b2db      	uxtb	r3, r3
 8007b24:	001a      	movs	r2, r3
 8007b26:	1dfb      	adds	r3, r7, #7
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d0b5      	beq.n	8007a9a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b2e:	2300      	movs	r3, #0
}
 8007b30:	0018      	movs	r0, r3
 8007b32:	46bd      	mov	sp, r7
 8007b34:	b004      	add	sp, #16
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	60f8      	str	r0, [r7, #12]
 8007b40:	60b9      	str	r1, [r7, #8]
 8007b42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007b44:	e032      	b.n	8007bac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b46:	687a      	ldr	r2, [r7, #4]
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	0018      	movs	r0, r3
 8007b4e:	f000 f91b 	bl	8007d88 <I2C_IsErrorOccurred>
 8007b52:	1e03      	subs	r3, r0, #0
 8007b54:	d001      	beq.n	8007b5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	e030      	b.n	8007bbc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b5a:	68bb      	ldr	r3, [r7, #8]
 8007b5c:	3301      	adds	r3, #1
 8007b5e:	d025      	beq.n	8007bac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b60:	f7fd ffc4 	bl	8005aec <HAL_GetTick>
 8007b64:	0002      	movs	r2, r0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	1ad3      	subs	r3, r2, r3
 8007b6a:	68ba      	ldr	r2, [r7, #8]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d302      	bcc.n	8007b76 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d11a      	bne.n	8007bac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	2202      	movs	r2, #2
 8007b7e:	4013      	ands	r3, r2
 8007b80:	2b02      	cmp	r3, #2
 8007b82:	d013      	beq.n	8007bac <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007b88:	2220      	movs	r2, #32
 8007b8a:	431a      	orrs	r2, r3
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2241      	movs	r2, #65	@ 0x41
 8007b94:	2120      	movs	r1, #32
 8007b96:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2242      	movs	r2, #66	@ 0x42
 8007b9c:	2100      	movs	r1, #0
 8007b9e:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2240      	movs	r2, #64	@ 0x40
 8007ba4:	2100      	movs	r1, #0
 8007ba6:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e007      	b.n	8007bbc <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	699b      	ldr	r3, [r3, #24]
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	4013      	ands	r3, r2
 8007bb6:	2b02      	cmp	r3, #2
 8007bb8:	d1c5      	bne.n	8007b46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	0018      	movs	r0, r3
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	b004      	add	sp, #16
 8007bc2:	bd80      	pop	{r7, pc}

08007bc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b084      	sub	sp, #16
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007bd0:	e02f      	b.n	8007c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	68b9      	ldr	r1, [r7, #8]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	0018      	movs	r0, r3
 8007bda:	f000 f8d5 	bl	8007d88 <I2C_IsErrorOccurred>
 8007bde:	1e03      	subs	r3, r0, #0
 8007be0:	d001      	beq.n	8007be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e02d      	b.n	8007c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007be6:	f7fd ff81 	bl	8005aec <HAL_GetTick>
 8007bea:	0002      	movs	r2, r0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	68ba      	ldr	r2, [r7, #8]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d302      	bcc.n	8007bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d11a      	bne.n	8007c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	699b      	ldr	r3, [r3, #24]
 8007c02:	2220      	movs	r2, #32
 8007c04:	4013      	ands	r3, r2
 8007c06:	2b20      	cmp	r3, #32
 8007c08:	d013      	beq.n	8007c32 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007c0e:	2220      	movs	r2, #32
 8007c10:	431a      	orrs	r2, r3
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	2241      	movs	r2, #65	@ 0x41
 8007c1a:	2120      	movs	r1, #32
 8007c1c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2242      	movs	r2, #66	@ 0x42
 8007c22:	2100      	movs	r1, #0
 8007c24:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	2240      	movs	r2, #64	@ 0x40
 8007c2a:	2100      	movs	r1, #0
 8007c2c:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	e007      	b.n	8007c42 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2220      	movs	r2, #32
 8007c3a:	4013      	ands	r3, r2
 8007c3c:	2b20      	cmp	r3, #32
 8007c3e:	d1c8      	bne.n	8007bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c40:	2300      	movs	r3, #0
}
 8007c42:	0018      	movs	r0, r3
 8007c44:	46bd      	mov	sp, r7
 8007c46:	b004      	add	sp, #16
 8007c48:	bd80      	pop	{r7, pc}
	...

08007c4c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007c58:	2317      	movs	r3, #23
 8007c5a:	18fb      	adds	r3, r7, r3
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	701a      	strb	r2, [r3, #0]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007c60:	e07b      	b.n	8007d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c62:	687a      	ldr	r2, [r7, #4]
 8007c64:	68b9      	ldr	r1, [r7, #8]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	0018      	movs	r0, r3
 8007c6a:	f000 f88d 	bl	8007d88 <I2C_IsErrorOccurred>
 8007c6e:	1e03      	subs	r3, r0, #0
 8007c70:	d003      	beq.n	8007c7a <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    {
      status = HAL_ERROR;
 8007c72:	2317      	movs	r3, #23
 8007c74:	18fb      	adds	r3, r7, r3
 8007c76:	2201      	movs	r2, #1
 8007c78:	701a      	strb	r2, [r3, #0]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	699b      	ldr	r3, [r3, #24]
 8007c80:	2220      	movs	r2, #32
 8007c82:	4013      	ands	r3, r2
 8007c84:	2b20      	cmp	r3, #32
 8007c86:	d140      	bne.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
 8007c88:	2117      	movs	r1, #23
 8007c8a:	187b      	adds	r3, r7, r1
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d13b      	bne.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	699b      	ldr	r3, [r3, #24]
 8007c98:	2204      	movs	r2, #4
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	2b04      	cmp	r3, #4
 8007c9e:	d106      	bne.n	8007cae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <I2C_WaitOnRXNEFlagUntilTimeout+0x62>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8007ca8:	187b      	adds	r3, r7, r1
 8007caa:	2200      	movs	r2, #0
 8007cac:	701a      	strb	r2, [r3, #0]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	699b      	ldr	r3, [r3, #24]
 8007cb4:	2210      	movs	r2, #16
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d123      	bne.n	8007d04 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2210      	movs	r2, #16
 8007cc2:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2204      	movs	r2, #4
 8007cc8:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2220      	movs	r2, #32
 8007cd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	685a      	ldr	r2, [r3, #4]
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	4929      	ldr	r1, [pc, #164]	@ (8007d84 <I2C_WaitOnRXNEFlagUntilTimeout+0x138>)
 8007cde:	400a      	ands	r2, r1
 8007ce0:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2241      	movs	r2, #65	@ 0x41
 8007ce6:	2120      	movs	r1, #32
 8007ce8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2242      	movs	r2, #66	@ 0x42
 8007cee:	2100      	movs	r1, #0
 8007cf0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	2240      	movs	r2, #64	@ 0x40
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007cfa:	2317      	movs	r3, #23
 8007cfc:	18fb      	adds	r3, r7, r3
 8007cfe:	2201      	movs	r2, #1
 8007d00:	701a      	strb	r2, [r3, #0]
 8007d02:	e002      	b.n	8007d0a <I2C_WaitOnRXNEFlagUntilTimeout+0xbe>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 8007d0a:	f7fd feef 	bl	8005aec <HAL_GetTick>
 8007d0e:	0002      	movs	r2, r0
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	1ad3      	subs	r3, r2, r3
 8007d14:	68ba      	ldr	r2, [r7, #8]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d302      	bcc.n	8007d20 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d11c      	bne.n	8007d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
 8007d20:	2017      	movs	r0, #23
 8007d22:	183b      	adds	r3, r7, r0
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d117      	bne.n	8007d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	699b      	ldr	r3, [r3, #24]
 8007d30:	2204      	movs	r2, #4
 8007d32:	4013      	ands	r3, r2
 8007d34:	2b04      	cmp	r3, #4
 8007d36:	d010      	beq.n	8007d5a <I2C_WaitOnRXNEFlagUntilTimeout+0x10e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2241      	movs	r2, #65	@ 0x41
 8007d48:	2120      	movs	r1, #32
 8007d4a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2240      	movs	r2, #64	@ 0x40
 8007d50:	2100      	movs	r1, #0
 8007d52:	5499      	strb	r1, [r3, r2]

        status = HAL_ERROR;
 8007d54:	183b      	adds	r3, r7, r0
 8007d56:	2201      	movs	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	2204      	movs	r2, #4
 8007d62:	4013      	ands	r3, r2
 8007d64:	2b04      	cmp	r3, #4
 8007d66:	d005      	beq.n	8007d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007d68:	2317      	movs	r3, #23
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d100      	bne.n	8007d74 <I2C_WaitOnRXNEFlagUntilTimeout+0x128>
 8007d72:	e776      	b.n	8007c62 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
      }
    }
  }
  return status;
 8007d74:	2317      	movs	r3, #23
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	781b      	ldrb	r3, [r3, #0]
}
 8007d7a:	0018      	movs	r0, r3
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	b006      	add	sp, #24
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	46c0      	nop			@ (mov r8, r8)
 8007d84:	fe00e800 	.word	0xfe00e800

08007d88 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08a      	sub	sp, #40	@ 0x28
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d94:	2327      	movs	r3, #39	@ 0x27
 8007d96:	18fb      	adds	r3, r7, r3
 8007d98:	2200      	movs	r2, #0
 8007d9a:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007da4:	2300      	movs	r3, #0
 8007da6:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007dac:	69bb      	ldr	r3, [r7, #24]
 8007dae:	2210      	movs	r2, #16
 8007db0:	4013      	ands	r3, r2
 8007db2:	d100      	bne.n	8007db6 <I2C_IsErrorOccurred+0x2e>
 8007db4:	e079      	b.n	8007eaa <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	2210      	movs	r2, #16
 8007dbc:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007dbe:	e057      	b.n	8007e70 <I2C_IsErrorOccurred+0xe8>
 8007dc0:	2227      	movs	r2, #39	@ 0x27
 8007dc2:	18bb      	adds	r3, r7, r2
 8007dc4:	18ba      	adds	r2, r7, r2
 8007dc6:	7812      	ldrb	r2, [r2, #0]
 8007dc8:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	d04f      	beq.n	8007e70 <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007dd0:	f7fd fe8c 	bl	8005aec <HAL_GetTick>
 8007dd4:	0002      	movs	r2, r0
 8007dd6:	69fb      	ldr	r3, [r7, #28]
 8007dd8:	1ad3      	subs	r3, r2, r3
 8007dda:	68ba      	ldr	r2, [r7, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d302      	bcc.n	8007de6 <I2C_IsErrorOccurred+0x5e>
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d144      	bne.n	8007e70 <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	2380      	movs	r3, #128	@ 0x80
 8007dee:	01db      	lsls	r3, r3, #7
 8007df0:	4013      	ands	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8007df4:	2013      	movs	r0, #19
 8007df6:	183b      	adds	r3, r7, r0
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	2142      	movs	r1, #66	@ 0x42
 8007dfc:	5c52      	ldrb	r2, [r2, r1]
 8007dfe:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	699a      	ldr	r2, [r3, #24]
 8007e06:	2380      	movs	r3, #128	@ 0x80
 8007e08:	021b      	lsls	r3, r3, #8
 8007e0a:	401a      	ands	r2, r3
 8007e0c:	2380      	movs	r3, #128	@ 0x80
 8007e0e:	021b      	lsls	r3, r3, #8
 8007e10:	429a      	cmp	r2, r3
 8007e12:	d126      	bne.n	8007e62 <I2C_IsErrorOccurred+0xda>
 8007e14:	697a      	ldr	r2, [r7, #20]
 8007e16:	2380      	movs	r3, #128	@ 0x80
 8007e18:	01db      	lsls	r3, r3, #7
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d021      	beq.n	8007e62 <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 8007e1e:	183b      	adds	r3, r7, r0
 8007e20:	781b      	ldrb	r3, [r3, #0]
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d01d      	beq.n	8007e62 <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2180      	movs	r1, #128	@ 0x80
 8007e32:	01c9      	lsls	r1, r1, #7
 8007e34:	430a      	orrs	r2, r1
 8007e36:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8007e38:	f7fd fe58 	bl	8005aec <HAL_GetTick>
 8007e3c:	0003      	movs	r3, r0
 8007e3e:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e40:	e00f      	b.n	8007e62 <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007e42:	f7fd fe53 	bl	8005aec <HAL_GetTick>
 8007e46:	0002      	movs	r2, r0
 8007e48:	69fb      	ldr	r3, [r7, #28]
 8007e4a:	1ad3      	subs	r3, r2, r3
 8007e4c:	2b19      	cmp	r3, #25
 8007e4e:	d908      	bls.n	8007e62 <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007e50:	6a3b      	ldr	r3, [r7, #32]
 8007e52:	2220      	movs	r2, #32
 8007e54:	4313      	orrs	r3, r2
 8007e56:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8007e58:	2327      	movs	r3, #39	@ 0x27
 8007e5a:	18fb      	adds	r3, r7, r3
 8007e5c:	2201      	movs	r2, #1
 8007e5e:	701a      	strb	r2, [r3, #0]

              break;
 8007e60:	e006      	b.n	8007e70 <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	699b      	ldr	r3, [r3, #24]
 8007e68:	2220      	movs	r2, #32
 8007e6a:	4013      	ands	r3, r2
 8007e6c:	2b20      	cmp	r3, #32
 8007e6e:	d1e8      	bne.n	8007e42 <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699b      	ldr	r3, [r3, #24]
 8007e76:	2220      	movs	r2, #32
 8007e78:	4013      	ands	r3, r2
 8007e7a:	2b20      	cmp	r3, #32
 8007e7c:	d004      	beq.n	8007e88 <I2C_IsErrorOccurred+0x100>
 8007e7e:	2327      	movs	r3, #39	@ 0x27
 8007e80:	18fb      	adds	r3, r7, r3
 8007e82:	781b      	ldrb	r3, [r3, #0]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d09b      	beq.n	8007dc0 <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007e88:	2327      	movs	r3, #39	@ 0x27
 8007e8a:	18fb      	adds	r3, r7, r3
 8007e8c:	781b      	ldrb	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d103      	bne.n	8007e9a <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2220      	movs	r2, #32
 8007e98:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	2204      	movs	r2, #4
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8007ea2:	2327      	movs	r3, #39	@ 0x27
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	2201      	movs	r2, #1
 8007ea8:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	2380      	movs	r3, #128	@ 0x80
 8007eb6:	005b      	lsls	r3, r3, #1
 8007eb8:	4013      	ands	r3, r2
 8007eba:	d00c      	beq.n	8007ed6 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	4313      	orrs	r3, r2
 8007ec2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2280      	movs	r2, #128	@ 0x80
 8007eca:	0052      	lsls	r2, r2, #1
 8007ecc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ece:	2327      	movs	r3, #39	@ 0x27
 8007ed0:	18fb      	adds	r3, r7, r3
 8007ed2:	2201      	movs	r2, #1
 8007ed4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007ed6:	69ba      	ldr	r2, [r7, #24]
 8007ed8:	2380      	movs	r3, #128	@ 0x80
 8007eda:	00db      	lsls	r3, r3, #3
 8007edc:	4013      	ands	r3, r2
 8007ede:	d00c      	beq.n	8007efa <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8007ee0:	6a3b      	ldr	r3, [r7, #32]
 8007ee2:	2208      	movs	r2, #8
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2280      	movs	r2, #128	@ 0x80
 8007eee:	00d2      	lsls	r2, r2, #3
 8007ef0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007ef2:	2327      	movs	r3, #39	@ 0x27
 8007ef4:	18fb      	adds	r3, r7, r3
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007efa:	69ba      	ldr	r2, [r7, #24]
 8007efc:	2380      	movs	r3, #128	@ 0x80
 8007efe:	009b      	lsls	r3, r3, #2
 8007f00:	4013      	ands	r3, r2
 8007f02:	d00c      	beq.n	8007f1e <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8007f04:	6a3b      	ldr	r3, [r7, #32]
 8007f06:	2202      	movs	r2, #2
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	2280      	movs	r2, #128	@ 0x80
 8007f12:	0092      	lsls	r2, r2, #2
 8007f14:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007f16:	2327      	movs	r3, #39	@ 0x27
 8007f18:	18fb      	adds	r3, r7, r3
 8007f1a:	2201      	movs	r2, #1
 8007f1c:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8007f1e:	2327      	movs	r3, #39	@ 0x27
 8007f20:	18fb      	adds	r3, r7, r3
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d01d      	beq.n	8007f64 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	0018      	movs	r0, r3
 8007f2c:	f7ff fd6b 	bl	8007a06 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	685a      	ldr	r2, [r3, #4]
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	490e      	ldr	r1, [pc, #56]	@ (8007f74 <I2C_IsErrorOccurred+0x1ec>)
 8007f3c:	400a      	ands	r2, r1
 8007f3e:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007f44:	6a3b      	ldr	r3, [r7, #32]
 8007f46:	431a      	orrs	r2, r3
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	2241      	movs	r2, #65	@ 0x41
 8007f50:	2120      	movs	r1, #32
 8007f52:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2242      	movs	r2, #66	@ 0x42
 8007f58:	2100      	movs	r1, #0
 8007f5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2240      	movs	r2, #64	@ 0x40
 8007f60:	2100      	movs	r1, #0
 8007f62:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8007f64:	2327      	movs	r3, #39	@ 0x27
 8007f66:	18fb      	adds	r3, r7, r3
 8007f68:	781b      	ldrb	r3, [r3, #0]
}
 8007f6a:	0018      	movs	r0, r3
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	b00a      	add	sp, #40	@ 0x28
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	46c0      	nop			@ (mov r8, r8)
 8007f74:	fe00e800 	.word	0xfe00e800

08007f78 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007f78:	b590      	push	{r4, r7, lr}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	0008      	movs	r0, r1
 8007f82:	0011      	movs	r1, r2
 8007f84:	607b      	str	r3, [r7, #4]
 8007f86:	240a      	movs	r4, #10
 8007f88:	193b      	adds	r3, r7, r4
 8007f8a:	1c02      	adds	r2, r0, #0
 8007f8c:	801a      	strh	r2, [r3, #0]
 8007f8e:	2009      	movs	r0, #9
 8007f90:	183b      	adds	r3, r7, r0
 8007f92:	1c0a      	adds	r2, r1, #0
 8007f94:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007f96:	193b      	adds	r3, r7, r4
 8007f98:	881b      	ldrh	r3, [r3, #0]
 8007f9a:	059b      	lsls	r3, r3, #22
 8007f9c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007f9e:	183b      	adds	r3, r7, r0
 8007fa0:	781b      	ldrb	r3, [r3, #0]
 8007fa2:	0419      	lsls	r1, r3, #16
 8007fa4:	23ff      	movs	r3, #255	@ 0xff
 8007fa6:	041b      	lsls	r3, r3, #16
 8007fa8:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007faa:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	085b      	lsrs	r3, r3, #1
 8007fb8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fc2:	0d51      	lsrs	r1, r2, #21
 8007fc4:	2280      	movs	r2, #128	@ 0x80
 8007fc6:	00d2      	lsls	r2, r2, #3
 8007fc8:	400a      	ands	r2, r1
 8007fca:	4907      	ldr	r1, [pc, #28]	@ (8007fe8 <I2C_TransferConfig+0x70>)
 8007fcc:	430a      	orrs	r2, r1
 8007fce:	43d2      	mvns	r2, r2
 8007fd0:	401a      	ands	r2, r3
 8007fd2:	0011      	movs	r1, r2
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	697a      	ldr	r2, [r7, #20]
 8007fda:	430a      	orrs	r2, r1
 8007fdc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007fde:	46c0      	nop			@ (mov r8, r8)
 8007fe0:	46bd      	mov	sp, r7
 8007fe2:	b007      	add	sp, #28
 8007fe4:	bd90      	pop	{r4, r7, pc}
 8007fe6:	46c0      	nop			@ (mov r8, r8)
 8007fe8:	03ff63ff 	.word	0x03ff63ff

08007fec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	000a      	movs	r2, r1
 8007ff6:	1cbb      	adds	r3, r7, #2
 8007ff8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8007ffe:	1cbb      	adds	r3, r7, #2
 8008000:	881b      	ldrh	r3, [r3, #0]
 8008002:	2201      	movs	r2, #1
 8008004:	4013      	ands	r3, r2
 8008006:	d010      	beq.n	800802a <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2242      	movs	r2, #66	@ 0x42
 800800c:	4313      	orrs	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2241      	movs	r2, #65	@ 0x41
 8008014:	5c9b      	ldrb	r3, [r3, r2]
 8008016:	b2db      	uxtb	r3, r3
 8008018:	001a      	movs	r2, r3
 800801a:	2328      	movs	r3, #40	@ 0x28
 800801c:	4013      	ands	r3, r2
 800801e:	2b28      	cmp	r3, #40	@ 0x28
 8008020:	d003      	beq.n	800802a <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	22b0      	movs	r2, #176	@ 0xb0
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800802a:	1cbb      	adds	r3, r7, #2
 800802c:	881b      	ldrh	r3, [r3, #0]
 800802e:	2202      	movs	r2, #2
 8008030:	4013      	ands	r3, r2
 8008032:	d010      	beq.n	8008056 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2244      	movs	r2, #68	@ 0x44
 8008038:	4313      	orrs	r3, r2
 800803a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2241      	movs	r2, #65	@ 0x41
 8008040:	5c9b      	ldrb	r3, [r3, r2]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	001a      	movs	r2, r3
 8008046:	2328      	movs	r3, #40	@ 0x28
 8008048:	4013      	ands	r3, r2
 800804a:	2b28      	cmp	r3, #40	@ 0x28
 800804c:	d003      	beq.n	8008056 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	22b0      	movs	r2, #176	@ 0xb0
 8008052:	4313      	orrs	r3, r2
 8008054:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008056:	1cbb      	adds	r3, r7, #2
 8008058:	2200      	movs	r2, #0
 800805a:	5e9b      	ldrsh	r3, [r3, r2]
 800805c:	2b00      	cmp	r3, #0
 800805e:	da03      	bge.n	8008068 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	22b8      	movs	r2, #184	@ 0xb8
 8008064:	4313      	orrs	r3, r2
 8008066:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008068:	1cbb      	adds	r3, r7, #2
 800806a:	881b      	ldrh	r3, [r3, #0]
 800806c:	2b10      	cmp	r3, #16
 800806e:	d103      	bne.n	8008078 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2290      	movs	r2, #144	@ 0x90
 8008074:	4313      	orrs	r3, r2
 8008076:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008078:	1cbb      	adds	r3, r7, #2
 800807a:	881b      	ldrh	r3, [r3, #0]
 800807c:	2b20      	cmp	r3, #32
 800807e:	d103      	bne.n	8008088 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2220      	movs	r2, #32
 8008084:	4313      	orrs	r3, r2
 8008086:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008088:	1cbb      	adds	r3, r7, #2
 800808a:	881b      	ldrh	r3, [r3, #0]
 800808c:	2b40      	cmp	r3, #64	@ 0x40
 800808e:	d103      	bne.n	8008098 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	2240      	movs	r2, #64	@ 0x40
 8008094:	4313      	orrs	r3, r2
 8008096:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	43d9      	mvns	r1, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	400a      	ands	r2, r1
 80080a8:	601a      	str	r2, [r3, #0]
}
 80080aa:	46c0      	nop			@ (mov r8, r8)
 80080ac:	46bd      	mov	sp, r7
 80080ae:	b004      	add	sp, #16
 80080b0:	bd80      	pop	{r7, pc}
	...

080080b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2241      	movs	r2, #65	@ 0x41
 80080c2:	5c9b      	ldrb	r3, [r3, r2]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b20      	cmp	r3, #32
 80080c8:	d138      	bne.n	800813c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	2240      	movs	r2, #64	@ 0x40
 80080ce:	5c9b      	ldrb	r3, [r3, r2]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d101      	bne.n	80080d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80080d4:	2302      	movs	r3, #2
 80080d6:	e032      	b.n	800813e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2240      	movs	r2, #64	@ 0x40
 80080dc:	2101      	movs	r1, #1
 80080de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2241      	movs	r2, #65	@ 0x41
 80080e4:	2124      	movs	r1, #36	@ 0x24
 80080e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	681a      	ldr	r2, [r3, #0]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	2101      	movs	r1, #1
 80080f4:	438a      	bics	r2, r1
 80080f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	681a      	ldr	r2, [r3, #0]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	4911      	ldr	r1, [pc, #68]	@ (8008148 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008104:	400a      	ands	r2, r1
 8008106:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	6819      	ldr	r1, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	683a      	ldr	r2, [r7, #0]
 8008114:	430a      	orrs	r2, r1
 8008116:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	681a      	ldr	r2, [r3, #0]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	2101      	movs	r1, #1
 8008124:	430a      	orrs	r2, r1
 8008126:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2241      	movs	r2, #65	@ 0x41
 800812c:	2120      	movs	r1, #32
 800812e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	2240      	movs	r2, #64	@ 0x40
 8008134:	2100      	movs	r1, #0
 8008136:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	e000      	b.n	800813e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800813c:	2302      	movs	r3, #2
  }
}
 800813e:	0018      	movs	r0, r3
 8008140:	46bd      	mov	sp, r7
 8008142:	b002      	add	sp, #8
 8008144:	bd80      	pop	{r7, pc}
 8008146:	46c0      	nop			@ (mov r8, r8)
 8008148:	ffffefff 	.word	0xffffefff

0800814c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	2241      	movs	r2, #65	@ 0x41
 800815a:	5c9b      	ldrb	r3, [r3, r2]
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b20      	cmp	r3, #32
 8008160:	d139      	bne.n	80081d6 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2240      	movs	r2, #64	@ 0x40
 8008166:	5c9b      	ldrb	r3, [r3, r2]
 8008168:	2b01      	cmp	r3, #1
 800816a:	d101      	bne.n	8008170 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800816c:	2302      	movs	r3, #2
 800816e:	e033      	b.n	80081d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2240      	movs	r2, #64	@ 0x40
 8008174:	2101      	movs	r1, #1
 8008176:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2241      	movs	r2, #65	@ 0x41
 800817c:	2124      	movs	r1, #36	@ 0x24
 800817e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	2101      	movs	r1, #1
 800818c:	438a      	bics	r2, r1
 800818e:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	4a11      	ldr	r2, [pc, #68]	@ (80081e0 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800819c:	4013      	ands	r3, r2
 800819e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	021b      	lsls	r3, r3, #8
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	4313      	orrs	r3, r2
 80081a8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	68fa      	ldr	r2, [r7, #12]
 80081b0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2101      	movs	r1, #1
 80081be:	430a      	orrs	r2, r1
 80081c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2241      	movs	r2, #65	@ 0x41
 80081c6:	2120      	movs	r1, #32
 80081c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2240      	movs	r2, #64	@ 0x40
 80081ce:	2100      	movs	r1, #0
 80081d0:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80081d2:	2300      	movs	r3, #0
 80081d4:	e000      	b.n	80081d8 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80081d6:	2302      	movs	r3, #2
  }
}
 80081d8:	0018      	movs	r0, r3
 80081da:	46bd      	mov	sp, r7
 80081dc:	b004      	add	sp, #16
 80081de:	bd80      	pop	{r7, pc}
 80081e0:	fffff0ff 	.word	0xfffff0ff

080081e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80081e4:	b590      	push	{r4, r7, lr}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d101      	bne.n	80081f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80081f2:	2301      	movs	r3, #1
 80081f4:	e0e4      	b.n	80083c0 <HAL_PCD_Init+0x1dc>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	4a73      	ldr	r2, [pc, #460]	@ (80083c8 <HAL_PCD_Init+0x1e4>)
 80081fa:	5c9b      	ldrb	r3, [r3, r2]
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d108      	bne.n	8008214 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	23a4      	movs	r3, #164	@ 0xa4
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	2100      	movs	r1, #0
 800820a:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	0018      	movs	r0, r3
 8008210:	f007 fbfa 	bl	800fa08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	4a6c      	ldr	r2, [pc, #432]	@ (80083c8 <HAL_PCD_Init+0x1e4>)
 8008218:	2103      	movs	r1, #3
 800821a:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	0018      	movs	r0, r3
 8008222:	f003 fc73 	bl	800bb0c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008226:	230f      	movs	r3, #15
 8008228:	18fb      	adds	r3, r7, r3
 800822a:	2200      	movs	r2, #0
 800822c:	701a      	strb	r2, [r3, #0]
 800822e:	e047      	b.n	80082c0 <HAL_PCD_Init+0xdc>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008230:	200f      	movs	r0, #15
 8008232:	183b      	adds	r3, r7, r0
 8008234:	781a      	ldrb	r2, [r3, #0]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	0013      	movs	r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	189b      	adds	r3, r3, r2
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	18cb      	adds	r3, r1, r3
 8008242:	3311      	adds	r3, #17
 8008244:	2201      	movs	r2, #1
 8008246:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8008248:	183b      	adds	r3, r7, r0
 800824a:	781a      	ldrb	r2, [r3, #0]
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	0013      	movs	r3, r2
 8008250:	009b      	lsls	r3, r3, #2
 8008252:	189b      	adds	r3, r3, r2
 8008254:	00db      	lsls	r3, r3, #3
 8008256:	18cb      	adds	r3, r1, r3
 8008258:	3310      	adds	r3, #16
 800825a:	183a      	adds	r2, r7, r0
 800825c:	7812      	ldrb	r2, [r2, #0]
 800825e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008260:	183b      	adds	r3, r7, r0
 8008262:	781a      	ldrb	r2, [r3, #0]
 8008264:	6879      	ldr	r1, [r7, #4]
 8008266:	0013      	movs	r3, r2
 8008268:	009b      	lsls	r3, r3, #2
 800826a:	189b      	adds	r3, r3, r2
 800826c:	00db      	lsls	r3, r3, #3
 800826e:	18cb      	adds	r3, r1, r3
 8008270:	3313      	adds	r3, #19
 8008272:	2200      	movs	r2, #0
 8008274:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008276:	183b      	adds	r3, r7, r0
 8008278:	781a      	ldrb	r2, [r3, #0]
 800827a:	6879      	ldr	r1, [r7, #4]
 800827c:	0013      	movs	r3, r2
 800827e:	009b      	lsls	r3, r3, #2
 8008280:	189b      	adds	r3, r3, r2
 8008282:	00db      	lsls	r3, r3, #3
 8008284:	18cb      	adds	r3, r1, r3
 8008286:	3320      	adds	r3, #32
 8008288:	2200      	movs	r2, #0
 800828a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800828c:	183b      	adds	r3, r7, r0
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	6879      	ldr	r1, [r7, #4]
 8008292:	0013      	movs	r3, r2
 8008294:	009b      	lsls	r3, r3, #2
 8008296:	189b      	adds	r3, r3, r2
 8008298:	00db      	lsls	r3, r3, #3
 800829a:	18cb      	adds	r3, r1, r3
 800829c:	3324      	adds	r3, #36	@ 0x24
 800829e:	2200      	movs	r2, #0
 80082a0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80082a2:	183b      	adds	r3, r7, r0
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	6879      	ldr	r1, [r7, #4]
 80082a8:	1c5a      	adds	r2, r3, #1
 80082aa:	0013      	movs	r3, r2
 80082ac:	009b      	lsls	r3, r3, #2
 80082ae:	189b      	adds	r3, r3, r2
 80082b0:	00db      	lsls	r3, r3, #3
 80082b2:	2200      	movs	r2, #0
 80082b4:	505a      	str	r2, [r3, r1]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082b6:	183b      	adds	r3, r7, r0
 80082b8:	781a      	ldrb	r2, [r3, #0]
 80082ba:	183b      	adds	r3, r7, r0
 80082bc:	3201      	adds	r2, #1
 80082be:	701a      	strb	r2, [r3, #0]
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	791b      	ldrb	r3, [r3, #4]
 80082c4:	210f      	movs	r1, #15
 80082c6:	187a      	adds	r2, r7, r1
 80082c8:	7812      	ldrb	r2, [r2, #0]
 80082ca:	429a      	cmp	r2, r3
 80082cc:	d3b0      	bcc.n	8008230 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80082ce:	187b      	adds	r3, r7, r1
 80082d0:	2200      	movs	r2, #0
 80082d2:	701a      	strb	r2, [r3, #0]
 80082d4:	e056      	b.n	8008384 <HAL_PCD_Init+0x1a0>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80082d6:	240f      	movs	r4, #15
 80082d8:	193b      	adds	r3, r7, r4
 80082da:	781a      	ldrb	r2, [r3, #0]
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	2352      	movs	r3, #82	@ 0x52
 80082e0:	33ff      	adds	r3, #255	@ 0xff
 80082e2:	0019      	movs	r1, r3
 80082e4:	0013      	movs	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	189b      	adds	r3, r3, r2
 80082ea:	00db      	lsls	r3, r3, #3
 80082ec:	18c3      	adds	r3, r0, r3
 80082ee:	185b      	adds	r3, r3, r1
 80082f0:	2200      	movs	r2, #0
 80082f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80082f4:	193b      	adds	r3, r7, r4
 80082f6:	781a      	ldrb	r2, [r3, #0]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	23a8      	movs	r3, #168	@ 0xa8
 80082fc:	0059      	lsls	r1, r3, #1
 80082fe:	0013      	movs	r3, r2
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	189b      	adds	r3, r3, r2
 8008304:	00db      	lsls	r3, r3, #3
 8008306:	18c3      	adds	r3, r0, r3
 8008308:	185b      	adds	r3, r3, r1
 800830a:	193a      	adds	r2, r7, r4
 800830c:	7812      	ldrb	r2, [r2, #0]
 800830e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008310:	193b      	adds	r3, r7, r4
 8008312:	781a      	ldrb	r2, [r3, #0]
 8008314:	6878      	ldr	r0, [r7, #4]
 8008316:	2354      	movs	r3, #84	@ 0x54
 8008318:	33ff      	adds	r3, #255	@ 0xff
 800831a:	0019      	movs	r1, r3
 800831c:	0013      	movs	r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	189b      	adds	r3, r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	18c3      	adds	r3, r0, r3
 8008326:	185b      	adds	r3, r3, r1
 8008328:	2200      	movs	r2, #0
 800832a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800832c:	193b      	adds	r3, r7, r4
 800832e:	781a      	ldrb	r2, [r3, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	23b0      	movs	r3, #176	@ 0xb0
 8008334:	0059      	lsls	r1, r3, #1
 8008336:	0013      	movs	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	189b      	adds	r3, r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	18c3      	adds	r3, r0, r3
 8008340:	185b      	adds	r3, r3, r1
 8008342:	2200      	movs	r2, #0
 8008344:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008346:	193b      	adds	r3, r7, r4
 8008348:	781a      	ldrb	r2, [r3, #0]
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	23b2      	movs	r3, #178	@ 0xb2
 800834e:	0059      	lsls	r1, r3, #1
 8008350:	0013      	movs	r3, r2
 8008352:	009b      	lsls	r3, r3, #2
 8008354:	189b      	adds	r3, r3, r2
 8008356:	00db      	lsls	r3, r3, #3
 8008358:	18c3      	adds	r3, r0, r3
 800835a:	185b      	adds	r3, r3, r1
 800835c:	2200      	movs	r2, #0
 800835e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008360:	193b      	adds	r3, r7, r4
 8008362:	781a      	ldrb	r2, [r3, #0]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	23b4      	movs	r3, #180	@ 0xb4
 8008368:	0059      	lsls	r1, r3, #1
 800836a:	0013      	movs	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	189b      	adds	r3, r3, r2
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	18c3      	adds	r3, r0, r3
 8008374:	185b      	adds	r3, r3, r1
 8008376:	2200      	movs	r2, #0
 8008378:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800837a:	193b      	adds	r3, r7, r4
 800837c:	781a      	ldrb	r2, [r3, #0]
 800837e:	193b      	adds	r3, r7, r4
 8008380:	3201      	adds	r2, #1
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	791b      	ldrb	r3, [r3, #4]
 8008388:	220f      	movs	r2, #15
 800838a:	18ba      	adds	r2, r7, r2
 800838c:	7812      	ldrb	r2, [r2, #0]
 800838e:	429a      	cmp	r2, r3
 8008390:	d3a1      	bcc.n	80082d6 <HAL_PCD_Init+0xf2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	6818      	ldr	r0, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6859      	ldr	r1, [r3, #4]
 800839a:	689a      	ldr	r2, [r3, #8]
 800839c:	f003 fbd0 	bl	800bb40 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	4a07      	ldr	r2, [pc, #28]	@ (80083c8 <HAL_PCD_Init+0x1e4>)
 80083aa:	2101      	movs	r1, #1
 80083ac:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	7a9b      	ldrb	r3, [r3, #10]
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d103      	bne.n	80083be <HAL_PCD_Init+0x1da>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	0018      	movs	r0, r3
 80083ba:	f001 fd1f 	bl	8009dfc <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	0018      	movs	r0, r3
 80083c2:	46bd      	mov	sp, r7
 80083c4:	b005      	add	sp, #20
 80083c6:	bd90      	pop	{r4, r7, pc}
 80083c8:	00000291 	.word	0x00000291

080083cc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b082      	sub	sp, #8
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	23a4      	movs	r3, #164	@ 0xa4
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	5cd3      	ldrb	r3, [r2, r3]
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_PCD_Start+0x18>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e014      	b.n	800840e <HAL_PCD_Start+0x42>
 80083e4:	687a      	ldr	r2, [r7, #4]
 80083e6:	23a4      	movs	r3, #164	@ 0xa4
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	2101      	movs	r1, #1
 80083ec:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	0018      	movs	r0, r3
 80083f4:	f003 fb74 	bl	800bae0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	0018      	movs	r0, r3
 80083fe:	f005 fb69 	bl	800dad4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8008402:	687a      	ldr	r2, [r7, #4]
 8008404:	23a4      	movs	r3, #164	@ 0xa4
 8008406:	009b      	lsls	r3, r3, #2
 8008408:	2100      	movs	r1, #0
 800840a:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800840c:	2300      	movs	r3, #0
}
 800840e:	0018      	movs	r0, r3
 8008410:	46bd      	mov	sp, r7
 8008412:	b002      	add	sp, #8
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b084      	sub	sp, #16
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	0018      	movs	r0, r3
 8008426:	f005 fb6b 	bl	800db00 <USB_ReadInterrupts>
 800842a:	0003      	movs	r3, r0
 800842c:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	2380      	movs	r3, #128	@ 0x80
 8008432:	021b      	lsls	r3, r3, #8
 8008434:	4013      	ands	r3, r2
 8008436:	d004      	beq.n	8008442 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	0018      	movs	r0, r3
 800843c:	f000 fb60 	bl	8008b00 <PCD_EP_ISR_Handler>

    return;
 8008440:	e11d      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	2380      	movs	r3, #128	@ 0x80
 8008446:	00db      	lsls	r3, r3, #3
 8008448:	4013      	ands	r3, r2
 800844a:	d015      	beq.n	8008478 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2244      	movs	r2, #68	@ 0x44
 8008452:	5a9b      	ldrh	r3, [r3, r2]
 8008454:	b29a      	uxth	r2, r3
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	498a      	ldr	r1, [pc, #552]	@ (8008684 <HAL_PCD_IRQHandler+0x26c>)
 800845c:	400a      	ands	r2, r1
 800845e:	b291      	uxth	r1, r2
 8008460:	2244      	movs	r2, #68	@ 0x44
 8008462:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	0018      	movs	r0, r3
 8008468:	f007 fb59 	bl	800fb1e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2100      	movs	r1, #0
 8008470:	0018      	movs	r0, r3
 8008472:	f000 f915 	bl	80086a0 <HAL_PCD_SetAddress>

    return;
 8008476:	e102      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	2380      	movs	r3, #128	@ 0x80
 800847c:	01db      	lsls	r3, r3, #7
 800847e:	4013      	ands	r3, r2
 8008480:	d00c      	beq.n	800849c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	2244      	movs	r2, #68	@ 0x44
 8008488:	5a9b      	ldrh	r3, [r3, r2]
 800848a:	b29a      	uxth	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	497d      	ldr	r1, [pc, #500]	@ (8008688 <HAL_PCD_IRQHandler+0x270>)
 8008492:	400a      	ands	r2, r1
 8008494:	b291      	uxth	r1, r2
 8008496:	2244      	movs	r2, #68	@ 0x44
 8008498:	5299      	strh	r1, [r3, r2]

    return;
 800849a:	e0f0      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800849c:	68fa      	ldr	r2, [r7, #12]
 800849e:	2380      	movs	r3, #128	@ 0x80
 80084a0:	019b      	lsls	r3, r3, #6
 80084a2:	4013      	ands	r3, r2
 80084a4:	d00c      	beq.n	80084c0 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	2244      	movs	r2, #68	@ 0x44
 80084ac:	5a9b      	ldrh	r3, [r3, r2]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	4975      	ldr	r1, [pc, #468]	@ (800868c <HAL_PCD_IRQHandler+0x274>)
 80084b6:	400a      	ands	r2, r1
 80084b8:	b291      	uxth	r1, r2
 80084ba:	2244      	movs	r2, #68	@ 0x44
 80084bc:	5299      	strh	r1, [r3, r2]

    return;
 80084be:	e0de      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	2380      	movs	r3, #128	@ 0x80
 80084c4:	015b      	lsls	r3, r3, #5
 80084c6:	4013      	ands	r3, r2
 80084c8:	d038      	beq.n	800853c <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2240      	movs	r2, #64	@ 0x40
 80084d0:	5a9b      	ldrh	r3, [r3, r2]
 80084d2:	b29a      	uxth	r2, r3
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2104      	movs	r1, #4
 80084da:	438a      	bics	r2, r1
 80084dc:	b291      	uxth	r1, r2
 80084de:	2240      	movs	r2, #64	@ 0x40
 80084e0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	2240      	movs	r2, #64	@ 0x40
 80084e8:	5a9b      	ldrh	r3, [r3, r2]
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2108      	movs	r1, #8
 80084f2:	438a      	bics	r2, r1
 80084f4:	b291      	uxth	r1, r2
 80084f6:	2240      	movs	r2, #64	@ 0x40
 80084f8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 80084fa:	687a      	ldr	r2, [r7, #4]
 80084fc:	23b2      	movs	r3, #178	@ 0xb2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	5cd3      	ldrb	r3, [r2, r3]
 8008502:	2b01      	cmp	r3, #1
 8008504:	d109      	bne.n	800851a <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	23b2      	movs	r3, #178	@ 0xb2
 800850a:	009b      	lsls	r3, r3, #2
 800850c:	2100      	movs	r1, #0
 800850e:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2100      	movs	r1, #0
 8008514:	0018      	movs	r0, r3
 8008516:	f001 fc9b 	bl	8009e50 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	0018      	movs	r0, r3
 800851e:	f007 fb3f 	bl	800fba0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	2244      	movs	r2, #68	@ 0x44
 8008528:	5a9b      	ldrh	r3, [r3, r2]
 800852a:	b29a      	uxth	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	4957      	ldr	r1, [pc, #348]	@ (8008690 <HAL_PCD_IRQHandler+0x278>)
 8008532:	400a      	ands	r2, r1
 8008534:	b291      	uxth	r1, r2
 8008536:	2244      	movs	r2, #68	@ 0x44
 8008538:	5299      	strh	r1, [r3, r2]

    return;
 800853a:	e0a0      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	2380      	movs	r3, #128	@ 0x80
 8008540:	011b      	lsls	r3, r3, #4
 8008542:	4013      	ands	r3, r2
 8008544:	d028      	beq.n	8008598 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2240      	movs	r2, #64	@ 0x40
 800854c:	5a9b      	ldrh	r3, [r3, r2]
 800854e:	b29a      	uxth	r2, r3
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2108      	movs	r1, #8
 8008556:	430a      	orrs	r2, r1
 8008558:	b291      	uxth	r1, r2
 800855a:	2240      	movs	r2, #64	@ 0x40
 800855c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2244      	movs	r2, #68	@ 0x44
 8008564:	5a9b      	ldrh	r3, [r3, r2]
 8008566:	b29a      	uxth	r2, r3
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4949      	ldr	r1, [pc, #292]	@ (8008694 <HAL_PCD_IRQHandler+0x27c>)
 800856e:	400a      	ands	r2, r1
 8008570:	b291      	uxth	r1, r2
 8008572:	2244      	movs	r2, #68	@ 0x44
 8008574:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2240      	movs	r2, #64	@ 0x40
 800857c:	5a9b      	ldrh	r3, [r3, r2]
 800857e:	b29a      	uxth	r2, r3
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	2104      	movs	r1, #4
 8008586:	430a      	orrs	r2, r1
 8008588:	b291      	uxth	r1, r2
 800858a:	2240      	movs	r2, #64	@ 0x40
 800858c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	0018      	movs	r0, r3
 8008592:	f007 fae9 	bl	800fb68 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008596:	e072      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2280      	movs	r2, #128	@ 0x80
 800859c:	4013      	ands	r3, r2
 800859e:	d046      	beq.n	800862e <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	2244      	movs	r2, #68	@ 0x44
 80085a6:	5a9b      	ldrh	r3, [r3, r2]
 80085a8:	b29a      	uxth	r2, r3
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2180      	movs	r1, #128	@ 0x80
 80085b0:	438a      	bics	r2, r1
 80085b2:	b291      	uxth	r1, r2
 80085b4:	2244      	movs	r2, #68	@ 0x44
 80085b6:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	23b2      	movs	r3, #178	@ 0xb2
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	5cd3      	ldrb	r3, [r2, r3]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d12f      	bne.n	8008624 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	2240      	movs	r2, #64	@ 0x40
 80085ca:	5a9b      	ldrh	r3, [r3, r2]
 80085cc:	b29a      	uxth	r2, r3
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2104      	movs	r1, #4
 80085d4:	430a      	orrs	r2, r1
 80085d6:	b291      	uxth	r1, r2
 80085d8:	2240      	movs	r2, #64	@ 0x40
 80085da:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2240      	movs	r2, #64	@ 0x40
 80085e2:	5a9b      	ldrh	r3, [r3, r2]
 80085e4:	b29a      	uxth	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	2108      	movs	r1, #8
 80085ec:	430a      	orrs	r2, r1
 80085ee:	b291      	uxth	r1, r2
 80085f0:	2240      	movs	r2, #64	@ 0x40
 80085f2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	23b2      	movs	r3, #178	@ 0xb2
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	2101      	movs	r1, #1
 80085fc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	2254      	movs	r2, #84	@ 0x54
 8008604:	5a9b      	ldrh	r3, [r3, r2]
 8008606:	b29b      	uxth	r3, r3
 8008608:	089b      	lsrs	r3, r3, #2
 800860a:	223c      	movs	r2, #60	@ 0x3c
 800860c:	4013      	ands	r3, r2
 800860e:	0019      	movs	r1, r3
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	23b3      	movs	r3, #179	@ 0xb3
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2101      	movs	r1, #1
 800861c:	0018      	movs	r0, r3
 800861e:	f001 fc17 	bl	8009e50 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8008622:	e02c      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	0018      	movs	r0, r3
 8008628:	f007 fa9e 	bl	800fb68 <HAL_PCD_SuspendCallback>
    return;
 800862c:	e027      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800862e:	68fa      	ldr	r2, [r7, #12]
 8008630:	2380      	movs	r3, #128	@ 0x80
 8008632:	009b      	lsls	r3, r3, #2
 8008634:	4013      	ands	r3, r2
 8008636:	d010      	beq.n	800865a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2244      	movs	r2, #68	@ 0x44
 800863e:	5a9b      	ldrh	r3, [r3, r2]
 8008640:	b29a      	uxth	r2, r3
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4914      	ldr	r1, [pc, #80]	@ (8008698 <HAL_PCD_IRQHandler+0x280>)
 8008648:	400a      	ands	r2, r1
 800864a:	b291      	uxth	r1, r2
 800864c:	2244      	movs	r2, #68	@ 0x44
 800864e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	0018      	movs	r0, r3
 8008654:	f007 fa54 	bl	800fb00 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8008658:	e011      	b.n	800867e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800865a:	68fa      	ldr	r2, [r7, #12]
 800865c:	2380      	movs	r3, #128	@ 0x80
 800865e:	005b      	lsls	r3, r3, #1
 8008660:	4013      	ands	r3, r2
 8008662:	d00c      	beq.n	800867e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	2244      	movs	r2, #68	@ 0x44
 800866a:	5a9b      	ldrh	r3, [r3, r2]
 800866c:	b29a      	uxth	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	490a      	ldr	r1, [pc, #40]	@ (800869c <HAL_PCD_IRQHandler+0x284>)
 8008674:	400a      	ands	r2, r1
 8008676:	b291      	uxth	r1, r2
 8008678:	2244      	movs	r2, #68	@ 0x44
 800867a:	5299      	strh	r1, [r3, r2]

    return;
 800867c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800867e:	46bd      	mov	sp, r7
 8008680:	b004      	add	sp, #16
 8008682:	bd80      	pop	{r7, pc}
 8008684:	fffffbff 	.word	0xfffffbff
 8008688:	ffffbfff 	.word	0xffffbfff
 800868c:	ffffdfff 	.word	0xffffdfff
 8008690:	ffffefff 	.word	0xffffefff
 8008694:	fffff7ff 	.word	0xfffff7ff
 8008698:	fffffdff 	.word	0xfffffdff
 800869c:	fffffeff 	.word	0xfffffeff

080086a0 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b082      	sub	sp, #8
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	000a      	movs	r2, r1
 80086aa:	1cfb      	adds	r3, r7, #3
 80086ac:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	23a4      	movs	r3, #164	@ 0xa4
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	5cd3      	ldrb	r3, [r2, r3]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d101      	bne.n	80086be <HAL_PCD_SetAddress+0x1e>
 80086ba:	2302      	movs	r3, #2
 80086bc:	e016      	b.n	80086ec <HAL_PCD_SetAddress+0x4c>
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	23a4      	movs	r3, #164	@ 0xa4
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	2101      	movs	r1, #1
 80086c6:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	1cfa      	adds	r2, r7, #3
 80086cc:	7812      	ldrb	r2, [r2, #0]
 80086ce:	731a      	strb	r2, [r3, #12]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681a      	ldr	r2, [r3, #0]
 80086d4:	1cfb      	adds	r3, r7, #3
 80086d6:	781b      	ldrb	r3, [r3, #0]
 80086d8:	0019      	movs	r1, r3
 80086da:	0010      	movs	r0, r2
 80086dc:	f005 f9e6 	bl	800daac <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	23a4      	movs	r3, #164	@ 0xa4
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	2100      	movs	r1, #0
 80086e8:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	0018      	movs	r0, r3
 80086ee:	46bd      	mov	sp, r7
 80086f0:	b002      	add	sp, #8
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80086f4:	b590      	push	{r4, r7, lr}
 80086f6:	b085      	sub	sp, #20
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
 80086fc:	000c      	movs	r4, r1
 80086fe:	0010      	movs	r0, r2
 8008700:	0019      	movs	r1, r3
 8008702:	1cfb      	adds	r3, r7, #3
 8008704:	1c22      	adds	r2, r4, #0
 8008706:	701a      	strb	r2, [r3, #0]
 8008708:	003b      	movs	r3, r7
 800870a:	1c02      	adds	r2, r0, #0
 800870c:	801a      	strh	r2, [r3, #0]
 800870e:	1cbb      	adds	r3, r7, #2
 8008710:	1c0a      	adds	r2, r1, #0
 8008712:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008714:	230b      	movs	r3, #11
 8008716:	18fb      	adds	r3, r7, r3
 8008718:	2200      	movs	r2, #0
 800871a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800871c:	1cfb      	adds	r3, r7, #3
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	b25b      	sxtb	r3, r3
 8008722:	2b00      	cmp	r3, #0
 8008724:	da0f      	bge.n	8008746 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008726:	1cfb      	adds	r3, r7, #3
 8008728:	781b      	ldrb	r3, [r3, #0]
 800872a:	2207      	movs	r2, #7
 800872c:	401a      	ands	r2, r3
 800872e:	0013      	movs	r3, r2
 8008730:	009b      	lsls	r3, r3, #2
 8008732:	189b      	adds	r3, r3, r2
 8008734:	00db      	lsls	r3, r3, #3
 8008736:	3310      	adds	r3, #16
 8008738:	687a      	ldr	r2, [r7, #4]
 800873a:	18d3      	adds	r3, r2, r3
 800873c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2201      	movs	r2, #1
 8008742:	705a      	strb	r2, [r3, #1]
 8008744:	e00f      	b.n	8008766 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008746:	1cfb      	adds	r3, r7, #3
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	2207      	movs	r2, #7
 800874c:	401a      	ands	r2, r3
 800874e:	0013      	movs	r3, r2
 8008750:	009b      	lsls	r3, r3, #2
 8008752:	189b      	adds	r3, r3, r2
 8008754:	00db      	lsls	r3, r3, #3
 8008756:	3351      	adds	r3, #81	@ 0x51
 8008758:	33ff      	adds	r3, #255	@ 0xff
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	18d3      	adds	r3, r2, r3
 800875e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	2200      	movs	r2, #0
 8008764:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008766:	1cfb      	adds	r3, r7, #3
 8008768:	781b      	ldrb	r3, [r3, #0]
 800876a:	2207      	movs	r2, #7
 800876c:	4013      	ands	r3, r2
 800876e:	b2da      	uxtb	r2, r3
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008774:	003b      	movs	r3, r7
 8008776:	881a      	ldrh	r2, [r3, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	1cba      	adds	r2, r7, #2
 8008780:	7812      	ldrb	r2, [r2, #0]
 8008782:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008784:	1cbb      	adds	r3, r7, #2
 8008786:	781b      	ldrb	r3, [r3, #0]
 8008788:	2b02      	cmp	r3, #2
 800878a:	d102      	bne.n	8008792 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2200      	movs	r2, #0
 8008790:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008792:	687a      	ldr	r2, [r7, #4]
 8008794:	23a4      	movs	r3, #164	@ 0xa4
 8008796:	009b      	lsls	r3, r3, #2
 8008798:	5cd3      	ldrb	r3, [r2, r3]
 800879a:	2b01      	cmp	r3, #1
 800879c:	d101      	bne.n	80087a2 <HAL_PCD_EP_Open+0xae>
 800879e:	2302      	movs	r3, #2
 80087a0:	e013      	b.n	80087ca <HAL_PCD_EP_Open+0xd6>
 80087a2:	687a      	ldr	r2, [r7, #4]
 80087a4:	23a4      	movs	r3, #164	@ 0xa4
 80087a6:	009b      	lsls	r3, r3, #2
 80087a8:	2101      	movs	r1, #1
 80087aa:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	0011      	movs	r1, r2
 80087b4:	0018      	movs	r0, r3
 80087b6:	f003 f9df 	bl	800bb78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	23a4      	movs	r3, #164	@ 0xa4
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	2100      	movs	r1, #0
 80087c2:	54d1      	strb	r1, [r2, r3]

  return ret;
 80087c4:	230b      	movs	r3, #11
 80087c6:	18fb      	adds	r3, r7, r3
 80087c8:	781b      	ldrb	r3, [r3, #0]
}
 80087ca:	0018      	movs	r0, r3
 80087cc:	46bd      	mov	sp, r7
 80087ce:	b005      	add	sp, #20
 80087d0:	bd90      	pop	{r4, r7, pc}

080087d2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b084      	sub	sp, #16
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
 80087da:	000a      	movs	r2, r1
 80087dc:	1cfb      	adds	r3, r7, #3
 80087de:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80087e0:	1cfb      	adds	r3, r7, #3
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	b25b      	sxtb	r3, r3
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	da0f      	bge.n	800880a <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80087ea:	1cfb      	adds	r3, r7, #3
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	2207      	movs	r2, #7
 80087f0:	401a      	ands	r2, r3
 80087f2:	0013      	movs	r3, r2
 80087f4:	009b      	lsls	r3, r3, #2
 80087f6:	189b      	adds	r3, r3, r2
 80087f8:	00db      	lsls	r3, r3, #3
 80087fa:	3310      	adds	r3, #16
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	18d3      	adds	r3, r2, r3
 8008800:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	705a      	strb	r2, [r3, #1]
 8008808:	e00f      	b.n	800882a <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800880a:	1cfb      	adds	r3, r7, #3
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2207      	movs	r2, #7
 8008810:	401a      	ands	r2, r3
 8008812:	0013      	movs	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	189b      	adds	r3, r3, r2
 8008818:	00db      	lsls	r3, r3, #3
 800881a:	3351      	adds	r3, #81	@ 0x51
 800881c:	33ff      	adds	r3, #255	@ 0xff
 800881e:	687a      	ldr	r2, [r7, #4]
 8008820:	18d3      	adds	r3, r2, r3
 8008822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	2200      	movs	r2, #0
 8008828:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800882a:	1cfb      	adds	r3, r7, #3
 800882c:	781b      	ldrb	r3, [r3, #0]
 800882e:	2207      	movs	r2, #7
 8008830:	4013      	ands	r3, r2
 8008832:	b2da      	uxtb	r2, r3
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008838:	687a      	ldr	r2, [r7, #4]
 800883a:	23a4      	movs	r3, #164	@ 0xa4
 800883c:	009b      	lsls	r3, r3, #2
 800883e:	5cd3      	ldrb	r3, [r2, r3]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d101      	bne.n	8008848 <HAL_PCD_EP_Close+0x76>
 8008844:	2302      	movs	r3, #2
 8008846:	e011      	b.n	800886c <HAL_PCD_EP_Close+0x9a>
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	23a4      	movs	r3, #164	@ 0xa4
 800884c:	009b      	lsls	r3, r3, #2
 800884e:	2101      	movs	r1, #1
 8008850:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	68fa      	ldr	r2, [r7, #12]
 8008858:	0011      	movs	r1, r2
 800885a:	0018      	movs	r0, r3
 800885c:	f003 fd34 	bl	800c2c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008860:	687a      	ldr	r2, [r7, #4]
 8008862:	23a4      	movs	r3, #164	@ 0xa4
 8008864:	009b      	lsls	r3, r3, #2
 8008866:	2100      	movs	r1, #0
 8008868:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	0018      	movs	r0, r3
 800886e:	46bd      	mov	sp, r7
 8008870:	b004      	add	sp, #16
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b086      	sub	sp, #24
 8008878:	af00      	add	r7, sp, #0
 800887a:	60f8      	str	r0, [r7, #12]
 800887c:	607a      	str	r2, [r7, #4]
 800887e:	603b      	str	r3, [r7, #0]
 8008880:	200b      	movs	r0, #11
 8008882:	183b      	adds	r3, r7, r0
 8008884:	1c0a      	adds	r2, r1, #0
 8008886:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008888:	0001      	movs	r1, r0
 800888a:	187b      	adds	r3, r7, r1
 800888c:	781b      	ldrb	r3, [r3, #0]
 800888e:	2207      	movs	r2, #7
 8008890:	401a      	ands	r2, r3
 8008892:	0013      	movs	r3, r2
 8008894:	009b      	lsls	r3, r3, #2
 8008896:	189b      	adds	r3, r3, r2
 8008898:	00db      	lsls	r3, r3, #3
 800889a:	3351      	adds	r3, #81	@ 0x51
 800889c:	33ff      	adds	r3, #255	@ 0xff
 800889e:	68fa      	ldr	r2, [r7, #12]
 80088a0:	18d3      	adds	r3, r2, r3
 80088a2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80088a4:	697b      	ldr	r3, [r7, #20]
 80088a6:	687a      	ldr	r2, [r7, #4]
 80088a8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	683a      	ldr	r2, [r7, #0]
 80088ae:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80088b0:	697b      	ldr	r3, [r7, #20]
 80088b2:	2200      	movs	r2, #0
 80088b4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2200      	movs	r2, #0
 80088ba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80088bc:	187b      	adds	r3, r7, r1
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	2207      	movs	r2, #7
 80088c2:	4013      	ands	r3, r2
 80088c4:	b2da      	uxtb	r2, r3
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	697a      	ldr	r2, [r7, #20]
 80088d0:	0011      	movs	r1, r2
 80088d2:	0018      	movs	r0, r3
 80088d4:	f003 feb8 	bl	800c648 <USB_EPStartXfer>

  return HAL_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	0018      	movs	r0, r3
 80088dc:	46bd      	mov	sp, r7
 80088de:	b006      	add	sp, #24
 80088e0:	bd80      	pop	{r7, pc}

080088e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80088e2:	b580      	push	{r7, lr}
 80088e4:	b082      	sub	sp, #8
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]
 80088ea:	000a      	movs	r2, r1
 80088ec:	1cfb      	adds	r3, r7, #3
 80088ee:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80088f0:	1cfb      	adds	r3, r7, #3
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	2207      	movs	r2, #7
 80088f6:	401a      	ands	r2, r3
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	23b6      	movs	r3, #182	@ 0xb6
 80088fc:	0059      	lsls	r1, r3, #1
 80088fe:	0013      	movs	r3, r2
 8008900:	009b      	lsls	r3, r3, #2
 8008902:	189b      	adds	r3, r3, r2
 8008904:	00db      	lsls	r3, r3, #3
 8008906:	18c3      	adds	r3, r0, r3
 8008908:	185b      	adds	r3, r3, r1
 800890a:	681b      	ldr	r3, [r3, #0]
}
 800890c:	0018      	movs	r0, r3
 800890e:	46bd      	mov	sp, r7
 8008910:	b002      	add	sp, #8
 8008912:	bd80      	pop	{r7, pc}

08008914 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b086      	sub	sp, #24
 8008918:	af00      	add	r7, sp, #0
 800891a:	60f8      	str	r0, [r7, #12]
 800891c:	607a      	str	r2, [r7, #4]
 800891e:	603b      	str	r3, [r7, #0]
 8008920:	200b      	movs	r0, #11
 8008922:	183b      	adds	r3, r7, r0
 8008924:	1c0a      	adds	r2, r1, #0
 8008926:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008928:	183b      	adds	r3, r7, r0
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	2207      	movs	r2, #7
 800892e:	401a      	ands	r2, r3
 8008930:	0013      	movs	r3, r2
 8008932:	009b      	lsls	r3, r3, #2
 8008934:	189b      	adds	r3, r3, r2
 8008936:	00db      	lsls	r3, r3, #3
 8008938:	3310      	adds	r3, #16
 800893a:	68fa      	ldr	r2, [r7, #12]
 800893c:	18d3      	adds	r3, r2, r3
 800893e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	687a      	ldr	r2, [r7, #4]
 8008944:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	683a      	ldr	r2, [r7, #0]
 800894a:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2224      	movs	r2, #36	@ 0x24
 8008950:	2101      	movs	r1, #1
 8008952:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 8008954:	697b      	ldr	r3, [r7, #20]
 8008956:	683a      	ldr	r2, [r7, #0]
 8008958:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800895a:	697b      	ldr	r3, [r7, #20]
 800895c:	2200      	movs	r2, #0
 800895e:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	2201      	movs	r2, #1
 8008964:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008966:	183b      	adds	r3, r7, r0
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	2207      	movs	r2, #7
 800896c:	4013      	ands	r3, r2
 800896e:	b2da      	uxtb	r2, r3
 8008970:	697b      	ldr	r3, [r7, #20]
 8008972:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	697a      	ldr	r2, [r7, #20]
 800897a:	0011      	movs	r1, r2
 800897c:	0018      	movs	r0, r3
 800897e:	f003 fe63 	bl	800c648 <USB_EPStartXfer>

  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	0018      	movs	r0, r3
 8008986:	46bd      	mov	sp, r7
 8008988:	b006      	add	sp, #24
 800898a:	bd80      	pop	{r7, pc}

0800898c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	000a      	movs	r2, r1
 8008996:	1cfb      	adds	r3, r7, #3
 8008998:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800899a:	1cfb      	adds	r3, r7, #3
 800899c:	781b      	ldrb	r3, [r3, #0]
 800899e:	2207      	movs	r2, #7
 80089a0:	4013      	ands	r3, r2
 80089a2:	687a      	ldr	r2, [r7, #4]
 80089a4:	7912      	ldrb	r2, [r2, #4]
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d901      	bls.n	80089ae <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	e046      	b.n	8008a3c <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80089ae:	1cfb      	adds	r3, r7, #3
 80089b0:	781b      	ldrb	r3, [r3, #0]
 80089b2:	b25b      	sxtb	r3, r3
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da0f      	bge.n	80089d8 <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80089b8:	1cfb      	adds	r3, r7, #3
 80089ba:	781b      	ldrb	r3, [r3, #0]
 80089bc:	2207      	movs	r2, #7
 80089be:	401a      	ands	r2, r3
 80089c0:	0013      	movs	r3, r2
 80089c2:	009b      	lsls	r3, r3, #2
 80089c4:	189b      	adds	r3, r3, r2
 80089c6:	00db      	lsls	r3, r3, #3
 80089c8:	3310      	adds	r3, #16
 80089ca:	687a      	ldr	r2, [r7, #4]
 80089cc:	18d3      	adds	r3, r2, r3
 80089ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	705a      	strb	r2, [r3, #1]
 80089d6:	e00d      	b.n	80089f4 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80089d8:	1cfb      	adds	r3, r7, #3
 80089da:	781a      	ldrb	r2, [r3, #0]
 80089dc:	0013      	movs	r3, r2
 80089de:	009b      	lsls	r3, r3, #2
 80089e0:	189b      	adds	r3, r3, r2
 80089e2:	00db      	lsls	r3, r3, #3
 80089e4:	3351      	adds	r3, #81	@ 0x51
 80089e6:	33ff      	adds	r3, #255	@ 0xff
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	18d3      	adds	r3, r2, r3
 80089ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2200      	movs	r2, #0
 80089f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2201      	movs	r2, #1
 80089f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80089fa:	1cfb      	adds	r3, r7, #3
 80089fc:	781b      	ldrb	r3, [r3, #0]
 80089fe:	2207      	movs	r2, #7
 8008a00:	4013      	ands	r3, r2
 8008a02:	b2da      	uxtb	r2, r3
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008a08:	687a      	ldr	r2, [r7, #4]
 8008a0a:	23a4      	movs	r3, #164	@ 0xa4
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	5cd3      	ldrb	r3, [r2, r3]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d101      	bne.n	8008a18 <HAL_PCD_EP_SetStall+0x8c>
 8008a14:	2302      	movs	r3, #2
 8008a16:	e011      	b.n	8008a3c <HAL_PCD_EP_SetStall+0xb0>
 8008a18:	687a      	ldr	r2, [r7, #4]
 8008a1a:	23a4      	movs	r3, #164	@ 0xa4
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	2101      	movs	r1, #1
 8008a20:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	68fa      	ldr	r2, [r7, #12]
 8008a28:	0011      	movs	r1, r2
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f004 ff3c 	bl	800d8a8 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	23a4      	movs	r3, #164	@ 0xa4
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	2100      	movs	r1, #0
 8008a38:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8008a3a:	2300      	movs	r3, #0
}
 8008a3c:	0018      	movs	r0, r3
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	b004      	add	sp, #16
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	b084      	sub	sp, #16
 8008a48:	af00      	add	r7, sp, #0
 8008a4a:	6078      	str	r0, [r7, #4]
 8008a4c:	000a      	movs	r2, r1
 8008a4e:	1cfb      	adds	r3, r7, #3
 8008a50:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008a52:	1cfb      	adds	r3, r7, #3
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	220f      	movs	r2, #15
 8008a58:	4013      	ands	r3, r2
 8008a5a:	687a      	ldr	r2, [r7, #4]
 8008a5c:	7912      	ldrb	r2, [r2, #4]
 8008a5e:	4293      	cmp	r3, r2
 8008a60:	d901      	bls.n	8008a66 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8008a62:	2301      	movs	r3, #1
 8008a64:	e048      	b.n	8008af8 <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008a66:	1cfb      	adds	r3, r7, #3
 8008a68:	781b      	ldrb	r3, [r3, #0]
 8008a6a:	b25b      	sxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	da0f      	bge.n	8008a90 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008a70:	1cfb      	adds	r3, r7, #3
 8008a72:	781b      	ldrb	r3, [r3, #0]
 8008a74:	2207      	movs	r2, #7
 8008a76:	401a      	ands	r2, r3
 8008a78:	0013      	movs	r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	189b      	adds	r3, r3, r2
 8008a7e:	00db      	lsls	r3, r3, #3
 8008a80:	3310      	adds	r3, #16
 8008a82:	687a      	ldr	r2, [r7, #4]
 8008a84:	18d3      	adds	r3, r2, r3
 8008a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2201      	movs	r2, #1
 8008a8c:	705a      	strb	r2, [r3, #1]
 8008a8e:	e00f      	b.n	8008ab0 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008a90:	1cfb      	adds	r3, r7, #3
 8008a92:	781b      	ldrb	r3, [r3, #0]
 8008a94:	2207      	movs	r2, #7
 8008a96:	401a      	ands	r2, r3
 8008a98:	0013      	movs	r3, r2
 8008a9a:	009b      	lsls	r3, r3, #2
 8008a9c:	189b      	adds	r3, r3, r2
 8008a9e:	00db      	lsls	r3, r3, #3
 8008aa0:	3351      	adds	r3, #81	@ 0x51
 8008aa2:	33ff      	adds	r3, #255	@ 0xff
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	18d3      	adds	r3, r2, r3
 8008aa8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008ab6:	1cfb      	adds	r3, r7, #3
 8008ab8:	781b      	ldrb	r3, [r3, #0]
 8008aba:	2207      	movs	r2, #7
 8008abc:	4013      	ands	r3, r2
 8008abe:	b2da      	uxtb	r2, r3
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008ac4:	687a      	ldr	r2, [r7, #4]
 8008ac6:	23a4      	movs	r3, #164	@ 0xa4
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	5cd3      	ldrb	r3, [r2, r3]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d101      	bne.n	8008ad4 <HAL_PCD_EP_ClrStall+0x90>
 8008ad0:	2302      	movs	r3, #2
 8008ad2:	e011      	b.n	8008af8 <HAL_PCD_EP_ClrStall+0xb4>
 8008ad4:	687a      	ldr	r2, [r7, #4]
 8008ad6:	23a4      	movs	r3, #164	@ 0xa4
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	2101      	movs	r1, #1
 8008adc:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	68fa      	ldr	r2, [r7, #12]
 8008ae4:	0011      	movs	r1, r2
 8008ae6:	0018      	movs	r0, r3
 8008ae8:	f004 ff2e 	bl	800d948 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	23a4      	movs	r3, #164	@ 0xa4
 8008af0:	009b      	lsls	r3, r3, #2
 8008af2:	2100      	movs	r1, #0
 8008af4:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8008af6:	2300      	movs	r3, #0
}
 8008af8:	0018      	movs	r0, r3
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b004      	add	sp, #16
 8008afe:	bd80      	pop	{r7, pc}

08008b00 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8008b00:	b5b0      	push	{r4, r5, r7, lr}
 8008b02:	b096      	sub	sp, #88	@ 0x58
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8008b08:	f000 fbea 	bl	80092e0 <PCD_EP_ISR_Handler+0x7e0>
  {
    wIstr = hpcd->Instance->ISTR;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681a      	ldr	r2, [r3, #0]
 8008b10:	2048      	movs	r0, #72	@ 0x48
 8008b12:	183b      	adds	r3, r7, r0
 8008b14:	2144      	movs	r1, #68	@ 0x44
 8008b16:	5a52      	ldrh	r2, [r2, r1]
 8008b18:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8008b1a:	183b      	adds	r3, r7, r0
 8008b1c:	881b      	ldrh	r3, [r3, #0]
 8008b1e:	b2da      	uxtb	r2, r3
 8008b20:	244f      	movs	r4, #79	@ 0x4f
 8008b22:	193b      	adds	r3, r7, r4
 8008b24:	210f      	movs	r1, #15
 8008b26:	400a      	ands	r2, r1
 8008b28:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8008b2a:	193b      	adds	r3, r7, r4
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d000      	beq.n	8008b34 <PCD_EP_ISR_Handler+0x34>
 8008b32:	e18d      	b.n	8008e50 <PCD_EP_ISR_Handler+0x350>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8008b34:	183b      	adds	r3, r7, r0
 8008b36:	881b      	ldrh	r3, [r3, #0]
 8008b38:	2210      	movs	r2, #16
 8008b3a:	4013      	ands	r3, r2
 8008b3c:	d152      	bne.n	8008be4 <PCD_EP_ISR_Handler+0xe4>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	881b      	ldrh	r3, [r3, #0]
 8008b44:	b29a      	uxth	r2, r3
 8008b46:	200e      	movs	r0, #14
 8008b48:	183b      	adds	r3, r7, r0
 8008b4a:	49ba      	ldr	r1, [pc, #744]	@ (8008e34 <PCD_EP_ISR_Handler+0x334>)
 8008b4c:	400a      	ands	r2, r1
 8008b4e:	801a      	strh	r2, [r3, #0]
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	183a      	adds	r2, r7, r0
 8008b56:	8812      	ldrh	r2, [r2, #0]
 8008b58:	49b7      	ldr	r1, [pc, #732]	@ (8008e38 <PCD_EP_ISR_Handler+0x338>)
 8008b5a:	430a      	orrs	r2, r1
 8008b5c:	b292      	uxth	r2, r2
 8008b5e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	3310      	adds	r3, #16
 8008b64:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2250      	movs	r2, #80	@ 0x50
 8008b6c:	5a9b      	ldrh	r3, [r3, r2]
 8008b6e:	b29b      	uxth	r3, r3
 8008b70:	001a      	movs	r2, r3
 8008b72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	00db      	lsls	r3, r3, #3
 8008b78:	18d2      	adds	r2, r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	18d3      	adds	r3, r2, r3
 8008b80:	4aae      	ldr	r2, [pc, #696]	@ (8008e3c <PCD_EP_ISR_Handler+0x33c>)
 8008b82:	4694      	mov	ip, r2
 8008b84:	4463      	add	r3, ip
 8008b86:	881b      	ldrh	r3, [r3, #0]
 8008b88:	059b      	lsls	r3, r3, #22
 8008b8a:	0d9a      	lsrs	r2, r3, #22
 8008b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b8e:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8008b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b92:	695a      	ldr	r2, [r3, #20]
 8008b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b96:	69db      	ldr	r3, [r3, #28]
 8008b98:	18d2      	adds	r2, r2, r3
 8008b9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b9c:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	0018      	movs	r0, r3
 8008ba4:	f006 ff8e 	bl	800fac4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	7b1b      	ldrb	r3, [r3, #12]
 8008bac:	b2db      	uxtb	r3, r3
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d101      	bne.n	8008bb6 <PCD_EP_ISR_Handler+0xb6>
 8008bb2:	f000 fb95 	bl	80092e0 <PCD_EP_ISR_Handler+0x7e0>
 8008bb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bb8:	699b      	ldr	r3, [r3, #24]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d001      	beq.n	8008bc2 <PCD_EP_ISR_Handler+0xc2>
 8008bbe:	f000 fb8f 	bl	80092e0 <PCD_EP_ISR_Handler+0x7e0>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	7b1b      	ldrb	r3, [r3, #12]
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	2280      	movs	r2, #128	@ 0x80
 8008bca:	4252      	negs	r2, r2
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	0011      	movs	r1, r2
 8008bd6:	224c      	movs	r2, #76	@ 0x4c
 8008bd8:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	731a      	strb	r2, [r3, #12]
 8008be0:	f000 fb7e 	bl	80092e0 <PCD_EP_ISR_Handler+0x7e0>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3351      	adds	r3, #81	@ 0x51
 8008be8:	33ff      	adds	r3, #255	@ 0xff
 8008bea:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681a      	ldr	r2, [r3, #0]
 8008bf0:	214c      	movs	r1, #76	@ 0x4c
 8008bf2:	187b      	adds	r3, r7, r1
 8008bf4:	8812      	ldrh	r2, [r2, #0]
 8008bf6:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8008bf8:	187b      	adds	r3, r7, r1
 8008bfa:	881a      	ldrh	r2, [r3, #0]
 8008bfc:	2380      	movs	r3, #128	@ 0x80
 8008bfe:	011b      	lsls	r3, r3, #4
 8008c00:	4013      	ands	r3, r2
 8008c02:	d037      	beq.n	8008c74 <PCD_EP_ISR_Handler+0x174>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	2250      	movs	r2, #80	@ 0x50
 8008c0a:	5a9b      	ldrh	r3, [r3, r2]
 8008c0c:	b29b      	uxth	r3, r3
 8008c0e:	001a      	movs	r2, r3
 8008c10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c12:	781b      	ldrb	r3, [r3, #0]
 8008c14:	00db      	lsls	r3, r3, #3
 8008c16:	18d2      	adds	r2, r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	18d3      	adds	r3, r2, r3
 8008c1e:	4a88      	ldr	r2, [pc, #544]	@ (8008e40 <PCD_EP_ISR_Handler+0x340>)
 8008c20:	4694      	mov	ip, r2
 8008c22:	4463      	add	r3, ip
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	059b      	lsls	r3, r3, #22
 8008c28:	0d9a      	lsrs	r2, r3, #22
 8008c2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c2c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6818      	ldr	r0, [r3, #0]
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	22a6      	movs	r2, #166	@ 0xa6
 8008c36:	0092      	lsls	r2, r2, #2
 8008c38:	1899      	adds	r1, r3, r2
 8008c3a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c3c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8008c3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c40:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8008c42:	b29b      	uxth	r3, r3
 8008c44:	f004 ffb3 	bl	800dbae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	881b      	ldrh	r3, [r3, #0]
 8008c4e:	b29a      	uxth	r2, r3
 8008c50:	2010      	movs	r0, #16
 8008c52:	183b      	adds	r3, r7, r0
 8008c54:	497b      	ldr	r1, [pc, #492]	@ (8008e44 <PCD_EP_ISR_Handler+0x344>)
 8008c56:	400a      	ands	r2, r1
 8008c58:	801a      	strh	r2, [r3, #0]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	183a      	adds	r2, r7, r0
 8008c60:	8812      	ldrh	r2, [r2, #0]
 8008c62:	2180      	movs	r1, #128	@ 0x80
 8008c64:	430a      	orrs	r2, r1
 8008c66:	b292      	uxth	r2, r2
 8008c68:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	0018      	movs	r0, r3
 8008c6e:	f006 fef3 	bl	800fa58 <HAL_PCD_SetupStageCallback>
 8008c72:	e335      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008c74:	234c      	movs	r3, #76	@ 0x4c
 8008c76:	18fb      	adds	r3, r7, r3
 8008c78:	2200      	movs	r2, #0
 8008c7a:	5e9b      	ldrsh	r3, [r3, r2]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	db00      	blt.n	8008c82 <PCD_EP_ISR_Handler+0x182>
 8008c80:	e32e      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	881b      	ldrh	r3, [r3, #0]
 8008c88:	b29a      	uxth	r2, r3
 8008c8a:	201e      	movs	r0, #30
 8008c8c:	183b      	adds	r3, r7, r0
 8008c8e:	496d      	ldr	r1, [pc, #436]	@ (8008e44 <PCD_EP_ISR_Handler+0x344>)
 8008c90:	400a      	ands	r2, r1
 8008c92:	801a      	strh	r2, [r3, #0]
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	183a      	adds	r2, r7, r0
 8008c9a:	8812      	ldrh	r2, [r2, #0]
 8008c9c:	2180      	movs	r1, #128	@ 0x80
 8008c9e:	430a      	orrs	r2, r1
 8008ca0:	b292      	uxth	r2, r2
 8008ca2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2250      	movs	r2, #80	@ 0x50
 8008caa:	5a9b      	ldrh	r3, [r3, r2]
 8008cac:	b29b      	uxth	r3, r3
 8008cae:	001a      	movs	r2, r3
 8008cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cb2:	781b      	ldrb	r3, [r3, #0]
 8008cb4:	00db      	lsls	r3, r3, #3
 8008cb6:	18d2      	adds	r2, r2, r3
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	18d3      	adds	r3, r2, r3
 8008cbe:	4a60      	ldr	r2, [pc, #384]	@ (8008e40 <PCD_EP_ISR_Handler+0x340>)
 8008cc0:	4694      	mov	ip, r2
 8008cc2:	4463      	add	r3, ip
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	059b      	lsls	r3, r3, #22
 8008cc8:	0d9a      	lsrs	r2, r3, #22
 8008cca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ccc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8008cce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d01a      	beq.n	8008d0c <PCD_EP_ISR_Handler+0x20c>
 8008cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cd8:	695b      	ldr	r3, [r3, #20]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d016      	beq.n	8008d0c <PCD_EP_ISR_Handler+0x20c>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6818      	ldr	r0, [r3, #0]
 8008ce2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ce4:	6959      	ldr	r1, [r3, #20]
 8008ce6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ce8:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8008cea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cec:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8008cee:	b29b      	uxth	r3, r3
 8008cf0:	f004 ff5d 	bl	800dbae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8008cf4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cf6:	695a      	ldr	r2, [r3, #20]
 8008cf8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cfa:	69db      	ldr	r3, [r3, #28]
 8008cfc:	18d2      	adds	r2, r2, r3
 8008cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d00:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2100      	movs	r1, #0
 8008d06:	0018      	movs	r0, r3
 8008d08:	f006 febb 	bl	800fa82 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681a      	ldr	r2, [r3, #0]
 8008d10:	214c      	movs	r1, #76	@ 0x4c
 8008d12:	187b      	adds	r3, r7, r1
 8008d14:	8812      	ldrh	r2, [r2, #0]
 8008d16:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 8008d18:	187b      	adds	r3, r7, r1
 8008d1a:	881a      	ldrh	r2, [r3, #0]
 8008d1c:	2380      	movs	r3, #128	@ 0x80
 8008d1e:	011b      	lsls	r3, r3, #4
 8008d20:	4013      	ands	r3, r2
 8008d22:	d000      	beq.n	8008d26 <PCD_EP_ISR_Handler+0x226>
 8008d24:	e2dc      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
 8008d26:	187b      	adds	r3, r7, r1
 8008d28:	881a      	ldrh	r2, [r3, #0]
 8008d2a:	23c0      	movs	r3, #192	@ 0xc0
 8008d2c:	019b      	lsls	r3, r3, #6
 8008d2e:	401a      	ands	r2, r3
 8008d30:	23c0      	movs	r3, #192	@ 0xc0
 8008d32:	019b      	lsls	r3, r3, #6
 8008d34:	429a      	cmp	r2, r3
 8008d36:	d100      	bne.n	8008d3a <PCD_EP_ISR_Handler+0x23a>
 8008d38:	e2d2      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	61bb      	str	r3, [r7, #24]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	2250      	movs	r2, #80	@ 0x50
 8008d46:	5a9b      	ldrh	r3, [r3, r2]
 8008d48:	b29b      	uxth	r3, r3
 8008d4a:	001a      	movs	r2, r3
 8008d4c:	69bb      	ldr	r3, [r7, #24]
 8008d4e:	189b      	adds	r3, r3, r2
 8008d50:	61bb      	str	r3, [r7, #24]
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	4a3a      	ldr	r2, [pc, #232]	@ (8008e40 <PCD_EP_ISR_Handler+0x340>)
 8008d56:	4694      	mov	ip, r2
 8008d58:	4463      	add	r3, ip
 8008d5a:	617b      	str	r3, [r7, #20]
 8008d5c:	697b      	ldr	r3, [r7, #20]
 8008d5e:	881b      	ldrh	r3, [r3, #0]
 8008d60:	b29b      	uxth	r3, r3
 8008d62:	059b      	lsls	r3, r3, #22
 8008d64:	0d9b      	lsrs	r3, r3, #22
 8008d66:	b29a      	uxth	r2, r3
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	801a      	strh	r2, [r3, #0]
 8008d6c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d6e:	691b      	ldr	r3, [r3, #16]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d108      	bne.n	8008d86 <PCD_EP_ISR_Handler+0x286>
 8008d74:	697b      	ldr	r3, [r7, #20]
 8008d76:	881b      	ldrh	r3, [r3, #0]
 8008d78:	b29b      	uxth	r3, r3
 8008d7a:	4a2f      	ldr	r2, [pc, #188]	@ (8008e38 <PCD_EP_ISR_Handler+0x338>)
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	b29a      	uxth	r2, r3
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	801a      	strh	r2, [r3, #0]
 8008d84:	e035      	b.n	8008df2 <PCD_EP_ISR_Handler+0x2f2>
 8008d86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d88:	691b      	ldr	r3, [r3, #16]
 8008d8a:	2b3e      	cmp	r3, #62	@ 0x3e
 8008d8c:	d817      	bhi.n	8008dbe <PCD_EP_ISR_Handler+0x2be>
 8008d8e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	085b      	lsrs	r3, r3, #1
 8008d94:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d98:	691b      	ldr	r3, [r3, #16]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	d002      	beq.n	8008da6 <PCD_EP_ISR_Handler+0x2a6>
 8008da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008da2:	3301      	adds	r3, #1
 8008da4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008da6:	697b      	ldr	r3, [r7, #20]
 8008da8:	881b      	ldrh	r3, [r3, #0]
 8008daa:	b29a      	uxth	r2, r3
 8008dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dae:	b29b      	uxth	r3, r3
 8008db0:	029b      	lsls	r3, r3, #10
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	4313      	orrs	r3, r2
 8008db6:	b29a      	uxth	r2, r3
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	801a      	strh	r2, [r3, #0]
 8008dbc:	e019      	b.n	8008df2 <PCD_EP_ISR_Handler+0x2f2>
 8008dbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	095b      	lsrs	r3, r3, #5
 8008dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008dc8:	691b      	ldr	r3, [r3, #16]
 8008dca:	221f      	movs	r2, #31
 8008dcc:	4013      	ands	r3, r2
 8008dce:	d102      	bne.n	8008dd6 <PCD_EP_ISR_Handler+0x2d6>
 8008dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dd2:	3b01      	subs	r3, #1
 8008dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	881b      	ldrh	r3, [r3, #0]
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008dde:	b29b      	uxth	r3, r3
 8008de0:	029b      	lsls	r3, r3, #10
 8008de2:	b29b      	uxth	r3, r3
 8008de4:	4313      	orrs	r3, r2
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	4a13      	ldr	r2, [pc, #76]	@ (8008e38 <PCD_EP_ISR_Handler+0x338>)
 8008dea:	4313      	orrs	r3, r2
 8008dec:	b29a      	uxth	r2, r3
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	b29a      	uxth	r2, r3
 8008dfa:	2012      	movs	r0, #18
 8008dfc:	183b      	adds	r3, r7, r0
 8008dfe:	4912      	ldr	r1, [pc, #72]	@ (8008e48 <PCD_EP_ISR_Handler+0x348>)
 8008e00:	400a      	ands	r2, r1
 8008e02:	801a      	strh	r2, [r3, #0]
 8008e04:	183b      	adds	r3, r7, r0
 8008e06:	183a      	adds	r2, r7, r0
 8008e08:	8812      	ldrh	r2, [r2, #0]
 8008e0a:	2180      	movs	r1, #128	@ 0x80
 8008e0c:	0149      	lsls	r1, r1, #5
 8008e0e:	404a      	eors	r2, r1
 8008e10:	801a      	strh	r2, [r3, #0]
 8008e12:	183b      	adds	r3, r7, r0
 8008e14:	183a      	adds	r2, r7, r0
 8008e16:	8812      	ldrh	r2, [r2, #0]
 8008e18:	2180      	movs	r1, #128	@ 0x80
 8008e1a:	0189      	lsls	r1, r1, #6
 8008e1c:	404a      	eors	r2, r1
 8008e1e:	801a      	strh	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	183a      	adds	r2, r7, r0
 8008e26:	8812      	ldrh	r2, [r2, #0]
 8008e28:	4908      	ldr	r1, [pc, #32]	@ (8008e4c <PCD_EP_ISR_Handler+0x34c>)
 8008e2a:	430a      	orrs	r2, r1
 8008e2c:	b292      	uxth	r2, r2
 8008e2e:	801a      	strh	r2, [r3, #0]
 8008e30:	e256      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
 8008e32:	46c0      	nop			@ (mov r8, r8)
 8008e34:	ffff8f0f 	.word	0xffff8f0f
 8008e38:	ffff8000 	.word	0xffff8000
 8008e3c:	00000402 	.word	0x00000402
 8008e40:	00000406 	.word	0x00000406
 8008e44:	00000f8f 	.word	0x00000f8f
 8008e48:	ffffbf8f 	.word	0xffffbf8f
 8008e4c:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	001a      	movs	r2, r3
 8008e56:	204f      	movs	r0, #79	@ 0x4f
 8008e58:	183b      	adds	r3, r7, r0
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	009b      	lsls	r3, r3, #2
 8008e5e:	18d2      	adds	r2, r2, r3
 8008e60:	214c      	movs	r1, #76	@ 0x4c
 8008e62:	187b      	adds	r3, r7, r1
 8008e64:	8812      	ldrh	r2, [r2, #0]
 8008e66:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8008e68:	187b      	adds	r3, r7, r1
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	5e9b      	ldrsh	r3, [r3, r2]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	db00      	blt.n	8008e74 <PCD_EP_ISR_Handler+0x374>
 8008e72:	e0fa      	b.n	800906a <PCD_EP_ISR_Handler+0x56a>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	001a      	movs	r2, r3
 8008e7a:	183b      	adds	r3, r7, r0
 8008e7c:	781b      	ldrb	r3, [r3, #0]
 8008e7e:	009b      	lsls	r3, r3, #2
 8008e80:	18d3      	adds	r3, r2, r3
 8008e82:	881b      	ldrh	r3, [r3, #0]
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	244a      	movs	r4, #74	@ 0x4a
 8008e88:	193b      	adds	r3, r7, r4
 8008e8a:	49d1      	ldr	r1, [pc, #836]	@ (80091d0 <PCD_EP_ISR_Handler+0x6d0>)
 8008e8c:	400a      	ands	r2, r1
 8008e8e:	801a      	strh	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	001a      	movs	r2, r3
 8008e96:	183b      	adds	r3, r7, r0
 8008e98:	781b      	ldrb	r3, [r3, #0]
 8008e9a:	009b      	lsls	r3, r3, #2
 8008e9c:	18d3      	adds	r3, r2, r3
 8008e9e:	193a      	adds	r2, r7, r4
 8008ea0:	8812      	ldrh	r2, [r2, #0]
 8008ea2:	2180      	movs	r1, #128	@ 0x80
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	b292      	uxth	r2, r2
 8008ea8:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8008eaa:	183b      	adds	r3, r7, r0
 8008eac:	781a      	ldrb	r2, [r3, #0]
 8008eae:	0013      	movs	r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	189b      	adds	r3, r3, r2
 8008eb4:	00db      	lsls	r3, r3, #3
 8008eb6:	3351      	adds	r3, #81	@ 0x51
 8008eb8:	33ff      	adds	r3, #255	@ 0xff
 8008eba:	687a      	ldr	r2, [r7, #4]
 8008ebc:	18d3      	adds	r3, r2, r3
 8008ebe:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8008ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ec2:	7b1b      	ldrb	r3, [r3, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d125      	bne.n	8008f14 <PCD_EP_ISR_Handler+0x414>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	2250      	movs	r2, #80	@ 0x50
 8008ece:	5a9b      	ldrh	r3, [r3, r2]
 8008ed0:	b29b      	uxth	r3, r3
 8008ed2:	001a      	movs	r2, r3
 8008ed4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ed6:	781b      	ldrb	r3, [r3, #0]
 8008ed8:	00db      	lsls	r3, r3, #3
 8008eda:	18d2      	adds	r2, r2, r3
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	18d3      	adds	r3, r2, r3
 8008ee2:	4abc      	ldr	r2, [pc, #752]	@ (80091d4 <PCD_EP_ISR_Handler+0x6d4>)
 8008ee4:	4694      	mov	ip, r2
 8008ee6:	4463      	add	r3, ip
 8008ee8:	881a      	ldrh	r2, [r3, #0]
 8008eea:	2450      	movs	r4, #80	@ 0x50
 8008eec:	193b      	adds	r3, r7, r4
 8008eee:	0592      	lsls	r2, r2, #22
 8008ef0:	0d92      	lsrs	r2, r2, #22
 8008ef2:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 8008ef4:	193b      	adds	r3, r7, r4
 8008ef6:	881b      	ldrh	r3, [r3, #0]
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d100      	bne.n	8008efe <PCD_EP_ISR_Handler+0x3fe>
 8008efc:	e08d      	b.n	800901a <PCD_EP_ISR_Handler+0x51a>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6818      	ldr	r0, [r3, #0]
 8008f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f04:	6959      	ldr	r1, [r3, #20]
 8008f06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f08:	88da      	ldrh	r2, [r3, #6]
 8008f0a:	193b      	adds	r3, r7, r4
 8008f0c:	881b      	ldrh	r3, [r3, #0]
 8008f0e:	f004 fe4e 	bl	800dbae <USB_ReadPMA>
 8008f12:	e082      	b.n	800901a <PCD_EP_ISR_Handler+0x51a>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8008f14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f16:	78db      	ldrb	r3, [r3, #3]
 8008f18:	2b02      	cmp	r3, #2
 8008f1a:	d10c      	bne.n	8008f36 <PCD_EP_ISR_Handler+0x436>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8008f1c:	2350      	movs	r3, #80	@ 0x50
 8008f1e:	18fc      	adds	r4, r7, r3
 8008f20:	234c      	movs	r3, #76	@ 0x4c
 8008f22:	18fb      	adds	r3, r7, r3
 8008f24:	881a      	ldrh	r2, [r3, #0]
 8008f26:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	f000 f9ec 	bl	8009308 <HAL_PCD_EP_DB_Receive>
 8008f30:	0003      	movs	r3, r0
 8008f32:	8023      	strh	r3, [r4, #0]
 8008f34:	e071      	b.n	800901a <PCD_EP_ISR_Handler+0x51a>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	001a      	movs	r2, r3
 8008f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f3e:	781b      	ldrb	r3, [r3, #0]
 8008f40:	009b      	lsls	r3, r3, #2
 8008f42:	18d3      	adds	r3, r2, r3
 8008f44:	881b      	ldrh	r3, [r3, #0]
 8008f46:	b29a      	uxth	r2, r3
 8008f48:	2052      	movs	r0, #82	@ 0x52
 8008f4a:	183b      	adds	r3, r7, r0
 8008f4c:	49a2      	ldr	r1, [pc, #648]	@ (80091d8 <PCD_EP_ISR_Handler+0x6d8>)
 8008f4e:	400a      	ands	r2, r1
 8008f50:	801a      	strh	r2, [r3, #0]
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	001a      	movs	r2, r3
 8008f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f5a:	781b      	ldrb	r3, [r3, #0]
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	18d3      	adds	r3, r2, r3
 8008f60:	183a      	adds	r2, r7, r0
 8008f62:	8812      	ldrh	r2, [r2, #0]
 8008f64:	499d      	ldr	r1, [pc, #628]	@ (80091dc <PCD_EP_ISR_Handler+0x6dc>)
 8008f66:	430a      	orrs	r2, r1
 8008f68:	b292      	uxth	r2, r2
 8008f6a:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	001a      	movs	r2, r3
 8008f72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f74:	781b      	ldrb	r3, [r3, #0]
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	18d3      	adds	r3, r2, r3
 8008f7a:	881b      	ldrh	r3, [r3, #0]
 8008f7c:	b29b      	uxth	r3, r3
 8008f7e:	001a      	movs	r2, r3
 8008f80:	2380      	movs	r3, #128	@ 0x80
 8008f82:	01db      	lsls	r3, r3, #7
 8008f84:	4013      	ands	r3, r2
 8008f86:	d024      	beq.n	8008fd2 <PCD_EP_ISR_Handler+0x4d2>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2250      	movs	r2, #80	@ 0x50
 8008f8e:	5a9b      	ldrh	r3, [r3, r2]
 8008f90:	b29b      	uxth	r3, r3
 8008f92:	001a      	movs	r2, r3
 8008f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f96:	781b      	ldrb	r3, [r3, #0]
 8008f98:	00db      	lsls	r3, r3, #3
 8008f9a:	18d2      	adds	r2, r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	18d3      	adds	r3, r2, r3
 8008fa2:	4a8f      	ldr	r2, [pc, #572]	@ (80091e0 <PCD_EP_ISR_Handler+0x6e0>)
 8008fa4:	4694      	mov	ip, r2
 8008fa6:	4463      	add	r3, ip
 8008fa8:	881a      	ldrh	r2, [r3, #0]
 8008faa:	2450      	movs	r4, #80	@ 0x50
 8008fac:	193b      	adds	r3, r7, r4
 8008fae:	0592      	lsls	r2, r2, #22
 8008fb0:	0d92      	lsrs	r2, r2, #22
 8008fb2:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8008fb4:	193b      	adds	r3, r7, r4
 8008fb6:	881b      	ldrh	r3, [r3, #0]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d02e      	beq.n	800901a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6818      	ldr	r0, [r3, #0]
 8008fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc2:	6959      	ldr	r1, [r3, #20]
 8008fc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fc6:	891a      	ldrh	r2, [r3, #8]
 8008fc8:	193b      	adds	r3, r7, r4
 8008fca:	881b      	ldrh	r3, [r3, #0]
 8008fcc:	f004 fdef 	bl	800dbae <USB_ReadPMA>
 8008fd0:	e023      	b.n	800901a <PCD_EP_ISR_Handler+0x51a>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2250      	movs	r2, #80	@ 0x50
 8008fd8:	5a9b      	ldrh	r3, [r3, r2]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	001a      	movs	r2, r3
 8008fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008fe0:	781b      	ldrb	r3, [r3, #0]
 8008fe2:	00db      	lsls	r3, r3, #3
 8008fe4:	18d2      	adds	r2, r2, r3
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	18d3      	adds	r3, r2, r3
 8008fec:	4a79      	ldr	r2, [pc, #484]	@ (80091d4 <PCD_EP_ISR_Handler+0x6d4>)
 8008fee:	4694      	mov	ip, r2
 8008ff0:	4463      	add	r3, ip
 8008ff2:	881a      	ldrh	r2, [r3, #0]
 8008ff4:	2450      	movs	r4, #80	@ 0x50
 8008ff6:	193b      	adds	r3, r7, r4
 8008ff8:	0592      	lsls	r2, r2, #22
 8008ffa:	0d92      	lsrs	r2, r2, #22
 8008ffc:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8008ffe:	193b      	adds	r3, r7, r4
 8009000:	881b      	ldrh	r3, [r3, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d009      	beq.n	800901a <PCD_EP_ISR_Handler+0x51a>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6818      	ldr	r0, [r3, #0]
 800900a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800900c:	6959      	ldr	r1, [r3, #20]
 800900e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009010:	895a      	ldrh	r2, [r3, #10]
 8009012:	193b      	adds	r3, r7, r4
 8009014:	881b      	ldrh	r3, [r3, #0]
 8009016:	f004 fdca 	bl	800dbae <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800901a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800901c:	69da      	ldr	r2, [r3, #28]
 800901e:	2150      	movs	r1, #80	@ 0x50
 8009020:	187b      	adds	r3, r7, r1
 8009022:	881b      	ldrh	r3, [r3, #0]
 8009024:	18d2      	adds	r2, r2, r3
 8009026:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009028:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800902a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800902c:	695a      	ldr	r2, [r3, #20]
 800902e:	187b      	adds	r3, r7, r1
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	18d2      	adds	r2, r2, r3
 8009034:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009036:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8009038:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d005      	beq.n	800904c <PCD_EP_ISR_Handler+0x54c>
 8009040:	187b      	adds	r3, r7, r1
 8009042:	881a      	ldrh	r2, [r3, #0]
 8009044:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009046:	691b      	ldr	r3, [r3, #16]
 8009048:	429a      	cmp	r2, r3
 800904a:	d207      	bcs.n	800905c <PCD_EP_ISR_Handler+0x55c>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800904c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800904e:	781a      	ldrb	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	0011      	movs	r1, r2
 8009054:	0018      	movs	r0, r3
 8009056:	f006 fd14 	bl	800fa82 <HAL_PCD_DataOutStageCallback>
 800905a:	e006      	b.n	800906a <PCD_EP_ISR_Handler+0x56a>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009062:	0011      	movs	r1, r2
 8009064:	0018      	movs	r0, r3
 8009066:	f003 faef 	bl	800c648 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800906a:	244c      	movs	r4, #76	@ 0x4c
 800906c:	193b      	adds	r3, r7, r4
 800906e:	881b      	ldrh	r3, [r3, #0]
 8009070:	2280      	movs	r2, #128	@ 0x80
 8009072:	4013      	ands	r3, r2
 8009074:	d100      	bne.n	8009078 <PCD_EP_ISR_Handler+0x578>
 8009076:	e133      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
      {
        ep = &hpcd->IN_ep[epindex];
 8009078:	204f      	movs	r0, #79	@ 0x4f
 800907a:	183b      	adds	r3, r7, r0
 800907c:	781a      	ldrb	r2, [r3, #0]
 800907e:	0013      	movs	r3, r2
 8009080:	009b      	lsls	r3, r3, #2
 8009082:	189b      	adds	r3, r3, r2
 8009084:	00db      	lsls	r3, r3, #3
 8009086:	3310      	adds	r3, #16
 8009088:	687a      	ldr	r2, [r7, #4]
 800908a:	18d3      	adds	r3, r2, r3
 800908c:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	001a      	movs	r2, r3
 8009094:	183b      	adds	r3, r7, r0
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	18d3      	adds	r3, r2, r3
 800909c:	881b      	ldrh	r3, [r3, #0]
 800909e:	b29a      	uxth	r2, r3
 80090a0:	2542      	movs	r5, #66	@ 0x42
 80090a2:	197b      	adds	r3, r7, r5
 80090a4:	494f      	ldr	r1, [pc, #316]	@ (80091e4 <PCD_EP_ISR_Handler+0x6e4>)
 80090a6:	400a      	ands	r2, r1
 80090a8:	801a      	strh	r2, [r3, #0]
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	001a      	movs	r2, r3
 80090b0:	183b      	adds	r3, r7, r0
 80090b2:	781b      	ldrb	r3, [r3, #0]
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	18d3      	adds	r3, r2, r3
 80090b8:	197a      	adds	r2, r7, r5
 80090ba:	8812      	ldrh	r2, [r2, #0]
 80090bc:	494a      	ldr	r1, [pc, #296]	@ (80091e8 <PCD_EP_ISR_Handler+0x6e8>)
 80090be:	430a      	orrs	r2, r1
 80090c0:	b292      	uxth	r2, r2
 80090c2:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80090c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090c6:	78db      	ldrb	r3, [r3, #3]
 80090c8:	2b01      	cmp	r3, #1
 80090ca:	d000      	beq.n	80090ce <PCD_EP_ISR_Handler+0x5ce>
 80090cc:	e0af      	b.n	800922e <PCD_EP_ISR_Handler+0x72e>
        {
          ep->xfer_len = 0U;
 80090ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d0:	2200      	movs	r2, #0
 80090d2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80090d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090d6:	7b1b      	ldrb	r3, [r3, #12]
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d100      	bne.n	80090de <PCD_EP_ISR_Handler+0x5de>
 80090dc:	e09f      	b.n	800921e <PCD_EP_ISR_Handler+0x71e>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80090de:	193b      	adds	r3, r7, r4
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	2240      	movs	r2, #64	@ 0x40
 80090e4:	4013      	ands	r3, r2
 80090e6:	d046      	beq.n	8009176 <PCD_EP_ISR_Handler+0x676>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80090e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80090ea:	785b      	ldrb	r3, [r3, #1]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d125      	bne.n	800913c <PCD_EP_ISR_Handler+0x63c>
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	2250      	movs	r2, #80	@ 0x50
 80090fc:	5a9b      	ldrh	r3, [r3, r2]
 80090fe:	b29b      	uxth	r3, r3
 8009100:	001a      	movs	r2, r3
 8009102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009104:	189b      	adds	r3, r3, r2
 8009106:	627b      	str	r3, [r7, #36]	@ 0x24
 8009108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800910a:	781b      	ldrb	r3, [r3, #0]
 800910c:	00da      	lsls	r2, r3, #3
 800910e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009110:	18d3      	adds	r3, r2, r3
 8009112:	4a33      	ldr	r2, [pc, #204]	@ (80091e0 <PCD_EP_ISR_Handler+0x6e0>)
 8009114:	4694      	mov	ip, r2
 8009116:	4463      	add	r3, ip
 8009118:	623b      	str	r3, [r7, #32]
 800911a:	6a3b      	ldr	r3, [r7, #32]
 800911c:	881b      	ldrh	r3, [r3, #0]
 800911e:	b29b      	uxth	r3, r3
 8009120:	059b      	lsls	r3, r3, #22
 8009122:	0d9b      	lsrs	r3, r3, #22
 8009124:	b29a      	uxth	r2, r3
 8009126:	6a3b      	ldr	r3, [r7, #32]
 8009128:	801a      	strh	r2, [r3, #0]
 800912a:	6a3b      	ldr	r3, [r7, #32]
 800912c:	881b      	ldrh	r3, [r3, #0]
 800912e:	b29b      	uxth	r3, r3
 8009130:	4a2d      	ldr	r2, [pc, #180]	@ (80091e8 <PCD_EP_ISR_Handler+0x6e8>)
 8009132:	4313      	orrs	r3, r2
 8009134:	b29a      	uxth	r2, r3
 8009136:	6a3b      	ldr	r3, [r7, #32]
 8009138:	801a      	strh	r2, [r3, #0]
 800913a:	e070      	b.n	800921e <PCD_EP_ISR_Handler+0x71e>
 800913c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	2b01      	cmp	r3, #1
 8009142:	d16c      	bne.n	800921e <PCD_EP_ISR_Handler+0x71e>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2250      	movs	r2, #80	@ 0x50
 8009150:	5a9b      	ldrh	r3, [r3, r2]
 8009152:	b29b      	uxth	r3, r3
 8009154:	001a      	movs	r2, r3
 8009156:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009158:	189b      	adds	r3, r3, r2
 800915a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800915c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	00da      	lsls	r2, r3, #3
 8009162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009164:	18d3      	adds	r3, r2, r3
 8009166:	4a1e      	ldr	r2, [pc, #120]	@ (80091e0 <PCD_EP_ISR_Handler+0x6e0>)
 8009168:	4694      	mov	ip, r2
 800916a:	4463      	add	r3, ip
 800916c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800916e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009170:	2200      	movs	r2, #0
 8009172:	801a      	strh	r2, [r3, #0]
 8009174:	e053      	b.n	800921e <PCD_EP_ISR_Handler+0x71e>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800917c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800917e:	785b      	ldrb	r3, [r3, #1]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d133      	bne.n	80091ec <PCD_EP_ISR_Handler+0x6ec>
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	637b      	str	r3, [r7, #52]	@ 0x34
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2250      	movs	r2, #80	@ 0x50
 8009190:	5a9b      	ldrh	r3, [r3, r2]
 8009192:	b29b      	uxth	r3, r3
 8009194:	001a      	movs	r2, r3
 8009196:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009198:	189b      	adds	r3, r3, r2
 800919a:	637b      	str	r3, [r7, #52]	@ 0x34
 800919c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	00da      	lsls	r2, r3, #3
 80091a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a4:	18d3      	adds	r3, r2, r3
 80091a6:	4a0b      	ldr	r2, [pc, #44]	@ (80091d4 <PCD_EP_ISR_Handler+0x6d4>)
 80091a8:	4694      	mov	ip, r2
 80091aa:	4463      	add	r3, ip
 80091ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80091ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b0:	881b      	ldrh	r3, [r3, #0]
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	059b      	lsls	r3, r3, #22
 80091b6:	0d9b      	lsrs	r3, r3, #22
 80091b8:	b29a      	uxth	r2, r3
 80091ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091bc:	801a      	strh	r2, [r3, #0]
 80091be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091c0:	881b      	ldrh	r3, [r3, #0]
 80091c2:	b29b      	uxth	r3, r3
 80091c4:	4a08      	ldr	r2, [pc, #32]	@ (80091e8 <PCD_EP_ISR_Handler+0x6e8>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	b29a      	uxth	r2, r3
 80091ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091cc:	801a      	strh	r2, [r3, #0]
 80091ce:	e026      	b.n	800921e <PCD_EP_ISR_Handler+0x71e>
 80091d0:	00000f8f 	.word	0x00000f8f
 80091d4:	00000406 	.word	0x00000406
 80091d8:	ffff8f8f 	.word	0xffff8f8f
 80091dc:	ffff80c0 	.word	0xffff80c0
 80091e0:	00000402 	.word	0x00000402
 80091e4:	ffff8f0f 	.word	0xffff8f0f
 80091e8:	ffff8000 	.word	0xffff8000
 80091ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091ee:	785b      	ldrb	r3, [r3, #1]
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d114      	bne.n	800921e <PCD_EP_ISR_Handler+0x71e>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2250      	movs	r2, #80	@ 0x50
 80091fa:	5a9b      	ldrh	r3, [r3, r2]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	001a      	movs	r2, r3
 8009200:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009202:	189b      	adds	r3, r3, r2
 8009204:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009206:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	00da      	lsls	r2, r3, #3
 800920c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800920e:	18d3      	adds	r3, r2, r3
 8009210:	4a3b      	ldr	r2, [pc, #236]	@ (8009300 <PCD_EP_ISR_Handler+0x800>)
 8009212:	4694      	mov	ip, r2
 8009214:	4463      	add	r3, ip
 8009216:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800921a:	2200      	movs	r2, #0
 800921c:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800921e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	0011      	movs	r1, r2
 8009226:	0018      	movs	r0, r3
 8009228:	f006 fc4c 	bl	800fac4 <HAL_PCD_DataInStageCallback>
 800922c:	e058      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800922e:	234c      	movs	r3, #76	@ 0x4c
 8009230:	18fb      	adds	r3, r7, r3
 8009232:	881a      	ldrh	r2, [r3, #0]
 8009234:	2380      	movs	r3, #128	@ 0x80
 8009236:	005b      	lsls	r3, r3, #1
 8009238:	4013      	ands	r3, r2
 800923a:	d149      	bne.n	80092d0 <PCD_EP_ISR_Handler+0x7d0>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	2250      	movs	r2, #80	@ 0x50
 8009242:	5a9b      	ldrh	r3, [r3, r2]
 8009244:	b29b      	uxth	r3, r3
 8009246:	001a      	movs	r2, r3
 8009248:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	00db      	lsls	r3, r3, #3
 800924e:	18d2      	adds	r2, r2, r3
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	18d3      	adds	r3, r2, r3
 8009256:	4a2b      	ldr	r2, [pc, #172]	@ (8009304 <PCD_EP_ISR_Handler+0x804>)
 8009258:	4694      	mov	ip, r2
 800925a:	4463      	add	r3, ip
 800925c:	881a      	ldrh	r2, [r3, #0]
 800925e:	2140      	movs	r1, #64	@ 0x40
 8009260:	187b      	adds	r3, r7, r1
 8009262:	0592      	lsls	r2, r2, #22
 8009264:	0d92      	lsrs	r2, r2, #22
 8009266:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8009268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800926a:	699a      	ldr	r2, [r3, #24]
 800926c:	187b      	adds	r3, r7, r1
 800926e:	881b      	ldrh	r3, [r3, #0]
 8009270:	429a      	cmp	r2, r3
 8009272:	d907      	bls.n	8009284 <PCD_EP_ISR_Handler+0x784>
            {
              ep->xfer_len -= TxPctSize;
 8009274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009276:	699a      	ldr	r2, [r3, #24]
 8009278:	187b      	adds	r3, r7, r1
 800927a:	881b      	ldrh	r3, [r3, #0]
 800927c:	1ad2      	subs	r2, r2, r3
 800927e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009280:	619a      	str	r2, [r3, #24]
 8009282:	e002      	b.n	800928a <PCD_EP_ISR_Handler+0x78a>
            }
            else
            {
              ep->xfer_len = 0U;
 8009284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009286:	2200      	movs	r2, #0
 8009288:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800928a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800928c:	699b      	ldr	r3, [r3, #24]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d107      	bne.n	80092a2 <PCD_EP_ISR_Handler+0x7a2>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009292:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009294:	781a      	ldrb	r2, [r3, #0]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	0011      	movs	r1, r2
 800929a:	0018      	movs	r0, r3
 800929c:	f006 fc12 	bl	800fac4 <HAL_PCD_DataInStageCallback>
 80092a0:	e01e      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 80092a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092a4:	695a      	ldr	r2, [r3, #20]
 80092a6:	2140      	movs	r1, #64	@ 0x40
 80092a8:	187b      	adds	r3, r7, r1
 80092aa:	881b      	ldrh	r3, [r3, #0]
 80092ac:	18d2      	adds	r2, r2, r3
 80092ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b0:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 80092b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092b4:	69da      	ldr	r2, [r3, #28]
 80092b6:	187b      	adds	r3, r7, r1
 80092b8:	881b      	ldrh	r3, [r3, #0]
 80092ba:	18d2      	adds	r2, r2, r3
 80092bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092be:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80092c6:	0011      	movs	r1, r2
 80092c8:	0018      	movs	r0, r3
 80092ca:	f003 f9bd 	bl	800c648 <USB_EPStartXfer>
 80092ce:	e007      	b.n	80092e0 <PCD_EP_ISR_Handler+0x7e0>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80092d0:	234c      	movs	r3, #76	@ 0x4c
 80092d2:	18fb      	adds	r3, r7, r3
 80092d4:	881a      	ldrh	r2, [r3, #0]
 80092d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	0018      	movs	r0, r3
 80092dc:	f000 f930 	bl	8009540 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2244      	movs	r2, #68	@ 0x44
 80092e6:	5a9b      	ldrh	r3, [r3, r2]
 80092e8:	b29b      	uxth	r3, r3
 80092ea:	b21b      	sxth	r3, r3
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	da01      	bge.n	80092f4 <PCD_EP_ISR_Handler+0x7f4>
 80092f0:	f7ff fc0c 	bl	8008b0c <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	0018      	movs	r0, r3
 80092f8:	46bd      	mov	sp, r7
 80092fa:	b016      	add	sp, #88	@ 0x58
 80092fc:	bdb0      	pop	{r4, r5, r7, pc}
 80092fe:	46c0      	nop			@ (mov r8, r8)
 8009300:	00000406 	.word	0x00000406
 8009304:	00000402 	.word	0x00000402

08009308 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009308:	b590      	push	{r4, r7, lr}
 800930a:	b089      	sub	sp, #36	@ 0x24
 800930c:	af00      	add	r7, sp, #0
 800930e:	60f8      	str	r0, [r7, #12]
 8009310:	60b9      	str	r1, [r7, #8]
 8009312:	1dbb      	adds	r3, r7, #6
 8009314:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8009316:	1dbb      	adds	r3, r7, #6
 8009318:	881a      	ldrh	r2, [r3, #0]
 800931a:	2380      	movs	r3, #128	@ 0x80
 800931c:	01db      	lsls	r3, r3, #7
 800931e:	4013      	ands	r3, r2
 8009320:	d100      	bne.n	8009324 <HAL_PCD_EP_DB_Receive+0x1c>
 8009322:	e07d      	b.n	8009420 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2250      	movs	r2, #80	@ 0x50
 800932a:	5a9b      	ldrh	r3, [r3, r2]
 800932c:	b29b      	uxth	r3, r3
 800932e:	001a      	movs	r2, r3
 8009330:	68bb      	ldr	r3, [r7, #8]
 8009332:	781b      	ldrb	r3, [r3, #0]
 8009334:	00db      	lsls	r3, r3, #3
 8009336:	18d2      	adds	r2, r2, r3
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	18d3      	adds	r3, r2, r3
 800933e:	4a7a      	ldr	r2, [pc, #488]	@ (8009528 <HAL_PCD_EP_DB_Receive+0x220>)
 8009340:	4694      	mov	ip, r2
 8009342:	4463      	add	r3, ip
 8009344:	881a      	ldrh	r2, [r3, #0]
 8009346:	211a      	movs	r1, #26
 8009348:	187b      	adds	r3, r7, r1
 800934a:	0592      	lsls	r2, r2, #22
 800934c:	0d92      	lsrs	r2, r2, #22
 800934e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	699a      	ldr	r2, [r3, #24]
 8009354:	187b      	adds	r3, r7, r1
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	429a      	cmp	r2, r3
 800935a:	d307      	bcc.n	800936c <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	699a      	ldr	r2, [r3, #24]
 8009360:	187b      	adds	r3, r7, r1
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	1ad2      	subs	r2, r2, r3
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	619a      	str	r2, [r3, #24]
 800936a:	e002      	b.n	8009372 <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	2200      	movs	r2, #0
 8009370:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d121      	bne.n	80093be <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	001a      	movs	r2, r3
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	781b      	ldrb	r3, [r3, #0]
 8009384:	009b      	lsls	r3, r3, #2
 8009386:	18d3      	adds	r3, r2, r3
 8009388:	881b      	ldrh	r3, [r3, #0]
 800938a:	b29a      	uxth	r2, r3
 800938c:	2018      	movs	r0, #24
 800938e:	183b      	adds	r3, r7, r0
 8009390:	4966      	ldr	r1, [pc, #408]	@ (800952c <HAL_PCD_EP_DB_Receive+0x224>)
 8009392:	400a      	ands	r2, r1
 8009394:	801a      	strh	r2, [r3, #0]
 8009396:	183b      	adds	r3, r7, r0
 8009398:	183a      	adds	r2, r7, r0
 800939a:	8812      	ldrh	r2, [r2, #0]
 800939c:	2180      	movs	r1, #128	@ 0x80
 800939e:	0189      	lsls	r1, r1, #6
 80093a0:	404a      	eors	r2, r1
 80093a2:	801a      	strh	r2, [r3, #0]
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	001a      	movs	r2, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	009b      	lsls	r3, r3, #2
 80093b0:	18d3      	adds	r3, r2, r3
 80093b2:	183a      	adds	r2, r7, r0
 80093b4:	8812      	ldrh	r2, [r2, #0]
 80093b6:	495e      	ldr	r1, [pc, #376]	@ (8009530 <HAL_PCD_EP_DB_Receive+0x228>)
 80093b8:	430a      	orrs	r2, r1
 80093ba:	b292      	uxth	r2, r2
 80093bc:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80093be:	1dbb      	adds	r3, r7, #6
 80093c0:	881b      	ldrh	r3, [r3, #0]
 80093c2:	2240      	movs	r2, #64	@ 0x40
 80093c4:	4013      	ands	r3, r2
 80093c6:	d01a      	beq.n	80093fe <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	001a      	movs	r2, r3
 80093ce:	68bb      	ldr	r3, [r7, #8]
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	009b      	lsls	r3, r3, #2
 80093d4:	18d3      	adds	r3, r2, r3
 80093d6:	881b      	ldrh	r3, [r3, #0]
 80093d8:	b29a      	uxth	r2, r3
 80093da:	2016      	movs	r0, #22
 80093dc:	183b      	adds	r3, r7, r0
 80093de:	4955      	ldr	r1, [pc, #340]	@ (8009534 <HAL_PCD_EP_DB_Receive+0x22c>)
 80093e0:	400a      	ands	r2, r1
 80093e2:	801a      	strh	r2, [r3, #0]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	001a      	movs	r2, r3
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	781b      	ldrb	r3, [r3, #0]
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	18d3      	adds	r3, r2, r3
 80093f2:	183a      	adds	r2, r7, r0
 80093f4:	8812      	ldrh	r2, [r2, #0]
 80093f6:	4950      	ldr	r1, [pc, #320]	@ (8009538 <HAL_PCD_EP_DB_Receive+0x230>)
 80093f8:	430a      	orrs	r2, r1
 80093fa:	b292      	uxth	r2, r2
 80093fc:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80093fe:	241a      	movs	r4, #26
 8009400:	193b      	adds	r3, r7, r4
 8009402:	881b      	ldrh	r3, [r3, #0]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d100      	bne.n	800940a <HAL_PCD_EP_DB_Receive+0x102>
 8009408:	e086      	b.n	8009518 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	6959      	ldr	r1, [r3, #20]
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	891a      	ldrh	r2, [r3, #8]
 8009416:	193b      	adds	r3, r7, r4
 8009418:	881b      	ldrh	r3, [r3, #0]
 800941a:	f004 fbc8 	bl	800dbae <USB_ReadPMA>
 800941e:	e07b      	b.n	8009518 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	2250      	movs	r2, #80	@ 0x50
 8009426:	5a9b      	ldrh	r3, [r3, r2]
 8009428:	b29b      	uxth	r3, r3
 800942a:	001a      	movs	r2, r3
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	00db      	lsls	r3, r3, #3
 8009432:	18d2      	adds	r2, r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	18d3      	adds	r3, r2, r3
 800943a:	4a40      	ldr	r2, [pc, #256]	@ (800953c <HAL_PCD_EP_DB_Receive+0x234>)
 800943c:	4694      	mov	ip, r2
 800943e:	4463      	add	r3, ip
 8009440:	881a      	ldrh	r2, [r3, #0]
 8009442:	211a      	movs	r1, #26
 8009444:	187b      	adds	r3, r7, r1
 8009446:	0592      	lsls	r2, r2, #22
 8009448:	0d92      	lsrs	r2, r2, #22
 800944a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	699a      	ldr	r2, [r3, #24]
 8009450:	187b      	adds	r3, r7, r1
 8009452:	881b      	ldrh	r3, [r3, #0]
 8009454:	429a      	cmp	r2, r3
 8009456:	d307      	bcc.n	8009468 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8009458:	68bb      	ldr	r3, [r7, #8]
 800945a:	699a      	ldr	r2, [r3, #24]
 800945c:	187b      	adds	r3, r7, r1
 800945e:	881b      	ldrh	r3, [r3, #0]
 8009460:	1ad2      	subs	r2, r2, r3
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	619a      	str	r2, [r3, #24]
 8009466:	e002      	b.n	800946e <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8009468:	68bb      	ldr	r3, [r7, #8]
 800946a:	2200      	movs	r2, #0
 800946c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d121      	bne.n	80094ba <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	001a      	movs	r2, r3
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	18d3      	adds	r3, r2, r3
 8009484:	881b      	ldrh	r3, [r3, #0]
 8009486:	b29a      	uxth	r2, r3
 8009488:	201e      	movs	r0, #30
 800948a:	183b      	adds	r3, r7, r0
 800948c:	4927      	ldr	r1, [pc, #156]	@ (800952c <HAL_PCD_EP_DB_Receive+0x224>)
 800948e:	400a      	ands	r2, r1
 8009490:	801a      	strh	r2, [r3, #0]
 8009492:	183b      	adds	r3, r7, r0
 8009494:	183a      	adds	r2, r7, r0
 8009496:	8812      	ldrh	r2, [r2, #0]
 8009498:	2180      	movs	r1, #128	@ 0x80
 800949a:	0189      	lsls	r1, r1, #6
 800949c:	404a      	eors	r2, r1
 800949e:	801a      	strh	r2, [r3, #0]
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	001a      	movs	r2, r3
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	781b      	ldrb	r3, [r3, #0]
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	18d3      	adds	r3, r2, r3
 80094ae:	183a      	adds	r2, r7, r0
 80094b0:	8812      	ldrh	r2, [r2, #0]
 80094b2:	491f      	ldr	r1, [pc, #124]	@ (8009530 <HAL_PCD_EP_DB_Receive+0x228>)
 80094b4:	430a      	orrs	r2, r1
 80094b6:	b292      	uxth	r2, r2
 80094b8:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80094ba:	1dbb      	adds	r3, r7, #6
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	2240      	movs	r2, #64	@ 0x40
 80094c0:	4013      	ands	r3, r2
 80094c2:	d11a      	bne.n	80094fa <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	001a      	movs	r2, r3
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	18d3      	adds	r3, r2, r3
 80094d2:	881b      	ldrh	r3, [r3, #0]
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	201c      	movs	r0, #28
 80094d8:	183b      	adds	r3, r7, r0
 80094da:	4916      	ldr	r1, [pc, #88]	@ (8009534 <HAL_PCD_EP_DB_Receive+0x22c>)
 80094dc:	400a      	ands	r2, r1
 80094de:	801a      	strh	r2, [r3, #0]
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	001a      	movs	r2, r3
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	009b      	lsls	r3, r3, #2
 80094ec:	18d3      	adds	r3, r2, r3
 80094ee:	183a      	adds	r2, r7, r0
 80094f0:	8812      	ldrh	r2, [r2, #0]
 80094f2:	4911      	ldr	r1, [pc, #68]	@ (8009538 <HAL_PCD_EP_DB_Receive+0x230>)
 80094f4:	430a      	orrs	r2, r1
 80094f6:	b292      	uxth	r2, r2
 80094f8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 80094fa:	241a      	movs	r4, #26
 80094fc:	193b      	adds	r3, r7, r4
 80094fe:	881b      	ldrh	r3, [r3, #0]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d009      	beq.n	8009518 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	68bb      	ldr	r3, [r7, #8]
 800950a:	6959      	ldr	r1, [r3, #20]
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	895a      	ldrh	r2, [r3, #10]
 8009510:	193b      	adds	r3, r7, r4
 8009512:	881b      	ldrh	r3, [r3, #0]
 8009514:	f004 fb4b 	bl	800dbae <USB_ReadPMA>
    }
  }

  return count;
 8009518:	231a      	movs	r3, #26
 800951a:	18fb      	adds	r3, r7, r3
 800951c:	881b      	ldrh	r3, [r3, #0]
}
 800951e:	0018      	movs	r0, r3
 8009520:	46bd      	mov	sp, r7
 8009522:	b009      	add	sp, #36	@ 0x24
 8009524:	bd90      	pop	{r4, r7, pc}
 8009526:	46c0      	nop			@ (mov r8, r8)
 8009528:	00000402 	.word	0x00000402
 800952c:	ffffbf8f 	.word	0xffffbf8f
 8009530:	ffff8080 	.word	0xffff8080
 8009534:	ffff8f8f 	.word	0xffff8f8f
 8009538:	ffff80c0 	.word	0xffff80c0
 800953c:	00000406 	.word	0x00000406

08009540 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b0a4      	sub	sp, #144	@ 0x90
 8009544:	af00      	add	r7, sp, #0
 8009546:	60f8      	str	r0, [r7, #12]
 8009548:	60b9      	str	r1, [r7, #8]
 800954a:	1dbb      	adds	r3, r7, #6
 800954c:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800954e:	1dbb      	adds	r3, r7, #6
 8009550:	881b      	ldrh	r3, [r3, #0]
 8009552:	2240      	movs	r2, #64	@ 0x40
 8009554:	4013      	ands	r3, r2
 8009556:	d100      	bne.n	800955a <HAL_PCD_EP_DB_Transmit+0x1a>
 8009558:	e1e4      	b.n	8009924 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2250      	movs	r2, #80	@ 0x50
 8009560:	5a9b      	ldrh	r3, [r3, r2]
 8009562:	b29b      	uxth	r3, r3
 8009564:	001a      	movs	r2, r3
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	781b      	ldrb	r3, [r3, #0]
 800956a:	00db      	lsls	r3, r3, #3
 800956c:	18d2      	adds	r2, r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	18d3      	adds	r3, r2, r3
 8009574:	4ad0      	ldr	r2, [pc, #832]	@ (80098b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8009576:	4694      	mov	ip, r2
 8009578:	4463      	add	r3, ip
 800957a:	881a      	ldrh	r2, [r3, #0]
 800957c:	2188      	movs	r1, #136	@ 0x88
 800957e:	187b      	adds	r3, r7, r1
 8009580:	0592      	lsls	r2, r2, #22
 8009582:	0d92      	lsrs	r2, r2, #22
 8009584:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	699a      	ldr	r2, [r3, #24]
 800958a:	187b      	adds	r3, r7, r1
 800958c:	881b      	ldrh	r3, [r3, #0]
 800958e:	429a      	cmp	r2, r3
 8009590:	d907      	bls.n	80095a2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	699a      	ldr	r2, [r3, #24]
 8009596:	187b      	adds	r3, r7, r1
 8009598:	881b      	ldrh	r3, [r3, #0]
 800959a:	1ad2      	subs	r2, r2, r3
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	619a      	str	r2, [r3, #24]
 80095a0:	e002      	b.n	80095a8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80095a2:	68bb      	ldr	r3, [r7, #8]
 80095a4:	2200      	movs	r2, #0
 80095a6:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80095a8:	68bb      	ldr	r3, [r7, #8]
 80095aa:	699b      	ldr	r3, [r3, #24]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d000      	beq.n	80095b2 <HAL_PCD_EP_DB_Transmit+0x72>
 80095b0:	e0b5      	b.n	800971e <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	785b      	ldrb	r3, [r3, #1]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d125      	bne.n	8009606 <HAL_PCD_EP_DB_Transmit+0xc6>
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2250      	movs	r2, #80	@ 0x50
 80095c6:	5a9b      	ldrh	r3, [r3, r2]
 80095c8:	b29b      	uxth	r3, r3
 80095ca:	001a      	movs	r2, r3
 80095cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095ce:	189b      	adds	r3, r3, r2
 80095d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	781b      	ldrb	r3, [r3, #0]
 80095d6:	00da      	lsls	r2, r3, #3
 80095d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095da:	18d3      	adds	r3, r2, r3
 80095dc:	4ab6      	ldr	r2, [pc, #728]	@ (80098b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 80095de:	4694      	mov	ip, r2
 80095e0:	4463      	add	r3, ip
 80095e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80095e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e6:	881b      	ldrh	r3, [r3, #0]
 80095e8:	b29b      	uxth	r3, r3
 80095ea:	059b      	lsls	r3, r3, #22
 80095ec:	0d9b      	lsrs	r3, r3, #22
 80095ee:	b29a      	uxth	r2, r3
 80095f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f2:	801a      	strh	r2, [r3, #0]
 80095f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095f6:	881b      	ldrh	r3, [r3, #0]
 80095f8:	b29b      	uxth	r3, r3
 80095fa:	4ab0      	ldr	r2, [pc, #704]	@ (80098bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80095fc:	4313      	orrs	r3, r2
 80095fe:	b29a      	uxth	r2, r3
 8009600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009602:	801a      	strh	r2, [r3, #0]
 8009604:	e01b      	b.n	800963e <HAL_PCD_EP_DB_Transmit+0xfe>
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	785b      	ldrb	r3, [r3, #1]
 800960a:	2b01      	cmp	r3, #1
 800960c:	d117      	bne.n	800963e <HAL_PCD_EP_DB_Transmit+0xfe>
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	637b      	str	r3, [r7, #52]	@ 0x34
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	2250      	movs	r2, #80	@ 0x50
 800961a:	5a9b      	ldrh	r3, [r3, r2]
 800961c:	b29b      	uxth	r3, r3
 800961e:	001a      	movs	r2, r3
 8009620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009622:	189b      	adds	r3, r3, r2
 8009624:	637b      	str	r3, [r7, #52]	@ 0x34
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	781b      	ldrb	r3, [r3, #0]
 800962a:	00da      	lsls	r2, r3, #3
 800962c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800962e:	18d3      	adds	r3, r2, r3
 8009630:	4aa1      	ldr	r2, [pc, #644]	@ (80098b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8009632:	4694      	mov	ip, r2
 8009634:	4463      	add	r3, ip
 8009636:	633b      	str	r3, [r7, #48]	@ 0x30
 8009638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800963a:	2200      	movs	r2, #0
 800963c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	627b      	str	r3, [r7, #36]	@ 0x24
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	785b      	ldrb	r3, [r3, #1]
 8009648:	2b00      	cmp	r3, #0
 800964a:	d125      	bne.n	8009698 <HAL_PCD_EP_DB_Transmit+0x158>
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	61fb      	str	r3, [r7, #28]
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	2250      	movs	r2, #80	@ 0x50
 8009658:	5a9b      	ldrh	r3, [r3, r2]
 800965a:	b29b      	uxth	r3, r3
 800965c:	001a      	movs	r2, r3
 800965e:	69fb      	ldr	r3, [r7, #28]
 8009660:	189b      	adds	r3, r3, r2
 8009662:	61fb      	str	r3, [r7, #28]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	781b      	ldrb	r3, [r3, #0]
 8009668:	00da      	lsls	r2, r3, #3
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	18d3      	adds	r3, r2, r3
 800966e:	4a94      	ldr	r2, [pc, #592]	@ (80098c0 <HAL_PCD_EP_DB_Transmit+0x380>)
 8009670:	4694      	mov	ip, r2
 8009672:	4463      	add	r3, ip
 8009674:	61bb      	str	r3, [r7, #24]
 8009676:	69bb      	ldr	r3, [r7, #24]
 8009678:	881b      	ldrh	r3, [r3, #0]
 800967a:	b29b      	uxth	r3, r3
 800967c:	059b      	lsls	r3, r3, #22
 800967e:	0d9b      	lsrs	r3, r3, #22
 8009680:	b29a      	uxth	r2, r3
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	801a      	strh	r2, [r3, #0]
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	881b      	ldrh	r3, [r3, #0]
 800968a:	b29b      	uxth	r3, r3
 800968c:	4a8b      	ldr	r2, [pc, #556]	@ (80098bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800968e:	4313      	orrs	r3, r2
 8009690:	b29a      	uxth	r2, r3
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	801a      	strh	r2, [r3, #0]
 8009696:	e018      	b.n	80096ca <HAL_PCD_EP_DB_Transmit+0x18a>
 8009698:	68bb      	ldr	r3, [r7, #8]
 800969a:	785b      	ldrb	r3, [r3, #1]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d114      	bne.n	80096ca <HAL_PCD_EP_DB_Transmit+0x18a>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	2250      	movs	r2, #80	@ 0x50
 80096a6:	5a9b      	ldrh	r3, [r3, r2]
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	001a      	movs	r2, r3
 80096ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ae:	189b      	adds	r3, r3, r2
 80096b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	781b      	ldrb	r3, [r3, #0]
 80096b6:	00da      	lsls	r2, r3, #3
 80096b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096ba:	18d3      	adds	r3, r2, r3
 80096bc:	4a80      	ldr	r2, [pc, #512]	@ (80098c0 <HAL_PCD_EP_DB_Transmit+0x380>)
 80096be:	4694      	mov	ip, r2
 80096c0:	4463      	add	r3, ip
 80096c2:	623b      	str	r3, [r7, #32]
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	2200      	movs	r2, #0
 80096c8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80096ca:	68bb      	ldr	r3, [r7, #8]
 80096cc:	781a      	ldrb	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	0011      	movs	r1, r2
 80096d2:	0018      	movs	r0, r3
 80096d4:	f006 f9f6 	bl	800fac4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80096d8:	1dbb      	adds	r3, r7, #6
 80096da:	881a      	ldrh	r2, [r3, #0]
 80096dc:	2380      	movs	r3, #128	@ 0x80
 80096de:	01db      	lsls	r3, r3, #7
 80096e0:	4013      	ands	r3, r2
 80096e2:	d100      	bne.n	80096e6 <HAL_PCD_EP_DB_Transmit+0x1a6>
 80096e4:	e308      	b.n	8009cf8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	001a      	movs	r2, r3
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	781b      	ldrb	r3, [r3, #0]
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	18d3      	adds	r3, r2, r3
 80096f4:	881b      	ldrh	r3, [r3, #0]
 80096f6:	b29a      	uxth	r2, r3
 80096f8:	2016      	movs	r0, #22
 80096fa:	183b      	adds	r3, r7, r0
 80096fc:	4971      	ldr	r1, [pc, #452]	@ (80098c4 <HAL_PCD_EP_DB_Transmit+0x384>)
 80096fe:	400a      	ands	r2, r1
 8009700:	801a      	strh	r2, [r3, #0]
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	001a      	movs	r2, r3
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	781b      	ldrb	r3, [r3, #0]
 800970c:	009b      	lsls	r3, r3, #2
 800970e:	18d3      	adds	r3, r2, r3
 8009710:	183a      	adds	r2, r7, r0
 8009712:	8812      	ldrh	r2, [r2, #0]
 8009714:	496c      	ldr	r1, [pc, #432]	@ (80098c8 <HAL_PCD_EP_DB_Transmit+0x388>)
 8009716:	430a      	orrs	r2, r1
 8009718:	b292      	uxth	r2, r2
 800971a:	801a      	strh	r2, [r3, #0]
 800971c:	e2ec      	b.n	8009cf8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800971e:	1dbb      	adds	r3, r7, #6
 8009720:	881a      	ldrh	r2, [r3, #0]
 8009722:	2380      	movs	r3, #128	@ 0x80
 8009724:	01db      	lsls	r3, r3, #7
 8009726:	4013      	ands	r3, r2
 8009728:	d01a      	beq.n	8009760 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	001a      	movs	r2, r3
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	781b      	ldrb	r3, [r3, #0]
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	18d3      	adds	r3, r2, r3
 8009738:	881b      	ldrh	r3, [r3, #0]
 800973a:	b29a      	uxth	r2, r3
 800973c:	208a      	movs	r0, #138	@ 0x8a
 800973e:	183b      	adds	r3, r7, r0
 8009740:	4960      	ldr	r1, [pc, #384]	@ (80098c4 <HAL_PCD_EP_DB_Transmit+0x384>)
 8009742:	400a      	ands	r2, r1
 8009744:	801a      	strh	r2, [r3, #0]
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	001a      	movs	r2, r3
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	18d3      	adds	r3, r2, r3
 8009754:	183a      	adds	r2, r7, r0
 8009756:	8812      	ldrh	r2, [r2, #0]
 8009758:	495b      	ldr	r1, [pc, #364]	@ (80098c8 <HAL_PCD_EP_DB_Transmit+0x388>)
 800975a:	430a      	orrs	r2, r1
 800975c:	b292      	uxth	r2, r2
 800975e:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009760:	68bb      	ldr	r3, [r7, #8]
 8009762:	2224      	movs	r2, #36	@ 0x24
 8009764:	5c9b      	ldrb	r3, [r3, r2]
 8009766:	2b01      	cmp	r3, #1
 8009768:	d000      	beq.n	800976c <HAL_PCD_EP_DB_Transmit+0x22c>
 800976a:	e2c5      	b.n	8009cf8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	695a      	ldr	r2, [r3, #20]
 8009770:	2188      	movs	r1, #136	@ 0x88
 8009772:	187b      	adds	r3, r7, r1
 8009774:	881b      	ldrh	r3, [r3, #0]
 8009776:	18d2      	adds	r2, r2, r3
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800977c:	68bb      	ldr	r3, [r7, #8]
 800977e:	69da      	ldr	r2, [r3, #28]
 8009780:	187b      	adds	r3, r7, r1
 8009782:	881b      	ldrh	r3, [r3, #0]
 8009784:	18d2      	adds	r2, r2, r3
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	6a1a      	ldr	r2, [r3, #32]
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	691b      	ldr	r3, [r3, #16]
 8009792:	429a      	cmp	r2, r3
 8009794:	d30c      	bcc.n	80097b0 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	218c      	movs	r1, #140	@ 0x8c
 800979c:	187a      	adds	r2, r7, r1
 800979e:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 80097a0:	68bb      	ldr	r3, [r7, #8]
 80097a2:	6a1a      	ldr	r2, [r3, #32]
 80097a4:	187b      	adds	r3, r7, r1
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	1ad2      	subs	r2, r2, r3
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	621a      	str	r2, [r3, #32]
 80097ae:	e01a      	b.n	80097e6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80097b0:	68bb      	ldr	r3, [r7, #8]
 80097b2:	6a1b      	ldr	r3, [r3, #32]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10a      	bne.n	80097ce <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 80097b8:	2388      	movs	r3, #136	@ 0x88
 80097ba:	18fb      	adds	r3, r7, r3
 80097bc:	881b      	ldrh	r3, [r3, #0]
 80097be:	228c      	movs	r2, #140	@ 0x8c
 80097c0:	18ba      	adds	r2, r7, r2
 80097c2:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 80097c4:	68bb      	ldr	r3, [r7, #8]
 80097c6:	2224      	movs	r2, #36	@ 0x24
 80097c8:	2100      	movs	r1, #0
 80097ca:	5499      	strb	r1, [r3, r2]
 80097cc:	e00b      	b.n	80097e6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2224      	movs	r2, #36	@ 0x24
 80097d2:	2100      	movs	r1, #0
 80097d4:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 80097d6:	68bb      	ldr	r3, [r7, #8]
 80097d8:	6a1b      	ldr	r3, [r3, #32]
 80097da:	228c      	movs	r2, #140	@ 0x8c
 80097dc:	18ba      	adds	r2, r7, r2
 80097de:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	2200      	movs	r2, #0
 80097e4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80097e6:	68bb      	ldr	r3, [r7, #8]
 80097e8:	785b      	ldrb	r3, [r3, #1]
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d000      	beq.n	80097f0 <HAL_PCD_EP_DB_Transmit+0x2b0>
 80097ee:	e06d      	b.n	80098cc <HAL_PCD_EP_DB_Transmit+0x38c>
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2250      	movs	r2, #80	@ 0x50
 80097fc:	5a9b      	ldrh	r3, [r3, r2]
 80097fe:	b29b      	uxth	r3, r3
 8009800:	001a      	movs	r2, r3
 8009802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009804:	189b      	adds	r3, r3, r2
 8009806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	00da      	lsls	r2, r3, #3
 800980e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009810:	18d3      	adds	r3, r2, r3
 8009812:	4a29      	ldr	r2, [pc, #164]	@ (80098b8 <HAL_PCD_EP_DB_Transmit+0x378>)
 8009814:	4694      	mov	ip, r2
 8009816:	4463      	add	r3, ip
 8009818:	63bb      	str	r3, [r7, #56]	@ 0x38
 800981a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800981c:	881b      	ldrh	r3, [r3, #0]
 800981e:	b29b      	uxth	r3, r3
 8009820:	059b      	lsls	r3, r3, #22
 8009822:	0d9b      	lsrs	r3, r3, #22
 8009824:	b29a      	uxth	r2, r3
 8009826:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009828:	801a      	strh	r2, [r3, #0]
 800982a:	238c      	movs	r3, #140	@ 0x8c
 800982c:	18fb      	adds	r3, r7, r3
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d108      	bne.n	8009846 <HAL_PCD_EP_DB_Transmit+0x306>
 8009834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009836:	881b      	ldrh	r3, [r3, #0]
 8009838:	b29b      	uxth	r3, r3
 800983a:	4a20      	ldr	r2, [pc, #128]	@ (80098bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 800983c:	4313      	orrs	r3, r2
 800983e:	b29a      	uxth	r2, r3
 8009840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009842:	801a      	strh	r2, [r3, #0]
 8009844:	e061      	b.n	800990a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8009846:	228c      	movs	r2, #140	@ 0x8c
 8009848:	18bb      	adds	r3, r7, r2
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	2b3e      	cmp	r3, #62	@ 0x3e
 800984e:	d817      	bhi.n	8009880 <HAL_PCD_EP_DB_Transmit+0x340>
 8009850:	18bb      	adds	r3, r7, r2
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	085b      	lsrs	r3, r3, #1
 8009856:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009858:	18bb      	adds	r3, r7, r2
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	2201      	movs	r2, #1
 800985e:	4013      	ands	r3, r2
 8009860:	d002      	beq.n	8009868 <HAL_PCD_EP_DB_Transmit+0x328>
 8009862:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009864:	3301      	adds	r3, #1
 8009866:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800986a:	881b      	ldrh	r3, [r3, #0]
 800986c:	b29a      	uxth	r2, r3
 800986e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009870:	b29b      	uxth	r3, r3
 8009872:	029b      	lsls	r3, r3, #10
 8009874:	b29b      	uxth	r3, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	b29a      	uxth	r2, r3
 800987a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800987c:	801a      	strh	r2, [r3, #0]
 800987e:	e044      	b.n	800990a <HAL_PCD_EP_DB_Transmit+0x3ca>
 8009880:	228c      	movs	r2, #140	@ 0x8c
 8009882:	18bb      	adds	r3, r7, r2
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	095b      	lsrs	r3, r3, #5
 8009888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800988a:	18bb      	adds	r3, r7, r2
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	221f      	movs	r2, #31
 8009890:	4013      	ands	r3, r2
 8009892:	d102      	bne.n	800989a <HAL_PCD_EP_DB_Transmit+0x35a>
 8009894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009896:	3b01      	subs	r3, #1
 8009898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800989a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	b29a      	uxth	r2, r3
 80098a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098a2:	b29b      	uxth	r3, r3
 80098a4:	029b      	lsls	r3, r3, #10
 80098a6:	b29b      	uxth	r3, r3
 80098a8:	4313      	orrs	r3, r2
 80098aa:	b29b      	uxth	r3, r3
 80098ac:	4a03      	ldr	r2, [pc, #12]	@ (80098bc <HAL_PCD_EP_DB_Transmit+0x37c>)
 80098ae:	4313      	orrs	r3, r2
 80098b0:	b29a      	uxth	r2, r3
 80098b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098b4:	801a      	strh	r2, [r3, #0]
 80098b6:	e028      	b.n	800990a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80098b8:	00000402 	.word	0x00000402
 80098bc:	ffff8000 	.word	0xffff8000
 80098c0:	00000406 	.word	0x00000406
 80098c4:	ffff8f8f 	.word	0xffff8f8f
 80098c8:	ffffc080 	.word	0xffffc080
 80098cc:	68bb      	ldr	r3, [r7, #8]
 80098ce:	785b      	ldrb	r3, [r3, #1]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d11a      	bne.n	800990a <HAL_PCD_EP_DB_Transmit+0x3ca>
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80098da:	68fb      	ldr	r3, [r7, #12]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	2250      	movs	r2, #80	@ 0x50
 80098e0:	5a9b      	ldrh	r3, [r3, r2]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	001a      	movs	r2, r3
 80098e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098e8:	189b      	adds	r3, r3, r2
 80098ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80098ec:	68bb      	ldr	r3, [r7, #8]
 80098ee:	781b      	ldrb	r3, [r3, #0]
 80098f0:	00da      	lsls	r2, r3, #3
 80098f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80098f4:	18d3      	adds	r3, r2, r3
 80098f6:	4ad9      	ldr	r2, [pc, #868]	@ (8009c5c <HAL_PCD_EP_DB_Transmit+0x71c>)
 80098f8:	4694      	mov	ip, r2
 80098fa:	4463      	add	r3, ip
 80098fc:	643b      	str	r3, [r7, #64]	@ 0x40
 80098fe:	238c      	movs	r3, #140	@ 0x8c
 8009900:	18fb      	adds	r3, r7, r3
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	b29a      	uxth	r2, r3
 8009906:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009908:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	6818      	ldr	r0, [r3, #0]
 800990e:	68bb      	ldr	r3, [r7, #8]
 8009910:	6959      	ldr	r1, [r3, #20]
 8009912:	68bb      	ldr	r3, [r7, #8]
 8009914:	891a      	ldrh	r2, [r3, #8]
 8009916:	238c      	movs	r3, #140	@ 0x8c
 8009918:	18fb      	adds	r3, r7, r3
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	b29b      	uxth	r3, r3
 800991e:	f004 f8fd 	bl	800db1c <USB_WritePMA>
 8009922:	e1e9      	b.n	8009cf8 <HAL_PCD_EP_DB_Transmit+0x7b8>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	2250      	movs	r2, #80	@ 0x50
 800992a:	5a9b      	ldrh	r3, [r3, r2]
 800992c:	b29b      	uxth	r3, r3
 800992e:	001a      	movs	r2, r3
 8009930:	68bb      	ldr	r3, [r7, #8]
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	00db      	lsls	r3, r3, #3
 8009936:	18d2      	adds	r2, r2, r3
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	18d3      	adds	r3, r2, r3
 800993e:	4ac8      	ldr	r2, [pc, #800]	@ (8009c60 <HAL_PCD_EP_DB_Transmit+0x720>)
 8009940:	4694      	mov	ip, r2
 8009942:	4463      	add	r3, ip
 8009944:	881a      	ldrh	r2, [r3, #0]
 8009946:	2188      	movs	r1, #136	@ 0x88
 8009948:	187b      	adds	r3, r7, r1
 800994a:	0592      	lsls	r2, r2, #22
 800994c:	0d92      	lsrs	r2, r2, #22
 800994e:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	699a      	ldr	r2, [r3, #24]
 8009954:	187b      	adds	r3, r7, r1
 8009956:	881b      	ldrh	r3, [r3, #0]
 8009958:	429a      	cmp	r2, r3
 800995a:	d307      	bcc.n	800996c <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800995c:	68bb      	ldr	r3, [r7, #8]
 800995e:	699a      	ldr	r2, [r3, #24]
 8009960:	187b      	adds	r3, r7, r1
 8009962:	881b      	ldrh	r3, [r3, #0]
 8009964:	1ad2      	subs	r2, r2, r3
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	619a      	str	r2, [r3, #24]
 800996a:	e002      	b.n	8009972 <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	2200      	movs	r2, #0
 8009970:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	699b      	ldr	r3, [r3, #24]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d000      	beq.n	800997c <HAL_PCD_EP_DB_Transmit+0x43c>
 800997a:	e0bb      	b.n	8009af4 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	785b      	ldrb	r3, [r3, #1]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d125      	bne.n	80099d0 <HAL_PCD_EP_DB_Transmit+0x490>
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	2250      	movs	r2, #80	@ 0x50
 8009990:	5a9b      	ldrh	r3, [r3, r2]
 8009992:	b29b      	uxth	r3, r3
 8009994:	001a      	movs	r2, r3
 8009996:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009998:	189b      	adds	r3, r3, r2
 800999a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	00da      	lsls	r2, r3, #3
 80099a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80099a4:	18d3      	adds	r3, r2, r3
 80099a6:	4aad      	ldr	r2, [pc, #692]	@ (8009c5c <HAL_PCD_EP_DB_Transmit+0x71c>)
 80099a8:	4694      	mov	ip, r2
 80099aa:	4463      	add	r3, ip
 80099ac:	67bb      	str	r3, [r7, #120]	@ 0x78
 80099ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099b0:	881b      	ldrh	r3, [r3, #0]
 80099b2:	b29b      	uxth	r3, r3
 80099b4:	059b      	lsls	r3, r3, #22
 80099b6:	0d9b      	lsrs	r3, r3, #22
 80099b8:	b29a      	uxth	r2, r3
 80099ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099bc:	801a      	strh	r2, [r3, #0]
 80099be:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099c0:	881b      	ldrh	r3, [r3, #0]
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	4aa7      	ldr	r2, [pc, #668]	@ (8009c64 <HAL_PCD_EP_DB_Transmit+0x724>)
 80099c6:	4313      	orrs	r3, r2
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80099cc:	801a      	strh	r2, [r3, #0]
 80099ce:	e01b      	b.n	8009a08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	785b      	ldrb	r3, [r3, #1]
 80099d4:	2b01      	cmp	r3, #1
 80099d6:	d117      	bne.n	8009a08 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	667b      	str	r3, [r7, #100]	@ 0x64
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2250      	movs	r2, #80	@ 0x50
 80099e4:	5a9b      	ldrh	r3, [r3, r2]
 80099e6:	b29b      	uxth	r3, r3
 80099e8:	001a      	movs	r2, r3
 80099ea:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099ec:	189b      	adds	r3, r3, r2
 80099ee:	667b      	str	r3, [r7, #100]	@ 0x64
 80099f0:	68bb      	ldr	r3, [r7, #8]
 80099f2:	781b      	ldrb	r3, [r3, #0]
 80099f4:	00da      	lsls	r2, r3, #3
 80099f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80099f8:	18d3      	adds	r3, r2, r3
 80099fa:	4a98      	ldr	r2, [pc, #608]	@ (8009c5c <HAL_PCD_EP_DB_Transmit+0x71c>)
 80099fc:	4694      	mov	ip, r2
 80099fe:	4463      	add	r3, ip
 8009a00:	663b      	str	r3, [r7, #96]	@ 0x60
 8009a02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009a04:	2200      	movs	r2, #0
 8009a06:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a0e:	68bb      	ldr	r3, [r7, #8]
 8009a10:	785b      	ldrb	r3, [r3, #1]
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d12b      	bne.n	8009a6e <HAL_PCD_EP_DB_Transmit+0x52e>
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	2250      	movs	r2, #80	@ 0x50
 8009a22:	5a9b      	ldrh	r3, [r3, r2]
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	001a      	movs	r2, r3
 8009a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a2a:	189b      	adds	r3, r3, r2
 8009a2c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	00da      	lsls	r2, r3, #3
 8009a34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a36:	18d3      	adds	r3, r2, r3
 8009a38:	4a89      	ldr	r2, [pc, #548]	@ (8009c60 <HAL_PCD_EP_DB_Transmit+0x720>)
 8009a3a:	4694      	mov	ip, r2
 8009a3c:	4463      	add	r3, ip
 8009a3e:	2184      	movs	r1, #132	@ 0x84
 8009a40:	187a      	adds	r2, r7, r1
 8009a42:	6013      	str	r3, [r2, #0]
 8009a44:	187b      	adds	r3, r7, r1
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	881b      	ldrh	r3, [r3, #0]
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	059b      	lsls	r3, r3, #22
 8009a4e:	0d9b      	lsrs	r3, r3, #22
 8009a50:	b29a      	uxth	r2, r3
 8009a52:	187b      	adds	r3, r7, r1
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	801a      	strh	r2, [r3, #0]
 8009a58:	187b      	adds	r3, r7, r1
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	881b      	ldrh	r3, [r3, #0]
 8009a5e:	b29b      	uxth	r3, r3
 8009a60:	4a80      	ldr	r2, [pc, #512]	@ (8009c64 <HAL_PCD_EP_DB_Transmit+0x724>)
 8009a62:	4313      	orrs	r3, r2
 8009a64:	b29a      	uxth	r2, r3
 8009a66:	187b      	adds	r3, r7, r1
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	801a      	strh	r2, [r3, #0]
 8009a6c:	e018      	b.n	8009aa0 <HAL_PCD_EP_DB_Transmit+0x560>
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	785b      	ldrb	r3, [r3, #1]
 8009a72:	2b01      	cmp	r3, #1
 8009a74:	d114      	bne.n	8009aa0 <HAL_PCD_EP_DB_Transmit+0x560>
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2250      	movs	r2, #80	@ 0x50
 8009a7c:	5a9b      	ldrh	r3, [r3, r2]
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	001a      	movs	r2, r3
 8009a82:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a84:	189b      	adds	r3, r3, r2
 8009a86:	677b      	str	r3, [r7, #116]	@ 0x74
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	781b      	ldrb	r3, [r3, #0]
 8009a8c:	00da      	lsls	r2, r3, #3
 8009a8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009a90:	18d3      	adds	r3, r2, r3
 8009a92:	4a73      	ldr	r2, [pc, #460]	@ (8009c60 <HAL_PCD_EP_DB_Transmit+0x720>)
 8009a94:	4694      	mov	ip, r2
 8009a96:	4463      	add	r3, ip
 8009a98:	673b      	str	r3, [r7, #112]	@ 0x70
 8009a9a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	781a      	ldrb	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	0011      	movs	r1, r2
 8009aa8:	0018      	movs	r0, r3
 8009aaa:	f006 f80b 	bl	800fac4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009aae:	1dbb      	adds	r3, r7, #6
 8009ab0:	881a      	ldrh	r2, [r3, #0]
 8009ab2:	2380      	movs	r3, #128	@ 0x80
 8009ab4:	01db      	lsls	r3, r3, #7
 8009ab6:	4013      	ands	r3, r2
 8009ab8:	d000      	beq.n	8009abc <HAL_PCD_EP_DB_Transmit+0x57c>
 8009aba:	e11d      	b.n	8009cf8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	001a      	movs	r2, r3
 8009ac2:	68bb      	ldr	r3, [r7, #8]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	009b      	lsls	r3, r3, #2
 8009ac8:	18d3      	adds	r3, r2, r3
 8009aca:	881b      	ldrh	r3, [r3, #0]
 8009acc:	b29a      	uxth	r2, r3
 8009ace:	2082      	movs	r0, #130	@ 0x82
 8009ad0:	183b      	adds	r3, r7, r0
 8009ad2:	4965      	ldr	r1, [pc, #404]	@ (8009c68 <HAL_PCD_EP_DB_Transmit+0x728>)
 8009ad4:	400a      	ands	r2, r1
 8009ad6:	801a      	strh	r2, [r3, #0]
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	001a      	movs	r2, r3
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	781b      	ldrb	r3, [r3, #0]
 8009ae2:	009b      	lsls	r3, r3, #2
 8009ae4:	18d3      	adds	r3, r2, r3
 8009ae6:	183a      	adds	r2, r7, r0
 8009ae8:	8812      	ldrh	r2, [r2, #0]
 8009aea:	4960      	ldr	r1, [pc, #384]	@ (8009c6c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8009aec:	430a      	orrs	r2, r1
 8009aee:	b292      	uxth	r2, r2
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	e101      	b.n	8009cf8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8009af4:	1dbb      	adds	r3, r7, #6
 8009af6:	881a      	ldrh	r2, [r3, #0]
 8009af8:	2380      	movs	r3, #128	@ 0x80
 8009afa:	01db      	lsls	r3, r3, #7
 8009afc:	4013      	ands	r3, r2
 8009afe:	d11a      	bne.n	8009b36 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	001a      	movs	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	18d3      	adds	r3, r2, r3
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	b29a      	uxth	r2, r3
 8009b12:	204e      	movs	r0, #78	@ 0x4e
 8009b14:	183b      	adds	r3, r7, r0
 8009b16:	4954      	ldr	r1, [pc, #336]	@ (8009c68 <HAL_PCD_EP_DB_Transmit+0x728>)
 8009b18:	400a      	ands	r2, r1
 8009b1a:	801a      	strh	r2, [r3, #0]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	001a      	movs	r2, r3
 8009b22:	68bb      	ldr	r3, [r7, #8]
 8009b24:	781b      	ldrb	r3, [r3, #0]
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	18d3      	adds	r3, r2, r3
 8009b2a:	183a      	adds	r2, r7, r0
 8009b2c:	8812      	ldrh	r2, [r2, #0]
 8009b2e:	494f      	ldr	r1, [pc, #316]	@ (8009c6c <HAL_PCD_EP_DB_Transmit+0x72c>)
 8009b30:	430a      	orrs	r2, r1
 8009b32:	b292      	uxth	r2, r2
 8009b34:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2224      	movs	r2, #36	@ 0x24
 8009b3a:	5c9b      	ldrb	r3, [r3, r2]
 8009b3c:	2b01      	cmp	r3, #1
 8009b3e:	d000      	beq.n	8009b42 <HAL_PCD_EP_DB_Transmit+0x602>
 8009b40:	e0da      	b.n	8009cf8 <HAL_PCD_EP_DB_Transmit+0x7b8>
      {
        ep->xfer_buff += TxPctSize;
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	695a      	ldr	r2, [r3, #20]
 8009b46:	2188      	movs	r1, #136	@ 0x88
 8009b48:	187b      	adds	r3, r7, r1
 8009b4a:	881b      	ldrh	r3, [r3, #0]
 8009b4c:	18d2      	adds	r2, r2, r3
 8009b4e:	68bb      	ldr	r3, [r7, #8]
 8009b50:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	69da      	ldr	r2, [r3, #28]
 8009b56:	187b      	adds	r3, r7, r1
 8009b58:	881b      	ldrh	r3, [r3, #0]
 8009b5a:	18d2      	adds	r2, r2, r3
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	6a1a      	ldr	r2, [r3, #32]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d30c      	bcc.n	8009b86 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	218c      	movs	r1, #140	@ 0x8c
 8009b72:	187a      	adds	r2, r7, r1
 8009b74:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8009b76:	68bb      	ldr	r3, [r7, #8]
 8009b78:	6a1a      	ldr	r2, [r3, #32]
 8009b7a:	187b      	adds	r3, r7, r1
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	1ad2      	subs	r2, r2, r3
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	621a      	str	r2, [r3, #32]
 8009b84:	e01a      	b.n	8009bbc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8009b86:	68bb      	ldr	r3, [r7, #8]
 8009b88:	6a1b      	ldr	r3, [r3, #32]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10a      	bne.n	8009ba4 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 8009b8e:	2388      	movs	r3, #136	@ 0x88
 8009b90:	18fb      	adds	r3, r7, r3
 8009b92:	881b      	ldrh	r3, [r3, #0]
 8009b94:	228c      	movs	r2, #140	@ 0x8c
 8009b96:	18ba      	adds	r2, r7, r2
 8009b98:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	2224      	movs	r2, #36	@ 0x24
 8009b9e:	2100      	movs	r1, #0
 8009ba0:	5499      	strb	r1, [r3, r2]
 8009ba2:	e00b      	b.n	8009bbc <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	6a1b      	ldr	r3, [r3, #32]
 8009ba8:	228c      	movs	r2, #140	@ 0x8c
 8009baa:	18ba      	adds	r2, r7, r2
 8009bac:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	2224      	movs	r2, #36	@ 0x24
 8009bb8:	2100      	movs	r1, #0
 8009bba:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	785b      	ldrb	r3, [r3, #1]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d000      	beq.n	8009bcc <HAL_PCD_EP_DB_Transmit+0x68c>
 8009bca:	e06d      	b.n	8009ca8 <HAL_PCD_EP_DB_Transmit+0x768>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	2250      	movs	r2, #80	@ 0x50
 8009bd8:	5a9b      	ldrh	r3, [r3, r2]
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	001a      	movs	r2, r3
 8009bde:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009be0:	189b      	adds	r3, r3, r2
 8009be2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	00da      	lsls	r2, r3, #3
 8009bea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009bec:	18d3      	adds	r3, r2, r3
 8009bee:	4a1c      	ldr	r2, [pc, #112]	@ (8009c60 <HAL_PCD_EP_DB_Transmit+0x720>)
 8009bf0:	4694      	mov	ip, r2
 8009bf2:	4463      	add	r3, ip
 8009bf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009bf6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009bf8:	881b      	ldrh	r3, [r3, #0]
 8009bfa:	b29b      	uxth	r3, r3
 8009bfc:	059b      	lsls	r3, r3, #22
 8009bfe:	0d9b      	lsrs	r3, r3, #22
 8009c00:	b29a      	uxth	r2, r3
 8009c02:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c04:	801a      	strh	r2, [r3, #0]
 8009c06:	238c      	movs	r3, #140	@ 0x8c
 8009c08:	18fb      	adds	r3, r7, r3
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d108      	bne.n	8009c22 <HAL_PCD_EP_DB_Transmit+0x6e2>
 8009c10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c12:	881b      	ldrh	r3, [r3, #0]
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	4a13      	ldr	r2, [pc, #76]	@ (8009c64 <HAL_PCD_EP_DB_Transmit+0x724>)
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	b29a      	uxth	r2, r3
 8009c1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c1e:	801a      	strh	r2, [r3, #0]
 8009c20:	e05e      	b.n	8009ce0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8009c22:	228c      	movs	r2, #140	@ 0x8c
 8009c24:	18bb      	adds	r3, r7, r2
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	2b3e      	cmp	r3, #62	@ 0x3e
 8009c2a:	d821      	bhi.n	8009c70 <HAL_PCD_EP_DB_Transmit+0x730>
 8009c2c:	18bb      	adds	r3, r7, r2
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	085b      	lsrs	r3, r3, #1
 8009c32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c34:	18bb      	adds	r3, r7, r2
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2201      	movs	r2, #1
 8009c3a:	4013      	ands	r3, r2
 8009c3c:	d002      	beq.n	8009c44 <HAL_PCD_EP_DB_Transmit+0x704>
 8009c3e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c40:	3301      	adds	r3, #1
 8009c42:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c44:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c46:	881b      	ldrh	r3, [r3, #0]
 8009c48:	b29a      	uxth	r2, r3
 8009c4a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c4c:	b29b      	uxth	r3, r3
 8009c4e:	029b      	lsls	r3, r3, #10
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	4313      	orrs	r3, r2
 8009c54:	b29a      	uxth	r2, r3
 8009c56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c58:	801a      	strh	r2, [r3, #0]
 8009c5a:	e041      	b.n	8009ce0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8009c5c:	00000402 	.word	0x00000402
 8009c60:	00000406 	.word	0x00000406
 8009c64:	ffff8000 	.word	0xffff8000
 8009c68:	ffff8f8f 	.word	0xffff8f8f
 8009c6c:	ffffc080 	.word	0xffffc080
 8009c70:	228c      	movs	r2, #140	@ 0x8c
 8009c72:	18bb      	adds	r3, r7, r2
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	095b      	lsrs	r3, r3, #5
 8009c78:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c7a:	18bb      	adds	r3, r7, r2
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	221f      	movs	r2, #31
 8009c80:	4013      	ands	r3, r2
 8009c82:	d102      	bne.n	8009c8a <HAL_PCD_EP_DB_Transmit+0x74a>
 8009c84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c86:	3b01      	subs	r3, #1
 8009c88:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c8a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009c8c:	881b      	ldrh	r3, [r3, #0]
 8009c8e:	b29a      	uxth	r2, r3
 8009c90:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	029b      	lsls	r3, r3, #10
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4313      	orrs	r3, r2
 8009c9a:	b29b      	uxth	r3, r3
 8009c9c:	4a2c      	ldr	r2, [pc, #176]	@ (8009d50 <HAL_PCD_EP_DB_Transmit+0x810>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	b29a      	uxth	r2, r3
 8009ca2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8009ca4:	801a      	strh	r2, [r3, #0]
 8009ca6:	e01b      	b.n	8009ce0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	785b      	ldrb	r3, [r3, #1]
 8009cac:	2b01      	cmp	r3, #1
 8009cae:	d117      	bne.n	8009ce0 <HAL_PCD_EP_DB_Transmit+0x7a0>
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	2250      	movs	r2, #80	@ 0x50
 8009cb6:	5a9b      	ldrh	r3, [r3, r2]
 8009cb8:	b29b      	uxth	r3, r3
 8009cba:	001a      	movs	r2, r3
 8009cbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cbe:	189b      	adds	r3, r3, r2
 8009cc0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009cc2:	68bb      	ldr	r3, [r7, #8]
 8009cc4:	781b      	ldrb	r3, [r3, #0]
 8009cc6:	00da      	lsls	r2, r3, #3
 8009cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009cca:	18d3      	adds	r3, r2, r3
 8009ccc:	4a21      	ldr	r2, [pc, #132]	@ (8009d54 <HAL_PCD_EP_DB_Transmit+0x814>)
 8009cce:	4694      	mov	ip, r2
 8009cd0:	4463      	add	r3, ip
 8009cd2:	653b      	str	r3, [r7, #80]	@ 0x50
 8009cd4:	238c      	movs	r3, #140	@ 0x8c
 8009cd6:	18fb      	adds	r3, r7, r3
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	b29a      	uxth	r2, r3
 8009cdc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009cde:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	6818      	ldr	r0, [r3, #0]
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	6959      	ldr	r1, [r3, #20]
 8009ce8:	68bb      	ldr	r3, [r7, #8]
 8009cea:	895a      	ldrh	r2, [r3, #10]
 8009cec:	238c      	movs	r3, #140	@ 0x8c
 8009cee:	18fb      	adds	r3, r7, r3
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	b29b      	uxth	r3, r3
 8009cf4:	f003 ff12 	bl	800db1c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	001a      	movs	r2, r3
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	781b      	ldrb	r3, [r3, #0]
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	18d3      	adds	r3, r2, r3
 8009d06:	881b      	ldrh	r3, [r3, #0]
 8009d08:	b29a      	uxth	r2, r3
 8009d0a:	2014      	movs	r0, #20
 8009d0c:	183b      	adds	r3, r7, r0
 8009d0e:	4912      	ldr	r1, [pc, #72]	@ (8009d58 <HAL_PCD_EP_DB_Transmit+0x818>)
 8009d10:	400a      	ands	r2, r1
 8009d12:	801a      	strh	r2, [r3, #0]
 8009d14:	183b      	adds	r3, r7, r0
 8009d16:	183a      	adds	r2, r7, r0
 8009d18:	8812      	ldrh	r2, [r2, #0]
 8009d1a:	2110      	movs	r1, #16
 8009d1c:	404a      	eors	r2, r1
 8009d1e:	801a      	strh	r2, [r3, #0]
 8009d20:	183b      	adds	r3, r7, r0
 8009d22:	183a      	adds	r2, r7, r0
 8009d24:	8812      	ldrh	r2, [r2, #0]
 8009d26:	2120      	movs	r1, #32
 8009d28:	404a      	eors	r2, r1
 8009d2a:	801a      	strh	r2, [r3, #0]
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	001a      	movs	r2, r3
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	18d3      	adds	r3, r2, r3
 8009d3a:	183a      	adds	r2, r7, r0
 8009d3c:	8812      	ldrh	r2, [r2, #0]
 8009d3e:	4907      	ldr	r1, [pc, #28]	@ (8009d5c <HAL_PCD_EP_DB_Transmit+0x81c>)
 8009d40:	430a      	orrs	r2, r1
 8009d42:	b292      	uxth	r2, r2
 8009d44:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8009d46:	2300      	movs	r3, #0
}
 8009d48:	0018      	movs	r0, r3
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	b024      	add	sp, #144	@ 0x90
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	ffff8000 	.word	0xffff8000
 8009d54:	00000406 	.word	0x00000406
 8009d58:	ffff8fbf 	.word	0xffff8fbf
 8009d5c:	ffff8080 	.word	0xffff8080

08009d60 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8009d60:	b590      	push	{r4, r7, lr}
 8009d62:	b087      	sub	sp, #28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	0008      	movs	r0, r1
 8009d6a:	0011      	movs	r1, r2
 8009d6c:	607b      	str	r3, [r7, #4]
 8009d6e:	240a      	movs	r4, #10
 8009d70:	193b      	adds	r3, r7, r4
 8009d72:	1c02      	adds	r2, r0, #0
 8009d74:	801a      	strh	r2, [r3, #0]
 8009d76:	2308      	movs	r3, #8
 8009d78:	18fb      	adds	r3, r7, r3
 8009d7a:	1c0a      	adds	r2, r1, #0
 8009d7c:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8009d7e:	0021      	movs	r1, r4
 8009d80:	187b      	adds	r3, r7, r1
 8009d82:	881b      	ldrh	r3, [r3, #0]
 8009d84:	2280      	movs	r2, #128	@ 0x80
 8009d86:	4013      	ands	r3, r2
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d00c      	beq.n	8009da8 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009d8e:	187b      	adds	r3, r7, r1
 8009d90:	881b      	ldrh	r3, [r3, #0]
 8009d92:	2207      	movs	r2, #7
 8009d94:	401a      	ands	r2, r3
 8009d96:	0013      	movs	r3, r2
 8009d98:	009b      	lsls	r3, r3, #2
 8009d9a:	189b      	adds	r3, r3, r2
 8009d9c:	00db      	lsls	r3, r3, #3
 8009d9e:	3310      	adds	r3, #16
 8009da0:	68fa      	ldr	r2, [r7, #12]
 8009da2:	18d3      	adds	r3, r2, r3
 8009da4:	617b      	str	r3, [r7, #20]
 8009da6:	e00b      	b.n	8009dc0 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8009da8:	230a      	movs	r3, #10
 8009daa:	18fb      	adds	r3, r7, r3
 8009dac:	881a      	ldrh	r2, [r3, #0]
 8009dae:	0013      	movs	r3, r2
 8009db0:	009b      	lsls	r3, r3, #2
 8009db2:	189b      	adds	r3, r3, r2
 8009db4:	00db      	lsls	r3, r3, #3
 8009db6:	3351      	adds	r3, #81	@ 0x51
 8009db8:	33ff      	adds	r3, #255	@ 0xff
 8009dba:	68fa      	ldr	r2, [r7, #12]
 8009dbc:	18d3      	adds	r3, r2, r3
 8009dbe:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8009dc0:	2308      	movs	r3, #8
 8009dc2:	18fb      	adds	r3, r7, r3
 8009dc4:	881b      	ldrh	r3, [r3, #0]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d107      	bne.n	8009dda <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8009dca:	697b      	ldr	r3, [r7, #20]
 8009dcc:	2200      	movs	r2, #0
 8009dce:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	b29a      	uxth	r2, r3
 8009dd4:	697b      	ldr	r3, [r7, #20]
 8009dd6:	80da      	strh	r2, [r3, #6]
 8009dd8:	e00b      	b.n	8009df2 <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	b29a      	uxth	r2, r3
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	0c1b      	lsrs	r3, r3, #16
 8009dec:	b29a      	uxth	r2, r3
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	0018      	movs	r0, r3
 8009df6:	46bd      	mov	sp, r7
 8009df8:	b007      	add	sp, #28
 8009dfa:	bd90      	pop	{r4, r7, pc}

08009dfc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8009e0a:	687a      	ldr	r2, [r7, #4]
 8009e0c:	23b4      	movs	r3, #180	@ 0xb4
 8009e0e:	009b      	lsls	r3, r3, #2
 8009e10:	2101      	movs	r1, #1
 8009e12:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 8009e14:	687a      	ldr	r2, [r7, #4]
 8009e16:	23b2      	movs	r3, #178	@ 0xb2
 8009e18:	009b      	lsls	r3, r3, #2
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2254      	movs	r2, #84	@ 0x54
 8009e22:	5a9b      	ldrh	r3, [r3, r2]
 8009e24:	b29b      	uxth	r3, r3
 8009e26:	2201      	movs	r2, #1
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	b299      	uxth	r1, r3
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	2254      	movs	r2, #84	@ 0x54
 8009e30:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	2254      	movs	r2, #84	@ 0x54
 8009e36:	5a9b      	ldrh	r3, [r3, r2]
 8009e38:	b29b      	uxth	r3, r3
 8009e3a:	2202      	movs	r2, #2
 8009e3c:	4313      	orrs	r3, r2
 8009e3e:	b299      	uxth	r1, r3
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2254      	movs	r2, #84	@ 0x54
 8009e44:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8009e46:	2300      	movs	r3, #0
}
 8009e48:	0018      	movs	r0, r3
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	b004      	add	sp, #16
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b082      	sub	sp, #8
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	000a      	movs	r2, r1
 8009e5a:	1cfb      	adds	r3, r7, #3
 8009e5c:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009e5e:	46c0      	nop			@ (mov r8, r8)
 8009e60:	46bd      	mov	sp, r7
 8009e62:	b002      	add	sp, #8
 8009e64:	bd80      	pop	{r7, pc}
	...

08009e68 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b088      	sub	sp, #32
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d102      	bne.n	8009e7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	f000 fb76 	bl	800a568 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	2201      	movs	r2, #1
 8009e82:	4013      	ands	r3, r2
 8009e84:	d100      	bne.n	8009e88 <HAL_RCC_OscConfig+0x20>
 8009e86:	e08e      	b.n	8009fa6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8009e88:	4bc5      	ldr	r3, [pc, #788]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	220c      	movs	r2, #12
 8009e8e:	4013      	ands	r3, r2
 8009e90:	2b04      	cmp	r3, #4
 8009e92:	d00e      	beq.n	8009eb2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009e94:	4bc2      	ldr	r3, [pc, #776]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	220c      	movs	r2, #12
 8009e9a:	4013      	ands	r3, r2
 8009e9c:	2b08      	cmp	r3, #8
 8009e9e:	d117      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x68>
 8009ea0:	4bbf      	ldr	r3, [pc, #764]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009ea2:	685a      	ldr	r2, [r3, #4]
 8009ea4:	23c0      	movs	r3, #192	@ 0xc0
 8009ea6:	025b      	lsls	r3, r3, #9
 8009ea8:	401a      	ands	r2, r3
 8009eaa:	2380      	movs	r3, #128	@ 0x80
 8009eac:	025b      	lsls	r3, r3, #9
 8009eae:	429a      	cmp	r2, r3
 8009eb0:	d10e      	bne.n	8009ed0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eb2:	4bbb      	ldr	r3, [pc, #748]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	2380      	movs	r3, #128	@ 0x80
 8009eb8:	029b      	lsls	r3, r3, #10
 8009eba:	4013      	ands	r3, r2
 8009ebc:	d100      	bne.n	8009ec0 <HAL_RCC_OscConfig+0x58>
 8009ebe:	e071      	b.n	8009fa4 <HAL_RCC_OscConfig+0x13c>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d000      	beq.n	8009eca <HAL_RCC_OscConfig+0x62>
 8009ec8:	e06c      	b.n	8009fa4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	f000 fb4c 	bl	800a568 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	2b01      	cmp	r3, #1
 8009ed6:	d107      	bne.n	8009ee8 <HAL_RCC_OscConfig+0x80>
 8009ed8:	4bb1      	ldr	r3, [pc, #708]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	4bb0      	ldr	r3, [pc, #704]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009ede:	2180      	movs	r1, #128	@ 0x80
 8009ee0:	0249      	lsls	r1, r1, #9
 8009ee2:	430a      	orrs	r2, r1
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	e02f      	b.n	8009f48 <HAL_RCC_OscConfig+0xe0>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	685b      	ldr	r3, [r3, #4]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d10c      	bne.n	8009f0a <HAL_RCC_OscConfig+0xa2>
 8009ef0:	4bab      	ldr	r3, [pc, #684]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	4baa      	ldr	r3, [pc, #680]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009ef6:	49ab      	ldr	r1, [pc, #684]	@ (800a1a4 <HAL_RCC_OscConfig+0x33c>)
 8009ef8:	400a      	ands	r2, r1
 8009efa:	601a      	str	r2, [r3, #0]
 8009efc:	4ba8      	ldr	r3, [pc, #672]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009efe:	681a      	ldr	r2, [r3, #0]
 8009f00:	4ba7      	ldr	r3, [pc, #668]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f02:	49a9      	ldr	r1, [pc, #676]	@ (800a1a8 <HAL_RCC_OscConfig+0x340>)
 8009f04:	400a      	ands	r2, r1
 8009f06:	601a      	str	r2, [r3, #0]
 8009f08:	e01e      	b.n	8009f48 <HAL_RCC_OscConfig+0xe0>
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	685b      	ldr	r3, [r3, #4]
 8009f0e:	2b05      	cmp	r3, #5
 8009f10:	d10e      	bne.n	8009f30 <HAL_RCC_OscConfig+0xc8>
 8009f12:	4ba3      	ldr	r3, [pc, #652]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	4ba2      	ldr	r3, [pc, #648]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f18:	2180      	movs	r1, #128	@ 0x80
 8009f1a:	02c9      	lsls	r1, r1, #11
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	601a      	str	r2, [r3, #0]
 8009f20:	4b9f      	ldr	r3, [pc, #636]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	4b9e      	ldr	r3, [pc, #632]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f26:	2180      	movs	r1, #128	@ 0x80
 8009f28:	0249      	lsls	r1, r1, #9
 8009f2a:	430a      	orrs	r2, r1
 8009f2c:	601a      	str	r2, [r3, #0]
 8009f2e:	e00b      	b.n	8009f48 <HAL_RCC_OscConfig+0xe0>
 8009f30:	4b9b      	ldr	r3, [pc, #620]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	4b9a      	ldr	r3, [pc, #616]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f36:	499b      	ldr	r1, [pc, #620]	@ (800a1a4 <HAL_RCC_OscConfig+0x33c>)
 8009f38:	400a      	ands	r2, r1
 8009f3a:	601a      	str	r2, [r3, #0]
 8009f3c:	4b98      	ldr	r3, [pc, #608]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f3e:	681a      	ldr	r2, [r3, #0]
 8009f40:	4b97      	ldr	r3, [pc, #604]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f42:	4999      	ldr	r1, [pc, #612]	@ (800a1a8 <HAL_RCC_OscConfig+0x340>)
 8009f44:	400a      	ands	r2, r1
 8009f46:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d014      	beq.n	8009f7a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f50:	f7fb fdcc 	bl	8005aec <HAL_GetTick>
 8009f54:	0003      	movs	r3, r0
 8009f56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f58:	e008      	b.n	8009f6c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f5a:	f7fb fdc7 	bl	8005aec <HAL_GetTick>
 8009f5e:	0002      	movs	r2, r0
 8009f60:	69bb      	ldr	r3, [r7, #24]
 8009f62:	1ad3      	subs	r3, r2, r3
 8009f64:	2b64      	cmp	r3, #100	@ 0x64
 8009f66:	d901      	bls.n	8009f6c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8009f68:	2303      	movs	r3, #3
 8009f6a:	e2fd      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f6c:	4b8c      	ldr	r3, [pc, #560]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f6e:	681a      	ldr	r2, [r3, #0]
 8009f70:	2380      	movs	r3, #128	@ 0x80
 8009f72:	029b      	lsls	r3, r3, #10
 8009f74:	4013      	ands	r3, r2
 8009f76:	d0f0      	beq.n	8009f5a <HAL_RCC_OscConfig+0xf2>
 8009f78:	e015      	b.n	8009fa6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f7a:	f7fb fdb7 	bl	8005aec <HAL_GetTick>
 8009f7e:	0003      	movs	r3, r0
 8009f80:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f82:	e008      	b.n	8009f96 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009f84:	f7fb fdb2 	bl	8005aec <HAL_GetTick>
 8009f88:	0002      	movs	r2, r0
 8009f8a:	69bb      	ldr	r3, [r7, #24]
 8009f8c:	1ad3      	subs	r3, r2, r3
 8009f8e:	2b64      	cmp	r3, #100	@ 0x64
 8009f90:	d901      	bls.n	8009f96 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8009f92:	2303      	movs	r3, #3
 8009f94:	e2e8      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009f96:	4b82      	ldr	r3, [pc, #520]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009f98:	681a      	ldr	r2, [r3, #0]
 8009f9a:	2380      	movs	r3, #128	@ 0x80
 8009f9c:	029b      	lsls	r3, r3, #10
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	d1f0      	bne.n	8009f84 <HAL_RCC_OscConfig+0x11c>
 8009fa2:	e000      	b.n	8009fa6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fa4:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	2202      	movs	r2, #2
 8009fac:	4013      	ands	r3, r2
 8009fae:	d100      	bne.n	8009fb2 <HAL_RCC_OscConfig+0x14a>
 8009fb0:	e06c      	b.n	800a08c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8009fb2:	4b7b      	ldr	r3, [pc, #492]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	220c      	movs	r2, #12
 8009fb8:	4013      	ands	r3, r2
 8009fba:	d00e      	beq.n	8009fda <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8009fbc:	4b78      	ldr	r3, [pc, #480]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009fbe:	685b      	ldr	r3, [r3, #4]
 8009fc0:	220c      	movs	r2, #12
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	2b08      	cmp	r3, #8
 8009fc6:	d11f      	bne.n	800a008 <HAL_RCC_OscConfig+0x1a0>
 8009fc8:	4b75      	ldr	r3, [pc, #468]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	23c0      	movs	r3, #192	@ 0xc0
 8009fce:	025b      	lsls	r3, r3, #9
 8009fd0:	401a      	ands	r2, r3
 8009fd2:	2380      	movs	r3, #128	@ 0x80
 8009fd4:	021b      	lsls	r3, r3, #8
 8009fd6:	429a      	cmp	r2, r3
 8009fd8:	d116      	bne.n	800a008 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009fda:	4b71      	ldr	r3, [pc, #452]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	2202      	movs	r2, #2
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	d005      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x188>
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d001      	beq.n	8009ff0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8009fec:	2301      	movs	r3, #1
 8009fee:	e2bb      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ff0:	4b6b      	ldr	r3, [pc, #428]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	22f8      	movs	r2, #248	@ 0xf8
 8009ff6:	4393      	bics	r3, r2
 8009ff8:	0019      	movs	r1, r3
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	00da      	lsls	r2, r3, #3
 800a000:	4b67      	ldr	r3, [pc, #412]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a002:	430a      	orrs	r2, r1
 800a004:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a006:	e041      	b.n	800a08c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	68db      	ldr	r3, [r3, #12]
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d024      	beq.n	800a05a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a010:	4b63      	ldr	r3, [pc, #396]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	4b62      	ldr	r3, [pc, #392]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a016:	2101      	movs	r1, #1
 800a018:	430a      	orrs	r2, r1
 800a01a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a01c:	f7fb fd66 	bl	8005aec <HAL_GetTick>
 800a020:	0003      	movs	r3, r0
 800a022:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a024:	e008      	b.n	800a038 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a026:	f7fb fd61 	bl	8005aec <HAL_GetTick>
 800a02a:	0002      	movs	r2, r0
 800a02c:	69bb      	ldr	r3, [r7, #24]
 800a02e:	1ad3      	subs	r3, r2, r3
 800a030:	2b02      	cmp	r3, #2
 800a032:	d901      	bls.n	800a038 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e297      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a038:	4b59      	ldr	r3, [pc, #356]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	2202      	movs	r2, #2
 800a03e:	4013      	ands	r3, r2
 800a040:	d0f1      	beq.n	800a026 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a042:	4b57      	ldr	r3, [pc, #348]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	22f8      	movs	r2, #248	@ 0xf8
 800a048:	4393      	bics	r3, r2
 800a04a:	0019      	movs	r1, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	691b      	ldr	r3, [r3, #16]
 800a050:	00da      	lsls	r2, r3, #3
 800a052:	4b53      	ldr	r3, [pc, #332]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a054:	430a      	orrs	r2, r1
 800a056:	601a      	str	r2, [r3, #0]
 800a058:	e018      	b.n	800a08c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a05a:	4b51      	ldr	r3, [pc, #324]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	4b50      	ldr	r3, [pc, #320]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a060:	2101      	movs	r1, #1
 800a062:	438a      	bics	r2, r1
 800a064:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a066:	f7fb fd41 	bl	8005aec <HAL_GetTick>
 800a06a:	0003      	movs	r3, r0
 800a06c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a06e:	e008      	b.n	800a082 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a070:	f7fb fd3c 	bl	8005aec <HAL_GetTick>
 800a074:	0002      	movs	r2, r0
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	1ad3      	subs	r3, r2, r3
 800a07a:	2b02      	cmp	r3, #2
 800a07c:	d901      	bls.n	800a082 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800a07e:	2303      	movs	r3, #3
 800a080:	e272      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a082:	4b47      	ldr	r3, [pc, #284]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	2202      	movs	r2, #2
 800a088:	4013      	ands	r3, r2
 800a08a:	d1f1      	bne.n	800a070 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2208      	movs	r2, #8
 800a092:	4013      	ands	r3, r2
 800a094:	d036      	beq.n	800a104 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	69db      	ldr	r3, [r3, #28]
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d019      	beq.n	800a0d2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a09e:	4b40      	ldr	r3, [pc, #256]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a0a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0a2:	4b3f      	ldr	r3, [pc, #252]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a0a4:	2101      	movs	r1, #1
 800a0a6:	430a      	orrs	r2, r1
 800a0a8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0aa:	f7fb fd1f 	bl	8005aec <HAL_GetTick>
 800a0ae:	0003      	movs	r3, r0
 800a0b0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0b2:	e008      	b.n	800a0c6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0b4:	f7fb fd1a 	bl	8005aec <HAL_GetTick>
 800a0b8:	0002      	movs	r2, r0
 800a0ba:	69bb      	ldr	r3, [r7, #24]
 800a0bc:	1ad3      	subs	r3, r2, r3
 800a0be:	2b02      	cmp	r3, #2
 800a0c0:	d901      	bls.n	800a0c6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800a0c2:	2303      	movs	r3, #3
 800a0c4:	e250      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0c6:	4b36      	ldr	r3, [pc, #216]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a0c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0ca:	2202      	movs	r2, #2
 800a0cc:	4013      	ands	r3, r2
 800a0ce:	d0f1      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x24c>
 800a0d0:	e018      	b.n	800a104 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0d2:	4b33      	ldr	r3, [pc, #204]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a0d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0d6:	4b32      	ldr	r3, [pc, #200]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a0d8:	2101      	movs	r1, #1
 800a0da:	438a      	bics	r2, r1
 800a0dc:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0de:	f7fb fd05 	bl	8005aec <HAL_GetTick>
 800a0e2:	0003      	movs	r3, r0
 800a0e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0e6:	e008      	b.n	800a0fa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a0e8:	f7fb fd00 	bl	8005aec <HAL_GetTick>
 800a0ec:	0002      	movs	r2, r0
 800a0ee:	69bb      	ldr	r3, [r7, #24]
 800a0f0:	1ad3      	subs	r3, r2, r3
 800a0f2:	2b02      	cmp	r3, #2
 800a0f4:	d901      	bls.n	800a0fa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800a0f6:	2303      	movs	r3, #3
 800a0f8:	e236      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0fa:	4b29      	ldr	r3, [pc, #164]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a0fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0fe:	2202      	movs	r2, #2
 800a100:	4013      	ands	r3, r2
 800a102:	d1f1      	bne.n	800a0e8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2204      	movs	r2, #4
 800a10a:	4013      	ands	r3, r2
 800a10c:	d100      	bne.n	800a110 <HAL_RCC_OscConfig+0x2a8>
 800a10e:	e0b5      	b.n	800a27c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a110:	201f      	movs	r0, #31
 800a112:	183b      	adds	r3, r7, r0
 800a114:	2200      	movs	r2, #0
 800a116:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a118:	4b21      	ldr	r3, [pc, #132]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a11a:	69da      	ldr	r2, [r3, #28]
 800a11c:	2380      	movs	r3, #128	@ 0x80
 800a11e:	055b      	lsls	r3, r3, #21
 800a120:	4013      	ands	r3, r2
 800a122:	d110      	bne.n	800a146 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a124:	4b1e      	ldr	r3, [pc, #120]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a126:	69da      	ldr	r2, [r3, #28]
 800a128:	4b1d      	ldr	r3, [pc, #116]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a12a:	2180      	movs	r1, #128	@ 0x80
 800a12c:	0549      	lsls	r1, r1, #21
 800a12e:	430a      	orrs	r2, r1
 800a130:	61da      	str	r2, [r3, #28]
 800a132:	4b1b      	ldr	r3, [pc, #108]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a134:	69da      	ldr	r2, [r3, #28]
 800a136:	2380      	movs	r3, #128	@ 0x80
 800a138:	055b      	lsls	r3, r3, #21
 800a13a:	4013      	ands	r3, r2
 800a13c:	60fb      	str	r3, [r7, #12]
 800a13e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a140:	183b      	adds	r3, r7, r0
 800a142:	2201      	movs	r2, #1
 800a144:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a146:	4b19      	ldr	r3, [pc, #100]	@ (800a1ac <HAL_RCC_OscConfig+0x344>)
 800a148:	681a      	ldr	r2, [r3, #0]
 800a14a:	2380      	movs	r3, #128	@ 0x80
 800a14c:	005b      	lsls	r3, r3, #1
 800a14e:	4013      	ands	r3, r2
 800a150:	d11a      	bne.n	800a188 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a152:	4b16      	ldr	r3, [pc, #88]	@ (800a1ac <HAL_RCC_OscConfig+0x344>)
 800a154:	681a      	ldr	r2, [r3, #0]
 800a156:	4b15      	ldr	r3, [pc, #84]	@ (800a1ac <HAL_RCC_OscConfig+0x344>)
 800a158:	2180      	movs	r1, #128	@ 0x80
 800a15a:	0049      	lsls	r1, r1, #1
 800a15c:	430a      	orrs	r2, r1
 800a15e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a160:	f7fb fcc4 	bl	8005aec <HAL_GetTick>
 800a164:	0003      	movs	r3, r0
 800a166:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a168:	e008      	b.n	800a17c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a16a:	f7fb fcbf 	bl	8005aec <HAL_GetTick>
 800a16e:	0002      	movs	r2, r0
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	2b64      	cmp	r3, #100	@ 0x64
 800a176:	d901      	bls.n	800a17c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 800a178:	2303      	movs	r3, #3
 800a17a:	e1f5      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a17c:	4b0b      	ldr	r3, [pc, #44]	@ (800a1ac <HAL_RCC_OscConfig+0x344>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	2380      	movs	r3, #128	@ 0x80
 800a182:	005b      	lsls	r3, r3, #1
 800a184:	4013      	ands	r3, r2
 800a186:	d0f0      	beq.n	800a16a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d10f      	bne.n	800a1b0 <HAL_RCC_OscConfig+0x348>
 800a190:	4b03      	ldr	r3, [pc, #12]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a192:	6a1a      	ldr	r2, [r3, #32]
 800a194:	4b02      	ldr	r3, [pc, #8]	@ (800a1a0 <HAL_RCC_OscConfig+0x338>)
 800a196:	2101      	movs	r1, #1
 800a198:	430a      	orrs	r2, r1
 800a19a:	621a      	str	r2, [r3, #32]
 800a19c:	e036      	b.n	800a20c <HAL_RCC_OscConfig+0x3a4>
 800a19e:	46c0      	nop			@ (mov r8, r8)
 800a1a0:	40021000 	.word	0x40021000
 800a1a4:	fffeffff 	.word	0xfffeffff
 800a1a8:	fffbffff 	.word	0xfffbffff
 800a1ac:	40007000 	.word	0x40007000
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d10c      	bne.n	800a1d2 <HAL_RCC_OscConfig+0x36a>
 800a1b8:	4bca      	ldr	r3, [pc, #808]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1ba:	6a1a      	ldr	r2, [r3, #32]
 800a1bc:	4bc9      	ldr	r3, [pc, #804]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1be:	2101      	movs	r1, #1
 800a1c0:	438a      	bics	r2, r1
 800a1c2:	621a      	str	r2, [r3, #32]
 800a1c4:	4bc7      	ldr	r3, [pc, #796]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1c6:	6a1a      	ldr	r2, [r3, #32]
 800a1c8:	4bc6      	ldr	r3, [pc, #792]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1ca:	2104      	movs	r1, #4
 800a1cc:	438a      	bics	r2, r1
 800a1ce:	621a      	str	r2, [r3, #32]
 800a1d0:	e01c      	b.n	800a20c <HAL_RCC_OscConfig+0x3a4>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	689b      	ldr	r3, [r3, #8]
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	d10c      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x38c>
 800a1da:	4bc2      	ldr	r3, [pc, #776]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1dc:	6a1a      	ldr	r2, [r3, #32]
 800a1de:	4bc1      	ldr	r3, [pc, #772]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1e0:	2104      	movs	r1, #4
 800a1e2:	430a      	orrs	r2, r1
 800a1e4:	621a      	str	r2, [r3, #32]
 800a1e6:	4bbf      	ldr	r3, [pc, #764]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1e8:	6a1a      	ldr	r2, [r3, #32]
 800a1ea:	4bbe      	ldr	r3, [pc, #760]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1ec:	2101      	movs	r1, #1
 800a1ee:	430a      	orrs	r2, r1
 800a1f0:	621a      	str	r2, [r3, #32]
 800a1f2:	e00b      	b.n	800a20c <HAL_RCC_OscConfig+0x3a4>
 800a1f4:	4bbb      	ldr	r3, [pc, #748]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1f6:	6a1a      	ldr	r2, [r3, #32]
 800a1f8:	4bba      	ldr	r3, [pc, #744]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a1fa:	2101      	movs	r1, #1
 800a1fc:	438a      	bics	r2, r1
 800a1fe:	621a      	str	r2, [r3, #32]
 800a200:	4bb8      	ldr	r3, [pc, #736]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a202:	6a1a      	ldr	r2, [r3, #32]
 800a204:	4bb7      	ldr	r3, [pc, #732]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a206:	2104      	movs	r1, #4
 800a208:	438a      	bics	r2, r1
 800a20a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d014      	beq.n	800a23e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a214:	f7fb fc6a 	bl	8005aec <HAL_GetTick>
 800a218:	0003      	movs	r3, r0
 800a21a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a21c:	e009      	b.n	800a232 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a21e:	f7fb fc65 	bl	8005aec <HAL_GetTick>
 800a222:	0002      	movs	r2, r0
 800a224:	69bb      	ldr	r3, [r7, #24]
 800a226:	1ad3      	subs	r3, r2, r3
 800a228:	4aaf      	ldr	r2, [pc, #700]	@ (800a4e8 <HAL_RCC_OscConfig+0x680>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d901      	bls.n	800a232 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800a22e:	2303      	movs	r3, #3
 800a230:	e19a      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a232:	4bac      	ldr	r3, [pc, #688]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a234:	6a1b      	ldr	r3, [r3, #32]
 800a236:	2202      	movs	r2, #2
 800a238:	4013      	ands	r3, r2
 800a23a:	d0f0      	beq.n	800a21e <HAL_RCC_OscConfig+0x3b6>
 800a23c:	e013      	b.n	800a266 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a23e:	f7fb fc55 	bl	8005aec <HAL_GetTick>
 800a242:	0003      	movs	r3, r0
 800a244:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a246:	e009      	b.n	800a25c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a248:	f7fb fc50 	bl	8005aec <HAL_GetTick>
 800a24c:	0002      	movs	r2, r0
 800a24e:	69bb      	ldr	r3, [r7, #24]
 800a250:	1ad3      	subs	r3, r2, r3
 800a252:	4aa5      	ldr	r2, [pc, #660]	@ (800a4e8 <HAL_RCC_OscConfig+0x680>)
 800a254:	4293      	cmp	r3, r2
 800a256:	d901      	bls.n	800a25c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 800a258:	2303      	movs	r3, #3
 800a25a:	e185      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a25c:	4ba1      	ldr	r3, [pc, #644]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a25e:	6a1b      	ldr	r3, [r3, #32]
 800a260:	2202      	movs	r2, #2
 800a262:	4013      	ands	r3, r2
 800a264:	d1f0      	bne.n	800a248 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a266:	231f      	movs	r3, #31
 800a268:	18fb      	adds	r3, r7, r3
 800a26a:	781b      	ldrb	r3, [r3, #0]
 800a26c:	2b01      	cmp	r3, #1
 800a26e:	d105      	bne.n	800a27c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a270:	4b9c      	ldr	r3, [pc, #624]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a272:	69da      	ldr	r2, [r3, #28]
 800a274:	4b9b      	ldr	r3, [pc, #620]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a276:	499d      	ldr	r1, [pc, #628]	@ (800a4ec <HAL_RCC_OscConfig+0x684>)
 800a278:	400a      	ands	r2, r1
 800a27a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	2210      	movs	r2, #16
 800a282:	4013      	ands	r3, r2
 800a284:	d063      	beq.n	800a34e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	695b      	ldr	r3, [r3, #20]
 800a28a:	2b01      	cmp	r3, #1
 800a28c:	d12a      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800a28e:	4b95      	ldr	r3, [pc, #596]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a290:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a292:	4b94      	ldr	r3, [pc, #592]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a294:	2104      	movs	r1, #4
 800a296:	430a      	orrs	r2, r1
 800a298:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800a29a:	4b92      	ldr	r3, [pc, #584]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a29c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a29e:	4b91      	ldr	r3, [pc, #580]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a2a0:	2101      	movs	r1, #1
 800a2a2:	430a      	orrs	r2, r1
 800a2a4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a2a6:	f7fb fc21 	bl	8005aec <HAL_GetTick>
 800a2aa:	0003      	movs	r3, r0
 800a2ac:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800a2ae:	e008      	b.n	800a2c2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800a2b0:	f7fb fc1c 	bl	8005aec <HAL_GetTick>
 800a2b4:	0002      	movs	r2, r0
 800a2b6:	69bb      	ldr	r3, [r7, #24]
 800a2b8:	1ad3      	subs	r3, r2, r3
 800a2ba:	2b02      	cmp	r3, #2
 800a2bc:	d901      	bls.n	800a2c2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800a2be:	2303      	movs	r3, #3
 800a2c0:	e152      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800a2c2:	4b88      	ldr	r3, [pc, #544]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a2c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2c6:	2202      	movs	r2, #2
 800a2c8:	4013      	ands	r3, r2
 800a2ca:	d0f1      	beq.n	800a2b0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800a2cc:	4b85      	ldr	r3, [pc, #532]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a2ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2d0:	22f8      	movs	r2, #248	@ 0xf8
 800a2d2:	4393      	bics	r3, r2
 800a2d4:	0019      	movs	r1, r3
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	699b      	ldr	r3, [r3, #24]
 800a2da:	00da      	lsls	r2, r3, #3
 800a2dc:	4b81      	ldr	r3, [pc, #516]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	635a      	str	r2, [r3, #52]	@ 0x34
 800a2e2:	e034      	b.n	800a34e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	695b      	ldr	r3, [r3, #20]
 800a2e8:	3305      	adds	r3, #5
 800a2ea:	d111      	bne.n	800a310 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800a2ec:	4b7d      	ldr	r3, [pc, #500]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a2ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2f0:	4b7c      	ldr	r3, [pc, #496]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a2f2:	2104      	movs	r1, #4
 800a2f4:	438a      	bics	r2, r1
 800a2f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800a2f8:	4b7a      	ldr	r3, [pc, #488]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a2fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2fc:	22f8      	movs	r2, #248	@ 0xf8
 800a2fe:	4393      	bics	r3, r2
 800a300:	0019      	movs	r1, r3
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	699b      	ldr	r3, [r3, #24]
 800a306:	00da      	lsls	r2, r3, #3
 800a308:	4b76      	ldr	r3, [pc, #472]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a30a:	430a      	orrs	r2, r1
 800a30c:	635a      	str	r2, [r3, #52]	@ 0x34
 800a30e:	e01e      	b.n	800a34e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800a310:	4b74      	ldr	r3, [pc, #464]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a312:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a314:	4b73      	ldr	r3, [pc, #460]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a316:	2104      	movs	r1, #4
 800a318:	430a      	orrs	r2, r1
 800a31a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800a31c:	4b71      	ldr	r3, [pc, #452]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a31e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a320:	4b70      	ldr	r3, [pc, #448]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a322:	2101      	movs	r1, #1
 800a324:	438a      	bics	r2, r1
 800a326:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a328:	f7fb fbe0 	bl	8005aec <HAL_GetTick>
 800a32c:	0003      	movs	r3, r0
 800a32e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800a330:	e008      	b.n	800a344 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800a332:	f7fb fbdb 	bl	8005aec <HAL_GetTick>
 800a336:	0002      	movs	r2, r0
 800a338:	69bb      	ldr	r3, [r7, #24]
 800a33a:	1ad3      	subs	r3, r2, r3
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d901      	bls.n	800a344 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 800a340:	2303      	movs	r3, #3
 800a342:	e111      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800a344:	4b67      	ldr	r3, [pc, #412]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a348:	2202      	movs	r2, #2
 800a34a:	4013      	ands	r3, r2
 800a34c:	d1f1      	bne.n	800a332 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2220      	movs	r2, #32
 800a354:	4013      	ands	r3, r2
 800a356:	d05c      	beq.n	800a412 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800a358:	4b62      	ldr	r3, [pc, #392]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a35a:	685b      	ldr	r3, [r3, #4]
 800a35c:	220c      	movs	r2, #12
 800a35e:	4013      	ands	r3, r2
 800a360:	2b0c      	cmp	r3, #12
 800a362:	d00e      	beq.n	800a382 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800a364:	4b5f      	ldr	r3, [pc, #380]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a366:	685b      	ldr	r3, [r3, #4]
 800a368:	220c      	movs	r2, #12
 800a36a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d114      	bne.n	800a39a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800a370:	4b5c      	ldr	r3, [pc, #368]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a372:	685a      	ldr	r2, [r3, #4]
 800a374:	23c0      	movs	r3, #192	@ 0xc0
 800a376:	025b      	lsls	r3, r3, #9
 800a378:	401a      	ands	r2, r3
 800a37a:	23c0      	movs	r3, #192	@ 0xc0
 800a37c:	025b      	lsls	r3, r3, #9
 800a37e:	429a      	cmp	r2, r3
 800a380:	d10b      	bne.n	800a39a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800a382:	4b58      	ldr	r3, [pc, #352]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a386:	2380      	movs	r3, #128	@ 0x80
 800a388:	029b      	lsls	r3, r3, #10
 800a38a:	4013      	ands	r3, r2
 800a38c:	d040      	beq.n	800a410 <HAL_RCC_OscConfig+0x5a8>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a1b      	ldr	r3, [r3, #32]
 800a392:	2b01      	cmp	r3, #1
 800a394:	d03c      	beq.n	800a410 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e0e6      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6a1b      	ldr	r3, [r3, #32]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d01b      	beq.n	800a3da <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800a3a2:	4b50      	ldr	r3, [pc, #320]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a3a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3a6:	4b4f      	ldr	r3, [pc, #316]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a3a8:	2180      	movs	r1, #128	@ 0x80
 800a3aa:	0249      	lsls	r1, r1, #9
 800a3ac:	430a      	orrs	r2, r1
 800a3ae:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3b0:	f7fb fb9c 	bl	8005aec <HAL_GetTick>
 800a3b4:	0003      	movs	r3, r0
 800a3b6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800a3b8:	e008      	b.n	800a3cc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3ba:	f7fb fb97 	bl	8005aec <HAL_GetTick>
 800a3be:	0002      	movs	r2, r0
 800a3c0:	69bb      	ldr	r3, [r7, #24]
 800a3c2:	1ad3      	subs	r3, r2, r3
 800a3c4:	2b02      	cmp	r3, #2
 800a3c6:	d901      	bls.n	800a3cc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	e0cd      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800a3cc:	4b45      	ldr	r3, [pc, #276]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a3ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3d0:	2380      	movs	r3, #128	@ 0x80
 800a3d2:	029b      	lsls	r3, r3, #10
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	d0f0      	beq.n	800a3ba <HAL_RCC_OscConfig+0x552>
 800a3d8:	e01b      	b.n	800a412 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800a3da:	4b42      	ldr	r3, [pc, #264]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a3dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a3de:	4b41      	ldr	r3, [pc, #260]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a3e0:	4943      	ldr	r1, [pc, #268]	@ (800a4f0 <HAL_RCC_OscConfig+0x688>)
 800a3e2:	400a      	ands	r2, r1
 800a3e4:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3e6:	f7fb fb81 	bl	8005aec <HAL_GetTick>
 800a3ea:	0003      	movs	r3, r0
 800a3ec:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800a3ee:	e008      	b.n	800a402 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a3f0:	f7fb fb7c 	bl	8005aec <HAL_GetTick>
 800a3f4:	0002      	movs	r2, r0
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d901      	bls.n	800a402 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800a3fe:	2303      	movs	r3, #3
 800a400:	e0b2      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800a402:	4b38      	ldr	r3, [pc, #224]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a404:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a406:	2380      	movs	r3, #128	@ 0x80
 800a408:	029b      	lsls	r3, r3, #10
 800a40a:	4013      	ands	r3, r2
 800a40c:	d1f0      	bne.n	800a3f0 <HAL_RCC_OscConfig+0x588>
 800a40e:	e000      	b.n	800a412 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 800a410:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a416:	2b00      	cmp	r3, #0
 800a418:	d100      	bne.n	800a41c <HAL_RCC_OscConfig+0x5b4>
 800a41a:	e0a4      	b.n	800a566 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a41c:	4b31      	ldr	r3, [pc, #196]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	220c      	movs	r2, #12
 800a422:	4013      	ands	r3, r2
 800a424:	2b08      	cmp	r3, #8
 800a426:	d100      	bne.n	800a42a <HAL_RCC_OscConfig+0x5c2>
 800a428:	e078      	b.n	800a51c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d14c      	bne.n	800a4cc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a432:	4b2c      	ldr	r3, [pc, #176]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	4b2b      	ldr	r3, [pc, #172]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a438:	492e      	ldr	r1, [pc, #184]	@ (800a4f4 <HAL_RCC_OscConfig+0x68c>)
 800a43a:	400a      	ands	r2, r1
 800a43c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a43e:	f7fb fb55 	bl	8005aec <HAL_GetTick>
 800a442:	0003      	movs	r3, r0
 800a444:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a446:	e008      	b.n	800a45a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a448:	f7fb fb50 	bl	8005aec <HAL_GetTick>
 800a44c:	0002      	movs	r2, r0
 800a44e:	69bb      	ldr	r3, [r7, #24]
 800a450:	1ad3      	subs	r3, r2, r3
 800a452:	2b02      	cmp	r3, #2
 800a454:	d901      	bls.n	800a45a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800a456:	2303      	movs	r3, #3
 800a458:	e086      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a45a:	4b22      	ldr	r3, [pc, #136]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a45c:	681a      	ldr	r2, [r3, #0]
 800a45e:	2380      	movs	r3, #128	@ 0x80
 800a460:	049b      	lsls	r3, r3, #18
 800a462:	4013      	ands	r3, r2
 800a464:	d1f0      	bne.n	800a448 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a466:	4b1f      	ldr	r3, [pc, #124]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a46a:	220f      	movs	r2, #15
 800a46c:	4393      	bics	r3, r2
 800a46e:	0019      	movs	r1, r3
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a474:	4b1b      	ldr	r3, [pc, #108]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a476:	430a      	orrs	r2, r1
 800a478:	62da      	str	r2, [r3, #44]	@ 0x2c
 800a47a:	4b1a      	ldr	r3, [pc, #104]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	4a1e      	ldr	r2, [pc, #120]	@ (800a4f8 <HAL_RCC_OscConfig+0x690>)
 800a480:	4013      	ands	r3, r2
 800a482:	0019      	movs	r1, r3
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a48c:	431a      	orrs	r2, r3
 800a48e:	4b15      	ldr	r3, [pc, #84]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a490:	430a      	orrs	r2, r1
 800a492:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a494:	4b13      	ldr	r3, [pc, #76]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a496:	681a      	ldr	r2, [r3, #0]
 800a498:	4b12      	ldr	r3, [pc, #72]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a49a:	2180      	movs	r1, #128	@ 0x80
 800a49c:	0449      	lsls	r1, r1, #17
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4a2:	f7fb fb23 	bl	8005aec <HAL_GetTick>
 800a4a6:	0003      	movs	r3, r0
 800a4a8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4aa:	e008      	b.n	800a4be <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4ac:	f7fb fb1e 	bl	8005aec <HAL_GetTick>
 800a4b0:	0002      	movs	r2, r0
 800a4b2:	69bb      	ldr	r3, [r7, #24]
 800a4b4:	1ad3      	subs	r3, r2, r3
 800a4b6:	2b02      	cmp	r3, #2
 800a4b8:	d901      	bls.n	800a4be <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800a4ba:	2303      	movs	r3, #3
 800a4bc:	e054      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a4be:	4b09      	ldr	r3, [pc, #36]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	2380      	movs	r3, #128	@ 0x80
 800a4c4:	049b      	lsls	r3, r3, #18
 800a4c6:	4013      	ands	r3, r2
 800a4c8:	d0f0      	beq.n	800a4ac <HAL_RCC_OscConfig+0x644>
 800a4ca:	e04c      	b.n	800a566 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a4cc:	4b05      	ldr	r3, [pc, #20]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a4ce:	681a      	ldr	r2, [r3, #0]
 800a4d0:	4b04      	ldr	r3, [pc, #16]	@ (800a4e4 <HAL_RCC_OscConfig+0x67c>)
 800a4d2:	4908      	ldr	r1, [pc, #32]	@ (800a4f4 <HAL_RCC_OscConfig+0x68c>)
 800a4d4:	400a      	ands	r2, r1
 800a4d6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a4d8:	f7fb fb08 	bl	8005aec <HAL_GetTick>
 800a4dc:	0003      	movs	r3, r0
 800a4de:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a4e0:	e015      	b.n	800a50e <HAL_RCC_OscConfig+0x6a6>
 800a4e2:	46c0      	nop			@ (mov r8, r8)
 800a4e4:	40021000 	.word	0x40021000
 800a4e8:	00001388 	.word	0x00001388
 800a4ec:	efffffff 	.word	0xefffffff
 800a4f0:	fffeffff 	.word	0xfffeffff
 800a4f4:	feffffff 	.word	0xfeffffff
 800a4f8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a4fc:	f7fb faf6 	bl	8005aec <HAL_GetTick>
 800a500:	0002      	movs	r2, r0
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	1ad3      	subs	r3, r2, r3
 800a506:	2b02      	cmp	r3, #2
 800a508:	d901      	bls.n	800a50e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800a50a:	2303      	movs	r3, #3
 800a50c:	e02c      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a50e:	4b18      	ldr	r3, [pc, #96]	@ (800a570 <HAL_RCC_OscConfig+0x708>)
 800a510:	681a      	ldr	r2, [r3, #0]
 800a512:	2380      	movs	r3, #128	@ 0x80
 800a514:	049b      	lsls	r3, r3, #18
 800a516:	4013      	ands	r3, r2
 800a518:	d1f0      	bne.n	800a4fc <HAL_RCC_OscConfig+0x694>
 800a51a:	e024      	b.n	800a566 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a520:	2b01      	cmp	r3, #1
 800a522:	d101      	bne.n	800a528 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	e01f      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800a528:	4b11      	ldr	r3, [pc, #68]	@ (800a570 <HAL_RCC_OscConfig+0x708>)
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800a52e:	4b10      	ldr	r3, [pc, #64]	@ (800a570 <HAL_RCC_OscConfig+0x708>)
 800a530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a532:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	23c0      	movs	r3, #192	@ 0xc0
 800a538:	025b      	lsls	r3, r3, #9
 800a53a:	401a      	ands	r2, r3
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a540:	429a      	cmp	r2, r3
 800a542:	d10e      	bne.n	800a562 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800a544:	693b      	ldr	r3, [r7, #16]
 800a546:	220f      	movs	r2, #15
 800a548:	401a      	ands	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800a54e:	429a      	cmp	r2, r3
 800a550:	d107      	bne.n	800a562 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800a552:	697a      	ldr	r2, [r7, #20]
 800a554:	23f0      	movs	r3, #240	@ 0xf0
 800a556:	039b      	lsls	r3, r3, #14
 800a558:	401a      	ands	r2, r3
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800a55e:	429a      	cmp	r2, r3
 800a560:	d001      	beq.n	800a566 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800a562:	2301      	movs	r3, #1
 800a564:	e000      	b.n	800a568 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800a566:	2300      	movs	r3, #0
}
 800a568:	0018      	movs	r0, r3
 800a56a:	46bd      	mov	sp, r7
 800a56c:	b008      	add	sp, #32
 800a56e:	bd80      	pop	{r7, pc}
 800a570:	40021000 	.word	0x40021000

0800a574 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b084      	sub	sp, #16
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d101      	bne.n	800a588 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a584:	2301      	movs	r3, #1
 800a586:	e0bf      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a588:	4b61      	ldr	r3, [pc, #388]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	2201      	movs	r2, #1
 800a58e:	4013      	ands	r3, r2
 800a590:	683a      	ldr	r2, [r7, #0]
 800a592:	429a      	cmp	r2, r3
 800a594:	d911      	bls.n	800a5ba <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a596:	4b5e      	ldr	r3, [pc, #376]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	2201      	movs	r2, #1
 800a59c:	4393      	bics	r3, r2
 800a59e:	0019      	movs	r1, r3
 800a5a0:	4b5b      	ldr	r3, [pc, #364]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a5a2:	683a      	ldr	r2, [r7, #0]
 800a5a4:	430a      	orrs	r2, r1
 800a5a6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5a8:	4b59      	ldr	r3, [pc, #356]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	4013      	ands	r3, r2
 800a5b0:	683a      	ldr	r2, [r7, #0]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d001      	beq.n	800a5ba <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	e0a6      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2202      	movs	r2, #2
 800a5c0:	4013      	ands	r3, r2
 800a5c2:	d015      	beq.n	800a5f0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	2204      	movs	r2, #4
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	d006      	beq.n	800a5dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800a5ce:	4b51      	ldr	r3, [pc, #324]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a5d0:	685a      	ldr	r2, [r3, #4]
 800a5d2:	4b50      	ldr	r3, [pc, #320]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a5d4:	21e0      	movs	r1, #224	@ 0xe0
 800a5d6:	00c9      	lsls	r1, r1, #3
 800a5d8:	430a      	orrs	r2, r1
 800a5da:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5dc:	4b4d      	ldr	r3, [pc, #308]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a5de:	685b      	ldr	r3, [r3, #4]
 800a5e0:	22f0      	movs	r2, #240	@ 0xf0
 800a5e2:	4393      	bics	r3, r2
 800a5e4:	0019      	movs	r1, r3
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	689a      	ldr	r2, [r3, #8]
 800a5ea:	4b4a      	ldr	r3, [pc, #296]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a5ec:	430a      	orrs	r2, r1
 800a5ee:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	4013      	ands	r3, r2
 800a5f8:	d04c      	beq.n	800a694 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d107      	bne.n	800a612 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a602:	4b44      	ldr	r3, [pc, #272]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	2380      	movs	r3, #128	@ 0x80
 800a608:	029b      	lsls	r3, r3, #10
 800a60a:	4013      	ands	r3, r2
 800a60c:	d120      	bne.n	800a650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e07a      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2b02      	cmp	r3, #2
 800a618:	d107      	bne.n	800a62a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a61a:	4b3e      	ldr	r3, [pc, #248]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a61c:	681a      	ldr	r2, [r3, #0]
 800a61e:	2380      	movs	r3, #128	@ 0x80
 800a620:	049b      	lsls	r3, r3, #18
 800a622:	4013      	ands	r3, r2
 800a624:	d114      	bne.n	800a650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e06e      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	685b      	ldr	r3, [r3, #4]
 800a62e:	2b03      	cmp	r3, #3
 800a630:	d107      	bne.n	800a642 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800a632:	4b38      	ldr	r3, [pc, #224]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a634:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a636:	2380      	movs	r3, #128	@ 0x80
 800a638:	029b      	lsls	r3, r3, #10
 800a63a:	4013      	ands	r3, r2
 800a63c:	d108      	bne.n	800a650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a63e:	2301      	movs	r3, #1
 800a640:	e062      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a642:	4b34      	ldr	r3, [pc, #208]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	2202      	movs	r2, #2
 800a648:	4013      	ands	r3, r2
 800a64a:	d101      	bne.n	800a650 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800a64c:	2301      	movs	r3, #1
 800a64e:	e05b      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a650:	4b30      	ldr	r3, [pc, #192]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a652:	685b      	ldr	r3, [r3, #4]
 800a654:	2203      	movs	r2, #3
 800a656:	4393      	bics	r3, r2
 800a658:	0019      	movs	r1, r3
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	4b2d      	ldr	r3, [pc, #180]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a660:	430a      	orrs	r2, r1
 800a662:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a664:	f7fb fa42 	bl	8005aec <HAL_GetTick>
 800a668:	0003      	movs	r3, r0
 800a66a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a66c:	e009      	b.n	800a682 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a66e:	f7fb fa3d 	bl	8005aec <HAL_GetTick>
 800a672:	0002      	movs	r2, r0
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	1ad3      	subs	r3, r2, r3
 800a678:	4a27      	ldr	r2, [pc, #156]	@ (800a718 <HAL_RCC_ClockConfig+0x1a4>)
 800a67a:	4293      	cmp	r3, r2
 800a67c:	d901      	bls.n	800a682 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a67e:	2303      	movs	r3, #3
 800a680:	e042      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a682:	4b24      	ldr	r3, [pc, #144]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	220c      	movs	r2, #12
 800a688:	401a      	ands	r2, r3
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	429a      	cmp	r2, r3
 800a692:	d1ec      	bne.n	800a66e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a694:	4b1e      	ldr	r3, [pc, #120]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2201      	movs	r2, #1
 800a69a:	4013      	ands	r3, r2
 800a69c:	683a      	ldr	r2, [r7, #0]
 800a69e:	429a      	cmp	r2, r3
 800a6a0:	d211      	bcs.n	800a6c6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a6a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a6a4:	681b      	ldr	r3, [r3, #0]
 800a6a6:	2201      	movs	r2, #1
 800a6a8:	4393      	bics	r3, r2
 800a6aa:	0019      	movs	r1, r3
 800a6ac:	4b18      	ldr	r3, [pc, #96]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a6ae:	683a      	ldr	r2, [r7, #0]
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a6b4:	4b16      	ldr	r3, [pc, #88]	@ (800a710 <HAL_RCC_ClockConfig+0x19c>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	4013      	ands	r3, r2
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	429a      	cmp	r2, r3
 800a6c0:	d001      	beq.n	800a6c6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 800a6c2:	2301      	movs	r3, #1
 800a6c4:	e020      	b.n	800a708 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	4013      	ands	r3, r2
 800a6ce:	d009      	beq.n	800a6e4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800a6d0:	4b10      	ldr	r3, [pc, #64]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a6d2:	685b      	ldr	r3, [r3, #4]
 800a6d4:	4a11      	ldr	r2, [pc, #68]	@ (800a71c <HAL_RCC_ClockConfig+0x1a8>)
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	0019      	movs	r1, r3
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	68da      	ldr	r2, [r3, #12]
 800a6de:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800a6e4:	f000 f820 	bl	800a728 <HAL_RCC_GetSysClockFreq>
 800a6e8:	0001      	movs	r1, r0
 800a6ea:	4b0a      	ldr	r3, [pc, #40]	@ (800a714 <HAL_RCC_ClockConfig+0x1a0>)
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	091b      	lsrs	r3, r3, #4
 800a6f0:	220f      	movs	r2, #15
 800a6f2:	4013      	ands	r3, r2
 800a6f4:	4a0a      	ldr	r2, [pc, #40]	@ (800a720 <HAL_RCC_ClockConfig+0x1ac>)
 800a6f6:	5cd3      	ldrb	r3, [r2, r3]
 800a6f8:	000a      	movs	r2, r1
 800a6fa:	40da      	lsrs	r2, r3
 800a6fc:	4b09      	ldr	r3, [pc, #36]	@ (800a724 <HAL_RCC_ClockConfig+0x1b0>)
 800a6fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800a700:	2003      	movs	r0, #3
 800a702:	f7fb f9ad 	bl	8005a60 <HAL_InitTick>
  
  return HAL_OK;
 800a706:	2300      	movs	r3, #0
}
 800a708:	0018      	movs	r0, r3
 800a70a:	46bd      	mov	sp, r7
 800a70c:	b004      	add	sp, #16
 800a70e:	bd80      	pop	{r7, pc}
 800a710:	40022000 	.word	0x40022000
 800a714:	40021000 	.word	0x40021000
 800a718:	00001388 	.word	0x00001388
 800a71c:	fffff8ff 	.word	0xfffff8ff
 800a720:	08010ccc 	.word	0x08010ccc
 800a724:	20000014 	.word	0x20000014

0800a728 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a72e:	2300      	movs	r3, #0
 800a730:	60fb      	str	r3, [r7, #12]
 800a732:	2300      	movs	r3, #0
 800a734:	60bb      	str	r3, [r7, #8]
 800a736:	2300      	movs	r3, #0
 800a738:	617b      	str	r3, [r7, #20]
 800a73a:	2300      	movs	r3, #0
 800a73c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a73e:	2300      	movs	r3, #0
 800a740:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800a742:	4b2d      	ldr	r3, [pc, #180]	@ (800a7f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	220c      	movs	r2, #12
 800a74c:	4013      	ands	r3, r2
 800a74e:	2b0c      	cmp	r3, #12
 800a750:	d046      	beq.n	800a7e0 <HAL_RCC_GetSysClockFreq+0xb8>
 800a752:	d848      	bhi.n	800a7e6 <HAL_RCC_GetSysClockFreq+0xbe>
 800a754:	2b04      	cmp	r3, #4
 800a756:	d002      	beq.n	800a75e <HAL_RCC_GetSysClockFreq+0x36>
 800a758:	2b08      	cmp	r3, #8
 800a75a:	d003      	beq.n	800a764 <HAL_RCC_GetSysClockFreq+0x3c>
 800a75c:	e043      	b.n	800a7e6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a75e:	4b27      	ldr	r3, [pc, #156]	@ (800a7fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800a760:	613b      	str	r3, [r7, #16]
      break;
 800a762:	e043      	b.n	800a7ec <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	0c9b      	lsrs	r3, r3, #18
 800a768:	220f      	movs	r2, #15
 800a76a:	4013      	ands	r3, r2
 800a76c:	4a24      	ldr	r2, [pc, #144]	@ (800a800 <HAL_RCC_GetSysClockFreq+0xd8>)
 800a76e:	5cd3      	ldrb	r3, [r2, r3]
 800a770:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 800a772:	4b21      	ldr	r3, [pc, #132]	@ (800a7f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 800a774:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a776:	220f      	movs	r2, #15
 800a778:	4013      	ands	r3, r2
 800a77a:	4a22      	ldr	r2, [pc, #136]	@ (800a804 <HAL_RCC_GetSysClockFreq+0xdc>)
 800a77c:	5cd3      	ldrb	r3, [r2, r3]
 800a77e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800a780:	68fa      	ldr	r2, [r7, #12]
 800a782:	23c0      	movs	r3, #192	@ 0xc0
 800a784:	025b      	lsls	r3, r3, #9
 800a786:	401a      	ands	r2, r3
 800a788:	2380      	movs	r3, #128	@ 0x80
 800a78a:	025b      	lsls	r3, r3, #9
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d109      	bne.n	800a7a4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a790:	68b9      	ldr	r1, [r7, #8]
 800a792:	481a      	ldr	r0, [pc, #104]	@ (800a7fc <HAL_RCC_GetSysClockFreq+0xd4>)
 800a794:	f7f5 fcb8 	bl	8000108 <__udivsi3>
 800a798:	0003      	movs	r3, r0
 800a79a:	001a      	movs	r2, r3
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	4353      	muls	r3, r2
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	e01a      	b.n	800a7da <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	23c0      	movs	r3, #192	@ 0xc0
 800a7a8:	025b      	lsls	r3, r3, #9
 800a7aa:	401a      	ands	r2, r3
 800a7ac:	23c0      	movs	r3, #192	@ 0xc0
 800a7ae:	025b      	lsls	r3, r3, #9
 800a7b0:	429a      	cmp	r2, r3
 800a7b2:	d109      	bne.n	800a7c8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a7b4:	68b9      	ldr	r1, [r7, #8]
 800a7b6:	4814      	ldr	r0, [pc, #80]	@ (800a808 <HAL_RCC_GetSysClockFreq+0xe0>)
 800a7b8:	f7f5 fca6 	bl	8000108 <__udivsi3>
 800a7bc:	0003      	movs	r3, r0
 800a7be:	001a      	movs	r2, r3
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4353      	muls	r3, r2
 800a7c4:	617b      	str	r3, [r7, #20]
 800a7c6:	e008      	b.n	800a7da <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800a7c8:	68b9      	ldr	r1, [r7, #8]
 800a7ca:	4810      	ldr	r0, [pc, #64]	@ (800a80c <HAL_RCC_GetSysClockFreq+0xe4>)
 800a7cc:	f7f5 fc9c 	bl	8000108 <__udivsi3>
 800a7d0:	0003      	movs	r3, r0
 800a7d2:	001a      	movs	r2, r3
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4353      	muls	r3, r2
 800a7d8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	613b      	str	r3, [r7, #16]
      break;
 800a7de:	e005      	b.n	800a7ec <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 800a7e0:	4b09      	ldr	r3, [pc, #36]	@ (800a808 <HAL_RCC_GetSysClockFreq+0xe0>)
 800a7e2:	613b      	str	r3, [r7, #16]
      break;
 800a7e4:	e002      	b.n	800a7ec <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a7e6:	4b09      	ldr	r3, [pc, #36]	@ (800a80c <HAL_RCC_GetSysClockFreq+0xe4>)
 800a7e8:	613b      	str	r3, [r7, #16]
      break;
 800a7ea:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a7ec:	693b      	ldr	r3, [r7, #16]
}
 800a7ee:	0018      	movs	r0, r3
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	b006      	add	sp, #24
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	46c0      	nop			@ (mov r8, r8)
 800a7f8:	40021000 	.word	0x40021000
 800a7fc:	00f42400 	.word	0x00f42400
 800a800:	08010cdc 	.word	0x08010cdc
 800a804:	08010cec 	.word	0x08010cec
 800a808:	02dc6c00 	.word	0x02dc6c00
 800a80c:	007a1200 	.word	0x007a1200

0800a810 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b086      	sub	sp, #24
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a818:	2300      	movs	r3, #0
 800a81a:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681a      	ldr	r2, [r3, #0]
 800a824:	2380      	movs	r3, #128	@ 0x80
 800a826:	025b      	lsls	r3, r3, #9
 800a828:	4013      	ands	r3, r2
 800a82a:	d100      	bne.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x1e>
 800a82c:	e08e      	b.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800a82e:	2017      	movs	r0, #23
 800a830:	183b      	adds	r3, r7, r0
 800a832:	2200      	movs	r2, #0
 800a834:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a836:	4b6e      	ldr	r3, [pc, #440]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a838:	69da      	ldr	r2, [r3, #28]
 800a83a:	2380      	movs	r3, #128	@ 0x80
 800a83c:	055b      	lsls	r3, r3, #21
 800a83e:	4013      	ands	r3, r2
 800a840:	d110      	bne.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a842:	4b6b      	ldr	r3, [pc, #428]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a844:	69da      	ldr	r2, [r3, #28]
 800a846:	4b6a      	ldr	r3, [pc, #424]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a848:	2180      	movs	r1, #128	@ 0x80
 800a84a:	0549      	lsls	r1, r1, #21
 800a84c:	430a      	orrs	r2, r1
 800a84e:	61da      	str	r2, [r3, #28]
 800a850:	4b67      	ldr	r3, [pc, #412]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a852:	69da      	ldr	r2, [r3, #28]
 800a854:	2380      	movs	r3, #128	@ 0x80
 800a856:	055b      	lsls	r3, r3, #21
 800a858:	4013      	ands	r3, r2
 800a85a:	60bb      	str	r3, [r7, #8]
 800a85c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a85e:	183b      	adds	r3, r7, r0
 800a860:	2201      	movs	r2, #1
 800a862:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a864:	4b63      	ldr	r3, [pc, #396]	@ (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	2380      	movs	r3, #128	@ 0x80
 800a86a:	005b      	lsls	r3, r3, #1
 800a86c:	4013      	ands	r3, r2
 800a86e:	d11a      	bne.n	800a8a6 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a870:	4b60      	ldr	r3, [pc, #384]	@ (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	4b5f      	ldr	r3, [pc, #380]	@ (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a876:	2180      	movs	r1, #128	@ 0x80
 800a878:	0049      	lsls	r1, r1, #1
 800a87a:	430a      	orrs	r2, r1
 800a87c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a87e:	f7fb f935 	bl	8005aec <HAL_GetTick>
 800a882:	0003      	movs	r3, r0
 800a884:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a886:	e008      	b.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a888:	f7fb f930 	bl	8005aec <HAL_GetTick>
 800a88c:	0002      	movs	r2, r0
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	2b64      	cmp	r3, #100	@ 0x64
 800a894:	d901      	bls.n	800a89a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800a896:	2303      	movs	r3, #3
 800a898:	e0a6      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a89a:	4b56      	ldr	r3, [pc, #344]	@ (800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 800a89c:	681a      	ldr	r2, [r3, #0]
 800a89e:	2380      	movs	r3, #128	@ 0x80
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	4013      	ands	r3, r2
 800a8a4:	d0f0      	beq.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800a8a6:	4b52      	ldr	r3, [pc, #328]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8a8:	6a1a      	ldr	r2, [r3, #32]
 800a8aa:	23c0      	movs	r3, #192	@ 0xc0
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4013      	ands	r3, r2
 800a8b0:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d034      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	685a      	ldr	r2, [r3, #4]
 800a8bc:	23c0      	movs	r3, #192	@ 0xc0
 800a8be:	009b      	lsls	r3, r3, #2
 800a8c0:	4013      	ands	r3, r2
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	429a      	cmp	r2, r3
 800a8c6:	d02c      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a8c8:	4b49      	ldr	r3, [pc, #292]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8ca:	6a1b      	ldr	r3, [r3, #32]
 800a8cc:	4a4a      	ldr	r2, [pc, #296]	@ (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a8d2:	4b47      	ldr	r3, [pc, #284]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8d4:	6a1a      	ldr	r2, [r3, #32]
 800a8d6:	4b46      	ldr	r3, [pc, #280]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8d8:	2180      	movs	r1, #128	@ 0x80
 800a8da:	0249      	lsls	r1, r1, #9
 800a8dc:	430a      	orrs	r2, r1
 800a8de:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a8e0:	4b43      	ldr	r3, [pc, #268]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8e2:	6a1a      	ldr	r2, [r3, #32]
 800a8e4:	4b42      	ldr	r3, [pc, #264]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8e6:	4945      	ldr	r1, [pc, #276]	@ (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 800a8e8:	400a      	ands	r2, r1
 800a8ea:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800a8ec:	4b40      	ldr	r3, [pc, #256]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a8ee:	68fa      	ldr	r2, [r7, #12]
 800a8f0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	2201      	movs	r2, #1
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	d013      	beq.n	800a922 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8fa:	f7fb f8f7 	bl	8005aec <HAL_GetTick>
 800a8fe:	0003      	movs	r3, r0
 800a900:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a902:	e009      	b.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a904:	f7fb f8f2 	bl	8005aec <HAL_GetTick>
 800a908:	0002      	movs	r2, r0
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	1ad3      	subs	r3, r2, r3
 800a90e:	4a3c      	ldr	r2, [pc, #240]	@ (800aa00 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 800a910:	4293      	cmp	r3, r2
 800a912:	d901      	bls.n	800a918 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 800a914:	2303      	movs	r3, #3
 800a916:	e067      	b.n	800a9e8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a918:	4b35      	ldr	r3, [pc, #212]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a91a:	6a1b      	ldr	r3, [r3, #32]
 800a91c:	2202      	movs	r2, #2
 800a91e:	4013      	ands	r3, r2
 800a920:	d0f0      	beq.n	800a904 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a922:	4b33      	ldr	r3, [pc, #204]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	4a34      	ldr	r2, [pc, #208]	@ (800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 800a928:	4013      	ands	r3, r2
 800a92a:	0019      	movs	r1, r3
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	685a      	ldr	r2, [r3, #4]
 800a930:	4b2f      	ldr	r3, [pc, #188]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a932:	430a      	orrs	r2, r1
 800a934:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a936:	2317      	movs	r3, #23
 800a938:	18fb      	adds	r3, r7, r3
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	2b01      	cmp	r3, #1
 800a93e:	d105      	bne.n	800a94c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a940:	4b2b      	ldr	r3, [pc, #172]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a942:	69da      	ldr	r2, [r3, #28]
 800a944:	4b2a      	ldr	r3, [pc, #168]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a946:	492f      	ldr	r1, [pc, #188]	@ (800aa04 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 800a948:	400a      	ands	r2, r1
 800a94a:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2201      	movs	r2, #1
 800a952:	4013      	ands	r3, r2
 800a954:	d009      	beq.n	800a96a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a956:	4b26      	ldr	r3, [pc, #152]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a95a:	2203      	movs	r2, #3
 800a95c:	4393      	bics	r3, r2
 800a95e:	0019      	movs	r1, r3
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	4b22      	ldr	r3, [pc, #136]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a966:	430a      	orrs	r2, r1
 800a968:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2202      	movs	r2, #2
 800a970:	4013      	ands	r3, r2
 800a972:	d009      	beq.n	800a988 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a974:	4b1e      	ldr	r3, [pc, #120]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a978:	4a23      	ldr	r2, [pc, #140]	@ (800aa08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800a97a:	4013      	ands	r3, r2
 800a97c:	0019      	movs	r1, r3
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	68da      	ldr	r2, [r3, #12]
 800a982:	4b1b      	ldr	r3, [pc, #108]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a984:	430a      	orrs	r2, r1
 800a986:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	2220      	movs	r2, #32
 800a98e:	4013      	ands	r3, r2
 800a990:	d009      	beq.n	800a9a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a992:	4b17      	ldr	r3, [pc, #92]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a996:	2210      	movs	r2, #16
 800a998:	4393      	bics	r3, r2
 800a99a:	0019      	movs	r1, r3
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	691a      	ldr	r2, [r3, #16]
 800a9a0:	4b13      	ldr	r3, [pc, #76]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9a2:	430a      	orrs	r2, r1
 800a9a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681a      	ldr	r2, [r3, #0]
 800a9aa:	2380      	movs	r3, #128	@ 0x80
 800a9ac:	029b      	lsls	r3, r3, #10
 800a9ae:	4013      	ands	r3, r2
 800a9b0:	d009      	beq.n	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a9b2:	4b0f      	ldr	r3, [pc, #60]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9b6:	2280      	movs	r2, #128	@ 0x80
 800a9b8:	4393      	bics	r3, r2
 800a9ba:	0019      	movs	r1, r3
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	699a      	ldr	r2, [r3, #24]
 800a9c0:	4b0b      	ldr	r3, [pc, #44]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	2380      	movs	r3, #128	@ 0x80
 800a9cc:	00db      	lsls	r3, r3, #3
 800a9ce:	4013      	ands	r3, r2
 800a9d0:	d009      	beq.n	800a9e6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800a9d2:	4b07      	ldr	r3, [pc, #28]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a9d6:	2240      	movs	r2, #64	@ 0x40
 800a9d8:	4393      	bics	r3, r2
 800a9da:	0019      	movs	r1, r3
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	695a      	ldr	r2, [r3, #20]
 800a9e0:	4b03      	ldr	r3, [pc, #12]	@ (800a9f0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800a9e2:	430a      	orrs	r2, r1
 800a9e4:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800a9e6:	2300      	movs	r3, #0
}
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	46bd      	mov	sp, r7
 800a9ec:	b006      	add	sp, #24
 800a9ee:	bd80      	pop	{r7, pc}
 800a9f0:	40021000 	.word	0x40021000
 800a9f4:	40007000 	.word	0x40007000
 800a9f8:	fffffcff 	.word	0xfffffcff
 800a9fc:	fffeffff 	.word	0xfffeffff
 800aa00:	00001388 	.word	0x00001388
 800aa04:	efffffff 	.word	0xefffffff
 800aa08:	fffcffff 	.word	0xfffcffff

0800aa0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800aa0c:	b580      	push	{r7, lr}
 800aa0e:	b082      	sub	sp, #8
 800aa10:	af00      	add	r7, sp, #0
 800aa12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e042      	b.n	800aaa4 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	223d      	movs	r2, #61	@ 0x3d
 800aa22:	5c9b      	ldrb	r3, [r3, r2]
 800aa24:	b2db      	uxtb	r3, r3
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d107      	bne.n	800aa3a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	223c      	movs	r2, #60	@ 0x3c
 800aa2e:	2100      	movs	r1, #0
 800aa30:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	0018      	movs	r0, r3
 800aa36:	f7fa fdf3 	bl	8005620 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	223d      	movs	r2, #61	@ 0x3d
 800aa3e:	2102      	movs	r1, #2
 800aa40:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681a      	ldr	r2, [r3, #0]
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3304      	adds	r3, #4
 800aa4a:	0019      	movs	r1, r3
 800aa4c:	0010      	movs	r0, r2
 800aa4e:	f000 fc91 	bl	800b374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	2246      	movs	r2, #70	@ 0x46
 800aa56:	2101      	movs	r1, #1
 800aa58:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	223e      	movs	r2, #62	@ 0x3e
 800aa5e:	2101      	movs	r1, #1
 800aa60:	5499      	strb	r1, [r3, r2]
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	223f      	movs	r2, #63	@ 0x3f
 800aa66:	2101      	movs	r1, #1
 800aa68:	5499      	strb	r1, [r3, r2]
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2240      	movs	r2, #64	@ 0x40
 800aa6e:	2101      	movs	r1, #1
 800aa70:	5499      	strb	r1, [r3, r2]
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2241      	movs	r2, #65	@ 0x41
 800aa76:	2101      	movs	r1, #1
 800aa78:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	2242      	movs	r2, #66	@ 0x42
 800aa7e:	2101      	movs	r1, #1
 800aa80:	5499      	strb	r1, [r3, r2]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	2243      	movs	r2, #67	@ 0x43
 800aa86:	2101      	movs	r1, #1
 800aa88:	5499      	strb	r1, [r3, r2]
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	2244      	movs	r2, #68	@ 0x44
 800aa8e:	2101      	movs	r1, #1
 800aa90:	5499      	strb	r1, [r3, r2]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	2245      	movs	r2, #69	@ 0x45
 800aa96:	2101      	movs	r1, #1
 800aa98:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	223d      	movs	r2, #61	@ 0x3d
 800aa9e:	2101      	movs	r1, #1
 800aaa0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aaa2:	2300      	movs	r3, #0
}
 800aaa4:	0018      	movs	r0, r3
 800aaa6:	46bd      	mov	sp, r7
 800aaa8:	b002      	add	sp, #8
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	223d      	movs	r2, #61	@ 0x3d
 800aab8:	5c9b      	ldrb	r3, [r3, r2]
 800aaba:	b2db      	uxtb	r3, r3
 800aabc:	2b01      	cmp	r3, #1
 800aabe:	d001      	beq.n	800aac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e03b      	b.n	800ab3c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	223d      	movs	r2, #61	@ 0x3d
 800aac8:	2102      	movs	r1, #2
 800aaca:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	68da      	ldr	r2, [r3, #12]
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	2101      	movs	r1, #1
 800aad8:	430a      	orrs	r2, r1
 800aada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	4a18      	ldr	r2, [pc, #96]	@ (800ab44 <HAL_TIM_Base_Start_IT+0x98>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d00f      	beq.n	800ab06 <HAL_TIM_Base_Start_IT+0x5a>
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681a      	ldr	r2, [r3, #0]
 800aaea:	2380      	movs	r3, #128	@ 0x80
 800aaec:	05db      	lsls	r3, r3, #23
 800aaee:	429a      	cmp	r2, r3
 800aaf0:	d009      	beq.n	800ab06 <HAL_TIM_Base_Start_IT+0x5a>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a14      	ldr	r2, [pc, #80]	@ (800ab48 <HAL_TIM_Base_Start_IT+0x9c>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d004      	beq.n	800ab06 <HAL_TIM_Base_Start_IT+0x5a>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a12      	ldr	r2, [pc, #72]	@ (800ab4c <HAL_TIM_Base_Start_IT+0xa0>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d111      	bne.n	800ab2a <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	689b      	ldr	r3, [r3, #8]
 800ab0c:	2207      	movs	r2, #7
 800ab0e:	4013      	ands	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2b06      	cmp	r3, #6
 800ab16:	d010      	beq.n	800ab3a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	681a      	ldr	r2, [r3, #0]
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2101      	movs	r1, #1
 800ab24:	430a      	orrs	r2, r1
 800ab26:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ab28:	e007      	b.n	800ab3a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	2101      	movs	r1, #1
 800ab36:	430a      	orrs	r2, r1
 800ab38:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ab3a:	2300      	movs	r3, #0
}
 800ab3c:	0018      	movs	r0, r3
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	b004      	add	sp, #16
 800ab42:	bd80      	pop	{r7, pc}
 800ab44:	40012c00 	.word	0x40012c00
 800ab48:	40000400 	.word	0x40000400
 800ab4c:	40014000 	.word	0x40014000

0800ab50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b082      	sub	sp, #8
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d101      	bne.n	800ab62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e042      	b.n	800abe8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	223d      	movs	r2, #61	@ 0x3d
 800ab66:	5c9b      	ldrb	r3, [r3, r2]
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d107      	bne.n	800ab7e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	223c      	movs	r2, #60	@ 0x3c
 800ab72:	2100      	movs	r1, #0
 800ab74:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	0018      	movs	r0, r3
 800ab7a:	f000 f839 	bl	800abf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	223d      	movs	r2, #61	@ 0x3d
 800ab82:	2102      	movs	r1, #2
 800ab84:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681a      	ldr	r2, [r3, #0]
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	0019      	movs	r1, r3
 800ab90:	0010      	movs	r0, r2
 800ab92:	f000 fbef 	bl	800b374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	2246      	movs	r2, #70	@ 0x46
 800ab9a:	2101      	movs	r1, #1
 800ab9c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	223e      	movs	r2, #62	@ 0x3e
 800aba2:	2101      	movs	r1, #1
 800aba4:	5499      	strb	r1, [r3, r2]
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	223f      	movs	r2, #63	@ 0x3f
 800abaa:	2101      	movs	r1, #1
 800abac:	5499      	strb	r1, [r3, r2]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	2240      	movs	r2, #64	@ 0x40
 800abb2:	2101      	movs	r1, #1
 800abb4:	5499      	strb	r1, [r3, r2]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	2241      	movs	r2, #65	@ 0x41
 800abba:	2101      	movs	r1, #1
 800abbc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2242      	movs	r2, #66	@ 0x42
 800abc2:	2101      	movs	r1, #1
 800abc4:	5499      	strb	r1, [r3, r2]
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2243      	movs	r2, #67	@ 0x43
 800abca:	2101      	movs	r1, #1
 800abcc:	5499      	strb	r1, [r3, r2]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2244      	movs	r2, #68	@ 0x44
 800abd2:	2101      	movs	r1, #1
 800abd4:	5499      	strb	r1, [r3, r2]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2245      	movs	r2, #69	@ 0x45
 800abda:	2101      	movs	r1, #1
 800abdc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	223d      	movs	r2, #61	@ 0x3d
 800abe2:	2101      	movs	r1, #1
 800abe4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800abe6:	2300      	movs	r3, #0
}
 800abe8:	0018      	movs	r0, r3
 800abea:	46bd      	mov	sp, r7
 800abec:	b002      	add	sp, #8
 800abee:	bd80      	pop	{r7, pc}

0800abf0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800abf8:	46c0      	nop			@ (mov r8, r8)
 800abfa:	46bd      	mov	sp, r7
 800abfc:	b002      	add	sp, #8
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800ac0a:	683b      	ldr	r3, [r7, #0]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d108      	bne.n	800ac22 <HAL_TIM_PWM_Start+0x22>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	223e      	movs	r2, #62	@ 0x3e
 800ac14:	5c9b      	ldrb	r3, [r3, r2]
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	3b01      	subs	r3, #1
 800ac1a:	1e5a      	subs	r2, r3, #1
 800ac1c:	4193      	sbcs	r3, r2
 800ac1e:	b2db      	uxtb	r3, r3
 800ac20:	e01f      	b.n	800ac62 <HAL_TIM_PWM_Start+0x62>
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	2b04      	cmp	r3, #4
 800ac26:	d108      	bne.n	800ac3a <HAL_TIM_PWM_Start+0x3a>
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	223f      	movs	r2, #63	@ 0x3f
 800ac2c:	5c9b      	ldrb	r3, [r3, r2]
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	3b01      	subs	r3, #1
 800ac32:	1e5a      	subs	r2, r3, #1
 800ac34:	4193      	sbcs	r3, r2
 800ac36:	b2db      	uxtb	r3, r3
 800ac38:	e013      	b.n	800ac62 <HAL_TIM_PWM_Start+0x62>
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2b08      	cmp	r3, #8
 800ac3e:	d108      	bne.n	800ac52 <HAL_TIM_PWM_Start+0x52>
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2240      	movs	r2, #64	@ 0x40
 800ac44:	5c9b      	ldrb	r3, [r3, r2]
 800ac46:	b2db      	uxtb	r3, r3
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	1e5a      	subs	r2, r3, #1
 800ac4c:	4193      	sbcs	r3, r2
 800ac4e:	b2db      	uxtb	r3, r3
 800ac50:	e007      	b.n	800ac62 <HAL_TIM_PWM_Start+0x62>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2241      	movs	r2, #65	@ 0x41
 800ac56:	5c9b      	ldrb	r3, [r3, r2]
 800ac58:	b2db      	uxtb	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	1e5a      	subs	r2, r3, #1
 800ac5e:	4193      	sbcs	r3, r2
 800ac60:	b2db      	uxtb	r3, r3
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800ac66:	2301      	movs	r3, #1
 800ac68:	e074      	b.n	800ad54 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <HAL_TIM_PWM_Start+0x7a>
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	223e      	movs	r2, #62	@ 0x3e
 800ac74:	2102      	movs	r1, #2
 800ac76:	5499      	strb	r1, [r3, r2]
 800ac78:	e013      	b.n	800aca2 <HAL_TIM_PWM_Start+0xa2>
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	2b04      	cmp	r3, #4
 800ac7e:	d104      	bne.n	800ac8a <HAL_TIM_PWM_Start+0x8a>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	223f      	movs	r2, #63	@ 0x3f
 800ac84:	2102      	movs	r1, #2
 800ac86:	5499      	strb	r1, [r3, r2]
 800ac88:	e00b      	b.n	800aca2 <HAL_TIM_PWM_Start+0xa2>
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	2b08      	cmp	r3, #8
 800ac8e:	d104      	bne.n	800ac9a <HAL_TIM_PWM_Start+0x9a>
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	2240      	movs	r2, #64	@ 0x40
 800ac94:	2102      	movs	r1, #2
 800ac96:	5499      	strb	r1, [r3, r2]
 800ac98:	e003      	b.n	800aca2 <HAL_TIM_PWM_Start+0xa2>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2241      	movs	r2, #65	@ 0x41
 800ac9e:	2102      	movs	r1, #2
 800aca0:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	6839      	ldr	r1, [r7, #0]
 800aca8:	2201      	movs	r2, #1
 800acaa:	0018      	movs	r0, r3
 800acac:	f000 fe86 	bl	800b9bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	4a29      	ldr	r2, [pc, #164]	@ (800ad5c <HAL_TIM_PWM_Start+0x15c>)
 800acb6:	4293      	cmp	r3, r2
 800acb8:	d00e      	beq.n	800acd8 <HAL_TIM_PWM_Start+0xd8>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a28      	ldr	r2, [pc, #160]	@ (800ad60 <HAL_TIM_PWM_Start+0x160>)
 800acc0:	4293      	cmp	r3, r2
 800acc2:	d009      	beq.n	800acd8 <HAL_TIM_PWM_Start+0xd8>
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	4a26      	ldr	r2, [pc, #152]	@ (800ad64 <HAL_TIM_PWM_Start+0x164>)
 800acca:	4293      	cmp	r3, r2
 800accc:	d004      	beq.n	800acd8 <HAL_TIM_PWM_Start+0xd8>
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4a25      	ldr	r2, [pc, #148]	@ (800ad68 <HAL_TIM_PWM_Start+0x168>)
 800acd4:	4293      	cmp	r3, r2
 800acd6:	d101      	bne.n	800acdc <HAL_TIM_PWM_Start+0xdc>
 800acd8:	2301      	movs	r3, #1
 800acda:	e000      	b.n	800acde <HAL_TIM_PWM_Start+0xde>
 800acdc:	2300      	movs	r3, #0
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d008      	beq.n	800acf4 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	2180      	movs	r1, #128	@ 0x80
 800acee:	0209      	lsls	r1, r1, #8
 800acf0:	430a      	orrs	r2, r1
 800acf2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4a18      	ldr	r2, [pc, #96]	@ (800ad5c <HAL_TIM_PWM_Start+0x15c>)
 800acfa:	4293      	cmp	r3, r2
 800acfc:	d00f      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x11e>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	2380      	movs	r3, #128	@ 0x80
 800ad04:	05db      	lsls	r3, r3, #23
 800ad06:	429a      	cmp	r2, r3
 800ad08:	d009      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x11e>
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	4a17      	ldr	r2, [pc, #92]	@ (800ad6c <HAL_TIM_PWM_Start+0x16c>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d004      	beq.n	800ad1e <HAL_TIM_PWM_Start+0x11e>
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	4a11      	ldr	r2, [pc, #68]	@ (800ad60 <HAL_TIM_PWM_Start+0x160>)
 800ad1a:	4293      	cmp	r3, r2
 800ad1c:	d111      	bne.n	800ad42 <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	689b      	ldr	r3, [r3, #8]
 800ad24:	2207      	movs	r2, #7
 800ad26:	4013      	ands	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2b06      	cmp	r3, #6
 800ad2e:	d010      	beq.n	800ad52 <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	2101      	movs	r1, #1
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ad40:	e007      	b.n	800ad52 <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	681a      	ldr	r2, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	430a      	orrs	r2, r1
 800ad50:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ad52:	2300      	movs	r3, #0
}
 800ad54:	0018      	movs	r0, r3
 800ad56:	46bd      	mov	sp, r7
 800ad58:	b004      	add	sp, #16
 800ad5a:	bd80      	pop	{r7, pc}
 800ad5c:	40012c00 	.word	0x40012c00
 800ad60:	40014000 	.word	0x40014000
 800ad64:	40014400 	.word	0x40014400
 800ad68:	40014800 	.word	0x40014800
 800ad6c:	40000400 	.word	0x40000400

0800ad70 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b082      	sub	sp, #8
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d101      	bne.n	800ad84 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800ad80:	2301      	movs	r3, #1
 800ad82:	e042      	b.n	800ae0a <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	223d      	movs	r2, #61	@ 0x3d
 800ad88:	5c9b      	ldrb	r3, [r3, r2]
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d107      	bne.n	800ada0 <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	223c      	movs	r2, #60	@ 0x3c
 800ad94:	2100      	movs	r1, #0
 800ad96:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	0018      	movs	r0, r3
 800ad9c:	f000 f839 	bl	800ae12 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	223d      	movs	r2, #61	@ 0x3d
 800ada4:	2102      	movs	r1, #2
 800ada6:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	3304      	adds	r3, #4
 800adb0:	0019      	movs	r1, r3
 800adb2:	0010      	movs	r0, r2
 800adb4:	f000 fade 	bl	800b374 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	681a      	ldr	r2, [r3, #0]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2108      	movs	r1, #8
 800adc4:	438a      	bics	r2, r1
 800adc6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	6819      	ldr	r1, [r3, #0]
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	430a      	orrs	r2, r1
 800add6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2246      	movs	r2, #70	@ 0x46
 800addc:	2101      	movs	r1, #1
 800adde:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	223e      	movs	r2, #62	@ 0x3e
 800ade4:	2101      	movs	r1, #1
 800ade6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	223f      	movs	r2, #63	@ 0x3f
 800adec:	2101      	movs	r1, #1
 800adee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2242      	movs	r2, #66	@ 0x42
 800adf4:	2101      	movs	r1, #1
 800adf6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2243      	movs	r2, #67	@ 0x43
 800adfc:	2101      	movs	r1, #1
 800adfe:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	223d      	movs	r2, #61	@ 0x3d
 800ae04:	2101      	movs	r1, #1
 800ae06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ae08:	2300      	movs	r3, #0
}
 800ae0a:	0018      	movs	r0, r3
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	b002      	add	sp, #8
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b082      	sub	sp, #8
 800ae16:	af00      	add	r7, sp, #0
 800ae18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800ae1a:	46c0      	nop			@ (mov r8, r8)
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	b002      	add	sp, #8
 800ae20:	bd80      	pop	{r7, pc}

0800ae22 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ae22:	b580      	push	{r7, lr}
 800ae24:	b084      	sub	sp, #16
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	68db      	ldr	r3, [r3, #12]
 800ae30:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	691b      	ldr	r3, [r3, #16]
 800ae38:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	2202      	movs	r2, #2
 800ae3e:	4013      	ands	r3, r2
 800ae40:	d021      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	2202      	movs	r2, #2
 800ae46:	4013      	ands	r3, r2
 800ae48:	d01d      	beq.n	800ae86 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2203      	movs	r2, #3
 800ae50:	4252      	negs	r2, r2
 800ae52:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2201      	movs	r2, #1
 800ae58:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	2203      	movs	r2, #3
 800ae62:	4013      	ands	r3, r2
 800ae64:	d004      	beq.n	800ae70 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	0018      	movs	r0, r3
 800ae6a:	f000 fa6b 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800ae6e:	e007      	b.n	800ae80 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	0018      	movs	r0, r3
 800ae74:	f000 fa5e 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	0018      	movs	r0, r3
 800ae7c:	f000 fa6a 	bl	800b354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2200      	movs	r2, #0
 800ae84:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	2204      	movs	r2, #4
 800ae8a:	4013      	ands	r3, r2
 800ae8c:	d022      	beq.n	800aed4 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	2204      	movs	r2, #4
 800ae92:	4013      	ands	r3, r2
 800ae94:	d01e      	beq.n	800aed4 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2205      	movs	r2, #5
 800ae9c:	4252      	negs	r2, r2
 800ae9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2202      	movs	r2, #2
 800aea4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	699a      	ldr	r2, [r3, #24]
 800aeac:	23c0      	movs	r3, #192	@ 0xc0
 800aeae:	009b      	lsls	r3, r3, #2
 800aeb0:	4013      	ands	r3, r2
 800aeb2:	d004      	beq.n	800aebe <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	0018      	movs	r0, r3
 800aeb8:	f000 fa44 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800aebc:	e007      	b.n	800aece <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	0018      	movs	r0, r3
 800aec2:	f000 fa37 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	0018      	movs	r0, r3
 800aeca:	f000 fa43 	bl	800b354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	2200      	movs	r2, #0
 800aed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	2208      	movs	r2, #8
 800aed8:	4013      	ands	r3, r2
 800aeda:	d021      	beq.n	800af20 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	2208      	movs	r2, #8
 800aee0:	4013      	ands	r3, r2
 800aee2:	d01d      	beq.n	800af20 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	2209      	movs	r2, #9
 800aeea:	4252      	negs	r2, r2
 800aeec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2204      	movs	r2, #4
 800aef2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	2203      	movs	r2, #3
 800aefc:	4013      	ands	r3, r2
 800aefe:	d004      	beq.n	800af0a <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	0018      	movs	r0, r3
 800af04:	f000 fa1e 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800af08:	e007      	b.n	800af1a <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	0018      	movs	r0, r3
 800af0e:	f000 fa11 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	0018      	movs	r0, r3
 800af16:	f000 fa1d 	bl	800b354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	2200      	movs	r2, #0
 800af1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	2210      	movs	r2, #16
 800af24:	4013      	ands	r3, r2
 800af26:	d022      	beq.n	800af6e <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2210      	movs	r2, #16
 800af2c:	4013      	ands	r3, r2
 800af2e:	d01e      	beq.n	800af6e <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2211      	movs	r2, #17
 800af36:	4252      	negs	r2, r2
 800af38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	2208      	movs	r2, #8
 800af3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	69da      	ldr	r2, [r3, #28]
 800af46:	23c0      	movs	r3, #192	@ 0xc0
 800af48:	009b      	lsls	r3, r3, #2
 800af4a:	4013      	ands	r3, r2
 800af4c:	d004      	beq.n	800af58 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	0018      	movs	r0, r3
 800af52:	f000 f9f7 	bl	800b344 <HAL_TIM_IC_CaptureCallback>
 800af56:	e007      	b.n	800af68 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	0018      	movs	r0, r3
 800af5c:	f000 f9ea 	bl	800b334 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	0018      	movs	r0, r3
 800af64:	f000 f9f6 	bl	800b354 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800af6e:	68bb      	ldr	r3, [r7, #8]
 800af70:	2201      	movs	r2, #1
 800af72:	4013      	ands	r3, r2
 800af74:	d00c      	beq.n	800af90 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2201      	movs	r2, #1
 800af7a:	4013      	ands	r3, r2
 800af7c:	d008      	beq.n	800af90 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	2202      	movs	r2, #2
 800af84:	4252      	negs	r2, r2
 800af86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	0018      	movs	r0, r3
 800af8c:	f7f9 fe13 	bl	8004bb6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	2280      	movs	r2, #128	@ 0x80
 800af94:	4013      	ands	r3, r2
 800af96:	d00c      	beq.n	800afb2 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2280      	movs	r2, #128	@ 0x80
 800af9c:	4013      	ands	r3, r2
 800af9e:	d008      	beq.n	800afb2 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2281      	movs	r2, #129	@ 0x81
 800afa6:	4252      	negs	r2, r2
 800afa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	0018      	movs	r0, r3
 800afae:	f000 fd8f 	bl	800bad0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	2240      	movs	r2, #64	@ 0x40
 800afb6:	4013      	ands	r3, r2
 800afb8:	d00c      	beq.n	800afd4 <HAL_TIM_IRQHandler+0x1b2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2240      	movs	r2, #64	@ 0x40
 800afbe:	4013      	ands	r3, r2
 800afc0:	d008      	beq.n	800afd4 <HAL_TIM_IRQHandler+0x1b2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	2241      	movs	r2, #65	@ 0x41
 800afc8:	4252      	negs	r2, r2
 800afca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	0018      	movs	r0, r3
 800afd0:	f000 f9c8 	bl	800b364 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	2220      	movs	r2, #32
 800afd8:	4013      	ands	r3, r2
 800afda:	d00c      	beq.n	800aff6 <HAL_TIM_IRQHandler+0x1d4>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2220      	movs	r2, #32
 800afe0:	4013      	ands	r3, r2
 800afe2:	d008      	beq.n	800aff6 <HAL_TIM_IRQHandler+0x1d4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2221      	movs	r2, #33	@ 0x21
 800afea:	4252      	negs	r2, r2
 800afec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	0018      	movs	r0, r3
 800aff2:	f000 fd65 	bl	800bac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aff6:	46c0      	nop			@ (mov r8, r8)
 800aff8:	46bd      	mov	sp, r7
 800affa:	b004      	add	sp, #16
 800affc:	bd80      	pop	{r7, pc}
	...

0800b000 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b086      	sub	sp, #24
 800b004:	af00      	add	r7, sp, #0
 800b006:	60f8      	str	r0, [r7, #12]
 800b008:	60b9      	str	r1, [r7, #8]
 800b00a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b00c:	2317      	movs	r3, #23
 800b00e:	18fb      	adds	r3, r7, r3
 800b010:	2200      	movs	r2, #0
 800b012:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	223c      	movs	r2, #60	@ 0x3c
 800b018:	5c9b      	ldrb	r3, [r3, r2]
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d101      	bne.n	800b022 <HAL_TIM_PWM_ConfigChannel+0x22>
 800b01e:	2302      	movs	r3, #2
 800b020:	e0ad      	b.n	800b17e <HAL_TIM_PWM_ConfigChannel+0x17e>
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	223c      	movs	r2, #60	@ 0x3c
 800b026:	2101      	movs	r1, #1
 800b028:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2b0c      	cmp	r3, #12
 800b02e:	d100      	bne.n	800b032 <HAL_TIM_PWM_ConfigChannel+0x32>
 800b030:	e076      	b.n	800b120 <HAL_TIM_PWM_ConfigChannel+0x120>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2b0c      	cmp	r3, #12
 800b036:	d900      	bls.n	800b03a <HAL_TIM_PWM_ConfigChannel+0x3a>
 800b038:	e095      	b.n	800b166 <HAL_TIM_PWM_ConfigChannel+0x166>
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	2b08      	cmp	r3, #8
 800b03e:	d04e      	beq.n	800b0de <HAL_TIM_PWM_ConfigChannel+0xde>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	2b08      	cmp	r3, #8
 800b044:	d900      	bls.n	800b048 <HAL_TIM_PWM_ConfigChannel+0x48>
 800b046:	e08e      	b.n	800b166 <HAL_TIM_PWM_ConfigChannel+0x166>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d003      	beq.n	800b056 <HAL_TIM_PWM_ConfigChannel+0x56>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	2b04      	cmp	r3, #4
 800b052:	d021      	beq.n	800b098 <HAL_TIM_PWM_ConfigChannel+0x98>
 800b054:	e087      	b.n	800b166 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	68ba      	ldr	r2, [r7, #8]
 800b05c:	0011      	movs	r1, r2
 800b05e:	0018      	movs	r0, r3
 800b060:	f000 fa16 	bl	800b490 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	699a      	ldr	r2, [r3, #24]
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	2108      	movs	r1, #8
 800b070:	430a      	orrs	r2, r1
 800b072:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	699a      	ldr	r2, [r3, #24]
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	2104      	movs	r1, #4
 800b080:	438a      	bics	r2, r1
 800b082:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	6999      	ldr	r1, [r3, #24]
 800b08a:	68bb      	ldr	r3, [r7, #8]
 800b08c:	691a      	ldr	r2, [r3, #16]
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	430a      	orrs	r2, r1
 800b094:	619a      	str	r2, [r3, #24]
      break;
 800b096:	e06b      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	68ba      	ldr	r2, [r7, #8]
 800b09e:	0011      	movs	r1, r2
 800b0a0:	0018      	movs	r0, r3
 800b0a2:	f000 fa7d 	bl	800b5a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	699a      	ldr	r2, [r3, #24]
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	2180      	movs	r1, #128	@ 0x80
 800b0b2:	0109      	lsls	r1, r1, #4
 800b0b4:	430a      	orrs	r2, r1
 800b0b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	699a      	ldr	r2, [r3, #24]
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4931      	ldr	r1, [pc, #196]	@ (800b188 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b0c4:	400a      	ands	r2, r1
 800b0c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	6999      	ldr	r1, [r3, #24]
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	691b      	ldr	r3, [r3, #16]
 800b0d2:	021a      	lsls	r2, r3, #8
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	430a      	orrs	r2, r1
 800b0da:	619a      	str	r2, [r3, #24]
      break;
 800b0dc:	e048      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	68ba      	ldr	r2, [r7, #8]
 800b0e4:	0011      	movs	r1, r2
 800b0e6:	0018      	movs	r0, r3
 800b0e8:	f000 fade 	bl	800b6a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	69da      	ldr	r2, [r3, #28]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	2108      	movs	r1, #8
 800b0f8:	430a      	orrs	r2, r1
 800b0fa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	69da      	ldr	r2, [r3, #28]
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2104      	movs	r1, #4
 800b108:	438a      	bics	r2, r1
 800b10a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	69d9      	ldr	r1, [r3, #28]
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	691a      	ldr	r2, [r3, #16]
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	430a      	orrs	r2, r1
 800b11c:	61da      	str	r2, [r3, #28]
      break;
 800b11e:	e027      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	0011      	movs	r1, r2
 800b128:	0018      	movs	r0, r3
 800b12a:	f000 fb43 	bl	800b7b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	69da      	ldr	r2, [r3, #28]
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2180      	movs	r1, #128	@ 0x80
 800b13a:	0109      	lsls	r1, r1, #4
 800b13c:	430a      	orrs	r2, r1
 800b13e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	490f      	ldr	r1, [pc, #60]	@ (800b188 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800b14c:	400a      	ands	r2, r1
 800b14e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	69d9      	ldr	r1, [r3, #28]
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	691b      	ldr	r3, [r3, #16]
 800b15a:	021a      	lsls	r2, r3, #8
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	430a      	orrs	r2, r1
 800b162:	61da      	str	r2, [r3, #28]
      break;
 800b164:	e004      	b.n	800b170 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800b166:	2317      	movs	r3, #23
 800b168:	18fb      	adds	r3, r7, r3
 800b16a:	2201      	movs	r2, #1
 800b16c:	701a      	strb	r2, [r3, #0]
      break;
 800b16e:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	223c      	movs	r2, #60	@ 0x3c
 800b174:	2100      	movs	r1, #0
 800b176:	5499      	strb	r1, [r3, r2]

  return status;
 800b178:	2317      	movs	r3, #23
 800b17a:	18fb      	adds	r3, r7, r3
 800b17c:	781b      	ldrb	r3, [r3, #0]
}
 800b17e:	0018      	movs	r0, r3
 800b180:	46bd      	mov	sp, r7
 800b182:	b006      	add	sp, #24
 800b184:	bd80      	pop	{r7, pc}
 800b186:	46c0      	nop			@ (mov r8, r8)
 800b188:	fffffbff 	.word	0xfffffbff

0800b18c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b18c:	b580      	push	{r7, lr}
 800b18e:	b084      	sub	sp, #16
 800b190:	af00      	add	r7, sp, #0
 800b192:	6078      	str	r0, [r7, #4]
 800b194:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800b196:	230f      	movs	r3, #15
 800b198:	18fb      	adds	r3, r7, r3
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	223c      	movs	r2, #60	@ 0x3c
 800b1a2:	5c9b      	ldrb	r3, [r3, r2]
 800b1a4:	2b01      	cmp	r3, #1
 800b1a6:	d101      	bne.n	800b1ac <HAL_TIM_ConfigClockSource+0x20>
 800b1a8:	2302      	movs	r3, #2
 800b1aa:	e0bc      	b.n	800b326 <HAL_TIM_ConfigClockSource+0x19a>
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	223c      	movs	r2, #60	@ 0x3c
 800b1b0:	2101      	movs	r1, #1
 800b1b2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	223d      	movs	r2, #61	@ 0x3d
 800b1b8:	2102      	movs	r1, #2
 800b1ba:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	2277      	movs	r2, #119	@ 0x77
 800b1c8:	4393      	bics	r3, r2
 800b1ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b1cc:	68bb      	ldr	r3, [r7, #8]
 800b1ce:	4a58      	ldr	r2, [pc, #352]	@ (800b330 <HAL_TIM_ConfigClockSource+0x1a4>)
 800b1d0:	4013      	ands	r3, r2
 800b1d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	68ba      	ldr	r2, [r7, #8]
 800b1da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	2280      	movs	r2, #128	@ 0x80
 800b1e2:	0192      	lsls	r2, r2, #6
 800b1e4:	4293      	cmp	r3, r2
 800b1e6:	d040      	beq.n	800b26a <HAL_TIM_ConfigClockSource+0xde>
 800b1e8:	2280      	movs	r2, #128	@ 0x80
 800b1ea:	0192      	lsls	r2, r2, #6
 800b1ec:	4293      	cmp	r3, r2
 800b1ee:	d900      	bls.n	800b1f2 <HAL_TIM_ConfigClockSource+0x66>
 800b1f0:	e088      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b1f2:	2280      	movs	r2, #128	@ 0x80
 800b1f4:	0152      	lsls	r2, r2, #5
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d100      	bne.n	800b1fc <HAL_TIM_ConfigClockSource+0x70>
 800b1fa:	e088      	b.n	800b30e <HAL_TIM_ConfigClockSource+0x182>
 800b1fc:	2280      	movs	r2, #128	@ 0x80
 800b1fe:	0152      	lsls	r2, r2, #5
 800b200:	4293      	cmp	r3, r2
 800b202:	d900      	bls.n	800b206 <HAL_TIM_ConfigClockSource+0x7a>
 800b204:	e07e      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b206:	2b70      	cmp	r3, #112	@ 0x70
 800b208:	d018      	beq.n	800b23c <HAL_TIM_ConfigClockSource+0xb0>
 800b20a:	d900      	bls.n	800b20e <HAL_TIM_ConfigClockSource+0x82>
 800b20c:	e07a      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b20e:	2b60      	cmp	r3, #96	@ 0x60
 800b210:	d04f      	beq.n	800b2b2 <HAL_TIM_ConfigClockSource+0x126>
 800b212:	d900      	bls.n	800b216 <HAL_TIM_ConfigClockSource+0x8a>
 800b214:	e076      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b216:	2b50      	cmp	r3, #80	@ 0x50
 800b218:	d03b      	beq.n	800b292 <HAL_TIM_ConfigClockSource+0x106>
 800b21a:	d900      	bls.n	800b21e <HAL_TIM_ConfigClockSource+0x92>
 800b21c:	e072      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b21e:	2b40      	cmp	r3, #64	@ 0x40
 800b220:	d057      	beq.n	800b2d2 <HAL_TIM_ConfigClockSource+0x146>
 800b222:	d900      	bls.n	800b226 <HAL_TIM_ConfigClockSource+0x9a>
 800b224:	e06e      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b226:	2b30      	cmp	r3, #48	@ 0x30
 800b228:	d063      	beq.n	800b2f2 <HAL_TIM_ConfigClockSource+0x166>
 800b22a:	d86b      	bhi.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b22c:	2b20      	cmp	r3, #32
 800b22e:	d060      	beq.n	800b2f2 <HAL_TIM_ConfigClockSource+0x166>
 800b230:	d868      	bhi.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d05d      	beq.n	800b2f2 <HAL_TIM_ConfigClockSource+0x166>
 800b236:	2b10      	cmp	r3, #16
 800b238:	d05b      	beq.n	800b2f2 <HAL_TIM_ConfigClockSource+0x166>
 800b23a:	e063      	b.n	800b304 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b240:	683b      	ldr	r3, [r7, #0]
 800b242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b24c:	f000 fb96 	bl	800b97c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	689b      	ldr	r3, [r3, #8]
 800b256:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	2277      	movs	r2, #119	@ 0x77
 800b25c:	4313      	orrs	r3, r2
 800b25e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	68ba      	ldr	r2, [r7, #8]
 800b266:	609a      	str	r2, [r3, #8]
      break;
 800b268:	e052      	b.n	800b310 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800b26e:	683b      	ldr	r3, [r7, #0]
 800b270:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800b27a:	f000 fb7f 	bl	800b97c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	689a      	ldr	r2, [r3, #8]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	2180      	movs	r1, #128	@ 0x80
 800b28a:	01c9      	lsls	r1, r1, #7
 800b28c:	430a      	orrs	r2, r1
 800b28e:	609a      	str	r2, [r3, #8]
      break;
 800b290:	e03e      	b.n	800b310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b296:	683b      	ldr	r3, [r7, #0]
 800b298:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b29e:	001a      	movs	r2, r3
 800b2a0:	f000 faf2 	bl	800b888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2150      	movs	r1, #80	@ 0x50
 800b2aa:	0018      	movs	r0, r3
 800b2ac:	f000 fb4c 	bl	800b948 <TIM_ITRx_SetConfig>
      break;
 800b2b0:	e02e      	b.n	800b310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2b6:	683b      	ldr	r3, [r7, #0]
 800b2b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2ba:	683b      	ldr	r3, [r7, #0]
 800b2bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b2be:	001a      	movs	r2, r3
 800b2c0:	f000 fb10 	bl	800b8e4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	2160      	movs	r1, #96	@ 0x60
 800b2ca:	0018      	movs	r0, r3
 800b2cc:	f000 fb3c 	bl	800b948 <TIM_ITRx_SetConfig>
      break;
 800b2d0:	e01e      	b.n	800b310 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800b2da:	683b      	ldr	r3, [r7, #0]
 800b2dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b2de:	001a      	movs	r2, r3
 800b2e0:	f000 fad2 	bl	800b888 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	2140      	movs	r1, #64	@ 0x40
 800b2ea:	0018      	movs	r0, r3
 800b2ec:	f000 fb2c 	bl	800b948 <TIM_ITRx_SetConfig>
      break;
 800b2f0:	e00e      	b.n	800b310 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681a      	ldr	r2, [r3, #0]
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	0019      	movs	r1, r3
 800b2fc:	0010      	movs	r0, r2
 800b2fe:	f000 fb23 	bl	800b948 <TIM_ITRx_SetConfig>
      break;
 800b302:	e005      	b.n	800b310 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 800b304:	230f      	movs	r3, #15
 800b306:	18fb      	adds	r3, r7, r3
 800b308:	2201      	movs	r2, #1
 800b30a:	701a      	strb	r2, [r3, #0]
      break;
 800b30c:	e000      	b.n	800b310 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800b30e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	223d      	movs	r2, #61	@ 0x3d
 800b314:	2101      	movs	r1, #1
 800b316:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	223c      	movs	r2, #60	@ 0x3c
 800b31c:	2100      	movs	r1, #0
 800b31e:	5499      	strb	r1, [r3, r2]

  return status;
 800b320:	230f      	movs	r3, #15
 800b322:	18fb      	adds	r3, r7, r3
 800b324:	781b      	ldrb	r3, [r3, #0]
}
 800b326:	0018      	movs	r0, r3
 800b328:	46bd      	mov	sp, r7
 800b32a:	b004      	add	sp, #16
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	46c0      	nop			@ (mov r8, r8)
 800b330:	ffff00ff 	.word	0xffff00ff

0800b334 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b33c:	46c0      	nop			@ (mov r8, r8)
 800b33e:	46bd      	mov	sp, r7
 800b340:	b002      	add	sp, #8
 800b342:	bd80      	pop	{r7, pc}

0800b344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b082      	sub	sp, #8
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b34c:	46c0      	nop			@ (mov r8, r8)
 800b34e:	46bd      	mov	sp, r7
 800b350:	b002      	add	sp, #8
 800b352:	bd80      	pop	{r7, pc}

0800b354 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b082      	sub	sp, #8
 800b358:	af00      	add	r7, sp, #0
 800b35a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b35c:	46c0      	nop			@ (mov r8, r8)
 800b35e:	46bd      	mov	sp, r7
 800b360:	b002      	add	sp, #8
 800b362:	bd80      	pop	{r7, pc}

0800b364 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b364:	b580      	push	{r7, lr}
 800b366:	b082      	sub	sp, #8
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b36c:	46c0      	nop			@ (mov r8, r8)
 800b36e:	46bd      	mov	sp, r7
 800b370:	b002      	add	sp, #8
 800b372:	bd80      	pop	{r7, pc}

0800b374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b084      	sub	sp, #16
 800b378:	af00      	add	r7, sp, #0
 800b37a:	6078      	str	r0, [r7, #4]
 800b37c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a3b      	ldr	r2, [pc, #236]	@ (800b474 <TIM_Base_SetConfig+0x100>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d008      	beq.n	800b39e <TIM_Base_SetConfig+0x2a>
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	2380      	movs	r3, #128	@ 0x80
 800b390:	05db      	lsls	r3, r3, #23
 800b392:	429a      	cmp	r2, r3
 800b394:	d003      	beq.n	800b39e <TIM_Base_SetConfig+0x2a>
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	4a37      	ldr	r2, [pc, #220]	@ (800b478 <TIM_Base_SetConfig+0x104>)
 800b39a:	4293      	cmp	r3, r2
 800b39c:	d108      	bne.n	800b3b0 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2270      	movs	r2, #112	@ 0x70
 800b3a2:	4393      	bics	r3, r2
 800b3a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b3a6:	683b      	ldr	r3, [r7, #0]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	4313      	orrs	r3, r2
 800b3ae:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	4a30      	ldr	r2, [pc, #192]	@ (800b474 <TIM_Base_SetConfig+0x100>)
 800b3b4:	4293      	cmp	r3, r2
 800b3b6:	d018      	beq.n	800b3ea <TIM_Base_SetConfig+0x76>
 800b3b8:	687a      	ldr	r2, [r7, #4]
 800b3ba:	2380      	movs	r3, #128	@ 0x80
 800b3bc:	05db      	lsls	r3, r3, #23
 800b3be:	429a      	cmp	r2, r3
 800b3c0:	d013      	beq.n	800b3ea <TIM_Base_SetConfig+0x76>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	4a2c      	ldr	r2, [pc, #176]	@ (800b478 <TIM_Base_SetConfig+0x104>)
 800b3c6:	4293      	cmp	r3, r2
 800b3c8:	d00f      	beq.n	800b3ea <TIM_Base_SetConfig+0x76>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	4a2b      	ldr	r2, [pc, #172]	@ (800b47c <TIM_Base_SetConfig+0x108>)
 800b3ce:	4293      	cmp	r3, r2
 800b3d0:	d00b      	beq.n	800b3ea <TIM_Base_SetConfig+0x76>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	4a2a      	ldr	r2, [pc, #168]	@ (800b480 <TIM_Base_SetConfig+0x10c>)
 800b3d6:	4293      	cmp	r3, r2
 800b3d8:	d007      	beq.n	800b3ea <TIM_Base_SetConfig+0x76>
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	4a29      	ldr	r2, [pc, #164]	@ (800b484 <TIM_Base_SetConfig+0x110>)
 800b3de:	4293      	cmp	r3, r2
 800b3e0:	d003      	beq.n	800b3ea <TIM_Base_SetConfig+0x76>
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	4a28      	ldr	r2, [pc, #160]	@ (800b488 <TIM_Base_SetConfig+0x114>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d108      	bne.n	800b3fc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	4a27      	ldr	r2, [pc, #156]	@ (800b48c <TIM_Base_SetConfig+0x118>)
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b3f2:	683b      	ldr	r3, [r7, #0]
 800b3f4:	68db      	ldr	r3, [r3, #12]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	4313      	orrs	r3, r2
 800b3fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	2280      	movs	r2, #128	@ 0x80
 800b400:	4393      	bics	r3, r2
 800b402:	001a      	movs	r2, r3
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	695b      	ldr	r3, [r3, #20]
 800b408:	4313      	orrs	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b412:	683b      	ldr	r3, [r7, #0]
 800b414:	689a      	ldr	r2, [r3, #8]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	4a13      	ldr	r2, [pc, #76]	@ (800b474 <TIM_Base_SetConfig+0x100>)
 800b426:	4293      	cmp	r3, r2
 800b428:	d00b      	beq.n	800b442 <TIM_Base_SetConfig+0xce>
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4a14      	ldr	r2, [pc, #80]	@ (800b480 <TIM_Base_SetConfig+0x10c>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d007      	beq.n	800b442 <TIM_Base_SetConfig+0xce>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	4a13      	ldr	r2, [pc, #76]	@ (800b484 <TIM_Base_SetConfig+0x110>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d003      	beq.n	800b442 <TIM_Base_SetConfig+0xce>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	4a12      	ldr	r2, [pc, #72]	@ (800b488 <TIM_Base_SetConfig+0x114>)
 800b43e:	4293      	cmp	r3, r2
 800b440:	d103      	bne.n	800b44a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	691a      	ldr	r2, [r3, #16]
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2201      	movs	r2, #1
 800b44e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	691b      	ldr	r3, [r3, #16]
 800b454:	2201      	movs	r2, #1
 800b456:	4013      	ands	r3, r2
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d106      	bne.n	800b46a <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	2201      	movs	r2, #1
 800b462:	4393      	bics	r3, r2
 800b464:	001a      	movs	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	611a      	str	r2, [r3, #16]
  }
}
 800b46a:	46c0      	nop			@ (mov r8, r8)
 800b46c:	46bd      	mov	sp, r7
 800b46e:	b004      	add	sp, #16
 800b470:	bd80      	pop	{r7, pc}
 800b472:	46c0      	nop			@ (mov r8, r8)
 800b474:	40012c00 	.word	0x40012c00
 800b478:	40000400 	.word	0x40000400
 800b47c:	40002000 	.word	0x40002000
 800b480:	40014000 	.word	0x40014000
 800b484:	40014400 	.word	0x40014400
 800b488:	40014800 	.word	0x40014800
 800b48c:	fffffcff 	.word	0xfffffcff

0800b490 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b086      	sub	sp, #24
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	6a1b      	ldr	r3, [r3, #32]
 800b49e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a1b      	ldr	r3, [r3, #32]
 800b4a4:	2201      	movs	r2, #1
 800b4a6:	4393      	bics	r3, r2
 800b4a8:	001a      	movs	r2, r3
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	685b      	ldr	r3, [r3, #4]
 800b4b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	699b      	ldr	r3, [r3, #24]
 800b4b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2270      	movs	r2, #112	@ 0x70
 800b4be:	4393      	bics	r3, r2
 800b4c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	2203      	movs	r2, #3
 800b4c6:	4393      	bics	r3, r2
 800b4c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	68fa      	ldr	r2, [r7, #12]
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800b4d4:	697b      	ldr	r3, [r7, #20]
 800b4d6:	2202      	movs	r2, #2
 800b4d8:	4393      	bics	r3, r2
 800b4da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800b4dc:	683b      	ldr	r3, [r7, #0]
 800b4de:	689b      	ldr	r3, [r3, #8]
 800b4e0:	697a      	ldr	r2, [r7, #20]
 800b4e2:	4313      	orrs	r3, r2
 800b4e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	4a27      	ldr	r2, [pc, #156]	@ (800b588 <TIM_OC1_SetConfig+0xf8>)
 800b4ea:	4293      	cmp	r3, r2
 800b4ec:	d00b      	beq.n	800b506 <TIM_OC1_SetConfig+0x76>
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	4a26      	ldr	r2, [pc, #152]	@ (800b58c <TIM_OC1_SetConfig+0xfc>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d007      	beq.n	800b506 <TIM_OC1_SetConfig+0x76>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	4a25      	ldr	r2, [pc, #148]	@ (800b590 <TIM_OC1_SetConfig+0x100>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d003      	beq.n	800b506 <TIM_OC1_SetConfig+0x76>
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	4a24      	ldr	r2, [pc, #144]	@ (800b594 <TIM_OC1_SetConfig+0x104>)
 800b502:	4293      	cmp	r3, r2
 800b504:	d10c      	bne.n	800b520 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800b506:	697b      	ldr	r3, [r7, #20]
 800b508:	2208      	movs	r2, #8
 800b50a:	4393      	bics	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800b50e:	683b      	ldr	r3, [r7, #0]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	4313      	orrs	r3, r2
 800b516:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800b518:	697b      	ldr	r3, [r7, #20]
 800b51a:	2204      	movs	r2, #4
 800b51c:	4393      	bics	r3, r2
 800b51e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	4a19      	ldr	r2, [pc, #100]	@ (800b588 <TIM_OC1_SetConfig+0xf8>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d00b      	beq.n	800b540 <TIM_OC1_SetConfig+0xb0>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	4a18      	ldr	r2, [pc, #96]	@ (800b58c <TIM_OC1_SetConfig+0xfc>)
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d007      	beq.n	800b540 <TIM_OC1_SetConfig+0xb0>
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	4a17      	ldr	r2, [pc, #92]	@ (800b590 <TIM_OC1_SetConfig+0x100>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d003      	beq.n	800b540 <TIM_OC1_SetConfig+0xb0>
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	4a16      	ldr	r2, [pc, #88]	@ (800b594 <TIM_OC1_SetConfig+0x104>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d111      	bne.n	800b564 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800b540:	693b      	ldr	r3, [r7, #16]
 800b542:	4a15      	ldr	r2, [pc, #84]	@ (800b598 <TIM_OC1_SetConfig+0x108>)
 800b544:	4013      	ands	r3, r2
 800b546:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800b548:	693b      	ldr	r3, [r7, #16]
 800b54a:	4a14      	ldr	r2, [pc, #80]	@ (800b59c <TIM_OC1_SetConfig+0x10c>)
 800b54c:	4013      	ands	r3, r2
 800b54e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800b550:	683b      	ldr	r3, [r7, #0]
 800b552:	695b      	ldr	r3, [r3, #20]
 800b554:	693a      	ldr	r2, [r7, #16]
 800b556:	4313      	orrs	r3, r2
 800b558:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800b55a:	683b      	ldr	r3, [r7, #0]
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	4313      	orrs	r3, r2
 800b562:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	693a      	ldr	r2, [r7, #16]
 800b568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	685a      	ldr	r2, [r3, #4]
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	697a      	ldr	r2, [r7, #20]
 800b57c:	621a      	str	r2, [r3, #32]
}
 800b57e:	46c0      	nop			@ (mov r8, r8)
 800b580:	46bd      	mov	sp, r7
 800b582:	b006      	add	sp, #24
 800b584:	bd80      	pop	{r7, pc}
 800b586:	46c0      	nop			@ (mov r8, r8)
 800b588:	40012c00 	.word	0x40012c00
 800b58c:	40014000 	.word	0x40014000
 800b590:	40014400 	.word	0x40014400
 800b594:	40014800 	.word	0x40014800
 800b598:	fffffeff 	.word	0xfffffeff
 800b59c:	fffffdff 	.word	0xfffffdff

0800b5a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af00      	add	r7, sp, #0
 800b5a6:	6078      	str	r0, [r7, #4]
 800b5a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a1b      	ldr	r3, [r3, #32]
 800b5ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	6a1b      	ldr	r3, [r3, #32]
 800b5b4:	2210      	movs	r2, #16
 800b5b6:	4393      	bics	r3, r2
 800b5b8:	001a      	movs	r2, r3
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	699b      	ldr	r3, [r3, #24]
 800b5c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	4a2e      	ldr	r2, [pc, #184]	@ (800b688 <TIM_OC2_SetConfig+0xe8>)
 800b5ce:	4013      	ands	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	4a2d      	ldr	r2, [pc, #180]	@ (800b68c <TIM_OC2_SetConfig+0xec>)
 800b5d6:	4013      	ands	r3, r2
 800b5d8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	021b      	lsls	r3, r3, #8
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4313      	orrs	r3, r2
 800b5e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800b5e6:	697b      	ldr	r3, [r7, #20]
 800b5e8:	2220      	movs	r2, #32
 800b5ea:	4393      	bics	r3, r2
 800b5ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800b5ee:	683b      	ldr	r3, [r7, #0]
 800b5f0:	689b      	ldr	r3, [r3, #8]
 800b5f2:	011b      	lsls	r3, r3, #4
 800b5f4:	697a      	ldr	r2, [r7, #20]
 800b5f6:	4313      	orrs	r3, r2
 800b5f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	4a24      	ldr	r2, [pc, #144]	@ (800b690 <TIM_OC2_SetConfig+0xf0>)
 800b5fe:	4293      	cmp	r3, r2
 800b600:	d10d      	bne.n	800b61e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800b602:	697b      	ldr	r3, [r7, #20]
 800b604:	2280      	movs	r2, #128	@ 0x80
 800b606:	4393      	bics	r3, r2
 800b608:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	68db      	ldr	r3, [r3, #12]
 800b60e:	011b      	lsls	r3, r3, #4
 800b610:	697a      	ldr	r2, [r7, #20]
 800b612:	4313      	orrs	r3, r2
 800b614:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2240      	movs	r2, #64	@ 0x40
 800b61a:	4393      	bics	r3, r2
 800b61c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	4a1b      	ldr	r2, [pc, #108]	@ (800b690 <TIM_OC2_SetConfig+0xf0>)
 800b622:	4293      	cmp	r3, r2
 800b624:	d00b      	beq.n	800b63e <TIM_OC2_SetConfig+0x9e>
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a1a      	ldr	r2, [pc, #104]	@ (800b694 <TIM_OC2_SetConfig+0xf4>)
 800b62a:	4293      	cmp	r3, r2
 800b62c:	d007      	beq.n	800b63e <TIM_OC2_SetConfig+0x9e>
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	4a19      	ldr	r2, [pc, #100]	@ (800b698 <TIM_OC2_SetConfig+0xf8>)
 800b632:	4293      	cmp	r3, r2
 800b634:	d003      	beq.n	800b63e <TIM_OC2_SetConfig+0x9e>
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	4a18      	ldr	r2, [pc, #96]	@ (800b69c <TIM_OC2_SetConfig+0xfc>)
 800b63a:	4293      	cmp	r3, r2
 800b63c:	d113      	bne.n	800b666 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800b63e:	693b      	ldr	r3, [r7, #16]
 800b640:	4a17      	ldr	r2, [pc, #92]	@ (800b6a0 <TIM_OC2_SetConfig+0x100>)
 800b642:	4013      	ands	r3, r2
 800b644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	4a16      	ldr	r2, [pc, #88]	@ (800b6a4 <TIM_OC2_SetConfig+0x104>)
 800b64a:	4013      	ands	r3, r2
 800b64c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800b64e:	683b      	ldr	r3, [r7, #0]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	009b      	lsls	r3, r3, #2
 800b654:	693a      	ldr	r2, [r7, #16]
 800b656:	4313      	orrs	r3, r2
 800b658:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800b65a:	683b      	ldr	r3, [r7, #0]
 800b65c:	699b      	ldr	r3, [r3, #24]
 800b65e:	009b      	lsls	r3, r3, #2
 800b660:	693a      	ldr	r2, [r7, #16]
 800b662:	4313      	orrs	r3, r2
 800b664:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	68fa      	ldr	r2, [r7, #12]
 800b670:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800b672:	683b      	ldr	r3, [r7, #0]
 800b674:	685a      	ldr	r2, [r3, #4]
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	697a      	ldr	r2, [r7, #20]
 800b67e:	621a      	str	r2, [r3, #32]
}
 800b680:	46c0      	nop			@ (mov r8, r8)
 800b682:	46bd      	mov	sp, r7
 800b684:	b006      	add	sp, #24
 800b686:	bd80      	pop	{r7, pc}
 800b688:	ffff8fff 	.word	0xffff8fff
 800b68c:	fffffcff 	.word	0xfffffcff
 800b690:	40012c00 	.word	0x40012c00
 800b694:	40014000 	.word	0x40014000
 800b698:	40014400 	.word	0x40014400
 800b69c:	40014800 	.word	0x40014800
 800b6a0:	fffffbff 	.word	0xfffffbff
 800b6a4:	fffff7ff 	.word	0xfffff7ff

0800b6a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b6a8:	b580      	push	{r7, lr}
 800b6aa:	b086      	sub	sp, #24
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	6078      	str	r0, [r7, #4]
 800b6b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6a1b      	ldr	r3, [r3, #32]
 800b6b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6a1b      	ldr	r3, [r3, #32]
 800b6bc:	4a33      	ldr	r2, [pc, #204]	@ (800b78c <TIM_OC3_SetConfig+0xe4>)
 800b6be:	401a      	ands	r2, r3
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	685b      	ldr	r3, [r3, #4]
 800b6c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	69db      	ldr	r3, [r3, #28]
 800b6ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	2270      	movs	r2, #112	@ 0x70
 800b6d4:	4393      	bics	r3, r2
 800b6d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b6d8:	68fb      	ldr	r3, [r7, #12]
 800b6da:	2203      	movs	r2, #3
 800b6dc:	4393      	bics	r3, r2
 800b6de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b6e0:	683b      	ldr	r3, [r7, #0]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	68fa      	ldr	r2, [r7, #12]
 800b6e6:	4313      	orrs	r3, r2
 800b6e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	4a28      	ldr	r2, [pc, #160]	@ (800b790 <TIM_OC3_SetConfig+0xe8>)
 800b6ee:	4013      	ands	r3, r2
 800b6f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	689b      	ldr	r3, [r3, #8]
 800b6f6:	021b      	lsls	r3, r3, #8
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	4a24      	ldr	r2, [pc, #144]	@ (800b794 <TIM_OC3_SetConfig+0xec>)
 800b702:	4293      	cmp	r3, r2
 800b704:	d10d      	bne.n	800b722 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b706:	697b      	ldr	r3, [r7, #20]
 800b708:	4a23      	ldr	r2, [pc, #140]	@ (800b798 <TIM_OC3_SetConfig+0xf0>)
 800b70a:	4013      	ands	r3, r2
 800b70c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	68db      	ldr	r3, [r3, #12]
 800b712:	021b      	lsls	r3, r3, #8
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	4313      	orrs	r3, r2
 800b718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b71a:	697b      	ldr	r3, [r7, #20]
 800b71c:	4a1f      	ldr	r2, [pc, #124]	@ (800b79c <TIM_OC3_SetConfig+0xf4>)
 800b71e:	4013      	ands	r3, r2
 800b720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	4a1b      	ldr	r2, [pc, #108]	@ (800b794 <TIM_OC3_SetConfig+0xec>)
 800b726:	4293      	cmp	r3, r2
 800b728:	d00b      	beq.n	800b742 <TIM_OC3_SetConfig+0x9a>
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4a1c      	ldr	r2, [pc, #112]	@ (800b7a0 <TIM_OC3_SetConfig+0xf8>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d007      	beq.n	800b742 <TIM_OC3_SetConfig+0x9a>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	4a1b      	ldr	r2, [pc, #108]	@ (800b7a4 <TIM_OC3_SetConfig+0xfc>)
 800b736:	4293      	cmp	r3, r2
 800b738:	d003      	beq.n	800b742 <TIM_OC3_SetConfig+0x9a>
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	4a1a      	ldr	r2, [pc, #104]	@ (800b7a8 <TIM_OC3_SetConfig+0x100>)
 800b73e:	4293      	cmp	r3, r2
 800b740:	d113      	bne.n	800b76a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	4a19      	ldr	r2, [pc, #100]	@ (800b7ac <TIM_OC3_SetConfig+0x104>)
 800b746:	4013      	ands	r3, r2
 800b748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b74a:	693b      	ldr	r3, [r7, #16]
 800b74c:	4a18      	ldr	r2, [pc, #96]	@ (800b7b0 <TIM_OC3_SetConfig+0x108>)
 800b74e:	4013      	ands	r3, r2
 800b750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	695b      	ldr	r3, [r3, #20]
 800b756:	011b      	lsls	r3, r3, #4
 800b758:	693a      	ldr	r2, [r7, #16]
 800b75a:	4313      	orrs	r3, r2
 800b75c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	011b      	lsls	r3, r3, #4
 800b764:	693a      	ldr	r2, [r7, #16]
 800b766:	4313      	orrs	r3, r2
 800b768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	693a      	ldr	r2, [r7, #16]
 800b76e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	685a      	ldr	r2, [r3, #4]
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	697a      	ldr	r2, [r7, #20]
 800b782:	621a      	str	r2, [r3, #32]
}
 800b784:	46c0      	nop			@ (mov r8, r8)
 800b786:	46bd      	mov	sp, r7
 800b788:	b006      	add	sp, #24
 800b78a:	bd80      	pop	{r7, pc}
 800b78c:	fffffeff 	.word	0xfffffeff
 800b790:	fffffdff 	.word	0xfffffdff
 800b794:	40012c00 	.word	0x40012c00
 800b798:	fffff7ff 	.word	0xfffff7ff
 800b79c:	fffffbff 	.word	0xfffffbff
 800b7a0:	40014000 	.word	0x40014000
 800b7a4:	40014400 	.word	0x40014400
 800b7a8:	40014800 	.word	0x40014800
 800b7ac:	ffffefff 	.word	0xffffefff
 800b7b0:	ffffdfff 	.word	0xffffdfff

0800b7b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800b7b4:	b580      	push	{r7, lr}
 800b7b6:	b086      	sub	sp, #24
 800b7b8:	af00      	add	r7, sp, #0
 800b7ba:	6078      	str	r0, [r7, #4]
 800b7bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	6a1b      	ldr	r3, [r3, #32]
 800b7c2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	6a1b      	ldr	r3, [r3, #32]
 800b7c8:	4a26      	ldr	r2, [pc, #152]	@ (800b864 <TIM_OC4_SetConfig+0xb0>)
 800b7ca:	401a      	ands	r2, r3
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	69db      	ldr	r3, [r3, #28]
 800b7da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4a22      	ldr	r2, [pc, #136]	@ (800b868 <TIM_OC4_SetConfig+0xb4>)
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	4a21      	ldr	r2, [pc, #132]	@ (800b86c <TIM_OC4_SetConfig+0xb8>)
 800b7e8:	4013      	ands	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	021b      	lsls	r3, r3, #8
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	4313      	orrs	r3, r2
 800b7f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b7f8:	693b      	ldr	r3, [r7, #16]
 800b7fa:	4a1d      	ldr	r2, [pc, #116]	@ (800b870 <TIM_OC4_SetConfig+0xbc>)
 800b7fc:	4013      	ands	r3, r2
 800b7fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	689b      	ldr	r3, [r3, #8]
 800b804:	031b      	lsls	r3, r3, #12
 800b806:	693a      	ldr	r2, [r7, #16]
 800b808:	4313      	orrs	r3, r2
 800b80a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	4a19      	ldr	r2, [pc, #100]	@ (800b874 <TIM_OC4_SetConfig+0xc0>)
 800b810:	4293      	cmp	r3, r2
 800b812:	d00b      	beq.n	800b82c <TIM_OC4_SetConfig+0x78>
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	4a18      	ldr	r2, [pc, #96]	@ (800b878 <TIM_OC4_SetConfig+0xc4>)
 800b818:	4293      	cmp	r3, r2
 800b81a:	d007      	beq.n	800b82c <TIM_OC4_SetConfig+0x78>
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	4a17      	ldr	r2, [pc, #92]	@ (800b87c <TIM_OC4_SetConfig+0xc8>)
 800b820:	4293      	cmp	r3, r2
 800b822:	d003      	beq.n	800b82c <TIM_OC4_SetConfig+0x78>
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	4a16      	ldr	r2, [pc, #88]	@ (800b880 <TIM_OC4_SetConfig+0xcc>)
 800b828:	4293      	cmp	r3, r2
 800b82a:	d109      	bne.n	800b840 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b82c:	697b      	ldr	r3, [r7, #20]
 800b82e:	4a15      	ldr	r2, [pc, #84]	@ (800b884 <TIM_OC4_SetConfig+0xd0>)
 800b830:	4013      	ands	r3, r2
 800b832:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b834:	683b      	ldr	r3, [r7, #0]
 800b836:	695b      	ldr	r3, [r3, #20]
 800b838:	019b      	lsls	r3, r3, #6
 800b83a:	697a      	ldr	r2, [r7, #20]
 800b83c:	4313      	orrs	r3, r2
 800b83e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	697a      	ldr	r2, [r7, #20]
 800b844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68fa      	ldr	r2, [r7, #12]
 800b84a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	685a      	ldr	r2, [r3, #4]
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	693a      	ldr	r2, [r7, #16]
 800b858:	621a      	str	r2, [r3, #32]
}
 800b85a:	46c0      	nop			@ (mov r8, r8)
 800b85c:	46bd      	mov	sp, r7
 800b85e:	b006      	add	sp, #24
 800b860:	bd80      	pop	{r7, pc}
 800b862:	46c0      	nop			@ (mov r8, r8)
 800b864:	ffffefff 	.word	0xffffefff
 800b868:	ffff8fff 	.word	0xffff8fff
 800b86c:	fffffcff 	.word	0xfffffcff
 800b870:	ffffdfff 	.word	0xffffdfff
 800b874:	40012c00 	.word	0x40012c00
 800b878:	40014000 	.word	0x40014000
 800b87c:	40014400 	.word	0x40014400
 800b880:	40014800 	.word	0x40014800
 800b884:	ffffbfff 	.word	0xffffbfff

0800b888 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b086      	sub	sp, #24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	60f8      	str	r0, [r7, #12]
 800b890:	60b9      	str	r1, [r7, #8]
 800b892:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	6a1b      	ldr	r3, [r3, #32]
 800b898:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	6a1b      	ldr	r3, [r3, #32]
 800b89e:	2201      	movs	r2, #1
 800b8a0:	4393      	bics	r3, r2
 800b8a2:	001a      	movs	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	699b      	ldr	r3, [r3, #24]
 800b8ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b8ae:	693b      	ldr	r3, [r7, #16]
 800b8b0:	22f0      	movs	r2, #240	@ 0xf0
 800b8b2:	4393      	bics	r3, r2
 800b8b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	011b      	lsls	r3, r3, #4
 800b8ba:	693a      	ldr	r2, [r7, #16]
 800b8bc:	4313      	orrs	r3, r2
 800b8be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	220a      	movs	r2, #10
 800b8c4:	4393      	bics	r3, r2
 800b8c6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b8c8:	697a      	ldr	r2, [r7, #20]
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	4313      	orrs	r3, r2
 800b8ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	693a      	ldr	r2, [r7, #16]
 800b8d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	697a      	ldr	r2, [r7, #20]
 800b8da:	621a      	str	r2, [r3, #32]
}
 800b8dc:	46c0      	nop			@ (mov r8, r8)
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	b006      	add	sp, #24
 800b8e2:	bd80      	pop	{r7, pc}

0800b8e4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	60f8      	str	r0, [r7, #12]
 800b8ec:	60b9      	str	r1, [r7, #8]
 800b8ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	6a1b      	ldr	r3, [r3, #32]
 800b8f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6a1b      	ldr	r3, [r3, #32]
 800b8fa:	2210      	movs	r2, #16
 800b8fc:	4393      	bics	r3, r2
 800b8fe:	001a      	movs	r2, r3
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	699b      	ldr	r3, [r3, #24]
 800b908:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	4a0d      	ldr	r2, [pc, #52]	@ (800b944 <TIM_TI2_ConfigInputStage+0x60>)
 800b90e:	4013      	ands	r3, r2
 800b910:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	031b      	lsls	r3, r3, #12
 800b916:	693a      	ldr	r2, [r7, #16]
 800b918:	4313      	orrs	r3, r2
 800b91a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	22a0      	movs	r2, #160	@ 0xa0
 800b920:	4393      	bics	r3, r2
 800b922:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b924:	68bb      	ldr	r3, [r7, #8]
 800b926:	011b      	lsls	r3, r3, #4
 800b928:	697a      	ldr	r2, [r7, #20]
 800b92a:	4313      	orrs	r3, r2
 800b92c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	693a      	ldr	r2, [r7, #16]
 800b932:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b934:	68fb      	ldr	r3, [r7, #12]
 800b936:	697a      	ldr	r2, [r7, #20]
 800b938:	621a      	str	r2, [r3, #32]
}
 800b93a:	46c0      	nop			@ (mov r8, r8)
 800b93c:	46bd      	mov	sp, r7
 800b93e:	b006      	add	sp, #24
 800b940:	bd80      	pop	{r7, pc}
 800b942:	46c0      	nop			@ (mov r8, r8)
 800b944:	ffff0fff 	.word	0xffff0fff

0800b948 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b948:	b580      	push	{r7, lr}
 800b94a:	b084      	sub	sp, #16
 800b94c:	af00      	add	r7, sp, #0
 800b94e:	6078      	str	r0, [r7, #4]
 800b950:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	689b      	ldr	r3, [r3, #8]
 800b956:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2270      	movs	r2, #112	@ 0x70
 800b95c:	4393      	bics	r3, r2
 800b95e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b960:	683a      	ldr	r2, [r7, #0]
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	4313      	orrs	r3, r2
 800b966:	2207      	movs	r2, #7
 800b968:	4313      	orrs	r3, r2
 800b96a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	68fa      	ldr	r2, [r7, #12]
 800b970:	609a      	str	r2, [r3, #8]
}
 800b972:	46c0      	nop			@ (mov r8, r8)
 800b974:	46bd      	mov	sp, r7
 800b976:	b004      	add	sp, #16
 800b978:	bd80      	pop	{r7, pc}
	...

0800b97c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b97c:	b580      	push	{r7, lr}
 800b97e:	b086      	sub	sp, #24
 800b980:	af00      	add	r7, sp, #0
 800b982:	60f8      	str	r0, [r7, #12]
 800b984:	60b9      	str	r1, [r7, #8]
 800b986:	607a      	str	r2, [r7, #4]
 800b988:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	689b      	ldr	r3, [r3, #8]
 800b98e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	4a09      	ldr	r2, [pc, #36]	@ (800b9b8 <TIM_ETR_SetConfig+0x3c>)
 800b994:	4013      	ands	r3, r2
 800b996:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	021a      	lsls	r2, r3, #8
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	431a      	orrs	r2, r3
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	4313      	orrs	r3, r2
 800b9a4:	697a      	ldr	r2, [r7, #20]
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	697a      	ldr	r2, [r7, #20]
 800b9ae:	609a      	str	r2, [r3, #8]
}
 800b9b0:	46c0      	nop			@ (mov r8, r8)
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	b006      	add	sp, #24
 800b9b6:	bd80      	pop	{r7, pc}
 800b9b8:	ffff00ff 	.word	0xffff00ff

0800b9bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b086      	sub	sp, #24
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	60f8      	str	r0, [r7, #12]
 800b9c4:	60b9      	str	r1, [r7, #8]
 800b9c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b9c8:	68bb      	ldr	r3, [r7, #8]
 800b9ca:	221f      	movs	r2, #31
 800b9cc:	4013      	ands	r3, r2
 800b9ce:	2201      	movs	r2, #1
 800b9d0:	409a      	lsls	r2, r3
 800b9d2:	0013      	movs	r3, r2
 800b9d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	43d2      	mvns	r2, r2
 800b9de:	401a      	ands	r2, r3
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	6a1a      	ldr	r2, [r3, #32]
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	211f      	movs	r1, #31
 800b9ec:	400b      	ands	r3, r1
 800b9ee:	6879      	ldr	r1, [r7, #4]
 800b9f0:	4099      	lsls	r1, r3
 800b9f2:	000b      	movs	r3, r1
 800b9f4:	431a      	orrs	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	621a      	str	r2, [r3, #32]
}
 800b9fa:	46c0      	nop			@ (mov r8, r8)
 800b9fc:	46bd      	mov	sp, r7
 800b9fe:	b006      	add	sp, #24
 800ba00:	bd80      	pop	{r7, pc}
	...

0800ba04 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b084      	sub	sp, #16
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	6078      	str	r0, [r7, #4]
 800ba0c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	223c      	movs	r2, #60	@ 0x3c
 800ba12:	5c9b      	ldrb	r3, [r3, r2]
 800ba14:	2b01      	cmp	r3, #1
 800ba16:	d101      	bne.n	800ba1c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ba18:	2302      	movs	r3, #2
 800ba1a:	e047      	b.n	800baac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	223c      	movs	r2, #60	@ 0x3c
 800ba20:	2101      	movs	r1, #1
 800ba22:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	223d      	movs	r2, #61	@ 0x3d
 800ba28:	2102      	movs	r1, #2
 800ba2a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	685b      	ldr	r3, [r3, #4]
 800ba32:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	689b      	ldr	r3, [r3, #8]
 800ba3a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	2270      	movs	r2, #112	@ 0x70
 800ba40:	4393      	bics	r3, r2
 800ba42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ba44:	683b      	ldr	r3, [r7, #0]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	68fa      	ldr	r2, [r7, #12]
 800ba4a:	4313      	orrs	r3, r2
 800ba4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	68fa      	ldr	r2, [r7, #12]
 800ba54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	681b      	ldr	r3, [r3, #0]
 800ba5a:	4a16      	ldr	r2, [pc, #88]	@ (800bab4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800ba5c:	4293      	cmp	r3, r2
 800ba5e:	d00f      	beq.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681a      	ldr	r2, [r3, #0]
 800ba64:	2380      	movs	r3, #128	@ 0x80
 800ba66:	05db      	lsls	r3, r3, #23
 800ba68:	429a      	cmp	r2, r3
 800ba6a:	d009      	beq.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	4a11      	ldr	r2, [pc, #68]	@ (800bab8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ba72:	4293      	cmp	r3, r2
 800ba74:	d004      	beq.n	800ba80 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	4a10      	ldr	r2, [pc, #64]	@ (800babc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ba7c:	4293      	cmp	r3, r2
 800ba7e:	d10c      	bne.n	800ba9a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	2280      	movs	r2, #128	@ 0x80
 800ba84:	4393      	bics	r3, r2
 800ba86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	685b      	ldr	r3, [r3, #4]
 800ba8c:	68ba      	ldr	r2, [r7, #8]
 800ba8e:	4313      	orrs	r3, r2
 800ba90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	68ba      	ldr	r2, [r7, #8]
 800ba98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	223d      	movs	r2, #61	@ 0x3d
 800ba9e:	2101      	movs	r1, #1
 800baa0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	223c      	movs	r2, #60	@ 0x3c
 800baa6:	2100      	movs	r1, #0
 800baa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800baaa:	2300      	movs	r3, #0
}
 800baac:	0018      	movs	r0, r3
 800baae:	46bd      	mov	sp, r7
 800bab0:	b004      	add	sp, #16
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	40012c00 	.word	0x40012c00
 800bab8:	40000400 	.word	0x40000400
 800babc:	40014000 	.word	0x40014000

0800bac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b082      	sub	sp, #8
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bac8:	46c0      	nop			@ (mov r8, r8)
 800baca:	46bd      	mov	sp, r7
 800bacc:	b002      	add	sp, #8
 800bace:	bd80      	pop	{r7, pc}

0800bad0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bad0:	b580      	push	{r7, lr}
 800bad2:	b082      	sub	sp, #8
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bad8:	46c0      	nop			@ (mov r8, r8)
 800bada:	46bd      	mov	sp, r7
 800badc:	b002      	add	sp, #8
 800bade:	bd80      	pop	{r7, pc}

0800bae0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b084      	sub	sp, #16
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2244      	movs	r2, #68	@ 0x44
 800baec:	2100      	movs	r1, #0
 800baee:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800baf0:	4b05      	ldr	r3, [pc, #20]	@ (800bb08 <USB_EnableGlobalInt+0x28>)
 800baf2:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	b299      	uxth	r1, r3
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2240      	movs	r2, #64	@ 0x40
 800bafc:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bafe:	2300      	movs	r3, #0
}
 800bb00:	0018      	movs	r0, r3
 800bb02:	46bd      	mov	sp, r7
 800bb04:	b004      	add	sp, #16
 800bb06:	bd80      	pop	{r7, pc}
 800bb08:	0000bf80 	.word	0x0000bf80

0800bb0c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b084      	sub	sp, #16
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800bb14:	4b09      	ldr	r3, [pc, #36]	@ (800bb3c <USB_DisableGlobalInt+0x30>)
 800bb16:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2240      	movs	r2, #64	@ 0x40
 800bb1c:	5a9b      	ldrh	r3, [r3, r2]
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	b292      	uxth	r2, r2
 800bb24:	43d2      	mvns	r2, r2
 800bb26:	b292      	uxth	r2, r2
 800bb28:	4013      	ands	r3, r2
 800bb2a:	b299      	uxth	r1, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2240      	movs	r2, #64	@ 0x40
 800bb30:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bb32:	2300      	movs	r3, #0
}
 800bb34:	0018      	movs	r0, r3
 800bb36:	46bd      	mov	sp, r7
 800bb38:	b004      	add	sp, #16
 800bb3a:	bd80      	pop	{r7, pc}
 800bb3c:	0000bf80 	.word	0x0000bf80

0800bb40 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800bb40:	b580      	push	{r7, lr}
 800bb42:	b084      	sub	sp, #16
 800bb44:	af00      	add	r7, sp, #0
 800bb46:	60f8      	str	r0, [r7, #12]
 800bb48:	1d3b      	adds	r3, r7, #4
 800bb4a:	6019      	str	r1, [r3, #0]
 800bb4c:	605a      	str	r2, [r3, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2240      	movs	r2, #64	@ 0x40
 800bb52:	2101      	movs	r1, #1
 800bb54:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	2240      	movs	r2, #64	@ 0x40
 800bb5a:	2100      	movs	r1, #0
 800bb5c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	2244      	movs	r2, #68	@ 0x44
 800bb62:	2100      	movs	r1, #0
 800bb64:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800bb66:	68fb      	ldr	r3, [r7, #12]
 800bb68:	2250      	movs	r2, #80	@ 0x50
 800bb6a:	2100      	movs	r1, #0
 800bb6c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800bb6e:	2300      	movs	r3, #0
}
 800bb70:	0018      	movs	r0, r3
 800bb72:	46bd      	mov	sp, r7
 800bb74:	b004      	add	sp, #16
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b09c      	sub	sp, #112	@ 0x70
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
 800bb80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bb82:	236f      	movs	r3, #111	@ 0x6f
 800bb84:	18fb      	adds	r3, r7, r3
 800bb86:	2200      	movs	r2, #0
 800bb88:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	683b      	ldr	r3, [r7, #0]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	009b      	lsls	r3, r3, #2
 800bb92:	18d3      	adds	r3, r2, r3
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	b29a      	uxth	r2, r3
 800bb98:	236c      	movs	r3, #108	@ 0x6c
 800bb9a:	18fb      	adds	r3, r7, r3
 800bb9c:	49a1      	ldr	r1, [pc, #644]	@ (800be24 <USB_ActivateEndpoint+0x2ac>)
 800bb9e:	400a      	ands	r2, r1
 800bba0:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800bba2:	683b      	ldr	r3, [r7, #0]
 800bba4:	78db      	ldrb	r3, [r3, #3]
 800bba6:	2b03      	cmp	r3, #3
 800bba8:	d017      	beq.n	800bbda <USB_ActivateEndpoint+0x62>
 800bbaa:	dc28      	bgt.n	800bbfe <USB_ActivateEndpoint+0x86>
 800bbac:	2b02      	cmp	r3, #2
 800bbae:	d00e      	beq.n	800bbce <USB_ActivateEndpoint+0x56>
 800bbb0:	dc25      	bgt.n	800bbfe <USB_ActivateEndpoint+0x86>
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d002      	beq.n	800bbbc <USB_ActivateEndpoint+0x44>
 800bbb6:	2b01      	cmp	r3, #1
 800bbb8:	d018      	beq.n	800bbec <USB_ActivateEndpoint+0x74>
 800bbba:	e020      	b.n	800bbfe <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800bbbc:	226c      	movs	r2, #108	@ 0x6c
 800bbbe:	18bb      	adds	r3, r7, r2
 800bbc0:	18ba      	adds	r2, r7, r2
 800bbc2:	8812      	ldrh	r2, [r2, #0]
 800bbc4:	2180      	movs	r1, #128	@ 0x80
 800bbc6:	0089      	lsls	r1, r1, #2
 800bbc8:	430a      	orrs	r2, r1
 800bbca:	801a      	strh	r2, [r3, #0]
      break;
 800bbcc:	e01c      	b.n	800bc08 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800bbce:	226c      	movs	r2, #108	@ 0x6c
 800bbd0:	18bb      	adds	r3, r7, r2
 800bbd2:	18ba      	adds	r2, r7, r2
 800bbd4:	8812      	ldrh	r2, [r2, #0]
 800bbd6:	801a      	strh	r2, [r3, #0]
      break;
 800bbd8:	e016      	b.n	800bc08 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800bbda:	226c      	movs	r2, #108	@ 0x6c
 800bbdc:	18bb      	adds	r3, r7, r2
 800bbde:	18ba      	adds	r2, r7, r2
 800bbe0:	8812      	ldrh	r2, [r2, #0]
 800bbe2:	21c0      	movs	r1, #192	@ 0xc0
 800bbe4:	00c9      	lsls	r1, r1, #3
 800bbe6:	430a      	orrs	r2, r1
 800bbe8:	801a      	strh	r2, [r3, #0]
      break;
 800bbea:	e00d      	b.n	800bc08 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800bbec:	226c      	movs	r2, #108	@ 0x6c
 800bbee:	18bb      	adds	r3, r7, r2
 800bbf0:	18ba      	adds	r2, r7, r2
 800bbf2:	8812      	ldrh	r2, [r2, #0]
 800bbf4:	2180      	movs	r1, #128	@ 0x80
 800bbf6:	00c9      	lsls	r1, r1, #3
 800bbf8:	430a      	orrs	r2, r1
 800bbfa:	801a      	strh	r2, [r3, #0]
      break;
 800bbfc:	e004      	b.n	800bc08 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800bbfe:	236f      	movs	r3, #111	@ 0x6f
 800bc00:	18fb      	adds	r3, r7, r3
 800bc02:	2201      	movs	r2, #1
 800bc04:	701a      	strb	r2, [r3, #0]
      break;
 800bc06:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800bc08:	687a      	ldr	r2, [r7, #4]
 800bc0a:	683b      	ldr	r3, [r7, #0]
 800bc0c:	781b      	ldrb	r3, [r3, #0]
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	18d3      	adds	r3, r2, r3
 800bc12:	226c      	movs	r2, #108	@ 0x6c
 800bc14:	18ba      	adds	r2, r7, r2
 800bc16:	8812      	ldrh	r2, [r2, #0]
 800bc18:	4983      	ldr	r1, [pc, #524]	@ (800be28 <USB_ActivateEndpoint+0x2b0>)
 800bc1a:	430a      	orrs	r2, r1
 800bc1c:	b292      	uxth	r2, r2
 800bc1e:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800bc20:	687a      	ldr	r2, [r7, #4]
 800bc22:	683b      	ldr	r3, [r7, #0]
 800bc24:	781b      	ldrb	r3, [r3, #0]
 800bc26:	009b      	lsls	r3, r3, #2
 800bc28:	18d3      	adds	r3, r2, r3
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	b21b      	sxth	r3, r3
 800bc30:	4a7e      	ldr	r2, [pc, #504]	@ (800be2c <USB_ActivateEndpoint+0x2b4>)
 800bc32:	4013      	ands	r3, r2
 800bc34:	b21a      	sxth	r2, r3
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	781b      	ldrb	r3, [r3, #0]
 800bc3a:	b21b      	sxth	r3, r3
 800bc3c:	4313      	orrs	r3, r2
 800bc3e:	b21a      	sxth	r2, r3
 800bc40:	2166      	movs	r1, #102	@ 0x66
 800bc42:	187b      	adds	r3, r7, r1
 800bc44:	801a      	strh	r2, [r3, #0]
 800bc46:	687a      	ldr	r2, [r7, #4]
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	781b      	ldrb	r3, [r3, #0]
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	18d3      	adds	r3, r2, r3
 800bc50:	187a      	adds	r2, r7, r1
 800bc52:	8812      	ldrh	r2, [r2, #0]
 800bc54:	4974      	ldr	r1, [pc, #464]	@ (800be28 <USB_ActivateEndpoint+0x2b0>)
 800bc56:	430a      	orrs	r2, r1
 800bc58:	b292      	uxth	r2, r2
 800bc5a:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	7b1b      	ldrb	r3, [r3, #12]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d000      	beq.n	800bc66 <USB_ActivateEndpoint+0xee>
 800bc64:	e177      	b.n	800bf56 <USB_ActivateEndpoint+0x3de>
  {
    if (ep->is_in != 0U)
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	785b      	ldrb	r3, [r3, #1]
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d100      	bne.n	800bc70 <USB_ActivateEndpoint+0xf8>
 800bc6e:	e07a      	b.n	800bd66 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	61bb      	str	r3, [r7, #24]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2250      	movs	r2, #80	@ 0x50
 800bc78:	5a9b      	ldrh	r3, [r3, r2]
 800bc7a:	b29b      	uxth	r3, r3
 800bc7c:	001a      	movs	r2, r3
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	189b      	adds	r3, r3, r2
 800bc82:	61bb      	str	r3, [r7, #24]
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	781b      	ldrb	r3, [r3, #0]
 800bc88:	00da      	lsls	r2, r3, #3
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	18d3      	adds	r3, r2, r3
 800bc8e:	2280      	movs	r2, #128	@ 0x80
 800bc90:	00d2      	lsls	r2, r2, #3
 800bc92:	4694      	mov	ip, r2
 800bc94:	4463      	add	r3, ip
 800bc96:	617b      	str	r3, [r7, #20]
 800bc98:	683b      	ldr	r3, [r7, #0]
 800bc9a:	88db      	ldrh	r3, [r3, #6]
 800bc9c:	085b      	lsrs	r3, r3, #1
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	18db      	adds	r3, r3, r3
 800bca2:	b29a      	uxth	r2, r3
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	18d2      	adds	r2, r2, r3
 800bcb2:	2112      	movs	r1, #18
 800bcb4:	187b      	adds	r3, r7, r1
 800bcb6:	8812      	ldrh	r2, [r2, #0]
 800bcb8:	801a      	strh	r2, [r3, #0]
 800bcba:	187b      	adds	r3, r7, r1
 800bcbc:	881b      	ldrh	r3, [r3, #0]
 800bcbe:	2240      	movs	r2, #64	@ 0x40
 800bcc0:	4013      	ands	r3, r2
 800bcc2:	d016      	beq.n	800bcf2 <USB_ActivateEndpoint+0x17a>
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	18d3      	adds	r3, r2, r3
 800bcce:	881b      	ldrh	r3, [r3, #0]
 800bcd0:	b29a      	uxth	r2, r3
 800bcd2:	2010      	movs	r0, #16
 800bcd4:	183b      	adds	r3, r7, r0
 800bcd6:	4955      	ldr	r1, [pc, #340]	@ (800be2c <USB_ActivateEndpoint+0x2b4>)
 800bcd8:	400a      	ands	r2, r1
 800bcda:	801a      	strh	r2, [r3, #0]
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	683b      	ldr	r3, [r7, #0]
 800bce0:	781b      	ldrb	r3, [r3, #0]
 800bce2:	009b      	lsls	r3, r3, #2
 800bce4:	18d3      	adds	r3, r2, r3
 800bce6:	183a      	adds	r2, r7, r0
 800bce8:	8812      	ldrh	r2, [r2, #0]
 800bcea:	4951      	ldr	r1, [pc, #324]	@ (800be30 <USB_ActivateEndpoint+0x2b8>)
 800bcec:	430a      	orrs	r2, r1
 800bcee:	b292      	uxth	r2, r2
 800bcf0:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bcf2:	683b      	ldr	r3, [r7, #0]
 800bcf4:	78db      	ldrb	r3, [r3, #3]
 800bcf6:	2b01      	cmp	r3, #1
 800bcf8:	d01d      	beq.n	800bd36 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bcfa:	687a      	ldr	r2, [r7, #4]
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	781b      	ldrb	r3, [r3, #0]
 800bd00:	009b      	lsls	r3, r3, #2
 800bd02:	18d3      	adds	r3, r2, r3
 800bd04:	881b      	ldrh	r3, [r3, #0]
 800bd06:	b29a      	uxth	r2, r3
 800bd08:	200c      	movs	r0, #12
 800bd0a:	183b      	adds	r3, r7, r0
 800bd0c:	4949      	ldr	r1, [pc, #292]	@ (800be34 <USB_ActivateEndpoint+0x2bc>)
 800bd0e:	400a      	ands	r2, r1
 800bd10:	801a      	strh	r2, [r3, #0]
 800bd12:	183b      	adds	r3, r7, r0
 800bd14:	183a      	adds	r2, r7, r0
 800bd16:	8812      	ldrh	r2, [r2, #0]
 800bd18:	2120      	movs	r1, #32
 800bd1a:	404a      	eors	r2, r1
 800bd1c:	801a      	strh	r2, [r3, #0]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	781b      	ldrb	r3, [r3, #0]
 800bd24:	009b      	lsls	r3, r3, #2
 800bd26:	18d3      	adds	r3, r2, r3
 800bd28:	183a      	adds	r2, r7, r0
 800bd2a:	8812      	ldrh	r2, [r2, #0]
 800bd2c:	493e      	ldr	r1, [pc, #248]	@ (800be28 <USB_ActivateEndpoint+0x2b0>)
 800bd2e:	430a      	orrs	r2, r1
 800bd30:	b292      	uxth	r2, r2
 800bd32:	801a      	strh	r2, [r3, #0]
 800bd34:	e2b5      	b.n	800c2a2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800bd36:	687a      	ldr	r2, [r7, #4]
 800bd38:	683b      	ldr	r3, [r7, #0]
 800bd3a:	781b      	ldrb	r3, [r3, #0]
 800bd3c:	009b      	lsls	r3, r3, #2
 800bd3e:	18d3      	adds	r3, r2, r3
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	b29a      	uxth	r2, r3
 800bd44:	200e      	movs	r0, #14
 800bd46:	183b      	adds	r3, r7, r0
 800bd48:	493a      	ldr	r1, [pc, #232]	@ (800be34 <USB_ActivateEndpoint+0x2bc>)
 800bd4a:	400a      	ands	r2, r1
 800bd4c:	801a      	strh	r2, [r3, #0]
 800bd4e:	687a      	ldr	r2, [r7, #4]
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	781b      	ldrb	r3, [r3, #0]
 800bd54:	009b      	lsls	r3, r3, #2
 800bd56:	18d3      	adds	r3, r2, r3
 800bd58:	183a      	adds	r2, r7, r0
 800bd5a:	8812      	ldrh	r2, [r2, #0]
 800bd5c:	4932      	ldr	r1, [pc, #200]	@ (800be28 <USB_ActivateEndpoint+0x2b0>)
 800bd5e:	430a      	orrs	r2, r1
 800bd60:	b292      	uxth	r2, r2
 800bd62:	801a      	strh	r2, [r3, #0]
 800bd64:	e29d      	b.n	800c2a2 <USB_ActivateEndpoint+0x72a>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2250      	movs	r2, #80	@ 0x50
 800bd6e:	5a9b      	ldrh	r3, [r3, r2]
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	001a      	movs	r2, r3
 800bd74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd76:	189b      	adds	r3, r3, r2
 800bd78:	633b      	str	r3, [r7, #48]	@ 0x30
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	00da      	lsls	r2, r3, #3
 800bd80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd82:	18d3      	adds	r3, r2, r3
 800bd84:	4a2c      	ldr	r2, [pc, #176]	@ (800be38 <USB_ActivateEndpoint+0x2c0>)
 800bd86:	4694      	mov	ip, r2
 800bd88:	4463      	add	r3, ip
 800bd8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	88db      	ldrh	r3, [r3, #6]
 800bd90:	085b      	lsrs	r3, r3, #1
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	18db      	adds	r3, r3, r3
 800bd96:	b29a      	uxth	r2, r3
 800bd98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd9a:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2250      	movs	r2, #80	@ 0x50
 800bda4:	5a9b      	ldrh	r3, [r3, r2]
 800bda6:	b29b      	uxth	r3, r3
 800bda8:	001a      	movs	r2, r3
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	189b      	adds	r3, r3, r2
 800bdae:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bdb0:	683b      	ldr	r3, [r7, #0]
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	00da      	lsls	r2, r3, #3
 800bdb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb8:	18d3      	adds	r3, r2, r3
 800bdba:	4a20      	ldr	r2, [pc, #128]	@ (800be3c <USB_ActivateEndpoint+0x2c4>)
 800bdbc:	4694      	mov	ip, r2
 800bdbe:	4463      	add	r3, ip
 800bdc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc4:	881b      	ldrh	r3, [r3, #0]
 800bdc6:	b29b      	uxth	r3, r3
 800bdc8:	059b      	lsls	r3, r3, #22
 800bdca:	0d9b      	lsrs	r3, r3, #22
 800bdcc:	b29a      	uxth	r2, r3
 800bdce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdd0:	801a      	strh	r2, [r3, #0]
 800bdd2:	683b      	ldr	r3, [r7, #0]
 800bdd4:	691b      	ldr	r3, [r3, #16]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d108      	bne.n	800bdec <USB_ActivateEndpoint+0x274>
 800bdda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bddc:	881b      	ldrh	r3, [r3, #0]
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	4a17      	ldr	r2, [pc, #92]	@ (800be40 <USB_ActivateEndpoint+0x2c8>)
 800bde2:	4313      	orrs	r3, r2
 800bde4:	b29a      	uxth	r2, r3
 800bde6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bde8:	801a      	strh	r2, [r3, #0]
 800bdea:	e045      	b.n	800be78 <USB_ActivateEndpoint+0x300>
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	2b3e      	cmp	r3, #62	@ 0x3e
 800bdf2:	d827      	bhi.n	800be44 <USB_ActivateEndpoint+0x2cc>
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	691b      	ldr	r3, [r3, #16]
 800bdf8:	085b      	lsrs	r3, r3, #1
 800bdfa:	66bb      	str	r3, [r7, #104]	@ 0x68
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	691b      	ldr	r3, [r3, #16]
 800be00:	2201      	movs	r2, #1
 800be02:	4013      	ands	r3, r2
 800be04:	d002      	beq.n	800be0c <USB_ActivateEndpoint+0x294>
 800be06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be08:	3301      	adds	r3, #1
 800be0a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be0e:	881b      	ldrh	r3, [r3, #0]
 800be10:	b29a      	uxth	r2, r3
 800be12:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be14:	b29b      	uxth	r3, r3
 800be16:	029b      	lsls	r3, r3, #10
 800be18:	b29b      	uxth	r3, r3
 800be1a:	4313      	orrs	r3, r2
 800be1c:	b29a      	uxth	r2, r3
 800be1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be20:	801a      	strh	r2, [r3, #0]
 800be22:	e029      	b.n	800be78 <USB_ActivateEndpoint+0x300>
 800be24:	ffff898f 	.word	0xffff898f
 800be28:	ffff8080 	.word	0xffff8080
 800be2c:	ffff8f8f 	.word	0xffff8f8f
 800be30:	ffff80c0 	.word	0xffff80c0
 800be34:	ffff8fbf 	.word	0xffff8fbf
 800be38:	00000404 	.word	0x00000404
 800be3c:	00000406 	.word	0x00000406
 800be40:	ffff8000 	.word	0xffff8000
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	095b      	lsrs	r3, r3, #5
 800be4a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	691b      	ldr	r3, [r3, #16]
 800be50:	221f      	movs	r2, #31
 800be52:	4013      	ands	r3, r2
 800be54:	d102      	bne.n	800be5c <USB_ActivateEndpoint+0x2e4>
 800be56:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be58:	3b01      	subs	r3, #1
 800be5a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800be5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be5e:	881b      	ldrh	r3, [r3, #0]
 800be60:	b29a      	uxth	r2, r3
 800be62:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800be64:	b29b      	uxth	r3, r3
 800be66:	029b      	lsls	r3, r3, #10
 800be68:	b29b      	uxth	r3, r3
 800be6a:	4313      	orrs	r3, r2
 800be6c:	b29b      	uxth	r3, r3
 800be6e:	4ab5      	ldr	r2, [pc, #724]	@ (800c144 <USB_ActivateEndpoint+0x5cc>)
 800be70:	4313      	orrs	r3, r2
 800be72:	b29a      	uxth	r2, r3
 800be74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be76:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	683b      	ldr	r3, [r7, #0]
 800be7c:	781b      	ldrb	r3, [r3, #0]
 800be7e:	009b      	lsls	r3, r3, #2
 800be80:	18d2      	adds	r2, r2, r3
 800be82:	2122      	movs	r1, #34	@ 0x22
 800be84:	187b      	adds	r3, r7, r1
 800be86:	8812      	ldrh	r2, [r2, #0]
 800be88:	801a      	strh	r2, [r3, #0]
 800be8a:	187b      	adds	r3, r7, r1
 800be8c:	881a      	ldrh	r2, [r3, #0]
 800be8e:	2380      	movs	r3, #128	@ 0x80
 800be90:	01db      	lsls	r3, r3, #7
 800be92:	4013      	ands	r3, r2
 800be94:	d016      	beq.n	800bec4 <USB_ActivateEndpoint+0x34c>
 800be96:	687a      	ldr	r2, [r7, #4]
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	781b      	ldrb	r3, [r3, #0]
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	18d3      	adds	r3, r2, r3
 800bea0:	881b      	ldrh	r3, [r3, #0]
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	2020      	movs	r0, #32
 800bea6:	183b      	adds	r3, r7, r0
 800bea8:	49a7      	ldr	r1, [pc, #668]	@ (800c148 <USB_ActivateEndpoint+0x5d0>)
 800beaa:	400a      	ands	r2, r1
 800beac:	801a      	strh	r2, [r3, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	18d3      	adds	r3, r2, r3
 800beb8:	183a      	adds	r2, r7, r0
 800beba:	8812      	ldrh	r2, [r2, #0]
 800bebc:	49a3      	ldr	r1, [pc, #652]	@ (800c14c <USB_ActivateEndpoint+0x5d4>)
 800bebe:	430a      	orrs	r2, r1
 800bec0:	b292      	uxth	r2, r2
 800bec2:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800bec4:	683b      	ldr	r3, [r7, #0]
 800bec6:	781b      	ldrb	r3, [r3, #0]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d125      	bne.n	800bf18 <USB_ActivateEndpoint+0x3a0>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800becc:	687a      	ldr	r2, [r7, #4]
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	781b      	ldrb	r3, [r3, #0]
 800bed2:	009b      	lsls	r3, r3, #2
 800bed4:	18d3      	adds	r3, r2, r3
 800bed6:	881b      	ldrh	r3, [r3, #0]
 800bed8:	b29a      	uxth	r2, r3
 800beda:	201c      	movs	r0, #28
 800bedc:	183b      	adds	r3, r7, r0
 800bede:	499c      	ldr	r1, [pc, #624]	@ (800c150 <USB_ActivateEndpoint+0x5d8>)
 800bee0:	400a      	ands	r2, r1
 800bee2:	801a      	strh	r2, [r3, #0]
 800bee4:	183b      	adds	r3, r7, r0
 800bee6:	183a      	adds	r2, r7, r0
 800bee8:	8812      	ldrh	r2, [r2, #0]
 800beea:	2180      	movs	r1, #128	@ 0x80
 800beec:	0149      	lsls	r1, r1, #5
 800beee:	404a      	eors	r2, r1
 800bef0:	801a      	strh	r2, [r3, #0]
 800bef2:	183b      	adds	r3, r7, r0
 800bef4:	183a      	adds	r2, r7, r0
 800bef6:	8812      	ldrh	r2, [r2, #0]
 800bef8:	2180      	movs	r1, #128	@ 0x80
 800befa:	0189      	lsls	r1, r1, #6
 800befc:	404a      	eors	r2, r1
 800befe:	801a      	strh	r2, [r3, #0]
 800bf00:	687a      	ldr	r2, [r7, #4]
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	781b      	ldrb	r3, [r3, #0]
 800bf06:	009b      	lsls	r3, r3, #2
 800bf08:	18d3      	adds	r3, r2, r3
 800bf0a:	183a      	adds	r2, r7, r0
 800bf0c:	8812      	ldrh	r2, [r2, #0]
 800bf0e:	4991      	ldr	r1, [pc, #580]	@ (800c154 <USB_ActivateEndpoint+0x5dc>)
 800bf10:	430a      	orrs	r2, r1
 800bf12:	b292      	uxth	r2, r2
 800bf14:	801a      	strh	r2, [r3, #0]
 800bf16:	e1c4      	b.n	800c2a2 <USB_ActivateEndpoint+0x72a>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800bf18:	687a      	ldr	r2, [r7, #4]
 800bf1a:	683b      	ldr	r3, [r7, #0]
 800bf1c:	781b      	ldrb	r3, [r3, #0]
 800bf1e:	009b      	lsls	r3, r3, #2
 800bf20:	18d3      	adds	r3, r2, r3
 800bf22:	881b      	ldrh	r3, [r3, #0]
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	201e      	movs	r0, #30
 800bf28:	183b      	adds	r3, r7, r0
 800bf2a:	4989      	ldr	r1, [pc, #548]	@ (800c150 <USB_ActivateEndpoint+0x5d8>)
 800bf2c:	400a      	ands	r2, r1
 800bf2e:	801a      	strh	r2, [r3, #0]
 800bf30:	183b      	adds	r3, r7, r0
 800bf32:	183a      	adds	r2, r7, r0
 800bf34:	8812      	ldrh	r2, [r2, #0]
 800bf36:	2180      	movs	r1, #128	@ 0x80
 800bf38:	0189      	lsls	r1, r1, #6
 800bf3a:	404a      	eors	r2, r1
 800bf3c:	801a      	strh	r2, [r3, #0]
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	683b      	ldr	r3, [r7, #0]
 800bf42:	781b      	ldrb	r3, [r3, #0]
 800bf44:	009b      	lsls	r3, r3, #2
 800bf46:	18d3      	adds	r3, r2, r3
 800bf48:	183a      	adds	r2, r7, r0
 800bf4a:	8812      	ldrh	r2, [r2, #0]
 800bf4c:	4981      	ldr	r1, [pc, #516]	@ (800c154 <USB_ActivateEndpoint+0x5dc>)
 800bf4e:	430a      	orrs	r2, r1
 800bf50:	b292      	uxth	r2, r2
 800bf52:	801a      	strh	r2, [r3, #0]
 800bf54:	e1a5      	b.n	800c2a2 <USB_ActivateEndpoint+0x72a>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800bf56:	683b      	ldr	r3, [r7, #0]
 800bf58:	78db      	ldrb	r3, [r3, #3]
 800bf5a:	2b02      	cmp	r3, #2
 800bf5c:	d117      	bne.n	800bf8e <USB_ActivateEndpoint+0x416>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	18d3      	adds	r3, r2, r3
 800bf68:	881b      	ldrh	r3, [r3, #0]
 800bf6a:	b29a      	uxth	r2, r3
 800bf6c:	2062      	movs	r0, #98	@ 0x62
 800bf6e:	183b      	adds	r3, r7, r0
 800bf70:	4975      	ldr	r1, [pc, #468]	@ (800c148 <USB_ActivateEndpoint+0x5d0>)
 800bf72:	400a      	ands	r2, r1
 800bf74:	801a      	strh	r2, [r3, #0]
 800bf76:	687a      	ldr	r2, [r7, #4]
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	781b      	ldrb	r3, [r3, #0]
 800bf7c:	009b      	lsls	r3, r3, #2
 800bf7e:	18d3      	adds	r3, r2, r3
 800bf80:	183a      	adds	r2, r7, r0
 800bf82:	8812      	ldrh	r2, [r2, #0]
 800bf84:	4974      	ldr	r1, [pc, #464]	@ (800c158 <USB_ActivateEndpoint+0x5e0>)
 800bf86:	430a      	orrs	r2, r1
 800bf88:	b292      	uxth	r2, r2
 800bf8a:	801a      	strh	r2, [r3, #0]
 800bf8c:	e016      	b.n	800bfbc <USB_ActivateEndpoint+0x444>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	781b      	ldrb	r3, [r3, #0]
 800bf94:	009b      	lsls	r3, r3, #2
 800bf96:	18d3      	adds	r3, r2, r3
 800bf98:	881b      	ldrh	r3, [r3, #0]
 800bf9a:	b29a      	uxth	r2, r3
 800bf9c:	2064      	movs	r0, #100	@ 0x64
 800bf9e:	183b      	adds	r3, r7, r0
 800bfa0:	496e      	ldr	r1, [pc, #440]	@ (800c15c <USB_ActivateEndpoint+0x5e4>)
 800bfa2:	400a      	ands	r2, r1
 800bfa4:	801a      	strh	r2, [r3, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	18d3      	adds	r3, r2, r3
 800bfb0:	183a      	adds	r2, r7, r0
 800bfb2:	8812      	ldrh	r2, [r2, #0]
 800bfb4:	4967      	ldr	r1, [pc, #412]	@ (800c154 <USB_ActivateEndpoint+0x5dc>)
 800bfb6:	430a      	orrs	r2, r1
 800bfb8:	b292      	uxth	r2, r2
 800bfba:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	2250      	movs	r2, #80	@ 0x50
 800bfc4:	5a9b      	ldrh	r3, [r3, r2]
 800bfc6:	b29b      	uxth	r3, r3
 800bfc8:	001a      	movs	r2, r3
 800bfca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfcc:	189b      	adds	r3, r3, r2
 800bfce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800bfd0:	683b      	ldr	r3, [r7, #0]
 800bfd2:	781b      	ldrb	r3, [r3, #0]
 800bfd4:	00da      	lsls	r2, r3, #3
 800bfd6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800bfd8:	18d3      	adds	r3, r2, r3
 800bfda:	2280      	movs	r2, #128	@ 0x80
 800bfdc:	00d2      	lsls	r2, r2, #3
 800bfde:	4694      	mov	ip, r2
 800bfe0:	4463      	add	r3, ip
 800bfe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800bfe4:	683b      	ldr	r3, [r7, #0]
 800bfe6:	891b      	ldrh	r3, [r3, #8]
 800bfe8:	085b      	lsrs	r3, r3, #1
 800bfea:	b29b      	uxth	r3, r3
 800bfec:	18db      	adds	r3, r3, r3
 800bfee:	b29a      	uxth	r2, r3
 800bff0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bff2:	801a      	strh	r2, [r3, #0]
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	657b      	str	r3, [r7, #84]	@ 0x54
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2250      	movs	r2, #80	@ 0x50
 800bffc:	5a9b      	ldrh	r3, [r3, r2]
 800bffe:	b29b      	uxth	r3, r3
 800c000:	001a      	movs	r2, r3
 800c002:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c004:	189b      	adds	r3, r3, r2
 800c006:	657b      	str	r3, [r7, #84]	@ 0x54
 800c008:	683b      	ldr	r3, [r7, #0]
 800c00a:	781b      	ldrb	r3, [r3, #0]
 800c00c:	00da      	lsls	r2, r3, #3
 800c00e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c010:	18d3      	adds	r3, r2, r3
 800c012:	4a53      	ldr	r2, [pc, #332]	@ (800c160 <USB_ActivateEndpoint+0x5e8>)
 800c014:	4694      	mov	ip, r2
 800c016:	4463      	add	r3, ip
 800c018:	653b      	str	r3, [r7, #80]	@ 0x50
 800c01a:	683b      	ldr	r3, [r7, #0]
 800c01c:	895b      	ldrh	r3, [r3, #10]
 800c01e:	085b      	lsrs	r3, r3, #1
 800c020:	b29b      	uxth	r3, r3
 800c022:	18db      	adds	r3, r3, r3
 800c024:	b29a      	uxth	r2, r3
 800c026:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c028:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	785b      	ldrb	r3, [r3, #1]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d000      	beq.n	800c034 <USB_ActivateEndpoint+0x4bc>
 800c032:	e09b      	b.n	800c16c <USB_ActivateEndpoint+0x5f4>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c034:	687a      	ldr	r2, [r7, #4]
 800c036:	683b      	ldr	r3, [r7, #0]
 800c038:	781b      	ldrb	r3, [r3, #0]
 800c03a:	009b      	lsls	r3, r3, #2
 800c03c:	18d2      	adds	r2, r2, r3
 800c03e:	2140      	movs	r1, #64	@ 0x40
 800c040:	187b      	adds	r3, r7, r1
 800c042:	8812      	ldrh	r2, [r2, #0]
 800c044:	801a      	strh	r2, [r3, #0]
 800c046:	187b      	adds	r3, r7, r1
 800c048:	881a      	ldrh	r2, [r3, #0]
 800c04a:	2380      	movs	r3, #128	@ 0x80
 800c04c:	01db      	lsls	r3, r3, #7
 800c04e:	4013      	ands	r3, r2
 800c050:	d016      	beq.n	800c080 <USB_ActivateEndpoint+0x508>
 800c052:	687a      	ldr	r2, [r7, #4]
 800c054:	683b      	ldr	r3, [r7, #0]
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	009b      	lsls	r3, r3, #2
 800c05a:	18d3      	adds	r3, r2, r3
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	b29a      	uxth	r2, r3
 800c060:	203e      	movs	r0, #62	@ 0x3e
 800c062:	183b      	adds	r3, r7, r0
 800c064:	4938      	ldr	r1, [pc, #224]	@ (800c148 <USB_ActivateEndpoint+0x5d0>)
 800c066:	400a      	ands	r2, r1
 800c068:	801a      	strh	r2, [r3, #0]
 800c06a:	687a      	ldr	r2, [r7, #4]
 800c06c:	683b      	ldr	r3, [r7, #0]
 800c06e:	781b      	ldrb	r3, [r3, #0]
 800c070:	009b      	lsls	r3, r3, #2
 800c072:	18d3      	adds	r3, r2, r3
 800c074:	183a      	adds	r2, r7, r0
 800c076:	8812      	ldrh	r2, [r2, #0]
 800c078:	4934      	ldr	r1, [pc, #208]	@ (800c14c <USB_ActivateEndpoint+0x5d4>)
 800c07a:	430a      	orrs	r2, r1
 800c07c:	b292      	uxth	r2, r2
 800c07e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c080:	687a      	ldr	r2, [r7, #4]
 800c082:	683b      	ldr	r3, [r7, #0]
 800c084:	781b      	ldrb	r3, [r3, #0]
 800c086:	009b      	lsls	r3, r3, #2
 800c088:	18d2      	adds	r2, r2, r3
 800c08a:	213c      	movs	r1, #60	@ 0x3c
 800c08c:	187b      	adds	r3, r7, r1
 800c08e:	8812      	ldrh	r2, [r2, #0]
 800c090:	801a      	strh	r2, [r3, #0]
 800c092:	187b      	adds	r3, r7, r1
 800c094:	881b      	ldrh	r3, [r3, #0]
 800c096:	2240      	movs	r2, #64	@ 0x40
 800c098:	4013      	ands	r3, r2
 800c09a:	d016      	beq.n	800c0ca <USB_ActivateEndpoint+0x552>
 800c09c:	687a      	ldr	r2, [r7, #4]
 800c09e:	683b      	ldr	r3, [r7, #0]
 800c0a0:	781b      	ldrb	r3, [r3, #0]
 800c0a2:	009b      	lsls	r3, r3, #2
 800c0a4:	18d3      	adds	r3, r2, r3
 800c0a6:	881b      	ldrh	r3, [r3, #0]
 800c0a8:	b29a      	uxth	r2, r3
 800c0aa:	203a      	movs	r0, #58	@ 0x3a
 800c0ac:	183b      	adds	r3, r7, r0
 800c0ae:	4926      	ldr	r1, [pc, #152]	@ (800c148 <USB_ActivateEndpoint+0x5d0>)
 800c0b0:	400a      	ands	r2, r1
 800c0b2:	801a      	strh	r2, [r3, #0]
 800c0b4:	687a      	ldr	r2, [r7, #4]
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	781b      	ldrb	r3, [r3, #0]
 800c0ba:	009b      	lsls	r3, r3, #2
 800c0bc:	18d3      	adds	r3, r2, r3
 800c0be:	183a      	adds	r2, r7, r0
 800c0c0:	8812      	ldrh	r2, [r2, #0]
 800c0c2:	4928      	ldr	r1, [pc, #160]	@ (800c164 <USB_ActivateEndpoint+0x5ec>)
 800c0c4:	430a      	orrs	r2, r1
 800c0c6:	b292      	uxth	r2, r2
 800c0c8:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c0ca:	687a      	ldr	r2, [r7, #4]
 800c0cc:	683b      	ldr	r3, [r7, #0]
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	18d3      	adds	r3, r2, r3
 800c0d4:	881b      	ldrh	r3, [r3, #0]
 800c0d6:	b29a      	uxth	r2, r3
 800c0d8:	2038      	movs	r0, #56	@ 0x38
 800c0da:	183b      	adds	r3, r7, r0
 800c0dc:	491c      	ldr	r1, [pc, #112]	@ (800c150 <USB_ActivateEndpoint+0x5d8>)
 800c0de:	400a      	ands	r2, r1
 800c0e0:	801a      	strh	r2, [r3, #0]
 800c0e2:	183b      	adds	r3, r7, r0
 800c0e4:	183a      	adds	r2, r7, r0
 800c0e6:	8812      	ldrh	r2, [r2, #0]
 800c0e8:	2180      	movs	r1, #128	@ 0x80
 800c0ea:	0149      	lsls	r1, r1, #5
 800c0ec:	404a      	eors	r2, r1
 800c0ee:	801a      	strh	r2, [r3, #0]
 800c0f0:	183b      	adds	r3, r7, r0
 800c0f2:	183a      	adds	r2, r7, r0
 800c0f4:	8812      	ldrh	r2, [r2, #0]
 800c0f6:	2180      	movs	r1, #128	@ 0x80
 800c0f8:	0189      	lsls	r1, r1, #6
 800c0fa:	404a      	eors	r2, r1
 800c0fc:	801a      	strh	r2, [r3, #0]
 800c0fe:	687a      	ldr	r2, [r7, #4]
 800c100:	683b      	ldr	r3, [r7, #0]
 800c102:	781b      	ldrb	r3, [r3, #0]
 800c104:	009b      	lsls	r3, r3, #2
 800c106:	18d3      	adds	r3, r2, r3
 800c108:	183a      	adds	r2, r7, r0
 800c10a:	8812      	ldrh	r2, [r2, #0]
 800c10c:	4911      	ldr	r1, [pc, #68]	@ (800c154 <USB_ActivateEndpoint+0x5dc>)
 800c10e:	430a      	orrs	r2, r1
 800c110:	b292      	uxth	r2, r2
 800c112:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c114:	687a      	ldr	r2, [r7, #4]
 800c116:	683b      	ldr	r3, [r7, #0]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	009b      	lsls	r3, r3, #2
 800c11c:	18d3      	adds	r3, r2, r3
 800c11e:	881b      	ldrh	r3, [r3, #0]
 800c120:	b29a      	uxth	r2, r3
 800c122:	2036      	movs	r0, #54	@ 0x36
 800c124:	183b      	adds	r3, r7, r0
 800c126:	4910      	ldr	r1, [pc, #64]	@ (800c168 <USB_ActivateEndpoint+0x5f0>)
 800c128:	400a      	ands	r2, r1
 800c12a:	801a      	strh	r2, [r3, #0]
 800c12c:	687a      	ldr	r2, [r7, #4]
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	781b      	ldrb	r3, [r3, #0]
 800c132:	009b      	lsls	r3, r3, #2
 800c134:	18d3      	adds	r3, r2, r3
 800c136:	183a      	adds	r2, r7, r0
 800c138:	8812      	ldrh	r2, [r2, #0]
 800c13a:	4906      	ldr	r1, [pc, #24]	@ (800c154 <USB_ActivateEndpoint+0x5dc>)
 800c13c:	430a      	orrs	r2, r1
 800c13e:	b292      	uxth	r2, r2
 800c140:	801a      	strh	r2, [r3, #0]
 800c142:	e0ae      	b.n	800c2a2 <USB_ActivateEndpoint+0x72a>
 800c144:	ffff8000 	.word	0xffff8000
 800c148:	ffff8f8f 	.word	0xffff8f8f
 800c14c:	ffffc080 	.word	0xffffc080
 800c150:	ffffbf8f 	.word	0xffffbf8f
 800c154:	ffff8080 	.word	0xffff8080
 800c158:	ffff8180 	.word	0xffff8180
 800c15c:	ffff8e8f 	.word	0xffff8e8f
 800c160:	00000404 	.word	0x00000404
 800c164:	ffff80c0 	.word	0xffff80c0
 800c168:	ffff8fbf 	.word	0xffff8fbf
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c16c:	687a      	ldr	r2, [r7, #4]
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	781b      	ldrb	r3, [r3, #0]
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	18d2      	adds	r2, r2, r3
 800c176:	214e      	movs	r1, #78	@ 0x4e
 800c178:	187b      	adds	r3, r7, r1
 800c17a:	8812      	ldrh	r2, [r2, #0]
 800c17c:	801a      	strh	r2, [r3, #0]
 800c17e:	187b      	adds	r3, r7, r1
 800c180:	881a      	ldrh	r2, [r3, #0]
 800c182:	2380      	movs	r3, #128	@ 0x80
 800c184:	01db      	lsls	r3, r3, #7
 800c186:	4013      	ands	r3, r2
 800c188:	d016      	beq.n	800c1b8 <USB_ActivateEndpoint+0x640>
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	683b      	ldr	r3, [r7, #0]
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	009b      	lsls	r3, r3, #2
 800c192:	18d3      	adds	r3, r2, r3
 800c194:	881b      	ldrh	r3, [r3, #0]
 800c196:	b29a      	uxth	r2, r3
 800c198:	204c      	movs	r0, #76	@ 0x4c
 800c19a:	183b      	adds	r3, r7, r0
 800c19c:	4944      	ldr	r1, [pc, #272]	@ (800c2b0 <USB_ActivateEndpoint+0x738>)
 800c19e:	400a      	ands	r2, r1
 800c1a0:	801a      	strh	r2, [r3, #0]
 800c1a2:	687a      	ldr	r2, [r7, #4]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	009b      	lsls	r3, r3, #2
 800c1aa:	18d3      	adds	r3, r2, r3
 800c1ac:	183a      	adds	r2, r7, r0
 800c1ae:	8812      	ldrh	r2, [r2, #0]
 800c1b0:	4940      	ldr	r1, [pc, #256]	@ (800c2b4 <USB_ActivateEndpoint+0x73c>)
 800c1b2:	430a      	orrs	r2, r1
 800c1b4:	b292      	uxth	r2, r2
 800c1b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c1b8:	687a      	ldr	r2, [r7, #4]
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	009b      	lsls	r3, r3, #2
 800c1c0:	18d2      	adds	r2, r2, r3
 800c1c2:	214a      	movs	r1, #74	@ 0x4a
 800c1c4:	187b      	adds	r3, r7, r1
 800c1c6:	8812      	ldrh	r2, [r2, #0]
 800c1c8:	801a      	strh	r2, [r3, #0]
 800c1ca:	187b      	adds	r3, r7, r1
 800c1cc:	881b      	ldrh	r3, [r3, #0]
 800c1ce:	2240      	movs	r2, #64	@ 0x40
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	d016      	beq.n	800c202 <USB_ActivateEndpoint+0x68a>
 800c1d4:	687a      	ldr	r2, [r7, #4]
 800c1d6:	683b      	ldr	r3, [r7, #0]
 800c1d8:	781b      	ldrb	r3, [r3, #0]
 800c1da:	009b      	lsls	r3, r3, #2
 800c1dc:	18d3      	adds	r3, r2, r3
 800c1de:	881b      	ldrh	r3, [r3, #0]
 800c1e0:	b29a      	uxth	r2, r3
 800c1e2:	2048      	movs	r0, #72	@ 0x48
 800c1e4:	183b      	adds	r3, r7, r0
 800c1e6:	4932      	ldr	r1, [pc, #200]	@ (800c2b0 <USB_ActivateEndpoint+0x738>)
 800c1e8:	400a      	ands	r2, r1
 800c1ea:	801a      	strh	r2, [r3, #0]
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	683b      	ldr	r3, [r7, #0]
 800c1f0:	781b      	ldrb	r3, [r3, #0]
 800c1f2:	009b      	lsls	r3, r3, #2
 800c1f4:	18d3      	adds	r3, r2, r3
 800c1f6:	183a      	adds	r2, r7, r0
 800c1f8:	8812      	ldrh	r2, [r2, #0]
 800c1fa:	492f      	ldr	r1, [pc, #188]	@ (800c2b8 <USB_ActivateEndpoint+0x740>)
 800c1fc:	430a      	orrs	r2, r1
 800c1fe:	b292      	uxth	r2, r2
 800c200:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	78db      	ldrb	r3, [r3, #3]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d01d      	beq.n	800c246 <USB_ActivateEndpoint+0x6ce>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c20a:	687a      	ldr	r2, [r7, #4]
 800c20c:	683b      	ldr	r3, [r7, #0]
 800c20e:	781b      	ldrb	r3, [r3, #0]
 800c210:	009b      	lsls	r3, r3, #2
 800c212:	18d3      	adds	r3, r2, r3
 800c214:	881b      	ldrh	r3, [r3, #0]
 800c216:	b29a      	uxth	r2, r3
 800c218:	2044      	movs	r0, #68	@ 0x44
 800c21a:	183b      	adds	r3, r7, r0
 800c21c:	4927      	ldr	r1, [pc, #156]	@ (800c2bc <USB_ActivateEndpoint+0x744>)
 800c21e:	400a      	ands	r2, r1
 800c220:	801a      	strh	r2, [r3, #0]
 800c222:	183b      	adds	r3, r7, r0
 800c224:	183a      	adds	r2, r7, r0
 800c226:	8812      	ldrh	r2, [r2, #0]
 800c228:	2120      	movs	r1, #32
 800c22a:	404a      	eors	r2, r1
 800c22c:	801a      	strh	r2, [r3, #0]
 800c22e:	687a      	ldr	r2, [r7, #4]
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	781b      	ldrb	r3, [r3, #0]
 800c234:	009b      	lsls	r3, r3, #2
 800c236:	18d3      	adds	r3, r2, r3
 800c238:	183a      	adds	r2, r7, r0
 800c23a:	8812      	ldrh	r2, [r2, #0]
 800c23c:	4920      	ldr	r1, [pc, #128]	@ (800c2c0 <USB_ActivateEndpoint+0x748>)
 800c23e:	430a      	orrs	r2, r1
 800c240:	b292      	uxth	r2, r2
 800c242:	801a      	strh	r2, [r3, #0]
 800c244:	e016      	b.n	800c274 <USB_ActivateEndpoint+0x6fc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	683b      	ldr	r3, [r7, #0]
 800c24a:	781b      	ldrb	r3, [r3, #0]
 800c24c:	009b      	lsls	r3, r3, #2
 800c24e:	18d3      	adds	r3, r2, r3
 800c250:	881b      	ldrh	r3, [r3, #0]
 800c252:	b29a      	uxth	r2, r3
 800c254:	2046      	movs	r0, #70	@ 0x46
 800c256:	183b      	adds	r3, r7, r0
 800c258:	4918      	ldr	r1, [pc, #96]	@ (800c2bc <USB_ActivateEndpoint+0x744>)
 800c25a:	400a      	ands	r2, r1
 800c25c:	801a      	strh	r2, [r3, #0]
 800c25e:	687a      	ldr	r2, [r7, #4]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	009b      	lsls	r3, r3, #2
 800c266:	18d3      	adds	r3, r2, r3
 800c268:	183a      	adds	r2, r7, r0
 800c26a:	8812      	ldrh	r2, [r2, #0]
 800c26c:	4914      	ldr	r1, [pc, #80]	@ (800c2c0 <USB_ActivateEndpoint+0x748>)
 800c26e:	430a      	orrs	r2, r1
 800c270:	b292      	uxth	r2, r2
 800c272:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c274:	687a      	ldr	r2, [r7, #4]
 800c276:	683b      	ldr	r3, [r7, #0]
 800c278:	781b      	ldrb	r3, [r3, #0]
 800c27a:	009b      	lsls	r3, r3, #2
 800c27c:	18d3      	adds	r3, r2, r3
 800c27e:	881b      	ldrh	r3, [r3, #0]
 800c280:	b29a      	uxth	r2, r3
 800c282:	2042      	movs	r0, #66	@ 0x42
 800c284:	183b      	adds	r3, r7, r0
 800c286:	490f      	ldr	r1, [pc, #60]	@ (800c2c4 <USB_ActivateEndpoint+0x74c>)
 800c288:	400a      	ands	r2, r1
 800c28a:	801a      	strh	r2, [r3, #0]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	781b      	ldrb	r3, [r3, #0]
 800c292:	009b      	lsls	r3, r3, #2
 800c294:	18d3      	adds	r3, r2, r3
 800c296:	183a      	adds	r2, r7, r0
 800c298:	8812      	ldrh	r2, [r2, #0]
 800c29a:	4909      	ldr	r1, [pc, #36]	@ (800c2c0 <USB_ActivateEndpoint+0x748>)
 800c29c:	430a      	orrs	r2, r1
 800c29e:	b292      	uxth	r2, r2
 800c2a0:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800c2a2:	236f      	movs	r3, #111	@ 0x6f
 800c2a4:	18fb      	adds	r3, r7, r3
 800c2a6:	781b      	ldrb	r3, [r3, #0]
}
 800c2a8:	0018      	movs	r0, r3
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	b01c      	add	sp, #112	@ 0x70
 800c2ae:	bd80      	pop	{r7, pc}
 800c2b0:	ffff8f8f 	.word	0xffff8f8f
 800c2b4:	ffffc080 	.word	0xffffc080
 800c2b8:	ffff80c0 	.word	0xffff80c0
 800c2bc:	ffff8fbf 	.word	0xffff8fbf
 800c2c0:	ffff8080 	.word	0xffff8080
 800c2c4:	ffffbf8f 	.word	0xffffbf8f

0800c2c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b08c      	sub	sp, #48	@ 0x30
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]
 800c2d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c2d2:	683b      	ldr	r3, [r7, #0]
 800c2d4:	7b1b      	ldrb	r3, [r3, #12]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d000      	beq.n	800c2dc <USB_DeactivateEndpoint+0x14>
 800c2da:	e07e      	b.n	800c3da <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800c2dc:	683b      	ldr	r3, [r7, #0]
 800c2de:	785b      	ldrb	r3, [r3, #1]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d03c      	beq.n	800c35e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	781b      	ldrb	r3, [r3, #0]
 800c2ea:	009b      	lsls	r3, r3, #2
 800c2ec:	18d2      	adds	r2, r2, r3
 800c2ee:	210c      	movs	r1, #12
 800c2f0:	187b      	adds	r3, r7, r1
 800c2f2:	8812      	ldrh	r2, [r2, #0]
 800c2f4:	801a      	strh	r2, [r3, #0]
 800c2f6:	187b      	adds	r3, r7, r1
 800c2f8:	881b      	ldrh	r3, [r3, #0]
 800c2fa:	2240      	movs	r2, #64	@ 0x40
 800c2fc:	4013      	ands	r3, r2
 800c2fe:	d016      	beq.n	800c32e <USB_DeactivateEndpoint+0x66>
 800c300:	687a      	ldr	r2, [r7, #4]
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	781b      	ldrb	r3, [r3, #0]
 800c306:	009b      	lsls	r3, r3, #2
 800c308:	18d3      	adds	r3, r2, r3
 800c30a:	881b      	ldrh	r3, [r3, #0]
 800c30c:	b29a      	uxth	r2, r3
 800c30e:	200a      	movs	r0, #10
 800c310:	183b      	adds	r3, r7, r0
 800c312:	49c7      	ldr	r1, [pc, #796]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c314:	400a      	ands	r2, r1
 800c316:	801a      	strh	r2, [r3, #0]
 800c318:	687a      	ldr	r2, [r7, #4]
 800c31a:	683b      	ldr	r3, [r7, #0]
 800c31c:	781b      	ldrb	r3, [r3, #0]
 800c31e:	009b      	lsls	r3, r3, #2
 800c320:	18d3      	adds	r3, r2, r3
 800c322:	183a      	adds	r2, r7, r0
 800c324:	8812      	ldrh	r2, [r2, #0]
 800c326:	49c3      	ldr	r1, [pc, #780]	@ (800c634 <USB_DeactivateEndpoint+0x36c>)
 800c328:	430a      	orrs	r2, r1
 800c32a:	b292      	uxth	r2, r2
 800c32c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	781b      	ldrb	r3, [r3, #0]
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	18d3      	adds	r3, r2, r3
 800c338:	881b      	ldrh	r3, [r3, #0]
 800c33a:	b29a      	uxth	r2, r3
 800c33c:	2008      	movs	r0, #8
 800c33e:	183b      	adds	r3, r7, r0
 800c340:	49bd      	ldr	r1, [pc, #756]	@ (800c638 <USB_DeactivateEndpoint+0x370>)
 800c342:	400a      	ands	r2, r1
 800c344:	801a      	strh	r2, [r3, #0]
 800c346:	687a      	ldr	r2, [r7, #4]
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	781b      	ldrb	r3, [r3, #0]
 800c34c:	009b      	lsls	r3, r3, #2
 800c34e:	18d3      	adds	r3, r2, r3
 800c350:	183a      	adds	r2, r7, r0
 800c352:	8812      	ldrh	r2, [r2, #0]
 800c354:	49b9      	ldr	r1, [pc, #740]	@ (800c63c <USB_DeactivateEndpoint+0x374>)
 800c356:	430a      	orrs	r2, r1
 800c358:	b292      	uxth	r2, r2
 800c35a:	801a      	strh	r2, [r3, #0]
 800c35c:	e163      	b.n	800c626 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c35e:	687a      	ldr	r2, [r7, #4]
 800c360:	683b      	ldr	r3, [r7, #0]
 800c362:	781b      	ldrb	r3, [r3, #0]
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	18d2      	adds	r2, r2, r3
 800c368:	2112      	movs	r1, #18
 800c36a:	187b      	adds	r3, r7, r1
 800c36c:	8812      	ldrh	r2, [r2, #0]
 800c36e:	801a      	strh	r2, [r3, #0]
 800c370:	187b      	adds	r3, r7, r1
 800c372:	881a      	ldrh	r2, [r3, #0]
 800c374:	2380      	movs	r3, #128	@ 0x80
 800c376:	01db      	lsls	r3, r3, #7
 800c378:	4013      	ands	r3, r2
 800c37a:	d016      	beq.n	800c3aa <USB_DeactivateEndpoint+0xe2>
 800c37c:	687a      	ldr	r2, [r7, #4]
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	781b      	ldrb	r3, [r3, #0]
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	18d3      	adds	r3, r2, r3
 800c386:	881b      	ldrh	r3, [r3, #0]
 800c388:	b29a      	uxth	r2, r3
 800c38a:	2010      	movs	r0, #16
 800c38c:	183b      	adds	r3, r7, r0
 800c38e:	49a8      	ldr	r1, [pc, #672]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c390:	400a      	ands	r2, r1
 800c392:	801a      	strh	r2, [r3, #0]
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	781b      	ldrb	r3, [r3, #0]
 800c39a:	009b      	lsls	r3, r3, #2
 800c39c:	18d3      	adds	r3, r2, r3
 800c39e:	183a      	adds	r2, r7, r0
 800c3a0:	8812      	ldrh	r2, [r2, #0]
 800c3a2:	49a7      	ldr	r1, [pc, #668]	@ (800c640 <USB_DeactivateEndpoint+0x378>)
 800c3a4:	430a      	orrs	r2, r1
 800c3a6:	b292      	uxth	r2, r2
 800c3a8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c3aa:	687a      	ldr	r2, [r7, #4]
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	781b      	ldrb	r3, [r3, #0]
 800c3b0:	009b      	lsls	r3, r3, #2
 800c3b2:	18d3      	adds	r3, r2, r3
 800c3b4:	881b      	ldrh	r3, [r3, #0]
 800c3b6:	b29a      	uxth	r2, r3
 800c3b8:	200e      	movs	r0, #14
 800c3ba:	183b      	adds	r3, r7, r0
 800c3bc:	49a1      	ldr	r1, [pc, #644]	@ (800c644 <USB_DeactivateEndpoint+0x37c>)
 800c3be:	400a      	ands	r2, r1
 800c3c0:	801a      	strh	r2, [r3, #0]
 800c3c2:	687a      	ldr	r2, [r7, #4]
 800c3c4:	683b      	ldr	r3, [r7, #0]
 800c3c6:	781b      	ldrb	r3, [r3, #0]
 800c3c8:	009b      	lsls	r3, r3, #2
 800c3ca:	18d3      	adds	r3, r2, r3
 800c3cc:	183a      	adds	r2, r7, r0
 800c3ce:	8812      	ldrh	r2, [r2, #0]
 800c3d0:	499a      	ldr	r1, [pc, #616]	@ (800c63c <USB_DeactivateEndpoint+0x374>)
 800c3d2:	430a      	orrs	r2, r1
 800c3d4:	b292      	uxth	r2, r2
 800c3d6:	801a      	strh	r2, [r3, #0]
 800c3d8:	e125      	b.n	800c626 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	785b      	ldrb	r3, [r3, #1]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d000      	beq.n	800c3e4 <USB_DeactivateEndpoint+0x11c>
 800c3e2:	e090      	b.n	800c506 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	683b      	ldr	r3, [r7, #0]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	18d2      	adds	r2, r2, r3
 800c3ee:	2120      	movs	r1, #32
 800c3f0:	187b      	adds	r3, r7, r1
 800c3f2:	8812      	ldrh	r2, [r2, #0]
 800c3f4:	801a      	strh	r2, [r3, #0]
 800c3f6:	187b      	adds	r3, r7, r1
 800c3f8:	881a      	ldrh	r2, [r3, #0]
 800c3fa:	2380      	movs	r3, #128	@ 0x80
 800c3fc:	01db      	lsls	r3, r3, #7
 800c3fe:	4013      	ands	r3, r2
 800c400:	d016      	beq.n	800c430 <USB_DeactivateEndpoint+0x168>
 800c402:	687a      	ldr	r2, [r7, #4]
 800c404:	683b      	ldr	r3, [r7, #0]
 800c406:	781b      	ldrb	r3, [r3, #0]
 800c408:	009b      	lsls	r3, r3, #2
 800c40a:	18d3      	adds	r3, r2, r3
 800c40c:	881b      	ldrh	r3, [r3, #0]
 800c40e:	b29a      	uxth	r2, r3
 800c410:	201e      	movs	r0, #30
 800c412:	183b      	adds	r3, r7, r0
 800c414:	4986      	ldr	r1, [pc, #536]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c416:	400a      	ands	r2, r1
 800c418:	801a      	strh	r2, [r3, #0]
 800c41a:	687a      	ldr	r2, [r7, #4]
 800c41c:	683b      	ldr	r3, [r7, #0]
 800c41e:	781b      	ldrb	r3, [r3, #0]
 800c420:	009b      	lsls	r3, r3, #2
 800c422:	18d3      	adds	r3, r2, r3
 800c424:	183a      	adds	r2, r7, r0
 800c426:	8812      	ldrh	r2, [r2, #0]
 800c428:	4985      	ldr	r1, [pc, #532]	@ (800c640 <USB_DeactivateEndpoint+0x378>)
 800c42a:	430a      	orrs	r2, r1
 800c42c:	b292      	uxth	r2, r2
 800c42e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	18d2      	adds	r2, r2, r3
 800c43a:	211c      	movs	r1, #28
 800c43c:	187b      	adds	r3, r7, r1
 800c43e:	8812      	ldrh	r2, [r2, #0]
 800c440:	801a      	strh	r2, [r3, #0]
 800c442:	187b      	adds	r3, r7, r1
 800c444:	881b      	ldrh	r3, [r3, #0]
 800c446:	2240      	movs	r2, #64	@ 0x40
 800c448:	4013      	ands	r3, r2
 800c44a:	d016      	beq.n	800c47a <USB_DeactivateEndpoint+0x1b2>
 800c44c:	687a      	ldr	r2, [r7, #4]
 800c44e:	683b      	ldr	r3, [r7, #0]
 800c450:	781b      	ldrb	r3, [r3, #0]
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	18d3      	adds	r3, r2, r3
 800c456:	881b      	ldrh	r3, [r3, #0]
 800c458:	b29a      	uxth	r2, r3
 800c45a:	201a      	movs	r0, #26
 800c45c:	183b      	adds	r3, r7, r0
 800c45e:	4974      	ldr	r1, [pc, #464]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c460:	400a      	ands	r2, r1
 800c462:	801a      	strh	r2, [r3, #0]
 800c464:	687a      	ldr	r2, [r7, #4]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	781b      	ldrb	r3, [r3, #0]
 800c46a:	009b      	lsls	r3, r3, #2
 800c46c:	18d3      	adds	r3, r2, r3
 800c46e:	183a      	adds	r2, r7, r0
 800c470:	8812      	ldrh	r2, [r2, #0]
 800c472:	4970      	ldr	r1, [pc, #448]	@ (800c634 <USB_DeactivateEndpoint+0x36c>)
 800c474:	430a      	orrs	r2, r1
 800c476:	b292      	uxth	r2, r2
 800c478:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800c47a:	687a      	ldr	r2, [r7, #4]
 800c47c:	683b      	ldr	r3, [r7, #0]
 800c47e:	781b      	ldrb	r3, [r3, #0]
 800c480:	009b      	lsls	r3, r3, #2
 800c482:	18d3      	adds	r3, r2, r3
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	b29a      	uxth	r2, r3
 800c488:	2018      	movs	r0, #24
 800c48a:	183b      	adds	r3, r7, r0
 800c48c:	4968      	ldr	r1, [pc, #416]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c48e:	400a      	ands	r2, r1
 800c490:	801a      	strh	r2, [r3, #0]
 800c492:	687a      	ldr	r2, [r7, #4]
 800c494:	683b      	ldr	r3, [r7, #0]
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	18d3      	adds	r3, r2, r3
 800c49c:	183a      	adds	r2, r7, r0
 800c49e:	8812      	ldrh	r2, [r2, #0]
 800c4a0:	4964      	ldr	r1, [pc, #400]	@ (800c634 <USB_DeactivateEndpoint+0x36c>)
 800c4a2:	430a      	orrs	r2, r1
 800c4a4:	b292      	uxth	r2, r2
 800c4a6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c4a8:	687a      	ldr	r2, [r7, #4]
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	781b      	ldrb	r3, [r3, #0]
 800c4ae:	009b      	lsls	r3, r3, #2
 800c4b0:	18d3      	adds	r3, r2, r3
 800c4b2:	881b      	ldrh	r3, [r3, #0]
 800c4b4:	b29a      	uxth	r2, r3
 800c4b6:	2016      	movs	r0, #22
 800c4b8:	183b      	adds	r3, r7, r0
 800c4ba:	4962      	ldr	r1, [pc, #392]	@ (800c644 <USB_DeactivateEndpoint+0x37c>)
 800c4bc:	400a      	ands	r2, r1
 800c4be:	801a      	strh	r2, [r3, #0]
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	781b      	ldrb	r3, [r3, #0]
 800c4c6:	009b      	lsls	r3, r3, #2
 800c4c8:	18d3      	adds	r3, r2, r3
 800c4ca:	183a      	adds	r2, r7, r0
 800c4cc:	8812      	ldrh	r2, [r2, #0]
 800c4ce:	495b      	ldr	r1, [pc, #364]	@ (800c63c <USB_DeactivateEndpoint+0x374>)
 800c4d0:	430a      	orrs	r2, r1
 800c4d2:	b292      	uxth	r2, r2
 800c4d4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	683b      	ldr	r3, [r7, #0]
 800c4da:	781b      	ldrb	r3, [r3, #0]
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	18d3      	adds	r3, r2, r3
 800c4e0:	881b      	ldrh	r3, [r3, #0]
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	2014      	movs	r0, #20
 800c4e6:	183b      	adds	r3, r7, r0
 800c4e8:	4953      	ldr	r1, [pc, #332]	@ (800c638 <USB_DeactivateEndpoint+0x370>)
 800c4ea:	400a      	ands	r2, r1
 800c4ec:	801a      	strh	r2, [r3, #0]
 800c4ee:	687a      	ldr	r2, [r7, #4]
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	009b      	lsls	r3, r3, #2
 800c4f6:	18d3      	adds	r3, r2, r3
 800c4f8:	183a      	adds	r2, r7, r0
 800c4fa:	8812      	ldrh	r2, [r2, #0]
 800c4fc:	494f      	ldr	r1, [pc, #316]	@ (800c63c <USB_DeactivateEndpoint+0x374>)
 800c4fe:	430a      	orrs	r2, r1
 800c500:	b292      	uxth	r2, r2
 800c502:	801a      	strh	r2, [r3, #0]
 800c504:	e08f      	b.n	800c626 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c506:	687a      	ldr	r2, [r7, #4]
 800c508:	683b      	ldr	r3, [r7, #0]
 800c50a:	781b      	ldrb	r3, [r3, #0]
 800c50c:	009b      	lsls	r3, r3, #2
 800c50e:	18d2      	adds	r2, r2, r3
 800c510:	212e      	movs	r1, #46	@ 0x2e
 800c512:	187b      	adds	r3, r7, r1
 800c514:	8812      	ldrh	r2, [r2, #0]
 800c516:	801a      	strh	r2, [r3, #0]
 800c518:	187b      	adds	r3, r7, r1
 800c51a:	881a      	ldrh	r2, [r3, #0]
 800c51c:	2380      	movs	r3, #128	@ 0x80
 800c51e:	01db      	lsls	r3, r3, #7
 800c520:	4013      	ands	r3, r2
 800c522:	d016      	beq.n	800c552 <USB_DeactivateEndpoint+0x28a>
 800c524:	687a      	ldr	r2, [r7, #4]
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	781b      	ldrb	r3, [r3, #0]
 800c52a:	009b      	lsls	r3, r3, #2
 800c52c:	18d3      	adds	r3, r2, r3
 800c52e:	881b      	ldrh	r3, [r3, #0]
 800c530:	b29a      	uxth	r2, r3
 800c532:	202c      	movs	r0, #44	@ 0x2c
 800c534:	183b      	adds	r3, r7, r0
 800c536:	493e      	ldr	r1, [pc, #248]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c538:	400a      	ands	r2, r1
 800c53a:	801a      	strh	r2, [r3, #0]
 800c53c:	687a      	ldr	r2, [r7, #4]
 800c53e:	683b      	ldr	r3, [r7, #0]
 800c540:	781b      	ldrb	r3, [r3, #0]
 800c542:	009b      	lsls	r3, r3, #2
 800c544:	18d3      	adds	r3, r2, r3
 800c546:	183a      	adds	r2, r7, r0
 800c548:	8812      	ldrh	r2, [r2, #0]
 800c54a:	493d      	ldr	r1, [pc, #244]	@ (800c640 <USB_DeactivateEndpoint+0x378>)
 800c54c:	430a      	orrs	r2, r1
 800c54e:	b292      	uxth	r2, r2
 800c550:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c552:	687a      	ldr	r2, [r7, #4]
 800c554:	683b      	ldr	r3, [r7, #0]
 800c556:	781b      	ldrb	r3, [r3, #0]
 800c558:	009b      	lsls	r3, r3, #2
 800c55a:	18d2      	adds	r2, r2, r3
 800c55c:	212a      	movs	r1, #42	@ 0x2a
 800c55e:	187b      	adds	r3, r7, r1
 800c560:	8812      	ldrh	r2, [r2, #0]
 800c562:	801a      	strh	r2, [r3, #0]
 800c564:	187b      	adds	r3, r7, r1
 800c566:	881b      	ldrh	r3, [r3, #0]
 800c568:	2240      	movs	r2, #64	@ 0x40
 800c56a:	4013      	ands	r3, r2
 800c56c:	d016      	beq.n	800c59c <USB_DeactivateEndpoint+0x2d4>
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	683b      	ldr	r3, [r7, #0]
 800c572:	781b      	ldrb	r3, [r3, #0]
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	18d3      	adds	r3, r2, r3
 800c578:	881b      	ldrh	r3, [r3, #0]
 800c57a:	b29a      	uxth	r2, r3
 800c57c:	2028      	movs	r0, #40	@ 0x28
 800c57e:	183b      	adds	r3, r7, r0
 800c580:	492b      	ldr	r1, [pc, #172]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c582:	400a      	ands	r2, r1
 800c584:	801a      	strh	r2, [r3, #0]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	683b      	ldr	r3, [r7, #0]
 800c58a:	781b      	ldrb	r3, [r3, #0]
 800c58c:	009b      	lsls	r3, r3, #2
 800c58e:	18d3      	adds	r3, r2, r3
 800c590:	183a      	adds	r2, r7, r0
 800c592:	8812      	ldrh	r2, [r2, #0]
 800c594:	4927      	ldr	r1, [pc, #156]	@ (800c634 <USB_DeactivateEndpoint+0x36c>)
 800c596:	430a      	orrs	r2, r1
 800c598:	b292      	uxth	r2, r2
 800c59a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	009b      	lsls	r3, r3, #2
 800c5a4:	18d3      	adds	r3, r2, r3
 800c5a6:	881b      	ldrh	r3, [r3, #0]
 800c5a8:	b29a      	uxth	r2, r3
 800c5aa:	2026      	movs	r0, #38	@ 0x26
 800c5ac:	183b      	adds	r3, r7, r0
 800c5ae:	4920      	ldr	r1, [pc, #128]	@ (800c630 <USB_DeactivateEndpoint+0x368>)
 800c5b0:	400a      	ands	r2, r1
 800c5b2:	801a      	strh	r2, [r3, #0]
 800c5b4:	687a      	ldr	r2, [r7, #4]
 800c5b6:	683b      	ldr	r3, [r7, #0]
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	18d3      	adds	r3, r2, r3
 800c5be:	183a      	adds	r2, r7, r0
 800c5c0:	8812      	ldrh	r2, [r2, #0]
 800c5c2:	491f      	ldr	r1, [pc, #124]	@ (800c640 <USB_DeactivateEndpoint+0x378>)
 800c5c4:	430a      	orrs	r2, r1
 800c5c6:	b292      	uxth	r2, r2
 800c5c8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	009b      	lsls	r3, r3, #2
 800c5d2:	18d3      	adds	r3, r2, r3
 800c5d4:	881b      	ldrh	r3, [r3, #0]
 800c5d6:	b29a      	uxth	r2, r3
 800c5d8:	2024      	movs	r0, #36	@ 0x24
 800c5da:	183b      	adds	r3, r7, r0
 800c5dc:	4916      	ldr	r1, [pc, #88]	@ (800c638 <USB_DeactivateEndpoint+0x370>)
 800c5de:	400a      	ands	r2, r1
 800c5e0:	801a      	strh	r2, [r3, #0]
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	781b      	ldrb	r3, [r3, #0]
 800c5e8:	009b      	lsls	r3, r3, #2
 800c5ea:	18d3      	adds	r3, r2, r3
 800c5ec:	183a      	adds	r2, r7, r0
 800c5ee:	8812      	ldrh	r2, [r2, #0]
 800c5f0:	4912      	ldr	r1, [pc, #72]	@ (800c63c <USB_DeactivateEndpoint+0x374>)
 800c5f2:	430a      	orrs	r2, r1
 800c5f4:	b292      	uxth	r2, r2
 800c5f6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800c5f8:	687a      	ldr	r2, [r7, #4]
 800c5fa:	683b      	ldr	r3, [r7, #0]
 800c5fc:	781b      	ldrb	r3, [r3, #0]
 800c5fe:	009b      	lsls	r3, r3, #2
 800c600:	18d3      	adds	r3, r2, r3
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	b29a      	uxth	r2, r3
 800c606:	2022      	movs	r0, #34	@ 0x22
 800c608:	183b      	adds	r3, r7, r0
 800c60a:	490e      	ldr	r1, [pc, #56]	@ (800c644 <USB_DeactivateEndpoint+0x37c>)
 800c60c:	400a      	ands	r2, r1
 800c60e:	801a      	strh	r2, [r3, #0]
 800c610:	687a      	ldr	r2, [r7, #4]
 800c612:	683b      	ldr	r3, [r7, #0]
 800c614:	781b      	ldrb	r3, [r3, #0]
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	18d3      	adds	r3, r2, r3
 800c61a:	183a      	adds	r2, r7, r0
 800c61c:	8812      	ldrh	r2, [r2, #0]
 800c61e:	4907      	ldr	r1, [pc, #28]	@ (800c63c <USB_DeactivateEndpoint+0x374>)
 800c620:	430a      	orrs	r2, r1
 800c622:	b292      	uxth	r2, r2
 800c624:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800c626:	2300      	movs	r3, #0
}
 800c628:	0018      	movs	r0, r3
 800c62a:	46bd      	mov	sp, r7
 800c62c:	b00c      	add	sp, #48	@ 0x30
 800c62e:	bd80      	pop	{r7, pc}
 800c630:	ffff8f8f 	.word	0xffff8f8f
 800c634:	ffff80c0 	.word	0xffff80c0
 800c638:	ffff8fbf 	.word	0xffff8fbf
 800c63c:	ffff8080 	.word	0xffff8080
 800c640:	ffffc080 	.word	0xffffc080
 800c644:	ffffbf8f 	.word	0xffffbf8f

0800c648 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c648:	b590      	push	{r4, r7, lr}
 800c64a:	b0c3      	sub	sp, #268	@ 0x10c
 800c64c:	af00      	add	r7, sp, #0
 800c64e:	6078      	str	r0, [r7, #4]
 800c650:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	785b      	ldrb	r3, [r3, #1]
 800c656:	2b01      	cmp	r3, #1
 800c658:	d001      	beq.n	800c65e <USB_EPStartXfer+0x16>
 800c65a:	f000 fd2d 	bl	800d0b8 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	699a      	ldr	r2, [r3, #24]
 800c662:	683b      	ldr	r3, [r7, #0]
 800c664:	691b      	ldr	r3, [r3, #16]
 800c666:	429a      	cmp	r2, r3
 800c668:	d905      	bls.n	800c676 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	691b      	ldr	r3, [r3, #16]
 800c66e:	1d7a      	adds	r2, r7, #5
 800c670:	32ff      	adds	r2, #255	@ 0xff
 800c672:	6013      	str	r3, [r2, #0]
 800c674:	e004      	b.n	800c680 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	699b      	ldr	r3, [r3, #24]
 800c67a:	1d7a      	adds	r2, r7, #5
 800c67c:	32ff      	adds	r2, #255	@ 0xff
 800c67e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	7b1b      	ldrb	r3, [r3, #12]
 800c684:	2b00      	cmp	r3, #0
 800c686:	d125      	bne.n	800c6d4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	6959      	ldr	r1, [r3, #20]
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	88da      	ldrh	r2, [r3, #6]
 800c690:	1d7b      	adds	r3, r7, #5
 800c692:	33ff      	adds	r3, #255	@ 0xff
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	b29b      	uxth	r3, r3
 800c698:	6878      	ldr	r0, [r7, #4]
 800c69a:	f001 fa3f 	bl	800db1c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	613b      	str	r3, [r7, #16]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	2250      	movs	r2, #80	@ 0x50
 800c6a6:	5a9b      	ldrh	r3, [r3, r2]
 800c6a8:	b29b      	uxth	r3, r3
 800c6aa:	001a      	movs	r2, r3
 800c6ac:	693b      	ldr	r3, [r7, #16]
 800c6ae:	189b      	adds	r3, r3, r2
 800c6b0:	613b      	str	r3, [r7, #16]
 800c6b2:	683b      	ldr	r3, [r7, #0]
 800c6b4:	781b      	ldrb	r3, [r3, #0]
 800c6b6:	00da      	lsls	r2, r3, #3
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	18d3      	adds	r3, r2, r3
 800c6bc:	4ad7      	ldr	r2, [pc, #860]	@ (800ca1c <USB_EPStartXfer+0x3d4>)
 800c6be:	4694      	mov	ip, r2
 800c6c0:	4463      	add	r3, ip
 800c6c2:	60fb      	str	r3, [r7, #12]
 800c6c4:	1d7b      	adds	r3, r7, #5
 800c6c6:	33ff      	adds	r3, #255	@ 0xff
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	b29a      	uxth	r2, r3
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	801a      	strh	r2, [r3, #0]
 800c6d0:	f000 fccd 	bl	800d06e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	78db      	ldrb	r3, [r3, #3]
 800c6d8:	2b02      	cmp	r3, #2
 800c6da:	d000      	beq.n	800c6de <USB_EPStartXfer+0x96>
 800c6dc:	e362      	b.n	800cda4 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800c6de:	683b      	ldr	r3, [r7, #0]
 800c6e0:	6a1a      	ldr	r2, [r3, #32]
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	691b      	ldr	r3, [r3, #16]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d800      	bhi.n	800c6ec <USB_EPStartXfer+0xa4>
 800c6ea:	e309      	b.n	800cd00 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800c6ec:	687a      	ldr	r2, [r7, #4]
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	781b      	ldrb	r3, [r3, #0]
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	18d3      	adds	r3, r2, r3
 800c6f6:	881b      	ldrh	r3, [r3, #0]
 800c6f8:	b29a      	uxth	r2, r3
 800c6fa:	2056      	movs	r0, #86	@ 0x56
 800c6fc:	183b      	adds	r3, r7, r0
 800c6fe:	49c8      	ldr	r1, [pc, #800]	@ (800ca20 <USB_EPStartXfer+0x3d8>)
 800c700:	400a      	ands	r2, r1
 800c702:	801a      	strh	r2, [r3, #0]
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	683b      	ldr	r3, [r7, #0]
 800c708:	781b      	ldrb	r3, [r3, #0]
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	18d3      	adds	r3, r2, r3
 800c70e:	183a      	adds	r2, r7, r0
 800c710:	8812      	ldrh	r2, [r2, #0]
 800c712:	49c4      	ldr	r1, [pc, #784]	@ (800ca24 <USB_EPStartXfer+0x3dc>)
 800c714:	430a      	orrs	r2, r1
 800c716:	b292      	uxth	r2, r2
 800c718:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	6a1a      	ldr	r2, [r3, #32]
 800c71e:	1d7b      	adds	r3, r7, #5
 800c720:	33ff      	adds	r3, #255	@ 0xff
 800c722:	681b      	ldr	r3, [r3, #0]
 800c724:	1ad2      	subs	r2, r2, r3
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800c72a:	687a      	ldr	r2, [r7, #4]
 800c72c:	683b      	ldr	r3, [r7, #0]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	009b      	lsls	r3, r3, #2
 800c732:	18d3      	adds	r3, r2, r3
 800c734:	881b      	ldrh	r3, [r3, #0]
 800c736:	b29b      	uxth	r3, r3
 800c738:	001a      	movs	r2, r3
 800c73a:	2340      	movs	r3, #64	@ 0x40
 800c73c:	4013      	ands	r3, r2
 800c73e:	d100      	bne.n	800c742 <USB_EPStartXfer+0xfa>
 800c740:	e176      	b.n	800ca30 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	633b      	str	r3, [r7, #48]	@ 0x30
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	785b      	ldrb	r3, [r3, #1]
 800c74a:	2b00      	cmp	r3, #0
 800c74c:	d000      	beq.n	800c750 <USB_EPStartXfer+0x108>
 800c74e:	e074      	b.n	800c83a <USB_EPStartXfer+0x1f2>
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	2250      	movs	r2, #80	@ 0x50
 800c758:	5a9b      	ldrh	r3, [r3, r2]
 800c75a:	b29b      	uxth	r3, r3
 800c75c:	001a      	movs	r2, r3
 800c75e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c760:	189b      	adds	r3, r3, r2
 800c762:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c764:	683b      	ldr	r3, [r7, #0]
 800c766:	781b      	ldrb	r3, [r3, #0]
 800c768:	00da      	lsls	r2, r3, #3
 800c76a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c76c:	18d3      	adds	r3, r2, r3
 800c76e:	4aae      	ldr	r2, [pc, #696]	@ (800ca28 <USB_EPStartXfer+0x3e0>)
 800c770:	4694      	mov	ip, r2
 800c772:	4463      	add	r3, ip
 800c774:	627b      	str	r3, [r7, #36]	@ 0x24
 800c776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c778:	881b      	ldrh	r3, [r3, #0]
 800c77a:	b29b      	uxth	r3, r3
 800c77c:	059b      	lsls	r3, r3, #22
 800c77e:	0d9b      	lsrs	r3, r3, #22
 800c780:	b29a      	uxth	r2, r3
 800c782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c784:	801a      	strh	r2, [r3, #0]
 800c786:	1d7b      	adds	r3, r7, #5
 800c788:	33ff      	adds	r3, #255	@ 0xff
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d108      	bne.n	800c7a2 <USB_EPStartXfer+0x15a>
 800c790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c792:	881b      	ldrh	r3, [r3, #0]
 800c794:	b29b      	uxth	r3, r3
 800c796:	4aa5      	ldr	r2, [pc, #660]	@ (800ca2c <USB_EPStartXfer+0x3e4>)
 800c798:	4313      	orrs	r3, r2
 800c79a:	b29a      	uxth	r2, r3
 800c79c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c79e:	801a      	strh	r2, [r3, #0]
 800c7a0:	e066      	b.n	800c870 <USB_EPStartXfer+0x228>
 800c7a2:	1d7b      	adds	r3, r7, #5
 800c7a4:	33ff      	adds	r3, #255	@ 0xff
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	2b3e      	cmp	r3, #62	@ 0x3e
 800c7aa:	d821      	bhi.n	800c7f0 <USB_EPStartXfer+0x1a8>
 800c7ac:	1d7b      	adds	r3, r7, #5
 800c7ae:	33ff      	adds	r3, #255	@ 0xff
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	085b      	lsrs	r3, r3, #1
 800c7b4:	1c7a      	adds	r2, r7, #1
 800c7b6:	32ff      	adds	r2, #255	@ 0xff
 800c7b8:	6013      	str	r3, [r2, #0]
 800c7ba:	1d7b      	adds	r3, r7, #5
 800c7bc:	33ff      	adds	r3, #255	@ 0xff
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2201      	movs	r2, #1
 800c7c2:	4013      	ands	r3, r2
 800c7c4:	d006      	beq.n	800c7d4 <USB_EPStartXfer+0x18c>
 800c7c6:	1c7b      	adds	r3, r7, #1
 800c7c8:	33ff      	adds	r3, #255	@ 0xff
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3301      	adds	r3, #1
 800c7ce:	1c7a      	adds	r2, r7, #1
 800c7d0:	32ff      	adds	r2, #255	@ 0xff
 800c7d2:	6013      	str	r3, [r2, #0]
 800c7d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7d6:	881b      	ldrh	r3, [r3, #0]
 800c7d8:	b29a      	uxth	r2, r3
 800c7da:	1c7b      	adds	r3, r7, #1
 800c7dc:	33ff      	adds	r3, #255	@ 0xff
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	029b      	lsls	r3, r3, #10
 800c7e4:	b29b      	uxth	r3, r3
 800c7e6:	4313      	orrs	r3, r2
 800c7e8:	b29a      	uxth	r2, r3
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c7ec:	801a      	strh	r2, [r3, #0]
 800c7ee:	e03f      	b.n	800c870 <USB_EPStartXfer+0x228>
 800c7f0:	1d7b      	adds	r3, r7, #5
 800c7f2:	33ff      	adds	r3, #255	@ 0xff
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	095b      	lsrs	r3, r3, #5
 800c7f8:	1c7a      	adds	r2, r7, #1
 800c7fa:	32ff      	adds	r2, #255	@ 0xff
 800c7fc:	6013      	str	r3, [r2, #0]
 800c7fe:	1d7b      	adds	r3, r7, #5
 800c800:	33ff      	adds	r3, #255	@ 0xff
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	221f      	movs	r2, #31
 800c806:	4013      	ands	r3, r2
 800c808:	d106      	bne.n	800c818 <USB_EPStartXfer+0x1d0>
 800c80a:	1c7b      	adds	r3, r7, #1
 800c80c:	33ff      	adds	r3, #255	@ 0xff
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	3b01      	subs	r3, #1
 800c812:	1c7a      	adds	r2, r7, #1
 800c814:	32ff      	adds	r2, #255	@ 0xff
 800c816:	6013      	str	r3, [r2, #0]
 800c818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	b29a      	uxth	r2, r3
 800c81e:	1c7b      	adds	r3, r7, #1
 800c820:	33ff      	adds	r3, #255	@ 0xff
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	b29b      	uxth	r3, r3
 800c826:	029b      	lsls	r3, r3, #10
 800c828:	b29b      	uxth	r3, r3
 800c82a:	4313      	orrs	r3, r2
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	4a7f      	ldr	r2, [pc, #508]	@ (800ca2c <USB_EPStartXfer+0x3e4>)
 800c830:	4313      	orrs	r3, r2
 800c832:	b29a      	uxth	r2, r3
 800c834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c836:	801a      	strh	r2, [r3, #0]
 800c838:	e01a      	b.n	800c870 <USB_EPStartXfer+0x228>
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	785b      	ldrb	r3, [r3, #1]
 800c83e:	2b01      	cmp	r3, #1
 800c840:	d116      	bne.n	800c870 <USB_EPStartXfer+0x228>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2250      	movs	r2, #80	@ 0x50
 800c846:	5a9b      	ldrh	r3, [r3, r2]
 800c848:	b29b      	uxth	r3, r3
 800c84a:	001a      	movs	r2, r3
 800c84c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c84e:	189b      	adds	r3, r3, r2
 800c850:	633b      	str	r3, [r7, #48]	@ 0x30
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	00da      	lsls	r2, r3, #3
 800c858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c85a:	18d3      	adds	r3, r2, r3
 800c85c:	4a72      	ldr	r2, [pc, #456]	@ (800ca28 <USB_EPStartXfer+0x3e0>)
 800c85e:	4694      	mov	ip, r2
 800c860:	4463      	add	r3, ip
 800c862:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800c864:	1d7b      	adds	r3, r7, #5
 800c866:	33ff      	adds	r3, #255	@ 0xff
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c86e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800c870:	2076      	movs	r0, #118	@ 0x76
 800c872:	183b      	adds	r3, r7, r0
 800c874:	683a      	ldr	r2, [r7, #0]
 800c876:	8952      	ldrh	r2, [r2, #10]
 800c878:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800c87a:	683b      	ldr	r3, [r7, #0]
 800c87c:	6959      	ldr	r1, [r3, #20]
 800c87e:	1d7b      	adds	r3, r7, #5
 800c880:	33ff      	adds	r3, #255	@ 0xff
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	b29c      	uxth	r4, r3
 800c886:	183b      	adds	r3, r7, r0
 800c888:	881a      	ldrh	r2, [r3, #0]
 800c88a:	6878      	ldr	r0, [r7, #4]
 800c88c:	0023      	movs	r3, r4
 800c88e:	f001 f945 	bl	800db1c <USB_WritePMA>
            ep->xfer_buff += len;
 800c892:	683b      	ldr	r3, [r7, #0]
 800c894:	695a      	ldr	r2, [r3, #20]
 800c896:	1d7b      	adds	r3, r7, #5
 800c898:	33ff      	adds	r3, #255	@ 0xff
 800c89a:	681b      	ldr	r3, [r3, #0]
 800c89c:	18d2      	adds	r2, r2, r3
 800c89e:	683b      	ldr	r3, [r7, #0]
 800c8a0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800c8a2:	683b      	ldr	r3, [r7, #0]
 800c8a4:	6a1a      	ldr	r2, [r3, #32]
 800c8a6:	683b      	ldr	r3, [r7, #0]
 800c8a8:	691b      	ldr	r3, [r3, #16]
 800c8aa:	429a      	cmp	r2, r3
 800c8ac:	d908      	bls.n	800c8c0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800c8ae:	683b      	ldr	r3, [r7, #0]
 800c8b0:	6a1a      	ldr	r2, [r3, #32]
 800c8b2:	1d7b      	adds	r3, r7, #5
 800c8b4:	33ff      	adds	r3, #255	@ 0xff
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	1ad2      	subs	r2, r2, r3
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	621a      	str	r2, [r3, #32]
 800c8be:	e007      	b.n	800c8d0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	6a1b      	ldr	r3, [r3, #32]
 800c8c4:	1d7a      	adds	r2, r7, #5
 800c8c6:	32ff      	adds	r2, #255	@ 0xff
 800c8c8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800c8d0:	683b      	ldr	r3, [r7, #0]
 800c8d2:	785b      	ldrb	r3, [r3, #1]
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d000      	beq.n	800c8da <USB_EPStartXfer+0x292>
 800c8d8:	e070      	b.n	800c9bc <USB_EPStartXfer+0x374>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	61bb      	str	r3, [r7, #24]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2250      	movs	r2, #80	@ 0x50
 800c8e2:	5a9b      	ldrh	r3, [r3, r2]
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	001a      	movs	r2, r3
 800c8e8:	69bb      	ldr	r3, [r7, #24]
 800c8ea:	189b      	adds	r3, r3, r2
 800c8ec:	61bb      	str	r3, [r7, #24]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	00da      	lsls	r2, r3, #3
 800c8f4:	69bb      	ldr	r3, [r7, #24]
 800c8f6:	18d3      	adds	r3, r2, r3
 800c8f8:	4a48      	ldr	r2, [pc, #288]	@ (800ca1c <USB_EPStartXfer+0x3d4>)
 800c8fa:	4694      	mov	ip, r2
 800c8fc:	4463      	add	r3, ip
 800c8fe:	617b      	str	r3, [r7, #20]
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	881b      	ldrh	r3, [r3, #0]
 800c904:	b29b      	uxth	r3, r3
 800c906:	059b      	lsls	r3, r3, #22
 800c908:	0d9b      	lsrs	r3, r3, #22
 800c90a:	b29a      	uxth	r2, r3
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	801a      	strh	r2, [r3, #0]
 800c910:	1d7b      	adds	r3, r7, #5
 800c912:	33ff      	adds	r3, #255	@ 0xff
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d108      	bne.n	800c92c <USB_EPStartXfer+0x2e4>
 800c91a:	697b      	ldr	r3, [r7, #20]
 800c91c:	881b      	ldrh	r3, [r3, #0]
 800c91e:	b29b      	uxth	r3, r3
 800c920:	4a42      	ldr	r2, [pc, #264]	@ (800ca2c <USB_EPStartXfer+0x3e4>)
 800c922:	4313      	orrs	r3, r2
 800c924:	b29a      	uxth	r2, r3
 800c926:	697b      	ldr	r3, [r7, #20]
 800c928:	801a      	strh	r2, [r3, #0]
 800c92a:	e064      	b.n	800c9f6 <USB_EPStartXfer+0x3ae>
 800c92c:	1d7b      	adds	r3, r7, #5
 800c92e:	33ff      	adds	r3, #255	@ 0xff
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	2b3e      	cmp	r3, #62	@ 0x3e
 800c934:	d81f      	bhi.n	800c976 <USB_EPStartXfer+0x32e>
 800c936:	1d7b      	adds	r3, r7, #5
 800c938:	33ff      	adds	r3, #255	@ 0xff
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	085b      	lsrs	r3, r3, #1
 800c93e:	21fc      	movs	r1, #252	@ 0xfc
 800c940:	187a      	adds	r2, r7, r1
 800c942:	6013      	str	r3, [r2, #0]
 800c944:	1d7b      	adds	r3, r7, #5
 800c946:	33ff      	adds	r3, #255	@ 0xff
 800c948:	681b      	ldr	r3, [r3, #0]
 800c94a:	2201      	movs	r2, #1
 800c94c:	4013      	ands	r3, r2
 800c94e:	d004      	beq.n	800c95a <USB_EPStartXfer+0x312>
 800c950:	187b      	adds	r3, r7, r1
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	3301      	adds	r3, #1
 800c956:	187a      	adds	r2, r7, r1
 800c958:	6013      	str	r3, [r2, #0]
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	881b      	ldrh	r3, [r3, #0]
 800c95e:	b29a      	uxth	r2, r3
 800c960:	23fc      	movs	r3, #252	@ 0xfc
 800c962:	18fb      	adds	r3, r7, r3
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	b29b      	uxth	r3, r3
 800c968:	029b      	lsls	r3, r3, #10
 800c96a:	b29b      	uxth	r3, r3
 800c96c:	4313      	orrs	r3, r2
 800c96e:	b29a      	uxth	r2, r3
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	801a      	strh	r2, [r3, #0]
 800c974:	e03f      	b.n	800c9f6 <USB_EPStartXfer+0x3ae>
 800c976:	1d7b      	adds	r3, r7, #5
 800c978:	33ff      	adds	r3, #255	@ 0xff
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	095b      	lsrs	r3, r3, #5
 800c97e:	21fc      	movs	r1, #252	@ 0xfc
 800c980:	187a      	adds	r2, r7, r1
 800c982:	6013      	str	r3, [r2, #0]
 800c984:	1d7b      	adds	r3, r7, #5
 800c986:	33ff      	adds	r3, #255	@ 0xff
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	221f      	movs	r2, #31
 800c98c:	4013      	ands	r3, r2
 800c98e:	d104      	bne.n	800c99a <USB_EPStartXfer+0x352>
 800c990:	187b      	adds	r3, r7, r1
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	3b01      	subs	r3, #1
 800c996:	187a      	adds	r2, r7, r1
 800c998:	6013      	str	r3, [r2, #0]
 800c99a:	697b      	ldr	r3, [r7, #20]
 800c99c:	881b      	ldrh	r3, [r3, #0]
 800c99e:	b29a      	uxth	r2, r3
 800c9a0:	23fc      	movs	r3, #252	@ 0xfc
 800c9a2:	18fb      	adds	r3, r7, r3
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	b29b      	uxth	r3, r3
 800c9a8:	029b      	lsls	r3, r3, #10
 800c9aa:	b29b      	uxth	r3, r3
 800c9ac:	4313      	orrs	r3, r2
 800c9ae:	b29b      	uxth	r3, r3
 800c9b0:	4a1e      	ldr	r2, [pc, #120]	@ (800ca2c <USB_EPStartXfer+0x3e4>)
 800c9b2:	4313      	orrs	r3, r2
 800c9b4:	b29a      	uxth	r2, r3
 800c9b6:	697b      	ldr	r3, [r7, #20]
 800c9b8:	801a      	strh	r2, [r3, #0]
 800c9ba:	e01c      	b.n	800c9f6 <USB_EPStartXfer+0x3ae>
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	785b      	ldrb	r3, [r3, #1]
 800c9c0:	2b01      	cmp	r3, #1
 800c9c2:	d118      	bne.n	800c9f6 <USB_EPStartXfer+0x3ae>
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	623b      	str	r3, [r7, #32]
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2250      	movs	r2, #80	@ 0x50
 800c9cc:	5a9b      	ldrh	r3, [r3, r2]
 800c9ce:	b29b      	uxth	r3, r3
 800c9d0:	001a      	movs	r2, r3
 800c9d2:	6a3b      	ldr	r3, [r7, #32]
 800c9d4:	189b      	adds	r3, r3, r2
 800c9d6:	623b      	str	r3, [r7, #32]
 800c9d8:	683b      	ldr	r3, [r7, #0]
 800c9da:	781b      	ldrb	r3, [r3, #0]
 800c9dc:	00da      	lsls	r2, r3, #3
 800c9de:	6a3b      	ldr	r3, [r7, #32]
 800c9e0:	18d3      	adds	r3, r2, r3
 800c9e2:	4a0e      	ldr	r2, [pc, #56]	@ (800ca1c <USB_EPStartXfer+0x3d4>)
 800c9e4:	4694      	mov	ip, r2
 800c9e6:	4463      	add	r3, ip
 800c9e8:	61fb      	str	r3, [r7, #28]
 800c9ea:	1d7b      	adds	r3, r7, #5
 800c9ec:	33ff      	adds	r3, #255	@ 0xff
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	b29a      	uxth	r2, r3
 800c9f2:	69fb      	ldr	r3, [r7, #28]
 800c9f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800c9f6:	2076      	movs	r0, #118	@ 0x76
 800c9f8:	183b      	adds	r3, r7, r0
 800c9fa:	683a      	ldr	r2, [r7, #0]
 800c9fc:	8912      	ldrh	r2, [r2, #8]
 800c9fe:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	6959      	ldr	r1, [r3, #20]
 800ca04:	1d7b      	adds	r3, r7, #5
 800ca06:	33ff      	adds	r3, #255	@ 0xff
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	b29c      	uxth	r4, r3
 800ca0c:	183b      	adds	r3, r7, r0
 800ca0e:	881a      	ldrh	r2, [r3, #0]
 800ca10:	6878      	ldr	r0, [r7, #4]
 800ca12:	0023      	movs	r3, r4
 800ca14:	f001 f882 	bl	800db1c <USB_WritePMA>
 800ca18:	e329      	b.n	800d06e <USB_EPStartXfer+0xa26>
 800ca1a:	46c0      	nop			@ (mov r8, r8)
 800ca1c:	00000402 	.word	0x00000402
 800ca20:	ffff8f8f 	.word	0xffff8f8f
 800ca24:	ffff8180 	.word	0xffff8180
 800ca28:	00000406 	.word	0x00000406
 800ca2c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	785b      	ldrb	r3, [r3, #1]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d000      	beq.n	800ca3a <USB_EPStartXfer+0x3f2>
 800ca38:	e070      	b.n	800cb1c <USB_EPStartXfer+0x4d4>
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2250      	movs	r2, #80	@ 0x50
 800ca42:	5a9b      	ldrh	r3, [r3, r2]
 800ca44:	b29b      	uxth	r3, r3
 800ca46:	001a      	movs	r2, r3
 800ca48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca4a:	189b      	adds	r3, r3, r2
 800ca4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	00da      	lsls	r2, r3, #3
 800ca54:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ca56:	18d3      	adds	r3, r2, r3
 800ca58:	4acd      	ldr	r2, [pc, #820]	@ (800cd90 <USB_EPStartXfer+0x748>)
 800ca5a:	4694      	mov	ip, r2
 800ca5c:	4463      	add	r3, ip
 800ca5e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca62:	881b      	ldrh	r3, [r3, #0]
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	059b      	lsls	r3, r3, #22
 800ca68:	0d9b      	lsrs	r3, r3, #22
 800ca6a:	b29a      	uxth	r2, r3
 800ca6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca6e:	801a      	strh	r2, [r3, #0]
 800ca70:	1d7b      	adds	r3, r7, #5
 800ca72:	33ff      	adds	r3, #255	@ 0xff
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d108      	bne.n	800ca8c <USB_EPStartXfer+0x444>
 800ca7a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca7c:	881b      	ldrh	r3, [r3, #0]
 800ca7e:	b29b      	uxth	r3, r3
 800ca80:	4ac4      	ldr	r2, [pc, #784]	@ (800cd94 <USB_EPStartXfer+0x74c>)
 800ca82:	4313      	orrs	r3, r2
 800ca84:	b29a      	uxth	r2, r3
 800ca86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ca88:	801a      	strh	r2, [r3, #0]
 800ca8a:	e064      	b.n	800cb56 <USB_EPStartXfer+0x50e>
 800ca8c:	1d7b      	adds	r3, r7, #5
 800ca8e:	33ff      	adds	r3, #255	@ 0xff
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b3e      	cmp	r3, #62	@ 0x3e
 800ca94:	d81f      	bhi.n	800cad6 <USB_EPStartXfer+0x48e>
 800ca96:	1d7b      	adds	r3, r7, #5
 800ca98:	33ff      	adds	r3, #255	@ 0xff
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	085b      	lsrs	r3, r3, #1
 800ca9e:	21f8      	movs	r1, #248	@ 0xf8
 800caa0:	187a      	adds	r2, r7, r1
 800caa2:	6013      	str	r3, [r2, #0]
 800caa4:	1d7b      	adds	r3, r7, #5
 800caa6:	33ff      	adds	r3, #255	@ 0xff
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2201      	movs	r2, #1
 800caac:	4013      	ands	r3, r2
 800caae:	d004      	beq.n	800caba <USB_EPStartXfer+0x472>
 800cab0:	187b      	adds	r3, r7, r1
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	3301      	adds	r3, #1
 800cab6:	187a      	adds	r2, r7, r1
 800cab8:	6013      	str	r3, [r2, #0]
 800caba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cabc:	881b      	ldrh	r3, [r3, #0]
 800cabe:	b29a      	uxth	r2, r3
 800cac0:	23f8      	movs	r3, #248	@ 0xf8
 800cac2:	18fb      	adds	r3, r7, r3
 800cac4:	681b      	ldr	r3, [r3, #0]
 800cac6:	b29b      	uxth	r3, r3
 800cac8:	029b      	lsls	r3, r3, #10
 800caca:	b29b      	uxth	r3, r3
 800cacc:	4313      	orrs	r3, r2
 800cace:	b29a      	uxth	r2, r3
 800cad0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cad2:	801a      	strh	r2, [r3, #0]
 800cad4:	e03f      	b.n	800cb56 <USB_EPStartXfer+0x50e>
 800cad6:	1d7b      	adds	r3, r7, #5
 800cad8:	33ff      	adds	r3, #255	@ 0xff
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	095b      	lsrs	r3, r3, #5
 800cade:	21f8      	movs	r1, #248	@ 0xf8
 800cae0:	187a      	adds	r2, r7, r1
 800cae2:	6013      	str	r3, [r2, #0]
 800cae4:	1d7b      	adds	r3, r7, #5
 800cae6:	33ff      	adds	r3, #255	@ 0xff
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	221f      	movs	r2, #31
 800caec:	4013      	ands	r3, r2
 800caee:	d104      	bne.n	800cafa <USB_EPStartXfer+0x4b2>
 800caf0:	187b      	adds	r3, r7, r1
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	3b01      	subs	r3, #1
 800caf6:	187a      	adds	r2, r7, r1
 800caf8:	6013      	str	r3, [r2, #0]
 800cafa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cafc:	881b      	ldrh	r3, [r3, #0]
 800cafe:	b29a      	uxth	r2, r3
 800cb00:	23f8      	movs	r3, #248	@ 0xf8
 800cb02:	18fb      	adds	r3, r7, r3
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	b29b      	uxth	r3, r3
 800cb08:	029b      	lsls	r3, r3, #10
 800cb0a:	b29b      	uxth	r3, r3
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	b29b      	uxth	r3, r3
 800cb10:	4aa0      	ldr	r2, [pc, #640]	@ (800cd94 <USB_EPStartXfer+0x74c>)
 800cb12:	4313      	orrs	r3, r2
 800cb14:	b29a      	uxth	r2, r3
 800cb16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cb18:	801a      	strh	r2, [r3, #0]
 800cb1a:	e01c      	b.n	800cb56 <USB_EPStartXfer+0x50e>
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	785b      	ldrb	r3, [r3, #1]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d118      	bne.n	800cb56 <USB_EPStartXfer+0x50e>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	2250      	movs	r2, #80	@ 0x50
 800cb2c:	5a9b      	ldrh	r3, [r3, r2]
 800cb2e:	b29b      	uxth	r3, r3
 800cb30:	001a      	movs	r2, r3
 800cb32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb34:	189b      	adds	r3, r3, r2
 800cb36:	653b      	str	r3, [r7, #80]	@ 0x50
 800cb38:	683b      	ldr	r3, [r7, #0]
 800cb3a:	781b      	ldrb	r3, [r3, #0]
 800cb3c:	00da      	lsls	r2, r3, #3
 800cb3e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800cb40:	18d3      	adds	r3, r2, r3
 800cb42:	4a93      	ldr	r2, [pc, #588]	@ (800cd90 <USB_EPStartXfer+0x748>)
 800cb44:	4694      	mov	ip, r2
 800cb46:	4463      	add	r3, ip
 800cb48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb4a:	1d7b      	adds	r3, r7, #5
 800cb4c:	33ff      	adds	r3, #255	@ 0xff
 800cb4e:	681b      	ldr	r3, [r3, #0]
 800cb50:	b29a      	uxth	r2, r3
 800cb52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cb54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800cb56:	2076      	movs	r0, #118	@ 0x76
 800cb58:	183b      	adds	r3, r7, r0
 800cb5a:	683a      	ldr	r2, [r7, #0]
 800cb5c:	8912      	ldrh	r2, [r2, #8]
 800cb5e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cb60:	683b      	ldr	r3, [r7, #0]
 800cb62:	6959      	ldr	r1, [r3, #20]
 800cb64:	1d7b      	adds	r3, r7, #5
 800cb66:	33ff      	adds	r3, #255	@ 0xff
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	b29c      	uxth	r4, r3
 800cb6c:	183b      	adds	r3, r7, r0
 800cb6e:	881a      	ldrh	r2, [r3, #0]
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	0023      	movs	r3, r4
 800cb74:	f000 ffd2 	bl	800db1c <USB_WritePMA>
            ep->xfer_buff += len;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	695a      	ldr	r2, [r3, #20]
 800cb7c:	1d7b      	adds	r3, r7, #5
 800cb7e:	33ff      	adds	r3, #255	@ 0xff
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	18d2      	adds	r2, r2, r3
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800cb88:	683b      	ldr	r3, [r7, #0]
 800cb8a:	6a1a      	ldr	r2, [r3, #32]
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	691b      	ldr	r3, [r3, #16]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d908      	bls.n	800cba6 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	6a1a      	ldr	r2, [r3, #32]
 800cb98:	1d7b      	adds	r3, r7, #5
 800cb9a:	33ff      	adds	r3, #255	@ 0xff
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	1ad2      	subs	r2, r2, r3
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	621a      	str	r2, [r3, #32]
 800cba4:	e007      	b.n	800cbb6 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	6a1b      	ldr	r3, [r3, #32]
 800cbaa:	1d7a      	adds	r2, r7, #5
 800cbac:	32ff      	adds	r2, #255	@ 0xff
 800cbae:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	2200      	movs	r2, #0
 800cbb4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	785b      	ldrb	r3, [r3, #1]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d000      	beq.n	800cbc4 <USB_EPStartXfer+0x57c>
 800cbc2:	e070      	b.n	800cca6 <USB_EPStartXfer+0x65e>
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	2250      	movs	r2, #80	@ 0x50
 800cbcc:	5a9b      	ldrh	r3, [r3, r2]
 800cbce:	b29b      	uxth	r3, r3
 800cbd0:	001a      	movs	r2, r3
 800cbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbd4:	189b      	adds	r3, r3, r2
 800cbd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	00da      	lsls	r2, r3, #3
 800cbde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cbe0:	18d3      	adds	r3, r2, r3
 800cbe2:	4a6d      	ldr	r2, [pc, #436]	@ (800cd98 <USB_EPStartXfer+0x750>)
 800cbe4:	4694      	mov	ip, r2
 800cbe6:	4463      	add	r3, ip
 800cbe8:	637b      	str	r3, [r7, #52]	@ 0x34
 800cbea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbec:	881b      	ldrh	r3, [r3, #0]
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	059b      	lsls	r3, r3, #22
 800cbf2:	0d9b      	lsrs	r3, r3, #22
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbf8:	801a      	strh	r2, [r3, #0]
 800cbfa:	1d7b      	adds	r3, r7, #5
 800cbfc:	33ff      	adds	r3, #255	@ 0xff
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d108      	bne.n	800cc16 <USB_EPStartXfer+0x5ce>
 800cc04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	b29b      	uxth	r3, r3
 800cc0a:	4a62      	ldr	r2, [pc, #392]	@ (800cd94 <USB_EPStartXfer+0x74c>)
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	b29a      	uxth	r2, r3
 800cc10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc12:	801a      	strh	r2, [r3, #0]
 800cc14:	e062      	b.n	800ccdc <USB_EPStartXfer+0x694>
 800cc16:	1d7b      	adds	r3, r7, #5
 800cc18:	33ff      	adds	r3, #255	@ 0xff
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	2b3e      	cmp	r3, #62	@ 0x3e
 800cc1e:	d81f      	bhi.n	800cc60 <USB_EPStartXfer+0x618>
 800cc20:	1d7b      	adds	r3, r7, #5
 800cc22:	33ff      	adds	r3, #255	@ 0xff
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	085b      	lsrs	r3, r3, #1
 800cc28:	21f4      	movs	r1, #244	@ 0xf4
 800cc2a:	187a      	adds	r2, r7, r1
 800cc2c:	6013      	str	r3, [r2, #0]
 800cc2e:	1d7b      	adds	r3, r7, #5
 800cc30:	33ff      	adds	r3, #255	@ 0xff
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	2201      	movs	r2, #1
 800cc36:	4013      	ands	r3, r2
 800cc38:	d004      	beq.n	800cc44 <USB_EPStartXfer+0x5fc>
 800cc3a:	187b      	adds	r3, r7, r1
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	187a      	adds	r2, r7, r1
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc46:	881b      	ldrh	r3, [r3, #0]
 800cc48:	b29a      	uxth	r2, r3
 800cc4a:	23f4      	movs	r3, #244	@ 0xf4
 800cc4c:	18fb      	adds	r3, r7, r3
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	029b      	lsls	r3, r3, #10
 800cc54:	b29b      	uxth	r3, r3
 800cc56:	4313      	orrs	r3, r2
 800cc58:	b29a      	uxth	r2, r3
 800cc5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc5c:	801a      	strh	r2, [r3, #0]
 800cc5e:	e03d      	b.n	800ccdc <USB_EPStartXfer+0x694>
 800cc60:	1d7b      	adds	r3, r7, #5
 800cc62:	33ff      	adds	r3, #255	@ 0xff
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	095b      	lsrs	r3, r3, #5
 800cc68:	21f4      	movs	r1, #244	@ 0xf4
 800cc6a:	187a      	adds	r2, r7, r1
 800cc6c:	6013      	str	r3, [r2, #0]
 800cc6e:	1d7b      	adds	r3, r7, #5
 800cc70:	33ff      	adds	r3, #255	@ 0xff
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	221f      	movs	r2, #31
 800cc76:	4013      	ands	r3, r2
 800cc78:	d104      	bne.n	800cc84 <USB_EPStartXfer+0x63c>
 800cc7a:	187b      	adds	r3, r7, r1
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	187a      	adds	r2, r7, r1
 800cc82:	6013      	str	r3, [r2, #0]
 800cc84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cc86:	881b      	ldrh	r3, [r3, #0]
 800cc88:	b29a      	uxth	r2, r3
 800cc8a:	23f4      	movs	r3, #244	@ 0xf4
 800cc8c:	18fb      	adds	r3, r7, r3
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	b29b      	uxth	r3, r3
 800cc92:	029b      	lsls	r3, r3, #10
 800cc94:	b29b      	uxth	r3, r3
 800cc96:	4313      	orrs	r3, r2
 800cc98:	b29b      	uxth	r3, r3
 800cc9a:	4a3e      	ldr	r2, [pc, #248]	@ (800cd94 <USB_EPStartXfer+0x74c>)
 800cc9c:	4313      	orrs	r3, r2
 800cc9e:	b29a      	uxth	r2, r3
 800cca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cca2:	801a      	strh	r2, [r3, #0]
 800cca4:	e01a      	b.n	800ccdc <USB_EPStartXfer+0x694>
 800cca6:	683b      	ldr	r3, [r7, #0]
 800cca8:	785b      	ldrb	r3, [r3, #1]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d116      	bne.n	800ccdc <USB_EPStartXfer+0x694>
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2250      	movs	r2, #80	@ 0x50
 800ccb2:	5a9b      	ldrh	r3, [r3, r2]
 800ccb4:	b29b      	uxth	r3, r3
 800ccb6:	001a      	movs	r2, r3
 800ccb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccba:	189b      	adds	r3, r3, r2
 800ccbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	00da      	lsls	r2, r3, #3
 800ccc4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ccc6:	18d3      	adds	r3, r2, r3
 800ccc8:	4a33      	ldr	r2, [pc, #204]	@ (800cd98 <USB_EPStartXfer+0x750>)
 800ccca:	4694      	mov	ip, r2
 800cccc:	4463      	add	r3, ip
 800ccce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ccd0:	1d7b      	adds	r3, r7, #5
 800ccd2:	33ff      	adds	r3, #255	@ 0xff
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	b29a      	uxth	r2, r3
 800ccd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ccda:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800ccdc:	2076      	movs	r0, #118	@ 0x76
 800ccde:	183b      	adds	r3, r7, r0
 800cce0:	683a      	ldr	r2, [r7, #0]
 800cce2:	8952      	ldrh	r2, [r2, #10]
 800cce4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	6959      	ldr	r1, [r3, #20]
 800ccea:	1d7b      	adds	r3, r7, #5
 800ccec:	33ff      	adds	r3, #255	@ 0xff
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	b29c      	uxth	r4, r3
 800ccf2:	183b      	adds	r3, r7, r0
 800ccf4:	881a      	ldrh	r2, [r3, #0]
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	0023      	movs	r3, r4
 800ccfa:	f000 ff0f 	bl	800db1c <USB_WritePMA>
 800ccfe:	e1b6      	b.n	800d06e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	6a1b      	ldr	r3, [r3, #32]
 800cd04:	1d7a      	adds	r2, r7, #5
 800cd06:	32ff      	adds	r2, #255	@ 0xff
 800cd08:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	781b      	ldrb	r3, [r3, #0]
 800cd10:	009b      	lsls	r3, r3, #2
 800cd12:	18d3      	adds	r3, r2, r3
 800cd14:	881b      	ldrh	r3, [r3, #0]
 800cd16:	b29a      	uxth	r2, r3
 800cd18:	2062      	movs	r0, #98	@ 0x62
 800cd1a:	183b      	adds	r3, r7, r0
 800cd1c:	491f      	ldr	r1, [pc, #124]	@ (800cd9c <USB_EPStartXfer+0x754>)
 800cd1e:	400a      	ands	r2, r1
 800cd20:	801a      	strh	r2, [r3, #0]
 800cd22:	687a      	ldr	r2, [r7, #4]
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	781b      	ldrb	r3, [r3, #0]
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	18d3      	adds	r3, r2, r3
 800cd2c:	183a      	adds	r2, r7, r0
 800cd2e:	8812      	ldrh	r2, [r2, #0]
 800cd30:	491b      	ldr	r1, [pc, #108]	@ (800cda0 <USB_EPStartXfer+0x758>)
 800cd32:	430a      	orrs	r2, r1
 800cd34:	b292      	uxth	r2, r2
 800cd36:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2250      	movs	r2, #80	@ 0x50
 800cd40:	5a9b      	ldrh	r3, [r3, r2]
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	001a      	movs	r2, r3
 800cd46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd48:	189b      	adds	r3, r3, r2
 800cd4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd4c:	683b      	ldr	r3, [r7, #0]
 800cd4e:	781b      	ldrb	r3, [r3, #0]
 800cd50:	00da      	lsls	r2, r3, #3
 800cd52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd54:	18d3      	adds	r3, r2, r3
 800cd56:	4a0e      	ldr	r2, [pc, #56]	@ (800cd90 <USB_EPStartXfer+0x748>)
 800cd58:	4694      	mov	ip, r2
 800cd5a:	4463      	add	r3, ip
 800cd5c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800cd5e:	1d7b      	adds	r3, r7, #5
 800cd60:	33ff      	adds	r3, #255	@ 0xff
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	b29a      	uxth	r2, r3
 800cd66:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800cd68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800cd6a:	2076      	movs	r0, #118	@ 0x76
 800cd6c:	183b      	adds	r3, r7, r0
 800cd6e:	683a      	ldr	r2, [r7, #0]
 800cd70:	8912      	ldrh	r2, [r2, #8]
 800cd72:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cd74:	683b      	ldr	r3, [r7, #0]
 800cd76:	6959      	ldr	r1, [r3, #20]
 800cd78:	1d7b      	adds	r3, r7, #5
 800cd7a:	33ff      	adds	r3, #255	@ 0xff
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	b29c      	uxth	r4, r3
 800cd80:	183b      	adds	r3, r7, r0
 800cd82:	881a      	ldrh	r2, [r3, #0]
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	0023      	movs	r3, r4
 800cd88:	f000 fec8 	bl	800db1c <USB_WritePMA>
 800cd8c:	e16f      	b.n	800d06e <USB_EPStartXfer+0xa26>
 800cd8e:	46c0      	nop			@ (mov r8, r8)
 800cd90:	00000402 	.word	0x00000402
 800cd94:	ffff8000 	.word	0xffff8000
 800cd98:	00000406 	.word	0x00000406
 800cd9c:	ffff8e8f 	.word	0xffff8e8f
 800cda0:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800cda4:	683b      	ldr	r3, [r7, #0]
 800cda6:	6a1a      	ldr	r2, [r3, #32]
 800cda8:	1d7b      	adds	r3, r7, #5
 800cdaa:	33ff      	adds	r3, #255	@ 0xff
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	1ad2      	subs	r2, r2, r3
 800cdb0:	683b      	ldr	r3, [r7, #0]
 800cdb2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800cdb4:	687a      	ldr	r2, [r7, #4]
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	781b      	ldrb	r3, [r3, #0]
 800cdba:	009b      	lsls	r3, r3, #2
 800cdbc:	18d3      	adds	r3, r2, r3
 800cdbe:	881b      	ldrh	r3, [r3, #0]
 800cdc0:	b29b      	uxth	r3, r3
 800cdc2:	001a      	movs	r2, r3
 800cdc4:	2340      	movs	r3, #64	@ 0x40
 800cdc6:	4013      	ands	r3, r2
 800cdc8:	d100      	bne.n	800cdcc <USB_EPStartXfer+0x784>
 800cdca:	e0a4      	b.n	800cf16 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	673b      	str	r3, [r7, #112]	@ 0x70
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d000      	beq.n	800cdda <USB_EPStartXfer+0x792>
 800cdd8:	e070      	b.n	800cebc <USB_EPStartXfer+0x874>
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	2250      	movs	r2, #80	@ 0x50
 800cde2:	5a9b      	ldrh	r3, [r3, r2]
 800cde4:	b29b      	uxth	r3, r3
 800cde6:	001a      	movs	r2, r3
 800cde8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdea:	189b      	adds	r3, r3, r2
 800cdec:	66bb      	str	r3, [r7, #104]	@ 0x68
 800cdee:	683b      	ldr	r3, [r7, #0]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	00da      	lsls	r2, r3, #3
 800cdf4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cdf6:	18d3      	adds	r3, r2, r3
 800cdf8:	4ada      	ldr	r2, [pc, #872]	@ (800d164 <USB_EPStartXfer+0xb1c>)
 800cdfa:	4694      	mov	ip, r2
 800cdfc:	4463      	add	r3, ip
 800cdfe:	667b      	str	r3, [r7, #100]	@ 0x64
 800ce00:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce02:	881b      	ldrh	r3, [r3, #0]
 800ce04:	b29b      	uxth	r3, r3
 800ce06:	059b      	lsls	r3, r3, #22
 800ce08:	0d9b      	lsrs	r3, r3, #22
 800ce0a:	b29a      	uxth	r2, r3
 800ce0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce0e:	801a      	strh	r2, [r3, #0]
 800ce10:	1d7b      	adds	r3, r7, #5
 800ce12:	33ff      	adds	r3, #255	@ 0xff
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d108      	bne.n	800ce2c <USB_EPStartXfer+0x7e4>
 800ce1a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce1c:	881b      	ldrh	r3, [r3, #0]
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4ad1      	ldr	r2, [pc, #836]	@ (800d168 <USB_EPStartXfer+0xb20>)
 800ce22:	4313      	orrs	r3, r2
 800ce24:	b29a      	uxth	r2, r3
 800ce26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce28:	801a      	strh	r2, [r3, #0]
 800ce2a:	e062      	b.n	800cef2 <USB_EPStartXfer+0x8aa>
 800ce2c:	1d7b      	adds	r3, r7, #5
 800ce2e:	33ff      	adds	r3, #255	@ 0xff
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	2b3e      	cmp	r3, #62	@ 0x3e
 800ce34:	d81f      	bhi.n	800ce76 <USB_EPStartXfer+0x82e>
 800ce36:	1d7b      	adds	r3, r7, #5
 800ce38:	33ff      	adds	r3, #255	@ 0xff
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	085b      	lsrs	r3, r3, #1
 800ce3e:	21f0      	movs	r1, #240	@ 0xf0
 800ce40:	187a      	adds	r2, r7, r1
 800ce42:	6013      	str	r3, [r2, #0]
 800ce44:	1d7b      	adds	r3, r7, #5
 800ce46:	33ff      	adds	r3, #255	@ 0xff
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	2201      	movs	r2, #1
 800ce4c:	4013      	ands	r3, r2
 800ce4e:	d004      	beq.n	800ce5a <USB_EPStartXfer+0x812>
 800ce50:	187b      	adds	r3, r7, r1
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	3301      	adds	r3, #1
 800ce56:	187a      	adds	r2, r7, r1
 800ce58:	6013      	str	r3, [r2, #0]
 800ce5a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce5c:	881b      	ldrh	r3, [r3, #0]
 800ce5e:	b29a      	uxth	r2, r3
 800ce60:	23f0      	movs	r3, #240	@ 0xf0
 800ce62:	18fb      	adds	r3, r7, r3
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	b29b      	uxth	r3, r3
 800ce68:	029b      	lsls	r3, r3, #10
 800ce6a:	b29b      	uxth	r3, r3
 800ce6c:	4313      	orrs	r3, r2
 800ce6e:	b29a      	uxth	r2, r3
 800ce70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce72:	801a      	strh	r2, [r3, #0]
 800ce74:	e03d      	b.n	800cef2 <USB_EPStartXfer+0x8aa>
 800ce76:	1d7b      	adds	r3, r7, #5
 800ce78:	33ff      	adds	r3, #255	@ 0xff
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	095b      	lsrs	r3, r3, #5
 800ce7e:	21f0      	movs	r1, #240	@ 0xf0
 800ce80:	187a      	adds	r2, r7, r1
 800ce82:	6013      	str	r3, [r2, #0]
 800ce84:	1d7b      	adds	r3, r7, #5
 800ce86:	33ff      	adds	r3, #255	@ 0xff
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	221f      	movs	r2, #31
 800ce8c:	4013      	ands	r3, r2
 800ce8e:	d104      	bne.n	800ce9a <USB_EPStartXfer+0x852>
 800ce90:	187b      	adds	r3, r7, r1
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	3b01      	subs	r3, #1
 800ce96:	187a      	adds	r2, r7, r1
 800ce98:	6013      	str	r3, [r2, #0]
 800ce9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ce9c:	881b      	ldrh	r3, [r3, #0]
 800ce9e:	b29a      	uxth	r2, r3
 800cea0:	23f0      	movs	r3, #240	@ 0xf0
 800cea2:	18fb      	adds	r3, r7, r3
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	029b      	lsls	r3, r3, #10
 800ceaa:	b29b      	uxth	r3, r3
 800ceac:	4313      	orrs	r3, r2
 800ceae:	b29b      	uxth	r3, r3
 800ceb0:	4aad      	ldr	r2, [pc, #692]	@ (800d168 <USB_EPStartXfer+0xb20>)
 800ceb2:	4313      	orrs	r3, r2
 800ceb4:	b29a      	uxth	r2, r3
 800ceb6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ceb8:	801a      	strh	r2, [r3, #0]
 800ceba:	e01a      	b.n	800cef2 <USB_EPStartXfer+0x8aa>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	785b      	ldrb	r3, [r3, #1]
 800cec0:	2b01      	cmp	r3, #1
 800cec2:	d116      	bne.n	800cef2 <USB_EPStartXfer+0x8aa>
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2250      	movs	r2, #80	@ 0x50
 800cec8:	5a9b      	ldrh	r3, [r3, r2]
 800ceca:	b29b      	uxth	r3, r3
 800cecc:	001a      	movs	r2, r3
 800cece:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800ced0:	189b      	adds	r3, r3, r2
 800ced2:	673b      	str	r3, [r7, #112]	@ 0x70
 800ced4:	683b      	ldr	r3, [r7, #0]
 800ced6:	781b      	ldrb	r3, [r3, #0]
 800ced8:	00da      	lsls	r2, r3, #3
 800ceda:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800cedc:	18d3      	adds	r3, r2, r3
 800cede:	4aa1      	ldr	r2, [pc, #644]	@ (800d164 <USB_EPStartXfer+0xb1c>)
 800cee0:	4694      	mov	ip, r2
 800cee2:	4463      	add	r3, ip
 800cee4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800cee6:	1d7b      	adds	r3, r7, #5
 800cee8:	33ff      	adds	r3, #255	@ 0xff
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	b29a      	uxth	r2, r3
 800ceee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cef0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800cef2:	2076      	movs	r0, #118	@ 0x76
 800cef4:	183b      	adds	r3, r7, r0
 800cef6:	683a      	ldr	r2, [r7, #0]
 800cef8:	8952      	ldrh	r2, [r2, #10]
 800cefa:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	6959      	ldr	r1, [r3, #20]
 800cf00:	1d7b      	adds	r3, r7, #5
 800cf02:	33ff      	adds	r3, #255	@ 0xff
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	b29c      	uxth	r4, r3
 800cf08:	183b      	adds	r3, r7, r0
 800cf0a:	881a      	ldrh	r2, [r3, #0]
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	0023      	movs	r3, r4
 800cf10:	f000 fe04 	bl	800db1c <USB_WritePMA>
 800cf14:	e0ab      	b.n	800d06e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800cf16:	683b      	ldr	r3, [r7, #0]
 800cf18:	785b      	ldrb	r3, [r3, #1]
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d000      	beq.n	800cf20 <USB_EPStartXfer+0x8d8>
 800cf1e:	e070      	b.n	800d002 <USB_EPStartXfer+0x9ba>
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	2250      	movs	r2, #80	@ 0x50
 800cf28:	5a9b      	ldrh	r3, [r3, r2]
 800cf2a:	b29b      	uxth	r3, r3
 800cf2c:	001a      	movs	r2, r3
 800cf2e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf30:	189b      	adds	r3, r3, r2
 800cf32:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	00da      	lsls	r2, r3, #3
 800cf3a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800cf3c:	18d3      	adds	r3, r2, r3
 800cf3e:	4a8b      	ldr	r2, [pc, #556]	@ (800d16c <USB_EPStartXfer+0xb24>)
 800cf40:	4694      	mov	ip, r2
 800cf42:	4463      	add	r3, ip
 800cf44:	67bb      	str	r3, [r7, #120]	@ 0x78
 800cf46:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf48:	881b      	ldrh	r3, [r3, #0]
 800cf4a:	b29b      	uxth	r3, r3
 800cf4c:	059b      	lsls	r3, r3, #22
 800cf4e:	0d9b      	lsrs	r3, r3, #22
 800cf50:	b29a      	uxth	r2, r3
 800cf52:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf54:	801a      	strh	r2, [r3, #0]
 800cf56:	1d7b      	adds	r3, r7, #5
 800cf58:	33ff      	adds	r3, #255	@ 0xff
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d108      	bne.n	800cf72 <USB_EPStartXfer+0x92a>
 800cf60:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf62:	881b      	ldrh	r3, [r3, #0]
 800cf64:	b29b      	uxth	r3, r3
 800cf66:	4a80      	ldr	r2, [pc, #512]	@ (800d168 <USB_EPStartXfer+0xb20>)
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	b29a      	uxth	r2, r3
 800cf6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cf6e:	801a      	strh	r2, [r3, #0]
 800cf70:	e06c      	b.n	800d04c <USB_EPStartXfer+0xa04>
 800cf72:	1d7b      	adds	r3, r7, #5
 800cf74:	33ff      	adds	r3, #255	@ 0xff
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	2b3e      	cmp	r3, #62	@ 0x3e
 800cf7a:	d81f      	bhi.n	800cfbc <USB_EPStartXfer+0x974>
 800cf7c:	1d7b      	adds	r3, r7, #5
 800cf7e:	33ff      	adds	r3, #255	@ 0xff
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	085b      	lsrs	r3, r3, #1
 800cf84:	21ec      	movs	r1, #236	@ 0xec
 800cf86:	187a      	adds	r2, r7, r1
 800cf88:	6013      	str	r3, [r2, #0]
 800cf8a:	1d7b      	adds	r3, r7, #5
 800cf8c:	33ff      	adds	r3, #255	@ 0xff
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	2201      	movs	r2, #1
 800cf92:	4013      	ands	r3, r2
 800cf94:	d004      	beq.n	800cfa0 <USB_EPStartXfer+0x958>
 800cf96:	187b      	adds	r3, r7, r1
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	187a      	adds	r2, r7, r1
 800cf9e:	6013      	str	r3, [r2, #0]
 800cfa0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfa2:	881b      	ldrh	r3, [r3, #0]
 800cfa4:	b29a      	uxth	r2, r3
 800cfa6:	23ec      	movs	r3, #236	@ 0xec
 800cfa8:	18fb      	adds	r3, r7, r3
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	b29b      	uxth	r3, r3
 800cfae:	029b      	lsls	r3, r3, #10
 800cfb0:	b29b      	uxth	r3, r3
 800cfb2:	4313      	orrs	r3, r2
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfb8:	801a      	strh	r2, [r3, #0]
 800cfba:	e047      	b.n	800d04c <USB_EPStartXfer+0xa04>
 800cfbc:	1d7b      	adds	r3, r7, #5
 800cfbe:	33ff      	adds	r3, #255	@ 0xff
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	095b      	lsrs	r3, r3, #5
 800cfc4:	21ec      	movs	r1, #236	@ 0xec
 800cfc6:	187a      	adds	r2, r7, r1
 800cfc8:	6013      	str	r3, [r2, #0]
 800cfca:	1d7b      	adds	r3, r7, #5
 800cfcc:	33ff      	adds	r3, #255	@ 0xff
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	221f      	movs	r2, #31
 800cfd2:	4013      	ands	r3, r2
 800cfd4:	d104      	bne.n	800cfe0 <USB_EPStartXfer+0x998>
 800cfd6:	187b      	adds	r3, r7, r1
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3b01      	subs	r3, #1
 800cfdc:	187a      	adds	r2, r7, r1
 800cfde:	6013      	str	r3, [r2, #0]
 800cfe0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cfe2:	881b      	ldrh	r3, [r3, #0]
 800cfe4:	b29a      	uxth	r2, r3
 800cfe6:	23ec      	movs	r3, #236	@ 0xec
 800cfe8:	18fb      	adds	r3, r7, r3
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	b29b      	uxth	r3, r3
 800cfee:	029b      	lsls	r3, r3, #10
 800cff0:	b29b      	uxth	r3, r3
 800cff2:	4313      	orrs	r3, r2
 800cff4:	b29b      	uxth	r3, r3
 800cff6:	4a5c      	ldr	r2, [pc, #368]	@ (800d168 <USB_EPStartXfer+0xb20>)
 800cff8:	4313      	orrs	r3, r2
 800cffa:	b29a      	uxth	r2, r3
 800cffc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800cffe:	801a      	strh	r2, [r3, #0]
 800d000:	e024      	b.n	800d04c <USB_EPStartXfer+0xa04>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	785b      	ldrb	r3, [r3, #1]
 800d006:	2b01      	cmp	r3, #1
 800d008:	d120      	bne.n	800d04c <USB_EPStartXfer+0xa04>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2184      	movs	r1, #132	@ 0x84
 800d00e:	187a      	adds	r2, r7, r1
 800d010:	6013      	str	r3, [r2, #0]
 800d012:	687b      	ldr	r3, [r7, #4]
 800d014:	2250      	movs	r2, #80	@ 0x50
 800d016:	5a9b      	ldrh	r3, [r3, r2]
 800d018:	b29b      	uxth	r3, r3
 800d01a:	001a      	movs	r2, r3
 800d01c:	187b      	adds	r3, r7, r1
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	189b      	adds	r3, r3, r2
 800d022:	187a      	adds	r2, r7, r1
 800d024:	6013      	str	r3, [r2, #0]
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	781b      	ldrb	r3, [r3, #0]
 800d02a:	00da      	lsls	r2, r3, #3
 800d02c:	187b      	adds	r3, r7, r1
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	18d3      	adds	r3, r2, r3
 800d032:	4a4e      	ldr	r2, [pc, #312]	@ (800d16c <USB_EPStartXfer+0xb24>)
 800d034:	4694      	mov	ip, r2
 800d036:	4463      	add	r3, ip
 800d038:	2180      	movs	r1, #128	@ 0x80
 800d03a:	187a      	adds	r2, r7, r1
 800d03c:	6013      	str	r3, [r2, #0]
 800d03e:	1d7b      	adds	r3, r7, #5
 800d040:	33ff      	adds	r3, #255	@ 0xff
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	b29a      	uxth	r2, r3
 800d046:	187b      	adds	r3, r7, r1
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800d04c:	2076      	movs	r0, #118	@ 0x76
 800d04e:	183b      	adds	r3, r7, r0
 800d050:	683a      	ldr	r2, [r7, #0]
 800d052:	8912      	ldrh	r2, [r2, #8]
 800d054:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	6959      	ldr	r1, [r3, #20]
 800d05a:	1d7b      	adds	r3, r7, #5
 800d05c:	33ff      	adds	r3, #255	@ 0xff
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	b29c      	uxth	r4, r3
 800d062:	183b      	adds	r3, r7, r0
 800d064:	881a      	ldrh	r2, [r3, #0]
 800d066:	6878      	ldr	r0, [r7, #4]
 800d068:	0023      	movs	r3, r4
 800d06a:	f000 fd57 	bl	800db1c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800d06e:	687a      	ldr	r2, [r7, #4]
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	781b      	ldrb	r3, [r3, #0]
 800d074:	009b      	lsls	r3, r3, #2
 800d076:	18d3      	adds	r3, r2, r3
 800d078:	881b      	ldrh	r3, [r3, #0]
 800d07a:	b29a      	uxth	r2, r3
 800d07c:	200a      	movs	r0, #10
 800d07e:	183b      	adds	r3, r7, r0
 800d080:	493b      	ldr	r1, [pc, #236]	@ (800d170 <USB_EPStartXfer+0xb28>)
 800d082:	400a      	ands	r2, r1
 800d084:	801a      	strh	r2, [r3, #0]
 800d086:	183b      	adds	r3, r7, r0
 800d088:	183a      	adds	r2, r7, r0
 800d08a:	8812      	ldrh	r2, [r2, #0]
 800d08c:	2110      	movs	r1, #16
 800d08e:	404a      	eors	r2, r1
 800d090:	801a      	strh	r2, [r3, #0]
 800d092:	183b      	adds	r3, r7, r0
 800d094:	183a      	adds	r2, r7, r0
 800d096:	8812      	ldrh	r2, [r2, #0]
 800d098:	2120      	movs	r1, #32
 800d09a:	404a      	eors	r2, r1
 800d09c:	801a      	strh	r2, [r3, #0]
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	781b      	ldrb	r3, [r3, #0]
 800d0a4:	009b      	lsls	r3, r3, #2
 800d0a6:	18d3      	adds	r3, r2, r3
 800d0a8:	183a      	adds	r2, r7, r0
 800d0aa:	8812      	ldrh	r2, [r2, #0]
 800d0ac:	4931      	ldr	r1, [pc, #196]	@ (800d174 <USB_EPStartXfer+0xb2c>)
 800d0ae:	430a      	orrs	r2, r1
 800d0b0:	b292      	uxth	r2, r2
 800d0b2:	801a      	strh	r2, [r3, #0]
 800d0b4:	f000 fbe9 	bl	800d88a <USB_EPStartXfer+0x1242>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	7b1b      	ldrb	r3, [r3, #12]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d000      	beq.n	800d0c2 <USB_EPStartXfer+0xa7a>
 800d0c0:	e0a8      	b.n	800d214 <USB_EPStartXfer+0xbcc>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	699a      	ldr	r2, [r3, #24]
 800d0c6:	683b      	ldr	r3, [r7, #0]
 800d0c8:	691b      	ldr	r3, [r3, #16]
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d90d      	bls.n	800d0ea <USB_EPStartXfer+0xaa2>
      {
        len = ep->maxpacket;
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	1d7a      	adds	r2, r7, #5
 800d0d4:	32ff      	adds	r2, #255	@ 0xff
 800d0d6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	699a      	ldr	r2, [r3, #24]
 800d0dc:	1d7b      	adds	r3, r7, #5
 800d0de:	33ff      	adds	r3, #255	@ 0xff
 800d0e0:	681b      	ldr	r3, [r3, #0]
 800d0e2:	1ad2      	subs	r2, r2, r3
 800d0e4:	683b      	ldr	r3, [r7, #0]
 800d0e6:	619a      	str	r2, [r3, #24]
 800d0e8:	e007      	b.n	800d0fa <USB_EPStartXfer+0xab2>
      }
      else
      {
        len = ep->xfer_len;
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	699b      	ldr	r3, [r3, #24]
 800d0ee:	1d7a      	adds	r2, r7, #5
 800d0f0:	32ff      	adds	r2, #255	@ 0xff
 800d0f2:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800d0f4:	683b      	ldr	r3, [r7, #0]
 800d0f6:	2200      	movs	r2, #0
 800d0f8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2190      	movs	r1, #144	@ 0x90
 800d0fe:	187a      	adds	r2, r7, r1
 800d100:	6013      	str	r3, [r2, #0]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	2250      	movs	r2, #80	@ 0x50
 800d106:	5a9b      	ldrh	r3, [r3, r2]
 800d108:	b29b      	uxth	r3, r3
 800d10a:	001a      	movs	r2, r3
 800d10c:	187b      	adds	r3, r7, r1
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	189b      	adds	r3, r3, r2
 800d112:	187a      	adds	r2, r7, r1
 800d114:	6013      	str	r3, [r2, #0]
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	781b      	ldrb	r3, [r3, #0]
 800d11a:	00da      	lsls	r2, r3, #3
 800d11c:	187b      	adds	r3, r7, r1
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	18d3      	adds	r3, r2, r3
 800d122:	4a10      	ldr	r2, [pc, #64]	@ (800d164 <USB_EPStartXfer+0xb1c>)
 800d124:	4694      	mov	ip, r2
 800d126:	4463      	add	r3, ip
 800d128:	218c      	movs	r1, #140	@ 0x8c
 800d12a:	187a      	adds	r2, r7, r1
 800d12c:	6013      	str	r3, [r2, #0]
 800d12e:	187b      	adds	r3, r7, r1
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	881b      	ldrh	r3, [r3, #0]
 800d134:	b29b      	uxth	r3, r3
 800d136:	059b      	lsls	r3, r3, #22
 800d138:	0d9b      	lsrs	r3, r3, #22
 800d13a:	b29a      	uxth	r2, r3
 800d13c:	187b      	adds	r3, r7, r1
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	801a      	strh	r2, [r3, #0]
 800d142:	1d7b      	adds	r3, r7, #5
 800d144:	33ff      	adds	r3, #255	@ 0xff
 800d146:	681b      	ldr	r3, [r3, #0]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d115      	bne.n	800d178 <USB_EPStartXfer+0xb30>
 800d14c:	187b      	adds	r3, r7, r1
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	881b      	ldrh	r3, [r3, #0]
 800d152:	b29b      	uxth	r3, r3
 800d154:	4a04      	ldr	r2, [pc, #16]	@ (800d168 <USB_EPStartXfer+0xb20>)
 800d156:	4313      	orrs	r3, r2
 800d158:	b29a      	uxth	r2, r3
 800d15a:	187b      	adds	r3, r7, r1
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	801a      	strh	r2, [r3, #0]
 800d160:	e36e      	b.n	800d840 <USB_EPStartXfer+0x11f8>
 800d162:	46c0      	nop			@ (mov r8, r8)
 800d164:	00000406 	.word	0x00000406
 800d168:	ffff8000 	.word	0xffff8000
 800d16c:	00000402 	.word	0x00000402
 800d170:	ffff8fbf 	.word	0xffff8fbf
 800d174:	ffff8080 	.word	0xffff8080
 800d178:	1d7b      	adds	r3, r7, #5
 800d17a:	33ff      	adds	r3, #255	@ 0xff
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	2b3e      	cmp	r3, #62	@ 0x3e
 800d180:	d822      	bhi.n	800d1c8 <USB_EPStartXfer+0xb80>
 800d182:	1d7b      	adds	r3, r7, #5
 800d184:	33ff      	adds	r3, #255	@ 0xff
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	085b      	lsrs	r3, r3, #1
 800d18a:	21e8      	movs	r1, #232	@ 0xe8
 800d18c:	187a      	adds	r2, r7, r1
 800d18e:	6013      	str	r3, [r2, #0]
 800d190:	1d7b      	adds	r3, r7, #5
 800d192:	33ff      	adds	r3, #255	@ 0xff
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	2201      	movs	r2, #1
 800d198:	4013      	ands	r3, r2
 800d19a:	d004      	beq.n	800d1a6 <USB_EPStartXfer+0xb5e>
 800d19c:	187b      	adds	r3, r7, r1
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3301      	adds	r3, #1
 800d1a2:	187a      	adds	r2, r7, r1
 800d1a4:	6013      	str	r3, [r2, #0]
 800d1a6:	218c      	movs	r1, #140	@ 0x8c
 800d1a8:	187b      	adds	r3, r7, r1
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	881b      	ldrh	r3, [r3, #0]
 800d1ae:	b29a      	uxth	r2, r3
 800d1b0:	23e8      	movs	r3, #232	@ 0xe8
 800d1b2:	18fb      	adds	r3, r7, r3
 800d1b4:	681b      	ldr	r3, [r3, #0]
 800d1b6:	b29b      	uxth	r3, r3
 800d1b8:	029b      	lsls	r3, r3, #10
 800d1ba:	b29b      	uxth	r3, r3
 800d1bc:	4313      	orrs	r3, r2
 800d1be:	b29a      	uxth	r2, r3
 800d1c0:	187b      	adds	r3, r7, r1
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	801a      	strh	r2, [r3, #0]
 800d1c6:	e33b      	b.n	800d840 <USB_EPStartXfer+0x11f8>
 800d1c8:	1d7b      	adds	r3, r7, #5
 800d1ca:	33ff      	adds	r3, #255	@ 0xff
 800d1cc:	681b      	ldr	r3, [r3, #0]
 800d1ce:	095b      	lsrs	r3, r3, #5
 800d1d0:	21e8      	movs	r1, #232	@ 0xe8
 800d1d2:	187a      	adds	r2, r7, r1
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	1d7b      	adds	r3, r7, #5
 800d1d8:	33ff      	adds	r3, #255	@ 0xff
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	221f      	movs	r2, #31
 800d1de:	4013      	ands	r3, r2
 800d1e0:	d104      	bne.n	800d1ec <USB_EPStartXfer+0xba4>
 800d1e2:	187b      	adds	r3, r7, r1
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	3b01      	subs	r3, #1
 800d1e8:	187a      	adds	r2, r7, r1
 800d1ea:	6013      	str	r3, [r2, #0]
 800d1ec:	218c      	movs	r1, #140	@ 0x8c
 800d1ee:	187b      	adds	r3, r7, r1
 800d1f0:	681b      	ldr	r3, [r3, #0]
 800d1f2:	881b      	ldrh	r3, [r3, #0]
 800d1f4:	b29a      	uxth	r2, r3
 800d1f6:	23e8      	movs	r3, #232	@ 0xe8
 800d1f8:	18fb      	adds	r3, r7, r3
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	b29b      	uxth	r3, r3
 800d1fe:	029b      	lsls	r3, r3, #10
 800d200:	b29b      	uxth	r3, r3
 800d202:	4313      	orrs	r3, r2
 800d204:	b29b      	uxth	r3, r3
 800d206:	4ad7      	ldr	r2, [pc, #860]	@ (800d564 <USB_EPStartXfer+0xf1c>)
 800d208:	4313      	orrs	r3, r2
 800d20a:	b29a      	uxth	r2, r3
 800d20c:	187b      	adds	r3, r7, r1
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	801a      	strh	r2, [r3, #0]
 800d212:	e315      	b.n	800d840 <USB_EPStartXfer+0x11f8>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800d214:	683b      	ldr	r3, [r7, #0]
 800d216:	78db      	ldrb	r3, [r3, #3]
 800d218:	2b02      	cmp	r3, #2
 800d21a:	d000      	beq.n	800d21e <USB_EPStartXfer+0xbd6>
 800d21c:	e189      	b.n	800d532 <USB_EPStartXfer+0xeea>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800d21e:	683b      	ldr	r3, [r7, #0]
 800d220:	785b      	ldrb	r3, [r3, #1]
 800d222:	2b00      	cmp	r3, #0
 800d224:	d000      	beq.n	800d228 <USB_EPStartXfer+0xbe0>
 800d226:	e07b      	b.n	800d320 <USB_EPStartXfer+0xcd8>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	21ac      	movs	r1, #172	@ 0xac
 800d22c:	187a      	adds	r2, r7, r1
 800d22e:	6013      	str	r3, [r2, #0]
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2250      	movs	r2, #80	@ 0x50
 800d234:	5a9b      	ldrh	r3, [r3, r2]
 800d236:	b29b      	uxth	r3, r3
 800d238:	001a      	movs	r2, r3
 800d23a:	187b      	adds	r3, r7, r1
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	189b      	adds	r3, r3, r2
 800d240:	187a      	adds	r2, r7, r1
 800d242:	6013      	str	r3, [r2, #0]
 800d244:	683b      	ldr	r3, [r7, #0]
 800d246:	781b      	ldrb	r3, [r3, #0]
 800d248:	00da      	lsls	r2, r3, #3
 800d24a:	187b      	adds	r3, r7, r1
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	18d3      	adds	r3, r2, r3
 800d250:	4ac5      	ldr	r2, [pc, #788]	@ (800d568 <USB_EPStartXfer+0xf20>)
 800d252:	4694      	mov	ip, r2
 800d254:	4463      	add	r3, ip
 800d256:	21a8      	movs	r1, #168	@ 0xa8
 800d258:	187a      	adds	r2, r7, r1
 800d25a:	6013      	str	r3, [r2, #0]
 800d25c:	187b      	adds	r3, r7, r1
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	881b      	ldrh	r3, [r3, #0]
 800d262:	b29b      	uxth	r3, r3
 800d264:	059b      	lsls	r3, r3, #22
 800d266:	0d9b      	lsrs	r3, r3, #22
 800d268:	b29a      	uxth	r2, r3
 800d26a:	187b      	adds	r3, r7, r1
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	801a      	strh	r2, [r3, #0]
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	691b      	ldr	r3, [r3, #16]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d10a      	bne.n	800d28e <USB_EPStartXfer+0xc46>
 800d278:	187b      	adds	r3, r7, r1
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	881b      	ldrh	r3, [r3, #0]
 800d27e:	b29b      	uxth	r3, r3
 800d280:	4ab8      	ldr	r2, [pc, #736]	@ (800d564 <USB_EPStartXfer+0xf1c>)
 800d282:	4313      	orrs	r3, r2
 800d284:	b29a      	uxth	r2, r3
 800d286:	187b      	adds	r3, r7, r1
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	801a      	strh	r2, [r3, #0]
 800d28c:	e06c      	b.n	800d368 <USB_EPStartXfer+0xd20>
 800d28e:	683b      	ldr	r3, [r7, #0]
 800d290:	691b      	ldr	r3, [r3, #16]
 800d292:	2b3e      	cmp	r3, #62	@ 0x3e
 800d294:	d820      	bhi.n	800d2d8 <USB_EPStartXfer+0xc90>
 800d296:	683b      	ldr	r3, [r7, #0]
 800d298:	691b      	ldr	r3, [r3, #16]
 800d29a:	085b      	lsrs	r3, r3, #1
 800d29c:	21e4      	movs	r1, #228	@ 0xe4
 800d29e:	187a      	adds	r2, r7, r1
 800d2a0:	6013      	str	r3, [r2, #0]
 800d2a2:	683b      	ldr	r3, [r7, #0]
 800d2a4:	691b      	ldr	r3, [r3, #16]
 800d2a6:	2201      	movs	r2, #1
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	d004      	beq.n	800d2b6 <USB_EPStartXfer+0xc6e>
 800d2ac:	187b      	adds	r3, r7, r1
 800d2ae:	681b      	ldr	r3, [r3, #0]
 800d2b0:	3301      	adds	r3, #1
 800d2b2:	187a      	adds	r2, r7, r1
 800d2b4:	6013      	str	r3, [r2, #0]
 800d2b6:	21a8      	movs	r1, #168	@ 0xa8
 800d2b8:	187b      	adds	r3, r7, r1
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	881b      	ldrh	r3, [r3, #0]
 800d2be:	b29a      	uxth	r2, r3
 800d2c0:	23e4      	movs	r3, #228	@ 0xe4
 800d2c2:	18fb      	adds	r3, r7, r3
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	029b      	lsls	r3, r3, #10
 800d2ca:	b29b      	uxth	r3, r3
 800d2cc:	4313      	orrs	r3, r2
 800d2ce:	b29a      	uxth	r2, r3
 800d2d0:	187b      	adds	r3, r7, r1
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	801a      	strh	r2, [r3, #0]
 800d2d6:	e047      	b.n	800d368 <USB_EPStartXfer+0xd20>
 800d2d8:	683b      	ldr	r3, [r7, #0]
 800d2da:	691b      	ldr	r3, [r3, #16]
 800d2dc:	095b      	lsrs	r3, r3, #5
 800d2de:	21e4      	movs	r1, #228	@ 0xe4
 800d2e0:	187a      	adds	r2, r7, r1
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	683b      	ldr	r3, [r7, #0]
 800d2e6:	691b      	ldr	r3, [r3, #16]
 800d2e8:	221f      	movs	r2, #31
 800d2ea:	4013      	ands	r3, r2
 800d2ec:	d104      	bne.n	800d2f8 <USB_EPStartXfer+0xcb0>
 800d2ee:	187b      	adds	r3, r7, r1
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	3b01      	subs	r3, #1
 800d2f4:	187a      	adds	r2, r7, r1
 800d2f6:	6013      	str	r3, [r2, #0]
 800d2f8:	21a8      	movs	r1, #168	@ 0xa8
 800d2fa:	187b      	adds	r3, r7, r1
 800d2fc:	681b      	ldr	r3, [r3, #0]
 800d2fe:	881b      	ldrh	r3, [r3, #0]
 800d300:	b29a      	uxth	r2, r3
 800d302:	23e4      	movs	r3, #228	@ 0xe4
 800d304:	18fb      	adds	r3, r7, r3
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	b29b      	uxth	r3, r3
 800d30a:	029b      	lsls	r3, r3, #10
 800d30c:	b29b      	uxth	r3, r3
 800d30e:	4313      	orrs	r3, r2
 800d310:	b29b      	uxth	r3, r3
 800d312:	4a94      	ldr	r2, [pc, #592]	@ (800d564 <USB_EPStartXfer+0xf1c>)
 800d314:	4313      	orrs	r3, r2
 800d316:	b29a      	uxth	r2, r3
 800d318:	187b      	adds	r3, r7, r1
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	801a      	strh	r2, [r3, #0]
 800d31e:	e023      	b.n	800d368 <USB_EPStartXfer+0xd20>
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	785b      	ldrb	r3, [r3, #1]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d11f      	bne.n	800d368 <USB_EPStartXfer+0xd20>
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	21b4      	movs	r1, #180	@ 0xb4
 800d32c:	187a      	adds	r2, r7, r1
 800d32e:	6013      	str	r3, [r2, #0]
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	2250      	movs	r2, #80	@ 0x50
 800d334:	5a9b      	ldrh	r3, [r3, r2]
 800d336:	b29b      	uxth	r3, r3
 800d338:	001a      	movs	r2, r3
 800d33a:	187b      	adds	r3, r7, r1
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	189b      	adds	r3, r3, r2
 800d340:	187a      	adds	r2, r7, r1
 800d342:	6013      	str	r3, [r2, #0]
 800d344:	683b      	ldr	r3, [r7, #0]
 800d346:	781b      	ldrb	r3, [r3, #0]
 800d348:	00da      	lsls	r2, r3, #3
 800d34a:	187b      	adds	r3, r7, r1
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	18d3      	adds	r3, r2, r3
 800d350:	4a85      	ldr	r2, [pc, #532]	@ (800d568 <USB_EPStartXfer+0xf20>)
 800d352:	4694      	mov	ip, r2
 800d354:	4463      	add	r3, ip
 800d356:	21b0      	movs	r1, #176	@ 0xb0
 800d358:	187a      	adds	r2, r7, r1
 800d35a:	6013      	str	r3, [r2, #0]
 800d35c:	683b      	ldr	r3, [r7, #0]
 800d35e:	691b      	ldr	r3, [r3, #16]
 800d360:	b29a      	uxth	r2, r3
 800d362:	187b      	adds	r3, r7, r1
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	801a      	strh	r2, [r3, #0]
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	22a4      	movs	r2, #164	@ 0xa4
 800d36c:	18ba      	adds	r2, r7, r2
 800d36e:	6013      	str	r3, [r2, #0]
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	785b      	ldrb	r3, [r3, #1]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d000      	beq.n	800d37a <USB_EPStartXfer+0xd32>
 800d378:	e07b      	b.n	800d472 <USB_EPStartXfer+0xe2a>
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	219c      	movs	r1, #156	@ 0x9c
 800d37e:	187a      	adds	r2, r7, r1
 800d380:	6013      	str	r3, [r2, #0]
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2250      	movs	r2, #80	@ 0x50
 800d386:	5a9b      	ldrh	r3, [r3, r2]
 800d388:	b29b      	uxth	r3, r3
 800d38a:	001a      	movs	r2, r3
 800d38c:	187b      	adds	r3, r7, r1
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	189b      	adds	r3, r3, r2
 800d392:	187a      	adds	r2, r7, r1
 800d394:	6013      	str	r3, [r2, #0]
 800d396:	683b      	ldr	r3, [r7, #0]
 800d398:	781b      	ldrb	r3, [r3, #0]
 800d39a:	00da      	lsls	r2, r3, #3
 800d39c:	187b      	adds	r3, r7, r1
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	18d3      	adds	r3, r2, r3
 800d3a2:	4a72      	ldr	r2, [pc, #456]	@ (800d56c <USB_EPStartXfer+0xf24>)
 800d3a4:	4694      	mov	ip, r2
 800d3a6:	4463      	add	r3, ip
 800d3a8:	2198      	movs	r1, #152	@ 0x98
 800d3aa:	187a      	adds	r2, r7, r1
 800d3ac:	6013      	str	r3, [r2, #0]
 800d3ae:	187b      	adds	r3, r7, r1
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	881b      	ldrh	r3, [r3, #0]
 800d3b4:	b29b      	uxth	r3, r3
 800d3b6:	059b      	lsls	r3, r3, #22
 800d3b8:	0d9b      	lsrs	r3, r3, #22
 800d3ba:	b29a      	uxth	r2, r3
 800d3bc:	187b      	adds	r3, r7, r1
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	801a      	strh	r2, [r3, #0]
 800d3c2:	683b      	ldr	r3, [r7, #0]
 800d3c4:	691b      	ldr	r3, [r3, #16]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d10a      	bne.n	800d3e0 <USB_EPStartXfer+0xd98>
 800d3ca:	187b      	adds	r3, r7, r1
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	881b      	ldrh	r3, [r3, #0]
 800d3d0:	b29b      	uxth	r3, r3
 800d3d2:	4a64      	ldr	r2, [pc, #400]	@ (800d564 <USB_EPStartXfer+0xf1c>)
 800d3d4:	4313      	orrs	r3, r2
 800d3d6:	b29a      	uxth	r2, r3
 800d3d8:	187b      	adds	r3, r7, r1
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	801a      	strh	r2, [r3, #0]
 800d3de:	e069      	b.n	800d4b4 <USB_EPStartXfer+0xe6c>
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	691b      	ldr	r3, [r3, #16]
 800d3e4:	2b3e      	cmp	r3, #62	@ 0x3e
 800d3e6:	d820      	bhi.n	800d42a <USB_EPStartXfer+0xde2>
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	691b      	ldr	r3, [r3, #16]
 800d3ec:	085b      	lsrs	r3, r3, #1
 800d3ee:	21e0      	movs	r1, #224	@ 0xe0
 800d3f0:	187a      	adds	r2, r7, r1
 800d3f2:	6013      	str	r3, [r2, #0]
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	2201      	movs	r2, #1
 800d3fa:	4013      	ands	r3, r2
 800d3fc:	d004      	beq.n	800d408 <USB_EPStartXfer+0xdc0>
 800d3fe:	187b      	adds	r3, r7, r1
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	3301      	adds	r3, #1
 800d404:	187a      	adds	r2, r7, r1
 800d406:	6013      	str	r3, [r2, #0]
 800d408:	2198      	movs	r1, #152	@ 0x98
 800d40a:	187b      	adds	r3, r7, r1
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	881b      	ldrh	r3, [r3, #0]
 800d410:	b29a      	uxth	r2, r3
 800d412:	23e0      	movs	r3, #224	@ 0xe0
 800d414:	18fb      	adds	r3, r7, r3
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	b29b      	uxth	r3, r3
 800d41a:	029b      	lsls	r3, r3, #10
 800d41c:	b29b      	uxth	r3, r3
 800d41e:	4313      	orrs	r3, r2
 800d420:	b29a      	uxth	r2, r3
 800d422:	187b      	adds	r3, r7, r1
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	801a      	strh	r2, [r3, #0]
 800d428:	e044      	b.n	800d4b4 <USB_EPStartXfer+0xe6c>
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	691b      	ldr	r3, [r3, #16]
 800d42e:	095b      	lsrs	r3, r3, #5
 800d430:	21e0      	movs	r1, #224	@ 0xe0
 800d432:	187a      	adds	r2, r7, r1
 800d434:	6013      	str	r3, [r2, #0]
 800d436:	683b      	ldr	r3, [r7, #0]
 800d438:	691b      	ldr	r3, [r3, #16]
 800d43a:	221f      	movs	r2, #31
 800d43c:	4013      	ands	r3, r2
 800d43e:	d104      	bne.n	800d44a <USB_EPStartXfer+0xe02>
 800d440:	187b      	adds	r3, r7, r1
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	3b01      	subs	r3, #1
 800d446:	187a      	adds	r2, r7, r1
 800d448:	6013      	str	r3, [r2, #0]
 800d44a:	2198      	movs	r1, #152	@ 0x98
 800d44c:	187b      	adds	r3, r7, r1
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	881b      	ldrh	r3, [r3, #0]
 800d452:	b29a      	uxth	r2, r3
 800d454:	23e0      	movs	r3, #224	@ 0xe0
 800d456:	18fb      	adds	r3, r7, r3
 800d458:	681b      	ldr	r3, [r3, #0]
 800d45a:	b29b      	uxth	r3, r3
 800d45c:	029b      	lsls	r3, r3, #10
 800d45e:	b29b      	uxth	r3, r3
 800d460:	4313      	orrs	r3, r2
 800d462:	b29b      	uxth	r3, r3
 800d464:	4a3f      	ldr	r2, [pc, #252]	@ (800d564 <USB_EPStartXfer+0xf1c>)
 800d466:	4313      	orrs	r3, r2
 800d468:	b29a      	uxth	r2, r3
 800d46a:	187b      	adds	r3, r7, r1
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	801a      	strh	r2, [r3, #0]
 800d470:	e020      	b.n	800d4b4 <USB_EPStartXfer+0xe6c>
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	785b      	ldrb	r3, [r3, #1]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d11c      	bne.n	800d4b4 <USB_EPStartXfer+0xe6c>
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2250      	movs	r2, #80	@ 0x50
 800d47e:	5a9b      	ldrh	r3, [r3, r2]
 800d480:	b29b      	uxth	r3, r3
 800d482:	001a      	movs	r2, r3
 800d484:	21a4      	movs	r1, #164	@ 0xa4
 800d486:	187b      	adds	r3, r7, r1
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	189b      	adds	r3, r3, r2
 800d48c:	187a      	adds	r2, r7, r1
 800d48e:	6013      	str	r3, [r2, #0]
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	781b      	ldrb	r3, [r3, #0]
 800d494:	00da      	lsls	r2, r3, #3
 800d496:	187b      	adds	r3, r7, r1
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	18d3      	adds	r3, r2, r3
 800d49c:	4a33      	ldr	r2, [pc, #204]	@ (800d56c <USB_EPStartXfer+0xf24>)
 800d49e:	4694      	mov	ip, r2
 800d4a0:	4463      	add	r3, ip
 800d4a2:	21a0      	movs	r1, #160	@ 0xa0
 800d4a4:	187a      	adds	r2, r7, r1
 800d4a6:	6013      	str	r3, [r2, #0]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	691b      	ldr	r3, [r3, #16]
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	187b      	adds	r3, r7, r1
 800d4b0:	681b      	ldr	r3, [r3, #0]
 800d4b2:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	69db      	ldr	r3, [r3, #28]
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d100      	bne.n	800d4be <USB_EPStartXfer+0xe76>
 800d4bc:	e1c0      	b.n	800d840 <USB_EPStartXfer+0x11f8>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800d4be:	687a      	ldr	r2, [r7, #4]
 800d4c0:	683b      	ldr	r3, [r7, #0]
 800d4c2:	781b      	ldrb	r3, [r3, #0]
 800d4c4:	009b      	lsls	r3, r3, #2
 800d4c6:	18d2      	adds	r2, r2, r3
 800d4c8:	2196      	movs	r1, #150	@ 0x96
 800d4ca:	187b      	adds	r3, r7, r1
 800d4cc:	8812      	ldrh	r2, [r2, #0]
 800d4ce:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d4d0:	187b      	adds	r3, r7, r1
 800d4d2:	881a      	ldrh	r2, [r3, #0]
 800d4d4:	2380      	movs	r3, #128	@ 0x80
 800d4d6:	01db      	lsls	r3, r3, #7
 800d4d8:	4013      	ands	r3, r2
 800d4da:	d004      	beq.n	800d4e6 <USB_EPStartXfer+0xe9e>
 800d4dc:	187b      	adds	r3, r7, r1
 800d4de:	881b      	ldrh	r3, [r3, #0]
 800d4e0:	2240      	movs	r2, #64	@ 0x40
 800d4e2:	4013      	ands	r3, r2
 800d4e4:	d10d      	bne.n	800d502 <USB_EPStartXfer+0xeba>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d4e6:	2196      	movs	r1, #150	@ 0x96
 800d4e8:	187b      	adds	r3, r7, r1
 800d4ea:	881a      	ldrh	r2, [r3, #0]
 800d4ec:	2380      	movs	r3, #128	@ 0x80
 800d4ee:	01db      	lsls	r3, r3, #7
 800d4f0:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800d4f2:	d000      	beq.n	800d4f6 <USB_EPStartXfer+0xeae>
 800d4f4:	e1a4      	b.n	800d840 <USB_EPStartXfer+0x11f8>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800d4f6:	187b      	adds	r3, r7, r1
 800d4f8:	881b      	ldrh	r3, [r3, #0]
 800d4fa:	2240      	movs	r2, #64	@ 0x40
 800d4fc:	4013      	ands	r3, r2
 800d4fe:	d000      	beq.n	800d502 <USB_EPStartXfer+0xeba>
 800d500:	e19e      	b.n	800d840 <USB_EPStartXfer+0x11f8>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800d502:	687a      	ldr	r2, [r7, #4]
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	009b      	lsls	r3, r3, #2
 800d50a:	18d3      	adds	r3, r2, r3
 800d50c:	881b      	ldrh	r3, [r3, #0]
 800d50e:	b29a      	uxth	r2, r3
 800d510:	2094      	movs	r0, #148	@ 0x94
 800d512:	183b      	adds	r3, r7, r0
 800d514:	4916      	ldr	r1, [pc, #88]	@ (800d570 <USB_EPStartXfer+0xf28>)
 800d516:	400a      	ands	r2, r1
 800d518:	801a      	strh	r2, [r3, #0]
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	781b      	ldrb	r3, [r3, #0]
 800d520:	009b      	lsls	r3, r3, #2
 800d522:	18d3      	adds	r3, r2, r3
 800d524:	183a      	adds	r2, r7, r0
 800d526:	8812      	ldrh	r2, [r2, #0]
 800d528:	4912      	ldr	r1, [pc, #72]	@ (800d574 <USB_EPStartXfer+0xf2c>)
 800d52a:	430a      	orrs	r2, r1
 800d52c:	b292      	uxth	r2, r2
 800d52e:	801a      	strh	r2, [r3, #0]
 800d530:	e186      	b.n	800d840 <USB_EPStartXfer+0x11f8>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800d532:	683b      	ldr	r3, [r7, #0]
 800d534:	78db      	ldrb	r3, [r3, #3]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d000      	beq.n	800d53c <USB_EPStartXfer+0xef4>
 800d53a:	e17f      	b.n	800d83c <USB_EPStartXfer+0x11f4>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800d53c:	683b      	ldr	r3, [r7, #0]
 800d53e:	699a      	ldr	r2, [r3, #24]
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	691b      	ldr	r3, [r3, #16]
 800d544:	429a      	cmp	r2, r3
 800d546:	d917      	bls.n	800d578 <USB_EPStartXfer+0xf30>
        {
          len = ep->maxpacket;
 800d548:	683b      	ldr	r3, [r7, #0]
 800d54a:	691b      	ldr	r3, [r3, #16]
 800d54c:	1d7a      	adds	r2, r7, #5
 800d54e:	32ff      	adds	r2, #255	@ 0xff
 800d550:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800d552:	683b      	ldr	r3, [r7, #0]
 800d554:	699a      	ldr	r2, [r3, #24]
 800d556:	1d7b      	adds	r3, r7, #5
 800d558:	33ff      	adds	r3, #255	@ 0xff
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	1ad2      	subs	r2, r2, r3
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	619a      	str	r2, [r3, #24]
 800d562:	e011      	b.n	800d588 <USB_EPStartXfer+0xf40>
 800d564:	ffff8000 	.word	0xffff8000
 800d568:	00000402 	.word	0x00000402
 800d56c:	00000406 	.word	0x00000406
 800d570:	ffff8f8f 	.word	0xffff8f8f
 800d574:	ffff80c0 	.word	0xffff80c0
        }
        else
        {
          len = ep->xfer_len;
 800d578:	683b      	ldr	r3, [r7, #0]
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	1d7a      	adds	r2, r7, #5
 800d57e:	32ff      	adds	r2, #255	@ 0xff
 800d580:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800d582:	683b      	ldr	r3, [r7, #0]
 800d584:	2200      	movs	r2, #0
 800d586:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	785b      	ldrb	r3, [r3, #1]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d000      	beq.n	800d592 <USB_EPStartXfer+0xf4a>
 800d590:	e081      	b.n	800d696 <USB_EPStartXfer+0x104e>
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	21cc      	movs	r1, #204	@ 0xcc
 800d596:	187a      	adds	r2, r7, r1
 800d598:	6013      	str	r3, [r2, #0]
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	2250      	movs	r2, #80	@ 0x50
 800d59e:	5a9b      	ldrh	r3, [r3, r2]
 800d5a0:	b29b      	uxth	r3, r3
 800d5a2:	001a      	movs	r2, r3
 800d5a4:	187b      	adds	r3, r7, r1
 800d5a6:	681b      	ldr	r3, [r3, #0]
 800d5a8:	189b      	adds	r3, r3, r2
 800d5aa:	187a      	adds	r2, r7, r1
 800d5ac:	6013      	str	r3, [r2, #0]
 800d5ae:	683b      	ldr	r3, [r7, #0]
 800d5b0:	781b      	ldrb	r3, [r3, #0]
 800d5b2:	00da      	lsls	r2, r3, #3
 800d5b4:	187b      	adds	r3, r7, r1
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	18d3      	adds	r3, r2, r3
 800d5ba:	4ab6      	ldr	r2, [pc, #728]	@ (800d894 <USB_EPStartXfer+0x124c>)
 800d5bc:	4694      	mov	ip, r2
 800d5be:	4463      	add	r3, ip
 800d5c0:	21c8      	movs	r1, #200	@ 0xc8
 800d5c2:	187a      	adds	r2, r7, r1
 800d5c4:	6013      	str	r3, [r2, #0]
 800d5c6:	187b      	adds	r3, r7, r1
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	881b      	ldrh	r3, [r3, #0]
 800d5cc:	b29b      	uxth	r3, r3
 800d5ce:	059b      	lsls	r3, r3, #22
 800d5d0:	0d9b      	lsrs	r3, r3, #22
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	187b      	adds	r3, r7, r1
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	801a      	strh	r2, [r3, #0]
 800d5da:	1d7b      	adds	r3, r7, #5
 800d5dc:	33ff      	adds	r3, #255	@ 0xff
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d10a      	bne.n	800d5fa <USB_EPStartXfer+0xfb2>
 800d5e4:	187b      	adds	r3, r7, r1
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	881b      	ldrh	r3, [r3, #0]
 800d5ea:	b29b      	uxth	r3, r3
 800d5ec:	4aaa      	ldr	r2, [pc, #680]	@ (800d898 <USB_EPStartXfer+0x1250>)
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	b29a      	uxth	r2, r3
 800d5f2:	187b      	adds	r3, r7, r1
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	801a      	strh	r2, [r3, #0]
 800d5f8:	e072      	b.n	800d6e0 <USB_EPStartXfer+0x1098>
 800d5fa:	1d7b      	adds	r3, r7, #5
 800d5fc:	33ff      	adds	r3, #255	@ 0xff
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	2b3e      	cmp	r3, #62	@ 0x3e
 800d602:	d822      	bhi.n	800d64a <USB_EPStartXfer+0x1002>
 800d604:	1d7b      	adds	r3, r7, #5
 800d606:	33ff      	adds	r3, #255	@ 0xff
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	085b      	lsrs	r3, r3, #1
 800d60c:	21dc      	movs	r1, #220	@ 0xdc
 800d60e:	187a      	adds	r2, r7, r1
 800d610:	6013      	str	r3, [r2, #0]
 800d612:	1d7b      	adds	r3, r7, #5
 800d614:	33ff      	adds	r3, #255	@ 0xff
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	2201      	movs	r2, #1
 800d61a:	4013      	ands	r3, r2
 800d61c:	d004      	beq.n	800d628 <USB_EPStartXfer+0xfe0>
 800d61e:	187b      	adds	r3, r7, r1
 800d620:	681b      	ldr	r3, [r3, #0]
 800d622:	3301      	adds	r3, #1
 800d624:	187a      	adds	r2, r7, r1
 800d626:	6013      	str	r3, [r2, #0]
 800d628:	21c8      	movs	r1, #200	@ 0xc8
 800d62a:	187b      	adds	r3, r7, r1
 800d62c:	681b      	ldr	r3, [r3, #0]
 800d62e:	881b      	ldrh	r3, [r3, #0]
 800d630:	b29a      	uxth	r2, r3
 800d632:	23dc      	movs	r3, #220	@ 0xdc
 800d634:	18fb      	adds	r3, r7, r3
 800d636:	681b      	ldr	r3, [r3, #0]
 800d638:	b29b      	uxth	r3, r3
 800d63a:	029b      	lsls	r3, r3, #10
 800d63c:	b29b      	uxth	r3, r3
 800d63e:	4313      	orrs	r3, r2
 800d640:	b29a      	uxth	r2, r3
 800d642:	187b      	adds	r3, r7, r1
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	801a      	strh	r2, [r3, #0]
 800d648:	e04a      	b.n	800d6e0 <USB_EPStartXfer+0x1098>
 800d64a:	1d7b      	adds	r3, r7, #5
 800d64c:	33ff      	adds	r3, #255	@ 0xff
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	095b      	lsrs	r3, r3, #5
 800d652:	21dc      	movs	r1, #220	@ 0xdc
 800d654:	187a      	adds	r2, r7, r1
 800d656:	6013      	str	r3, [r2, #0]
 800d658:	1d7b      	adds	r3, r7, #5
 800d65a:	33ff      	adds	r3, #255	@ 0xff
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	221f      	movs	r2, #31
 800d660:	4013      	ands	r3, r2
 800d662:	d104      	bne.n	800d66e <USB_EPStartXfer+0x1026>
 800d664:	187b      	adds	r3, r7, r1
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	3b01      	subs	r3, #1
 800d66a:	187a      	adds	r2, r7, r1
 800d66c:	6013      	str	r3, [r2, #0]
 800d66e:	21c8      	movs	r1, #200	@ 0xc8
 800d670:	187b      	adds	r3, r7, r1
 800d672:	681b      	ldr	r3, [r3, #0]
 800d674:	881b      	ldrh	r3, [r3, #0]
 800d676:	b29a      	uxth	r2, r3
 800d678:	23dc      	movs	r3, #220	@ 0xdc
 800d67a:	18fb      	adds	r3, r7, r3
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	b29b      	uxth	r3, r3
 800d680:	029b      	lsls	r3, r3, #10
 800d682:	b29b      	uxth	r3, r3
 800d684:	4313      	orrs	r3, r2
 800d686:	b29b      	uxth	r3, r3
 800d688:	4a83      	ldr	r2, [pc, #524]	@ (800d898 <USB_EPStartXfer+0x1250>)
 800d68a:	4313      	orrs	r3, r2
 800d68c:	b29a      	uxth	r2, r3
 800d68e:	187b      	adds	r3, r7, r1
 800d690:	681b      	ldr	r3, [r3, #0]
 800d692:	801a      	strh	r2, [r3, #0]
 800d694:	e024      	b.n	800d6e0 <USB_EPStartXfer+0x1098>
 800d696:	683b      	ldr	r3, [r7, #0]
 800d698:	785b      	ldrb	r3, [r3, #1]
 800d69a:	2b01      	cmp	r3, #1
 800d69c:	d120      	bne.n	800d6e0 <USB_EPStartXfer+0x1098>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	21d4      	movs	r1, #212	@ 0xd4
 800d6a2:	187a      	adds	r2, r7, r1
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	2250      	movs	r2, #80	@ 0x50
 800d6aa:	5a9b      	ldrh	r3, [r3, r2]
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	001a      	movs	r2, r3
 800d6b0:	187b      	adds	r3, r7, r1
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	189b      	adds	r3, r3, r2
 800d6b6:	187a      	adds	r2, r7, r1
 800d6b8:	6013      	str	r3, [r2, #0]
 800d6ba:	683b      	ldr	r3, [r7, #0]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	00da      	lsls	r2, r3, #3
 800d6c0:	187b      	adds	r3, r7, r1
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	18d3      	adds	r3, r2, r3
 800d6c6:	4a73      	ldr	r2, [pc, #460]	@ (800d894 <USB_EPStartXfer+0x124c>)
 800d6c8:	4694      	mov	ip, r2
 800d6ca:	4463      	add	r3, ip
 800d6cc:	21d0      	movs	r1, #208	@ 0xd0
 800d6ce:	187a      	adds	r2, r7, r1
 800d6d0:	6013      	str	r3, [r2, #0]
 800d6d2:	1d7b      	adds	r3, r7, #5
 800d6d4:	33ff      	adds	r3, #255	@ 0xff
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	b29a      	uxth	r2, r3
 800d6da:	187b      	adds	r3, r7, r1
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	801a      	strh	r2, [r3, #0]
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	22c4      	movs	r2, #196	@ 0xc4
 800d6e4:	18ba      	adds	r2, r7, r2
 800d6e6:	6013      	str	r3, [r2, #0]
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	785b      	ldrb	r3, [r3, #1]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d000      	beq.n	800d6f2 <USB_EPStartXfer+0x10aa>
 800d6f0:	e081      	b.n	800d7f6 <USB_EPStartXfer+0x11ae>
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	21bc      	movs	r1, #188	@ 0xbc
 800d6f6:	187a      	adds	r2, r7, r1
 800d6f8:	6013      	str	r3, [r2, #0]
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	2250      	movs	r2, #80	@ 0x50
 800d6fe:	5a9b      	ldrh	r3, [r3, r2]
 800d700:	b29b      	uxth	r3, r3
 800d702:	001a      	movs	r2, r3
 800d704:	187b      	adds	r3, r7, r1
 800d706:	681b      	ldr	r3, [r3, #0]
 800d708:	189b      	adds	r3, r3, r2
 800d70a:	187a      	adds	r2, r7, r1
 800d70c:	6013      	str	r3, [r2, #0]
 800d70e:	683b      	ldr	r3, [r7, #0]
 800d710:	781b      	ldrb	r3, [r3, #0]
 800d712:	00da      	lsls	r2, r3, #3
 800d714:	187b      	adds	r3, r7, r1
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	18d3      	adds	r3, r2, r3
 800d71a:	4a60      	ldr	r2, [pc, #384]	@ (800d89c <USB_EPStartXfer+0x1254>)
 800d71c:	4694      	mov	ip, r2
 800d71e:	4463      	add	r3, ip
 800d720:	21b8      	movs	r1, #184	@ 0xb8
 800d722:	187a      	adds	r2, r7, r1
 800d724:	6013      	str	r3, [r2, #0]
 800d726:	187b      	adds	r3, r7, r1
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	881b      	ldrh	r3, [r3, #0]
 800d72c:	b29b      	uxth	r3, r3
 800d72e:	059b      	lsls	r3, r3, #22
 800d730:	0d9b      	lsrs	r3, r3, #22
 800d732:	b29a      	uxth	r2, r3
 800d734:	187b      	adds	r3, r7, r1
 800d736:	681b      	ldr	r3, [r3, #0]
 800d738:	801a      	strh	r2, [r3, #0]
 800d73a:	1d7b      	adds	r3, r7, #5
 800d73c:	33ff      	adds	r3, #255	@ 0xff
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d10a      	bne.n	800d75a <USB_EPStartXfer+0x1112>
 800d744:	187b      	adds	r3, r7, r1
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	881b      	ldrh	r3, [r3, #0]
 800d74a:	b29b      	uxth	r3, r3
 800d74c:	4a52      	ldr	r2, [pc, #328]	@ (800d898 <USB_EPStartXfer+0x1250>)
 800d74e:	4313      	orrs	r3, r2
 800d750:	b29a      	uxth	r2, r3
 800d752:	187b      	adds	r3, r7, r1
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	801a      	strh	r2, [r3, #0]
 800d758:	e072      	b.n	800d840 <USB_EPStartXfer+0x11f8>
 800d75a:	1d7b      	adds	r3, r7, #5
 800d75c:	33ff      	adds	r3, #255	@ 0xff
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	2b3e      	cmp	r3, #62	@ 0x3e
 800d762:	d822      	bhi.n	800d7aa <USB_EPStartXfer+0x1162>
 800d764:	1d7b      	adds	r3, r7, #5
 800d766:	33ff      	adds	r3, #255	@ 0xff
 800d768:	681b      	ldr	r3, [r3, #0]
 800d76a:	085b      	lsrs	r3, r3, #1
 800d76c:	21d8      	movs	r1, #216	@ 0xd8
 800d76e:	187a      	adds	r2, r7, r1
 800d770:	6013      	str	r3, [r2, #0]
 800d772:	1d7b      	adds	r3, r7, #5
 800d774:	33ff      	adds	r3, #255	@ 0xff
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	2201      	movs	r2, #1
 800d77a:	4013      	ands	r3, r2
 800d77c:	d004      	beq.n	800d788 <USB_EPStartXfer+0x1140>
 800d77e:	187b      	adds	r3, r7, r1
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	3301      	adds	r3, #1
 800d784:	187a      	adds	r2, r7, r1
 800d786:	6013      	str	r3, [r2, #0]
 800d788:	21b8      	movs	r1, #184	@ 0xb8
 800d78a:	187b      	adds	r3, r7, r1
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	881b      	ldrh	r3, [r3, #0]
 800d790:	b29a      	uxth	r2, r3
 800d792:	23d8      	movs	r3, #216	@ 0xd8
 800d794:	18fb      	adds	r3, r7, r3
 800d796:	681b      	ldr	r3, [r3, #0]
 800d798:	b29b      	uxth	r3, r3
 800d79a:	029b      	lsls	r3, r3, #10
 800d79c:	b29b      	uxth	r3, r3
 800d79e:	4313      	orrs	r3, r2
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	187b      	adds	r3, r7, r1
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	801a      	strh	r2, [r3, #0]
 800d7a8:	e04a      	b.n	800d840 <USB_EPStartXfer+0x11f8>
 800d7aa:	1d7b      	adds	r3, r7, #5
 800d7ac:	33ff      	adds	r3, #255	@ 0xff
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	095b      	lsrs	r3, r3, #5
 800d7b2:	21d8      	movs	r1, #216	@ 0xd8
 800d7b4:	187a      	adds	r2, r7, r1
 800d7b6:	6013      	str	r3, [r2, #0]
 800d7b8:	1d7b      	adds	r3, r7, #5
 800d7ba:	33ff      	adds	r3, #255	@ 0xff
 800d7bc:	681b      	ldr	r3, [r3, #0]
 800d7be:	221f      	movs	r2, #31
 800d7c0:	4013      	ands	r3, r2
 800d7c2:	d104      	bne.n	800d7ce <USB_EPStartXfer+0x1186>
 800d7c4:	187b      	adds	r3, r7, r1
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	3b01      	subs	r3, #1
 800d7ca:	187a      	adds	r2, r7, r1
 800d7cc:	6013      	str	r3, [r2, #0]
 800d7ce:	21b8      	movs	r1, #184	@ 0xb8
 800d7d0:	187b      	adds	r3, r7, r1
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	23d8      	movs	r3, #216	@ 0xd8
 800d7da:	18fb      	adds	r3, r7, r3
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	b29b      	uxth	r3, r3
 800d7e0:	029b      	lsls	r3, r3, #10
 800d7e2:	b29b      	uxth	r3, r3
 800d7e4:	4313      	orrs	r3, r2
 800d7e6:	b29b      	uxth	r3, r3
 800d7e8:	4a2b      	ldr	r2, [pc, #172]	@ (800d898 <USB_EPStartXfer+0x1250>)
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	b29a      	uxth	r2, r3
 800d7ee:	187b      	adds	r3, r7, r1
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	801a      	strh	r2, [r3, #0]
 800d7f4:	e024      	b.n	800d840 <USB_EPStartXfer+0x11f8>
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	785b      	ldrb	r3, [r3, #1]
 800d7fa:	2b01      	cmp	r3, #1
 800d7fc:	d120      	bne.n	800d840 <USB_EPStartXfer+0x11f8>
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2250      	movs	r2, #80	@ 0x50
 800d802:	5a9b      	ldrh	r3, [r3, r2]
 800d804:	b29b      	uxth	r3, r3
 800d806:	001a      	movs	r2, r3
 800d808:	21c4      	movs	r1, #196	@ 0xc4
 800d80a:	187b      	adds	r3, r7, r1
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	189b      	adds	r3, r3, r2
 800d810:	187a      	adds	r2, r7, r1
 800d812:	6013      	str	r3, [r2, #0]
 800d814:	683b      	ldr	r3, [r7, #0]
 800d816:	781b      	ldrb	r3, [r3, #0]
 800d818:	00da      	lsls	r2, r3, #3
 800d81a:	187b      	adds	r3, r7, r1
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	18d3      	adds	r3, r2, r3
 800d820:	4a1e      	ldr	r2, [pc, #120]	@ (800d89c <USB_EPStartXfer+0x1254>)
 800d822:	4694      	mov	ip, r2
 800d824:	4463      	add	r3, ip
 800d826:	21c0      	movs	r1, #192	@ 0xc0
 800d828:	187a      	adds	r2, r7, r1
 800d82a:	6013      	str	r3, [r2, #0]
 800d82c:	1d7b      	adds	r3, r7, #5
 800d82e:	33ff      	adds	r3, #255	@ 0xff
 800d830:	681b      	ldr	r3, [r3, #0]
 800d832:	b29a      	uxth	r2, r3
 800d834:	187b      	adds	r3, r7, r1
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	801a      	strh	r2, [r3, #0]
 800d83a:	e001      	b.n	800d840 <USB_EPStartXfer+0x11f8>
      }
      else
      {
        return HAL_ERROR;
 800d83c:	2301      	movs	r3, #1
 800d83e:	e025      	b.n	800d88c <USB_EPStartXfer+0x1244>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800d840:	687a      	ldr	r2, [r7, #4]
 800d842:	683b      	ldr	r3, [r7, #0]
 800d844:	781b      	ldrb	r3, [r3, #0]
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	18d3      	adds	r3, r2, r3
 800d84a:	881b      	ldrh	r3, [r3, #0]
 800d84c:	b29a      	uxth	r2, r3
 800d84e:	208a      	movs	r0, #138	@ 0x8a
 800d850:	183b      	adds	r3, r7, r0
 800d852:	4913      	ldr	r1, [pc, #76]	@ (800d8a0 <USB_EPStartXfer+0x1258>)
 800d854:	400a      	ands	r2, r1
 800d856:	801a      	strh	r2, [r3, #0]
 800d858:	183b      	adds	r3, r7, r0
 800d85a:	183a      	adds	r2, r7, r0
 800d85c:	8812      	ldrh	r2, [r2, #0]
 800d85e:	2180      	movs	r1, #128	@ 0x80
 800d860:	0149      	lsls	r1, r1, #5
 800d862:	404a      	eors	r2, r1
 800d864:	801a      	strh	r2, [r3, #0]
 800d866:	183b      	adds	r3, r7, r0
 800d868:	183a      	adds	r2, r7, r0
 800d86a:	8812      	ldrh	r2, [r2, #0]
 800d86c:	2180      	movs	r1, #128	@ 0x80
 800d86e:	0189      	lsls	r1, r1, #6
 800d870:	404a      	eors	r2, r1
 800d872:	801a      	strh	r2, [r3, #0]
 800d874:	687a      	ldr	r2, [r7, #4]
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	009b      	lsls	r3, r3, #2
 800d87c:	18d3      	adds	r3, r2, r3
 800d87e:	183a      	adds	r2, r7, r0
 800d880:	8812      	ldrh	r2, [r2, #0]
 800d882:	4908      	ldr	r1, [pc, #32]	@ (800d8a4 <USB_EPStartXfer+0x125c>)
 800d884:	430a      	orrs	r2, r1
 800d886:	b292      	uxth	r2, r2
 800d888:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800d88a:	2300      	movs	r3, #0
}
 800d88c:	0018      	movs	r0, r3
 800d88e:	46bd      	mov	sp, r7
 800d890:	b043      	add	sp, #268	@ 0x10c
 800d892:	bd90      	pop	{r4, r7, pc}
 800d894:	00000402 	.word	0x00000402
 800d898:	ffff8000 	.word	0xffff8000
 800d89c:	00000406 	.word	0x00000406
 800d8a0:	ffffbf8f 	.word	0xffffbf8f
 800d8a4:	ffff8080 	.word	0xffff8080

0800d8a8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d8a8:	b580      	push	{r7, lr}
 800d8aa:	b084      	sub	sp, #16
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	6078      	str	r0, [r7, #4]
 800d8b0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	785b      	ldrb	r3, [r3, #1]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d01d      	beq.n	800d8f6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	18d3      	adds	r3, r2, r3
 800d8c4:	881b      	ldrh	r3, [r3, #0]
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	200c      	movs	r0, #12
 800d8ca:	183b      	adds	r3, r7, r0
 800d8cc:	491b      	ldr	r1, [pc, #108]	@ (800d93c <USB_EPSetStall+0x94>)
 800d8ce:	400a      	ands	r2, r1
 800d8d0:	801a      	strh	r2, [r3, #0]
 800d8d2:	183b      	adds	r3, r7, r0
 800d8d4:	183a      	adds	r2, r7, r0
 800d8d6:	8812      	ldrh	r2, [r2, #0]
 800d8d8:	2110      	movs	r1, #16
 800d8da:	404a      	eors	r2, r1
 800d8dc:	801a      	strh	r2, [r3, #0]
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	683b      	ldr	r3, [r7, #0]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	009b      	lsls	r3, r3, #2
 800d8e6:	18d3      	adds	r3, r2, r3
 800d8e8:	183a      	adds	r2, r7, r0
 800d8ea:	8812      	ldrh	r2, [r2, #0]
 800d8ec:	4914      	ldr	r1, [pc, #80]	@ (800d940 <USB_EPSetStall+0x98>)
 800d8ee:	430a      	orrs	r2, r1
 800d8f0:	b292      	uxth	r2, r2
 800d8f2:	801a      	strh	r2, [r3, #0]
 800d8f4:	e01d      	b.n	800d932 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800d8f6:	687a      	ldr	r2, [r7, #4]
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	781b      	ldrb	r3, [r3, #0]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	18d3      	adds	r3, r2, r3
 800d900:	881b      	ldrh	r3, [r3, #0]
 800d902:	b29a      	uxth	r2, r3
 800d904:	200e      	movs	r0, #14
 800d906:	183b      	adds	r3, r7, r0
 800d908:	490e      	ldr	r1, [pc, #56]	@ (800d944 <USB_EPSetStall+0x9c>)
 800d90a:	400a      	ands	r2, r1
 800d90c:	801a      	strh	r2, [r3, #0]
 800d90e:	183b      	adds	r3, r7, r0
 800d910:	183a      	adds	r2, r7, r0
 800d912:	8812      	ldrh	r2, [r2, #0]
 800d914:	2180      	movs	r1, #128	@ 0x80
 800d916:	0149      	lsls	r1, r1, #5
 800d918:	404a      	eors	r2, r1
 800d91a:	801a      	strh	r2, [r3, #0]
 800d91c:	687a      	ldr	r2, [r7, #4]
 800d91e:	683b      	ldr	r3, [r7, #0]
 800d920:	781b      	ldrb	r3, [r3, #0]
 800d922:	009b      	lsls	r3, r3, #2
 800d924:	18d3      	adds	r3, r2, r3
 800d926:	183a      	adds	r2, r7, r0
 800d928:	8812      	ldrh	r2, [r2, #0]
 800d92a:	4905      	ldr	r1, [pc, #20]	@ (800d940 <USB_EPSetStall+0x98>)
 800d92c:	430a      	orrs	r2, r1
 800d92e:	b292      	uxth	r2, r2
 800d930:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800d932:	2300      	movs	r3, #0
}
 800d934:	0018      	movs	r0, r3
 800d936:	46bd      	mov	sp, r7
 800d938:	b004      	add	sp, #16
 800d93a:	bd80      	pop	{r7, pc}
 800d93c:	ffff8fbf 	.word	0xffff8fbf
 800d940:	ffff8080 	.word	0xffff8080
 800d944:	ffffbf8f 	.word	0xffffbf8f

0800d948 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	7b1b      	ldrb	r3, [r3, #12]
 800d956:	2b00      	cmp	r3, #0
 800d958:	d000      	beq.n	800d95c <USB_EPClearStall+0x14>
 800d95a:	e095      	b.n	800da88 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800d95c:	683b      	ldr	r3, [r7, #0]
 800d95e:	785b      	ldrb	r3, [r3, #1]
 800d960:	2b00      	cmp	r3, #0
 800d962:	d046      	beq.n	800d9f2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	009b      	lsls	r3, r3, #2
 800d96c:	18d2      	adds	r2, r2, r3
 800d96e:	2110      	movs	r1, #16
 800d970:	187b      	adds	r3, r7, r1
 800d972:	8812      	ldrh	r2, [r2, #0]
 800d974:	801a      	strh	r2, [r3, #0]
 800d976:	187b      	adds	r3, r7, r1
 800d978:	881b      	ldrh	r3, [r3, #0]
 800d97a:	2240      	movs	r2, #64	@ 0x40
 800d97c:	4013      	ands	r3, r2
 800d97e:	d016      	beq.n	800d9ae <USB_EPClearStall+0x66>
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	683b      	ldr	r3, [r7, #0]
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	009b      	lsls	r3, r3, #2
 800d988:	18d3      	adds	r3, r2, r3
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	b29a      	uxth	r2, r3
 800d98e:	200e      	movs	r0, #14
 800d990:	183b      	adds	r3, r7, r0
 800d992:	4940      	ldr	r1, [pc, #256]	@ (800da94 <USB_EPClearStall+0x14c>)
 800d994:	400a      	ands	r2, r1
 800d996:	801a      	strh	r2, [r3, #0]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	781b      	ldrb	r3, [r3, #0]
 800d99e:	009b      	lsls	r3, r3, #2
 800d9a0:	18d3      	adds	r3, r2, r3
 800d9a2:	183a      	adds	r2, r7, r0
 800d9a4:	8812      	ldrh	r2, [r2, #0]
 800d9a6:	493c      	ldr	r1, [pc, #240]	@ (800da98 <USB_EPClearStall+0x150>)
 800d9a8:	430a      	orrs	r2, r1
 800d9aa:	b292      	uxth	r2, r2
 800d9ac:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	78db      	ldrb	r3, [r3, #3]
 800d9b2:	2b01      	cmp	r3, #1
 800d9b4:	d068      	beq.n	800da88 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800d9b6:	687a      	ldr	r2, [r7, #4]
 800d9b8:	683b      	ldr	r3, [r7, #0]
 800d9ba:	781b      	ldrb	r3, [r3, #0]
 800d9bc:	009b      	lsls	r3, r3, #2
 800d9be:	18d3      	adds	r3, r2, r3
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	b29a      	uxth	r2, r3
 800d9c4:	200c      	movs	r0, #12
 800d9c6:	183b      	adds	r3, r7, r0
 800d9c8:	4934      	ldr	r1, [pc, #208]	@ (800da9c <USB_EPClearStall+0x154>)
 800d9ca:	400a      	ands	r2, r1
 800d9cc:	801a      	strh	r2, [r3, #0]
 800d9ce:	183b      	adds	r3, r7, r0
 800d9d0:	183a      	adds	r2, r7, r0
 800d9d2:	8812      	ldrh	r2, [r2, #0]
 800d9d4:	2120      	movs	r1, #32
 800d9d6:	404a      	eors	r2, r1
 800d9d8:	801a      	strh	r2, [r3, #0]
 800d9da:	687a      	ldr	r2, [r7, #4]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	781b      	ldrb	r3, [r3, #0]
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	18d3      	adds	r3, r2, r3
 800d9e4:	183a      	adds	r2, r7, r0
 800d9e6:	8812      	ldrh	r2, [r2, #0]
 800d9e8:	492d      	ldr	r1, [pc, #180]	@ (800daa0 <USB_EPClearStall+0x158>)
 800d9ea:	430a      	orrs	r2, r1
 800d9ec:	b292      	uxth	r2, r2
 800d9ee:	801a      	strh	r2, [r3, #0]
 800d9f0:	e04a      	b.n	800da88 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800d9f2:	687a      	ldr	r2, [r7, #4]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	781b      	ldrb	r3, [r3, #0]
 800d9f8:	009b      	lsls	r3, r3, #2
 800d9fa:	18d2      	adds	r2, r2, r3
 800d9fc:	2116      	movs	r1, #22
 800d9fe:	187b      	adds	r3, r7, r1
 800da00:	8812      	ldrh	r2, [r2, #0]
 800da02:	801a      	strh	r2, [r3, #0]
 800da04:	187b      	adds	r3, r7, r1
 800da06:	881a      	ldrh	r2, [r3, #0]
 800da08:	2380      	movs	r3, #128	@ 0x80
 800da0a:	01db      	lsls	r3, r3, #7
 800da0c:	4013      	ands	r3, r2
 800da0e:	d016      	beq.n	800da3e <USB_EPClearStall+0xf6>
 800da10:	687a      	ldr	r2, [r7, #4]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	781b      	ldrb	r3, [r3, #0]
 800da16:	009b      	lsls	r3, r3, #2
 800da18:	18d3      	adds	r3, r2, r3
 800da1a:	881b      	ldrh	r3, [r3, #0]
 800da1c:	b29a      	uxth	r2, r3
 800da1e:	2014      	movs	r0, #20
 800da20:	183b      	adds	r3, r7, r0
 800da22:	491c      	ldr	r1, [pc, #112]	@ (800da94 <USB_EPClearStall+0x14c>)
 800da24:	400a      	ands	r2, r1
 800da26:	801a      	strh	r2, [r3, #0]
 800da28:	687a      	ldr	r2, [r7, #4]
 800da2a:	683b      	ldr	r3, [r7, #0]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	009b      	lsls	r3, r3, #2
 800da30:	18d3      	adds	r3, r2, r3
 800da32:	183a      	adds	r2, r7, r0
 800da34:	8812      	ldrh	r2, [r2, #0]
 800da36:	491b      	ldr	r1, [pc, #108]	@ (800daa4 <USB_EPClearStall+0x15c>)
 800da38:	430a      	orrs	r2, r1
 800da3a:	b292      	uxth	r2, r2
 800da3c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800da3e:	687a      	ldr	r2, [r7, #4]
 800da40:	683b      	ldr	r3, [r7, #0]
 800da42:	781b      	ldrb	r3, [r3, #0]
 800da44:	009b      	lsls	r3, r3, #2
 800da46:	18d3      	adds	r3, r2, r3
 800da48:	881b      	ldrh	r3, [r3, #0]
 800da4a:	b29a      	uxth	r2, r3
 800da4c:	2012      	movs	r0, #18
 800da4e:	183b      	adds	r3, r7, r0
 800da50:	4915      	ldr	r1, [pc, #84]	@ (800daa8 <USB_EPClearStall+0x160>)
 800da52:	400a      	ands	r2, r1
 800da54:	801a      	strh	r2, [r3, #0]
 800da56:	183b      	adds	r3, r7, r0
 800da58:	183a      	adds	r2, r7, r0
 800da5a:	8812      	ldrh	r2, [r2, #0]
 800da5c:	2180      	movs	r1, #128	@ 0x80
 800da5e:	0149      	lsls	r1, r1, #5
 800da60:	404a      	eors	r2, r1
 800da62:	801a      	strh	r2, [r3, #0]
 800da64:	183b      	adds	r3, r7, r0
 800da66:	183a      	adds	r2, r7, r0
 800da68:	8812      	ldrh	r2, [r2, #0]
 800da6a:	2180      	movs	r1, #128	@ 0x80
 800da6c:	0189      	lsls	r1, r1, #6
 800da6e:	404a      	eors	r2, r1
 800da70:	801a      	strh	r2, [r3, #0]
 800da72:	687a      	ldr	r2, [r7, #4]
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	781b      	ldrb	r3, [r3, #0]
 800da78:	009b      	lsls	r3, r3, #2
 800da7a:	18d3      	adds	r3, r2, r3
 800da7c:	183a      	adds	r2, r7, r0
 800da7e:	8812      	ldrh	r2, [r2, #0]
 800da80:	4907      	ldr	r1, [pc, #28]	@ (800daa0 <USB_EPClearStall+0x158>)
 800da82:	430a      	orrs	r2, r1
 800da84:	b292      	uxth	r2, r2
 800da86:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800da88:	2300      	movs	r3, #0
}
 800da8a:	0018      	movs	r0, r3
 800da8c:	46bd      	mov	sp, r7
 800da8e:	b006      	add	sp, #24
 800da90:	bd80      	pop	{r7, pc}
 800da92:	46c0      	nop			@ (mov r8, r8)
 800da94:	ffff8f8f 	.word	0xffff8f8f
 800da98:	ffff80c0 	.word	0xffff80c0
 800da9c:	ffff8fbf 	.word	0xffff8fbf
 800daa0:	ffff8080 	.word	0xffff8080
 800daa4:	ffffc080 	.word	0xffffc080
 800daa8:	ffffbf8f 	.word	0xffffbf8f

0800daac <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b082      	sub	sp, #8
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	000a      	movs	r2, r1
 800dab6:	1cfb      	adds	r3, r7, #3
 800dab8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800daba:	1cfb      	adds	r3, r7, #3
 800dabc:	781b      	ldrb	r3, [r3, #0]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d103      	bne.n	800daca <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	224c      	movs	r2, #76	@ 0x4c
 800dac6:	2180      	movs	r1, #128	@ 0x80
 800dac8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800daca:	2300      	movs	r3, #0
}
 800dacc:	0018      	movs	r0, r3
 800dace:	46bd      	mov	sp, r7
 800dad0:	b002      	add	sp, #8
 800dad2:	bd80      	pop	{r7, pc}

0800dad4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b082      	sub	sp, #8
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2258      	movs	r2, #88	@ 0x58
 800dae0:	5a9b      	ldrh	r3, [r3, r2]
 800dae2:	b29b      	uxth	r3, r3
 800dae4:	4a05      	ldr	r2, [pc, #20]	@ (800dafc <USB_DevConnect+0x28>)
 800dae6:	4313      	orrs	r3, r2
 800dae8:	b299      	uxth	r1, r3
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	2258      	movs	r2, #88	@ 0x58
 800daee:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800daf0:	2300      	movs	r3, #0
}
 800daf2:	0018      	movs	r0, r3
 800daf4:	46bd      	mov	sp, r7
 800daf6:	b002      	add	sp, #8
 800daf8:	bd80      	pop	{r7, pc}
 800dafa:	46c0      	nop			@ (mov r8, r8)
 800dafc:	ffff8000 	.word	0xffff8000

0800db00 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef const *USBx)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2244      	movs	r2, #68	@ 0x44
 800db0c:	5a9b      	ldrh	r3, [r3, r2]
 800db0e:	b29b      	uxth	r3, r3
 800db10:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800db12:	68fb      	ldr	r3, [r7, #12]
}
 800db14:	0018      	movs	r0, r3
 800db16:	46bd      	mov	sp, r7
 800db18:	b004      	add	sp, #16
 800db1a:	bd80      	pop	{r7, pc}

0800db1c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	b08a      	sub	sp, #40	@ 0x28
 800db20:	af00      	add	r7, sp, #0
 800db22:	60f8      	str	r0, [r7, #12]
 800db24:	60b9      	str	r1, [r7, #8]
 800db26:	0019      	movs	r1, r3
 800db28:	1dbb      	adds	r3, r7, #6
 800db2a:	801a      	strh	r2, [r3, #0]
 800db2c:	1d3b      	adds	r3, r7, #4
 800db2e:	1c0a      	adds	r2, r1, #0
 800db30:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800db32:	1d3b      	adds	r3, r7, #4
 800db34:	881b      	ldrh	r3, [r3, #0]
 800db36:	3301      	adds	r3, #1
 800db38:	085b      	lsrs	r3, r3, #1
 800db3a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800db40:	68bb      	ldr	r3, [r7, #8]
 800db42:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800db44:	1dbb      	adds	r3, r7, #6
 800db46:	881a      	ldrh	r2, [r3, #0]
 800db48:	697b      	ldr	r3, [r7, #20]
 800db4a:	18d3      	adds	r3, r2, r3
 800db4c:	2280      	movs	r2, #128	@ 0x80
 800db4e:	00d2      	lsls	r2, r2, #3
 800db50:	4694      	mov	ip, r2
 800db52:	4463      	add	r3, ip
 800db54:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800db56:	69bb      	ldr	r3, [r7, #24]
 800db58:	627b      	str	r3, [r7, #36]	@ 0x24
 800db5a:	e020      	b.n	800db9e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	781a      	ldrb	r2, [r3, #0]
 800db60:	2112      	movs	r1, #18
 800db62:	187b      	adds	r3, r7, r1
 800db64:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800db66:	69fb      	ldr	r3, [r7, #28]
 800db68:	3301      	adds	r3, #1
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	021b      	lsls	r3, r3, #8
 800db6e:	b21a      	sxth	r2, r3
 800db70:	187b      	adds	r3, r7, r1
 800db72:	2000      	movs	r0, #0
 800db74:	5e1b      	ldrsh	r3, [r3, r0]
 800db76:	4313      	orrs	r3, r2
 800db78:	b21a      	sxth	r2, r3
 800db7a:	187b      	adds	r3, r7, r1
 800db7c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800db7e:	6a3b      	ldr	r3, [r7, #32]
 800db80:	187a      	adds	r2, r7, r1
 800db82:	8812      	ldrh	r2, [r2, #0]
 800db84:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800db86:	6a3b      	ldr	r3, [r7, #32]
 800db88:	3302      	adds	r3, #2
 800db8a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	3301      	adds	r3, #1
 800db90:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800db92:	69fb      	ldr	r3, [r7, #28]
 800db94:	3301      	adds	r3, #1
 800db96:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800db98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db9a:	3b01      	subs	r3, #1
 800db9c:	627b      	str	r3, [r7, #36]	@ 0x24
 800db9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	d1db      	bne.n	800db5c <USB_WritePMA+0x40>
  }
}
 800dba4:	46c0      	nop			@ (mov r8, r8)
 800dba6:	46c0      	nop			@ (mov r8, r8)
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	b00a      	add	sp, #40	@ 0x28
 800dbac:	bd80      	pop	{r7, pc}

0800dbae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef const *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800dbae:	b580      	push	{r7, lr}
 800dbb0:	b08a      	sub	sp, #40	@ 0x28
 800dbb2:	af00      	add	r7, sp, #0
 800dbb4:	60f8      	str	r0, [r7, #12]
 800dbb6:	60b9      	str	r1, [r7, #8]
 800dbb8:	0019      	movs	r1, r3
 800dbba:	1dbb      	adds	r3, r7, #6
 800dbbc:	801a      	strh	r2, [r3, #0]
 800dbbe:	1d3b      	adds	r3, r7, #4
 800dbc0:	1c0a      	adds	r2, r1, #0
 800dbc2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800dbc4:	1d3b      	adds	r3, r7, #4
 800dbc6:	881b      	ldrh	r3, [r3, #0]
 800dbc8:	085b      	lsrs	r3, r3, #1
 800dbca:	b29b      	uxth	r3, r3
 800dbcc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800dbd6:	1dbb      	adds	r3, r7, #6
 800dbd8:	881a      	ldrh	r2, [r3, #0]
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	18d3      	adds	r3, r2, r3
 800dbde:	2280      	movs	r2, #128	@ 0x80
 800dbe0:	00d2      	lsls	r2, r2, #3
 800dbe2:	4694      	mov	ip, r2
 800dbe4:	4463      	add	r3, ip
 800dbe6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800dbe8:	69bb      	ldr	r3, [r7, #24]
 800dbea:	627b      	str	r3, [r7, #36]	@ 0x24
 800dbec:	e018      	b.n	800dc20 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800dbee:	6a3b      	ldr	r3, [r7, #32]
 800dbf0:	881b      	ldrh	r3, [r3, #0]
 800dbf2:	b29b      	uxth	r3, r3
 800dbf4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800dbf6:	6a3b      	ldr	r3, [r7, #32]
 800dbf8:	3302      	adds	r3, #2
 800dbfa:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dbfc:	693b      	ldr	r3, [r7, #16]
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	69fb      	ldr	r3, [r7, #28]
 800dc02:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dc04:	69fb      	ldr	r3, [r7, #28]
 800dc06:	3301      	adds	r3, #1
 800dc08:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	0a1b      	lsrs	r3, r3, #8
 800dc0e:	b2da      	uxtb	r2, r3
 800dc10:	69fb      	ldr	r3, [r7, #28]
 800dc12:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800dc14:	69fb      	ldr	r3, [r7, #28]
 800dc16:	3301      	adds	r3, #1
 800dc18:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800dc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc1c:	3b01      	subs	r3, #1
 800dc1e:	627b      	str	r3, [r7, #36]	@ 0x24
 800dc20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d1e3      	bne.n	800dbee <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800dc26:	1d3b      	adds	r3, r7, #4
 800dc28:	881b      	ldrh	r3, [r3, #0]
 800dc2a:	2201      	movs	r2, #1
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	b29b      	uxth	r3, r3
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d007      	beq.n	800dc44 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800dc34:	6a3b      	ldr	r3, [r7, #32]
 800dc36:	881b      	ldrh	r3, [r3, #0]
 800dc38:	b29b      	uxth	r3, r3
 800dc3a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	69fb      	ldr	r3, [r7, #28]
 800dc42:	701a      	strb	r2, [r3, #0]
  }
}
 800dc44:	46c0      	nop			@ (mov r8, r8)
 800dc46:	46bd      	mov	sp, r7
 800dc48:	b00a      	add	sp, #40	@ 0x28
 800dc4a:	bd80      	pop	{r7, pc}

0800dc4c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc4c:	b580      	push	{r7, lr}
 800dc4e:	b084      	sub	sp, #16
 800dc50:	af00      	add	r7, sp, #0
 800dc52:	6078      	str	r0, [r7, #4]
 800dc54:	000a      	movs	r2, r1
 800dc56:	1cfb      	adds	r3, r7, #3
 800dc58:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800dc5a:	230f      	movs	r3, #15
 800dc5c:	18fb      	adds	r3, r7, r3
 800dc5e:	2200      	movs	r2, #0
 800dc60:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	7c1b      	ldrb	r3, [r3, #16]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d116      	bne.n	800dc98 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dc6a:	2380      	movs	r3, #128	@ 0x80
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	6878      	ldr	r0, [r7, #4]
 800dc70:	2202      	movs	r2, #2
 800dc72:	2181      	movs	r1, #129	@ 0x81
 800dc74:	f002 f83b 	bl	800fcee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2201      	movs	r2, #1
 800dc7c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dc7e:	2380      	movs	r3, #128	@ 0x80
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	6878      	ldr	r0, [r7, #4]
 800dc84:	2202      	movs	r2, #2
 800dc86:	2101      	movs	r1, #1
 800dc88:	f002 f831 	bl	800fcee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dc8c:	687a      	ldr	r2, [r7, #4]
 800dc8e:	23b6      	movs	r3, #182	@ 0xb6
 800dc90:	005b      	lsls	r3, r3, #1
 800dc92:	2101      	movs	r1, #1
 800dc94:	50d1      	str	r1, [r2, r3]
 800dc96:	e013      	b.n	800dcc0 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800dc98:	6878      	ldr	r0, [r7, #4]
 800dc9a:	2340      	movs	r3, #64	@ 0x40
 800dc9c:	2202      	movs	r2, #2
 800dc9e:	2181      	movs	r1, #129	@ 0x81
 800dca0:	f002 f825 	bl	800fcee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	2201      	movs	r2, #1
 800dca8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800dcaa:	6878      	ldr	r0, [r7, #4]
 800dcac:	2340      	movs	r3, #64	@ 0x40
 800dcae:	2202      	movs	r2, #2
 800dcb0:	2101      	movs	r1, #1
 800dcb2:	f002 f81c 	bl	800fcee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800dcb6:	687a      	ldr	r2, [r7, #4]
 800dcb8:	23b6      	movs	r3, #182	@ 0xb6
 800dcba:	005b      	lsls	r3, r3, #1
 800dcbc:	2101      	movs	r1, #1
 800dcbe:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	2308      	movs	r3, #8
 800dcc4:	2203      	movs	r2, #3
 800dcc6:	2182      	movs	r1, #130	@ 0x82
 800dcc8:	f002 f811 	bl	800fcee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2201      	movs	r2, #1
 800dcd0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dcd2:	2387      	movs	r3, #135	@ 0x87
 800dcd4:	009b      	lsls	r3, r3, #2
 800dcd6:	0018      	movs	r0, r3
 800dcd8:	f002 f9a0 	bl	801001c <USBD_static_malloc>
 800dcdc:	0001      	movs	r1, r0
 800dcde:	687a      	ldr	r2, [r7, #4]
 800dce0:	23ae      	movs	r3, #174	@ 0xae
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	23ae      	movs	r3, #174	@ 0xae
 800dcea:	009b      	lsls	r3, r3, #2
 800dcec:	58d3      	ldr	r3, [r2, r3]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d104      	bne.n	800dcfc <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800dcf2:	230f      	movs	r3, #15
 800dcf4:	18fb      	adds	r3, r7, r3
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	701a      	strb	r2, [r3, #0]
 800dcfa:	e02c      	b.n	800dd56 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800dcfc:	687a      	ldr	r2, [r7, #4]
 800dcfe:	23ae      	movs	r3, #174	@ 0xae
 800dd00:	009b      	lsls	r3, r3, #2
 800dd02:	58d3      	ldr	r3, [r2, r3]
 800dd04:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800dd06:	687a      	ldr	r2, [r7, #4]
 800dd08:	23af      	movs	r3, #175	@ 0xaf
 800dd0a:	009b      	lsls	r3, r3, #2
 800dd0c:	58d3      	ldr	r3, [r2, r3]
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800dd12:	68ba      	ldr	r2, [r7, #8]
 800dd14:	2385      	movs	r3, #133	@ 0x85
 800dd16:	009b      	lsls	r3, r3, #2
 800dd18:	2100      	movs	r1, #0
 800dd1a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800dd1c:	68ba      	ldr	r2, [r7, #8]
 800dd1e:	2386      	movs	r3, #134	@ 0x86
 800dd20:	009b      	lsls	r3, r3, #2
 800dd22:	2100      	movs	r1, #0
 800dd24:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	7c1b      	ldrb	r3, [r3, #16]
 800dd2a:	2b00      	cmp	r3, #0
 800dd2c:	d10a      	bne.n	800dd44 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd2e:	68ba      	ldr	r2, [r7, #8]
 800dd30:	2381      	movs	r3, #129	@ 0x81
 800dd32:	009b      	lsls	r3, r3, #2
 800dd34:	58d2      	ldr	r2, [r2, r3]
 800dd36:	2380      	movs	r3, #128	@ 0x80
 800dd38:	009b      	lsls	r3, r3, #2
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	2101      	movs	r1, #1
 800dd3e:	f002 f920 	bl	800ff82 <USBD_LL_PrepareReceive>
 800dd42:	e008      	b.n	800dd56 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800dd44:	68ba      	ldr	r2, [r7, #8]
 800dd46:	2381      	movs	r3, #129	@ 0x81
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	58d2      	ldr	r2, [r2, r3]
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	2340      	movs	r3, #64	@ 0x40
 800dd50:	2101      	movs	r1, #1
 800dd52:	f002 f916 	bl	800ff82 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800dd56:	230f      	movs	r3, #15
 800dd58:	18fb      	adds	r3, r7, r3
 800dd5a:	781b      	ldrb	r3, [r3, #0]
}
 800dd5c:	0018      	movs	r0, r3
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	b004      	add	sp, #16
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b084      	sub	sp, #16
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	000a      	movs	r2, r1
 800dd6e:	1cfb      	adds	r3, r7, #3
 800dd70:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800dd72:	230f      	movs	r3, #15
 800dd74:	18fb      	adds	r3, r7, r3
 800dd76:	2200      	movs	r2, #0
 800dd78:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2181      	movs	r1, #129	@ 0x81
 800dd7e:	0018      	movs	r0, r3
 800dd80:	f001 ffec 	bl	800fd5c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	2200      	movs	r2, #0
 800dd88:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	2101      	movs	r1, #1
 800dd8e:	0018      	movs	r0, r3
 800dd90:	f001 ffe4 	bl	800fd5c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	23b6      	movs	r3, #182	@ 0xb6
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	2182      	movs	r1, #130	@ 0x82
 800dda2:	0018      	movs	r0, r3
 800dda4:	f001 ffda 	bl	800fd5c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800ddae:	687a      	ldr	r2, [r7, #4]
 800ddb0:	23ae      	movs	r3, #174	@ 0xae
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	58d3      	ldr	r3, [r2, r3]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d011      	beq.n	800ddde <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	23af      	movs	r3, #175	@ 0xaf
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	58d3      	ldr	r3, [r2, r3]
 800ddc2:	685b      	ldr	r3, [r3, #4]
 800ddc4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ddc6:	687a      	ldr	r2, [r7, #4]
 800ddc8:	23ae      	movs	r3, #174	@ 0xae
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	58d3      	ldr	r3, [r2, r3]
 800ddce:	0018      	movs	r0, r3
 800ddd0:	f002 f930 	bl	8010034 <USBD_static_free>
    pdev->pClassData = NULL;
 800ddd4:	687a      	ldr	r2, [r7, #4]
 800ddd6:	23ae      	movs	r3, #174	@ 0xae
 800ddd8:	009b      	lsls	r3, r3, #2
 800ddda:	2100      	movs	r1, #0
 800dddc:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800ddde:	230f      	movs	r3, #15
 800dde0:	18fb      	adds	r3, r7, r3
 800dde2:	781b      	ldrb	r3, [r3, #0]
}
 800dde4:	0018      	movs	r0, r3
 800dde6:	46bd      	mov	sp, r7
 800dde8:	b004      	add	sp, #16
 800ddea:	bd80      	pop	{r7, pc}

0800ddec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b086      	sub	sp, #24
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
 800ddf4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800ddf6:	687a      	ldr	r2, [r7, #4]
 800ddf8:	23ae      	movs	r3, #174	@ 0xae
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	58d3      	ldr	r3, [r2, r3]
 800ddfe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800de00:	230f      	movs	r3, #15
 800de02:	18fb      	adds	r3, r7, r3
 800de04:	2200      	movs	r2, #0
 800de06:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800de08:	230c      	movs	r3, #12
 800de0a:	18fb      	adds	r3, r7, r3
 800de0c:	2200      	movs	r2, #0
 800de0e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800de10:	2317      	movs	r3, #23
 800de12:	18fb      	adds	r3, r7, r3
 800de14:	2200      	movs	r2, #0
 800de16:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de18:	683b      	ldr	r3, [r7, #0]
 800de1a:	781b      	ldrb	r3, [r3, #0]
 800de1c:	001a      	movs	r2, r3
 800de1e:	2360      	movs	r3, #96	@ 0x60
 800de20:	4013      	ands	r3, r2
 800de22:	d03d      	beq.n	800dea0 <USBD_CDC_Setup+0xb4>
 800de24:	2b20      	cmp	r3, #32
 800de26:	d000      	beq.n	800de2a <USBD_CDC_Setup+0x3e>
 800de28:	e094      	b.n	800df54 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800de2a:	683b      	ldr	r3, [r7, #0]
 800de2c:	88db      	ldrh	r3, [r3, #6]
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d02b      	beq.n	800de8a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800de32:	683b      	ldr	r3, [r7, #0]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	b25b      	sxtb	r3, r3
 800de38:	2b00      	cmp	r3, #0
 800de3a:	da12      	bge.n	800de62 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800de3c:	687a      	ldr	r2, [r7, #4]
 800de3e:	23af      	movs	r3, #175	@ 0xaf
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	58d3      	ldr	r3, [r2, r3]
 800de44:	689b      	ldr	r3, [r3, #8]
 800de46:	683a      	ldr	r2, [r7, #0]
 800de48:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800de4a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800de4c:	683a      	ldr	r2, [r7, #0]
 800de4e:	88d2      	ldrh	r2, [r2, #6]
 800de50:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800de52:	6939      	ldr	r1, [r7, #16]
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	88da      	ldrh	r2, [r3, #6]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	0018      	movs	r0, r3
 800de5c:	f001 fb79 	bl	800f552 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800de60:	e083      	b.n	800df6a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800de62:	683b      	ldr	r3, [r7, #0]
 800de64:	7859      	ldrb	r1, [r3, #1]
 800de66:	693a      	ldr	r2, [r7, #16]
 800de68:	2380      	movs	r3, #128	@ 0x80
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800de6e:	683b      	ldr	r3, [r7, #0]
 800de70:	88db      	ldrh	r3, [r3, #6]
 800de72:	b2d9      	uxtb	r1, r3
 800de74:	693b      	ldr	r3, [r7, #16]
 800de76:	4a40      	ldr	r2, [pc, #256]	@ (800df78 <USBD_CDC_Setup+0x18c>)
 800de78:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800de7a:	6939      	ldr	r1, [r7, #16]
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	88da      	ldrh	r2, [r3, #6]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	0018      	movs	r0, r3
 800de84:	f001 fb98 	bl	800f5b8 <USBD_CtlPrepareRx>
      break;
 800de88:	e06f      	b.n	800df6a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	23af      	movs	r3, #175	@ 0xaf
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	58d3      	ldr	r3, [r2, r3]
 800de92:	689b      	ldr	r3, [r3, #8]
 800de94:	683a      	ldr	r2, [r7, #0]
 800de96:	7850      	ldrb	r0, [r2, #1]
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	2200      	movs	r2, #0
 800de9c:	4798      	blx	r3
      break;
 800de9e:	e064      	b.n	800df6a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800dea0:	683b      	ldr	r3, [r7, #0]
 800dea2:	785b      	ldrb	r3, [r3, #1]
 800dea4:	2b0b      	cmp	r3, #11
 800dea6:	d037      	beq.n	800df18 <USBD_CDC_Setup+0x12c>
 800dea8:	dc47      	bgt.n	800df3a <USBD_CDC_Setup+0x14e>
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d002      	beq.n	800deb4 <USBD_CDC_Setup+0xc8>
 800deae:	2b0a      	cmp	r3, #10
 800deb0:	d019      	beq.n	800dee6 <USBD_CDC_Setup+0xfa>
 800deb2:	e042      	b.n	800df3a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deb4:	687a      	ldr	r2, [r7, #4]
 800deb6:	23a7      	movs	r3, #167	@ 0xa7
 800deb8:	009b      	lsls	r3, r3, #2
 800deba:	5cd3      	ldrb	r3, [r2, r3]
 800debc:	2b03      	cmp	r3, #3
 800debe:	d107      	bne.n	800ded0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800dec0:	230c      	movs	r3, #12
 800dec2:	18f9      	adds	r1, r7, r3
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	0018      	movs	r0, r3
 800deca:	f001 fb42 	bl	800f552 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800dece:	e040      	b.n	800df52 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800ded0:	683a      	ldr	r2, [r7, #0]
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	0011      	movs	r1, r2
 800ded6:	0018      	movs	r0, r3
 800ded8:	f001 fabd 	bl	800f456 <USBD_CtlError>
            ret = USBD_FAIL;
 800dedc:	2317      	movs	r3, #23
 800dede:	18fb      	adds	r3, r7, r3
 800dee0:	2202      	movs	r2, #2
 800dee2:	701a      	strb	r2, [r3, #0]
          break;
 800dee4:	e035      	b.n	800df52 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dee6:	687a      	ldr	r2, [r7, #4]
 800dee8:	23a7      	movs	r3, #167	@ 0xa7
 800deea:	009b      	lsls	r3, r3, #2
 800deec:	5cd3      	ldrb	r3, [r2, r3]
 800deee:	2b03      	cmp	r3, #3
 800def0:	d107      	bne.n	800df02 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800def2:	230f      	movs	r3, #15
 800def4:	18f9      	adds	r1, r7, r3
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	2201      	movs	r2, #1
 800defa:	0018      	movs	r0, r3
 800defc:	f001 fb29 	bl	800f552 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800df00:	e027      	b.n	800df52 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800df02:	683a      	ldr	r2, [r7, #0]
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	0011      	movs	r1, r2
 800df08:	0018      	movs	r0, r3
 800df0a:	f001 faa4 	bl	800f456 <USBD_CtlError>
            ret = USBD_FAIL;
 800df0e:	2317      	movs	r3, #23
 800df10:	18fb      	adds	r3, r7, r3
 800df12:	2202      	movs	r2, #2
 800df14:	701a      	strb	r2, [r3, #0]
          break;
 800df16:	e01c      	b.n	800df52 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	23a7      	movs	r3, #167	@ 0xa7
 800df1c:	009b      	lsls	r3, r3, #2
 800df1e:	5cd3      	ldrb	r3, [r2, r3]
 800df20:	2b03      	cmp	r3, #3
 800df22:	d015      	beq.n	800df50 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800df24:	683a      	ldr	r2, [r7, #0]
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	0011      	movs	r1, r2
 800df2a:	0018      	movs	r0, r3
 800df2c:	f001 fa93 	bl	800f456 <USBD_CtlError>
            ret = USBD_FAIL;
 800df30:	2317      	movs	r3, #23
 800df32:	18fb      	adds	r3, r7, r3
 800df34:	2202      	movs	r2, #2
 800df36:	701a      	strb	r2, [r3, #0]
          }
          break;
 800df38:	e00a      	b.n	800df50 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800df3a:	683a      	ldr	r2, [r7, #0]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	0011      	movs	r1, r2
 800df40:	0018      	movs	r0, r3
 800df42:	f001 fa88 	bl	800f456 <USBD_CtlError>
          ret = USBD_FAIL;
 800df46:	2317      	movs	r3, #23
 800df48:	18fb      	adds	r3, r7, r3
 800df4a:	2202      	movs	r2, #2
 800df4c:	701a      	strb	r2, [r3, #0]
          break;
 800df4e:	e000      	b.n	800df52 <USBD_CDC_Setup+0x166>
          break;
 800df50:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800df52:	e00a      	b.n	800df6a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800df54:	683a      	ldr	r2, [r7, #0]
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	0011      	movs	r1, r2
 800df5a:	0018      	movs	r0, r3
 800df5c:	f001 fa7b 	bl	800f456 <USBD_CtlError>
      ret = USBD_FAIL;
 800df60:	2317      	movs	r3, #23
 800df62:	18fb      	adds	r3, r7, r3
 800df64:	2202      	movs	r2, #2
 800df66:	701a      	strb	r2, [r3, #0]
      break;
 800df68:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800df6a:	2317      	movs	r3, #23
 800df6c:	18fb      	adds	r3, r7, r3
 800df6e:	781b      	ldrb	r3, [r3, #0]
}
 800df70:	0018      	movs	r0, r3
 800df72:	46bd      	mov	sp, r7
 800df74:	b006      	add	sp, #24
 800df76:	bd80      	pop	{r7, pc}
 800df78:	00000201 	.word	0x00000201

0800df7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
 800df84:	000a      	movs	r2, r1
 800df86:	1cfb      	adds	r3, r7, #3
 800df88:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	23ae      	movs	r3, #174	@ 0xae
 800df8e:	009b      	lsls	r3, r3, #2
 800df90:	58d3      	ldr	r3, [r2, r3]
 800df92:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800df94:	687a      	ldr	r2, [r7, #4]
 800df96:	23b0      	movs	r3, #176	@ 0xb0
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	58d3      	ldr	r3, [r2, r3]
 800df9c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800df9e:	687a      	ldr	r2, [r7, #4]
 800dfa0:	23ae      	movs	r3, #174	@ 0xae
 800dfa2:	009b      	lsls	r3, r3, #2
 800dfa4:	58d3      	ldr	r3, [r2, r3]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d03e      	beq.n	800e028 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800dfaa:	1cfb      	adds	r3, r7, #3
 800dfac:	781a      	ldrb	r2, [r3, #0]
 800dfae:	6879      	ldr	r1, [r7, #4]
 800dfb0:	0013      	movs	r3, r2
 800dfb2:	009b      	lsls	r3, r3, #2
 800dfb4:	189b      	adds	r3, r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	18cb      	adds	r3, r1, r3
 800dfba:	331c      	adds	r3, #28
 800dfbc:	681b      	ldr	r3, [r3, #0]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d02b      	beq.n	800e01a <USBD_CDC_DataIn+0x9e>
 800dfc2:	1cfb      	adds	r3, r7, #3
 800dfc4:	781a      	ldrb	r2, [r3, #0]
 800dfc6:	6879      	ldr	r1, [r7, #4]
 800dfc8:	0013      	movs	r3, r2
 800dfca:	009b      	lsls	r3, r3, #2
 800dfcc:	189b      	adds	r3, r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	18cb      	adds	r3, r1, r3
 800dfd2:	331c      	adds	r3, #28
 800dfd4:	6818      	ldr	r0, [r3, #0]
 800dfd6:	1cfb      	adds	r3, r7, #3
 800dfd8:	781a      	ldrb	r2, [r3, #0]
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	0013      	movs	r3, r2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	189b      	adds	r3, r3, r2
 800dfe2:	00db      	lsls	r3, r3, #3
 800dfe4:	18cb      	adds	r3, r1, r3
 800dfe6:	3320      	adds	r3, #32
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	0019      	movs	r1, r3
 800dfec:	f7f2 f912 	bl	8000214 <__aeabi_uidivmod>
 800dff0:	1e0b      	subs	r3, r1, #0
 800dff2:	d112      	bne.n	800e01a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800dff4:	1cfb      	adds	r3, r7, #3
 800dff6:	781a      	ldrb	r2, [r3, #0]
 800dff8:	6879      	ldr	r1, [r7, #4]
 800dffa:	0013      	movs	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	189b      	adds	r3, r3, r2
 800e000:	009b      	lsls	r3, r3, #2
 800e002:	18cb      	adds	r3, r1, r3
 800e004:	331c      	adds	r3, #28
 800e006:	2200      	movs	r2, #0
 800e008:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e00a:	1cfb      	adds	r3, r7, #3
 800e00c:	7819      	ldrb	r1, [r3, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	2300      	movs	r3, #0
 800e012:	2200      	movs	r2, #0
 800e014:	f001 ff7e 	bl	800ff14 <USBD_LL_Transmit>
 800e018:	e004      	b.n	800e024 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800e01a:	68fa      	ldr	r2, [r7, #12]
 800e01c:	2385      	movs	r3, #133	@ 0x85
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	2100      	movs	r1, #0
 800e022:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800e024:	2300      	movs	r3, #0
 800e026:	e000      	b.n	800e02a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800e028:	2302      	movs	r3, #2
  }
}
 800e02a:	0018      	movs	r0, r3
 800e02c:	46bd      	mov	sp, r7
 800e02e:	b004      	add	sp, #16
 800e030:	bd80      	pop	{r7, pc}

0800e032 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e032:	b580      	push	{r7, lr}
 800e034:	b084      	sub	sp, #16
 800e036:	af00      	add	r7, sp, #0
 800e038:	6078      	str	r0, [r7, #4]
 800e03a:	000a      	movs	r2, r1
 800e03c:	1cfb      	adds	r3, r7, #3
 800e03e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e040:	687a      	ldr	r2, [r7, #4]
 800e042:	23ae      	movs	r3, #174	@ 0xae
 800e044:	009b      	lsls	r3, r3, #2
 800e046:	58d3      	ldr	r3, [r2, r3]
 800e048:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e04a:	1cfb      	adds	r3, r7, #3
 800e04c:	781a      	ldrb	r2, [r3, #0]
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	0011      	movs	r1, r2
 800e052:	0018      	movs	r0, r3
 800e054:	f001 ffcc 	bl	800fff0 <USBD_LL_GetRxDataSize>
 800e058:	0001      	movs	r1, r0
 800e05a:	68fa      	ldr	r2, [r7, #12]
 800e05c:	2383      	movs	r3, #131	@ 0x83
 800e05e:	009b      	lsls	r3, r3, #2
 800e060:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800e062:	687a      	ldr	r2, [r7, #4]
 800e064:	23ae      	movs	r3, #174	@ 0xae
 800e066:	009b      	lsls	r3, r3, #2
 800e068:	58d3      	ldr	r3, [r2, r3]
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d011      	beq.n	800e092 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e06e:	687a      	ldr	r2, [r7, #4]
 800e070:	23af      	movs	r3, #175	@ 0xaf
 800e072:	009b      	lsls	r3, r3, #2
 800e074:	58d3      	ldr	r3, [r2, r3]
 800e076:	68da      	ldr	r2, [r3, #12]
 800e078:	68f9      	ldr	r1, [r7, #12]
 800e07a:	2381      	movs	r3, #129	@ 0x81
 800e07c:	009b      	lsls	r3, r3, #2
 800e07e:	58c8      	ldr	r0, [r1, r3]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	2183      	movs	r1, #131	@ 0x83
 800e084:	0089      	lsls	r1, r1, #2
 800e086:	468c      	mov	ip, r1
 800e088:	4463      	add	r3, ip
 800e08a:	0019      	movs	r1, r3
 800e08c:	4790      	blx	r2

    return USBD_OK;
 800e08e:	2300      	movs	r3, #0
 800e090:	e000      	b.n	800e094 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800e092:	2302      	movs	r3, #2
  }
}
 800e094:	0018      	movs	r0, r3
 800e096:	46bd      	mov	sp, r7
 800e098:	b004      	add	sp, #16
 800e09a:	bd80      	pop	{r7, pc}

0800e09c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e09c:	b590      	push	{r4, r7, lr}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	23ae      	movs	r3, #174	@ 0xae
 800e0a8:	009b      	lsls	r3, r3, #2
 800e0aa:	58d3      	ldr	r3, [r2, r3]
 800e0ac:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e0ae:	687a      	ldr	r2, [r7, #4]
 800e0b0:	23af      	movs	r3, #175	@ 0xaf
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	58d3      	ldr	r3, [r2, r3]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d018      	beq.n	800e0ec <USBD_CDC_EP0_RxReady+0x50>
 800e0ba:	68fa      	ldr	r2, [r7, #12]
 800e0bc:	2380      	movs	r3, #128	@ 0x80
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	5cd3      	ldrb	r3, [r2, r3]
 800e0c2:	2bff      	cmp	r3, #255	@ 0xff
 800e0c4:	d012      	beq.n	800e0ec <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e0c6:	687a      	ldr	r2, [r7, #4]
 800e0c8:	23af      	movs	r3, #175	@ 0xaf
 800e0ca:	009b      	lsls	r3, r3, #2
 800e0cc:	58d3      	ldr	r3, [r2, r3]
 800e0ce:	689b      	ldr	r3, [r3, #8]
 800e0d0:	68f9      	ldr	r1, [r7, #12]
 800e0d2:	2280      	movs	r2, #128	@ 0x80
 800e0d4:	0092      	lsls	r2, r2, #2
 800e0d6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800e0d8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800e0da:	68fa      	ldr	r2, [r7, #12]
 800e0dc:	4c06      	ldr	r4, [pc, #24]	@ (800e0f8 <USBD_CDC_EP0_RxReady+0x5c>)
 800e0de:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800e0e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e0e2:	68fa      	ldr	r2, [r7, #12]
 800e0e4:	2380      	movs	r3, #128	@ 0x80
 800e0e6:	009b      	lsls	r3, r3, #2
 800e0e8:	21ff      	movs	r1, #255	@ 0xff
 800e0ea:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800e0ec:	2300      	movs	r3, #0
}
 800e0ee:	0018      	movs	r0, r3
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	b005      	add	sp, #20
 800e0f4:	bd90      	pop	{r4, r7, pc}
 800e0f6:	46c0      	nop			@ (mov r8, r8)
 800e0f8:	00000201 	.word	0x00000201

0800e0fc <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e0fc:	b580      	push	{r7, lr}
 800e0fe:	b082      	sub	sp, #8
 800e100:	af00      	add	r7, sp, #0
 800e102:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	2243      	movs	r2, #67	@ 0x43
 800e108:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800e10a:	4b02      	ldr	r3, [pc, #8]	@ (800e114 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800e10c:	0018      	movs	r0, r3
 800e10e:	46bd      	mov	sp, r7
 800e110:	b002      	add	sp, #8
 800e112:	bd80      	pop	{r7, pc}
 800e114:	200000a8 	.word	0x200000a8

0800e118 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e118:	b580      	push	{r7, lr}
 800e11a:	b082      	sub	sp, #8
 800e11c:	af00      	add	r7, sp, #0
 800e11e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2243      	movs	r2, #67	@ 0x43
 800e124:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800e126:	4b02      	ldr	r3, [pc, #8]	@ (800e130 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800e128:	0018      	movs	r0, r3
 800e12a:	46bd      	mov	sp, r7
 800e12c:	b002      	add	sp, #8
 800e12e:	bd80      	pop	{r7, pc}
 800e130:	20000064 	.word	0x20000064

0800e134 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	2243      	movs	r2, #67	@ 0x43
 800e140:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800e142:	4b02      	ldr	r3, [pc, #8]	@ (800e14c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800e144:	0018      	movs	r0, r3
 800e146:	46bd      	mov	sp, r7
 800e148:	b002      	add	sp, #8
 800e14a:	bd80      	pop	{r7, pc}
 800e14c:	200000ec 	.word	0x200000ec

0800e150 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e150:	b580      	push	{r7, lr}
 800e152:	b082      	sub	sp, #8
 800e154:	af00      	add	r7, sp, #0
 800e156:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	220a      	movs	r2, #10
 800e15c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800e15e:	4b02      	ldr	r3, [pc, #8]	@ (800e168 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800e160:	0018      	movs	r0, r3
 800e162:	46bd      	mov	sp, r7
 800e164:	b002      	add	sp, #8
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20000020 	.word	0x20000020

0800e16c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800e176:	200f      	movs	r0, #15
 800e178:	183b      	adds	r3, r7, r0
 800e17a:	2202      	movs	r2, #2
 800e17c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d007      	beq.n	800e194 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800e184:	687a      	ldr	r2, [r7, #4]
 800e186:	23af      	movs	r3, #175	@ 0xaf
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	6839      	ldr	r1, [r7, #0]
 800e18c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800e18e:	183b      	adds	r3, r7, r0
 800e190:	2200      	movs	r2, #0
 800e192:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800e194:	230f      	movs	r3, #15
 800e196:	18fb      	adds	r3, r7, r3
 800e198:	781b      	ldrb	r3, [r3, #0]
}
 800e19a:	0018      	movs	r0, r3
 800e19c:	46bd      	mov	sp, r7
 800e19e:	b004      	add	sp, #16
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b086      	sub	sp, #24
 800e1a6:	af00      	add	r7, sp, #0
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	1dbb      	adds	r3, r7, #6
 800e1ae:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e1b0:	68fa      	ldr	r2, [r7, #12]
 800e1b2:	23ae      	movs	r3, #174	@ 0xae
 800e1b4:	009b      	lsls	r3, r3, #2
 800e1b6:	58d3      	ldr	r3, [r2, r3]
 800e1b8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800e1ba:	697a      	ldr	r2, [r7, #20]
 800e1bc:	2382      	movs	r3, #130	@ 0x82
 800e1be:	009b      	lsls	r3, r3, #2
 800e1c0:	68b9      	ldr	r1, [r7, #8]
 800e1c2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800e1c4:	1dbb      	adds	r3, r7, #6
 800e1c6:	8819      	ldrh	r1, [r3, #0]
 800e1c8:	697a      	ldr	r2, [r7, #20]
 800e1ca:	2384      	movs	r3, #132	@ 0x84
 800e1cc:	009b      	lsls	r3, r3, #2
 800e1ce:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800e1d0:	2300      	movs	r3, #0
}
 800e1d2:	0018      	movs	r0, r3
 800e1d4:	46bd      	mov	sp, r7
 800e1d6:	b006      	add	sp, #24
 800e1d8:	bd80      	pop	{r7, pc}

0800e1da <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800e1da:	b580      	push	{r7, lr}
 800e1dc:	b084      	sub	sp, #16
 800e1de:	af00      	add	r7, sp, #0
 800e1e0:	6078      	str	r0, [r7, #4]
 800e1e2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e1e4:	687a      	ldr	r2, [r7, #4]
 800e1e6:	23ae      	movs	r3, #174	@ 0xae
 800e1e8:	009b      	lsls	r3, r3, #2
 800e1ea:	58d3      	ldr	r3, [r2, r3]
 800e1ec:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800e1ee:	68fa      	ldr	r2, [r7, #12]
 800e1f0:	2381      	movs	r3, #129	@ 0x81
 800e1f2:	009b      	lsls	r3, r3, #2
 800e1f4:	6839      	ldr	r1, [r7, #0]
 800e1f6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800e1f8:	2300      	movs	r3, #0
}
 800e1fa:	0018      	movs	r0, r3
 800e1fc:	46bd      	mov	sp, r7
 800e1fe:	b004      	add	sp, #16
 800e200:	bd80      	pop	{r7, pc}

0800e202 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e202:	b580      	push	{r7, lr}
 800e204:	b084      	sub	sp, #16
 800e206:	af00      	add	r7, sp, #0
 800e208:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800e20a:	687a      	ldr	r2, [r7, #4]
 800e20c:	23ae      	movs	r3, #174	@ 0xae
 800e20e:	009b      	lsls	r3, r3, #2
 800e210:	58d3      	ldr	r3, [r2, r3]
 800e212:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800e214:	687a      	ldr	r2, [r7, #4]
 800e216:	23ae      	movs	r3, #174	@ 0xae
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	58d3      	ldr	r3, [r2, r3]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d019      	beq.n	800e254 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	7c1b      	ldrb	r3, [r3, #16]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d10a      	bne.n	800e23e <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e228:	68fa      	ldr	r2, [r7, #12]
 800e22a:	2381      	movs	r3, #129	@ 0x81
 800e22c:	009b      	lsls	r3, r3, #2
 800e22e:	58d2      	ldr	r2, [r2, r3]
 800e230:	2380      	movs	r3, #128	@ 0x80
 800e232:	009b      	lsls	r3, r3, #2
 800e234:	6878      	ldr	r0, [r7, #4]
 800e236:	2101      	movs	r1, #1
 800e238:	f001 fea3 	bl	800ff82 <USBD_LL_PrepareReceive>
 800e23c:	e008      	b.n	800e250 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800e23e:	68fa      	ldr	r2, [r7, #12]
 800e240:	2381      	movs	r3, #129	@ 0x81
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	58d2      	ldr	r2, [r2, r3]
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	2340      	movs	r3, #64	@ 0x40
 800e24a:	2101      	movs	r1, #1
 800e24c:	f001 fe99 	bl	800ff82 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800e250:	2300      	movs	r3, #0
 800e252:	e000      	b.n	800e256 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800e254:	2302      	movs	r3, #2
  }
}
 800e256:	0018      	movs	r0, r3
 800e258:	46bd      	mov	sp, r7
 800e25a:	b004      	add	sp, #16
 800e25c:	bd80      	pop	{r7, pc}

0800e25e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e25e:	b580      	push	{r7, lr}
 800e260:	b084      	sub	sp, #16
 800e262:	af00      	add	r7, sp, #0
 800e264:	60f8      	str	r0, [r7, #12]
 800e266:	60b9      	str	r1, [r7, #8]
 800e268:	1dfb      	adds	r3, r7, #7
 800e26a:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d101      	bne.n	800e276 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e272:	2302      	movs	r3, #2
 800e274:	e020      	b.n	800e2b8 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800e276:	68fa      	ldr	r2, [r7, #12]
 800e278:	23ad      	movs	r3, #173	@ 0xad
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	58d3      	ldr	r3, [r2, r3]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d004      	beq.n	800e28c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800e282:	68fa      	ldr	r2, [r7, #12]
 800e284:	23ad      	movs	r3, #173	@ 0xad
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	2100      	movs	r1, #0
 800e28a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d004      	beq.n	800e29c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e292:	68fa      	ldr	r2, [r7, #12]
 800e294:	23ac      	movs	r3, #172	@ 0xac
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	68b9      	ldr	r1, [r7, #8]
 800e29a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e29c:	68fa      	ldr	r2, [r7, #12]
 800e29e:	23a7      	movs	r3, #167	@ 0xa7
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	2101      	movs	r1, #1
 800e2a4:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	1dfa      	adds	r2, r7, #7
 800e2aa:	7812      	ldrb	r2, [r2, #0]
 800e2ac:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	0018      	movs	r0, r3
 800e2b2:	f001 fc93 	bl	800fbdc <USBD_LL_Init>

  return USBD_OK;
 800e2b6:	2300      	movs	r3, #0
}
 800e2b8:	0018      	movs	r0, r3
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	b004      	add	sp, #16
 800e2be:	bd80      	pop	{r7, pc}

0800e2c0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b084      	sub	sp, #16
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]
 800e2c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800e2ca:	200f      	movs	r0, #15
 800e2cc:	183b      	adds	r3, r7, r0
 800e2ce:	2200      	movs	r2, #0
 800e2d0:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800e2d2:	683b      	ldr	r3, [r7, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d008      	beq.n	800e2ea <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800e2d8:	687a      	ldr	r2, [r7, #4]
 800e2da:	23ad      	movs	r3, #173	@ 0xad
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	6839      	ldr	r1, [r7, #0]
 800e2e0:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800e2e2:	183b      	adds	r3, r7, r0
 800e2e4:	2200      	movs	r2, #0
 800e2e6:	701a      	strb	r2, [r3, #0]
 800e2e8:	e003      	b.n	800e2f2 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800e2ea:	230f      	movs	r3, #15
 800e2ec:	18fb      	adds	r3, r7, r3
 800e2ee:	2202      	movs	r2, #2
 800e2f0:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800e2f2:	230f      	movs	r3, #15
 800e2f4:	18fb      	adds	r3, r7, r3
 800e2f6:	781b      	ldrb	r3, [r3, #0]
}
 800e2f8:	0018      	movs	r0, r3
 800e2fa:	46bd      	mov	sp, r7
 800e2fc:	b004      	add	sp, #16
 800e2fe:	bd80      	pop	{r7, pc}

0800e300 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b082      	sub	sp, #8
 800e304:	af00      	add	r7, sp, #0
 800e306:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	0018      	movs	r0, r3
 800e30c:	f001 fcca 	bl	800fca4 <USBD_LL_Start>

  return USBD_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	0018      	movs	r0, r3
 800e314:	46bd      	mov	sp, r7
 800e316:	b002      	add	sp, #8
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e322:	2300      	movs	r3, #0
}
 800e324:	0018      	movs	r0, r3
 800e326:	46bd      	mov	sp, r7
 800e328:	b002      	add	sp, #8
 800e32a:	bd80      	pop	{r7, pc}

0800e32c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e32c:	b590      	push	{r4, r7, lr}
 800e32e:	b085      	sub	sp, #20
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]
 800e334:	000a      	movs	r2, r1
 800e336:	1cfb      	adds	r3, r7, #3
 800e338:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e33a:	240f      	movs	r4, #15
 800e33c:	193b      	adds	r3, r7, r4
 800e33e:	2202      	movs	r2, #2
 800e340:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	23ad      	movs	r3, #173	@ 0xad
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	58d3      	ldr	r3, [r2, r3]
 800e34a:	2b00      	cmp	r3, #0
 800e34c:	d00e      	beq.n	800e36c <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800e34e:	687a      	ldr	r2, [r7, #4]
 800e350:	23ad      	movs	r3, #173	@ 0xad
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	58d3      	ldr	r3, [r2, r3]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	1cfa      	adds	r2, r7, #3
 800e35a:	7811      	ldrb	r1, [r2, #0]
 800e35c:	687a      	ldr	r2, [r7, #4]
 800e35e:	0010      	movs	r0, r2
 800e360:	4798      	blx	r3
 800e362:	1e03      	subs	r3, r0, #0
 800e364:	d102      	bne.n	800e36c <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800e366:	193b      	adds	r3, r7, r4
 800e368:	2200      	movs	r2, #0
 800e36a:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800e36c:	230f      	movs	r3, #15
 800e36e:	18fb      	adds	r3, r7, r3
 800e370:	781b      	ldrb	r3, [r3, #0]
}
 800e372:	0018      	movs	r0, r3
 800e374:	46bd      	mov	sp, r7
 800e376:	b005      	add	sp, #20
 800e378:	bd90      	pop	{r4, r7, pc}

0800e37a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b082      	sub	sp, #8
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
 800e382:	000a      	movs	r2, r1
 800e384:	1cfb      	adds	r3, r7, #3
 800e386:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800e388:	687a      	ldr	r2, [r7, #4]
 800e38a:	23ad      	movs	r3, #173	@ 0xad
 800e38c:	009b      	lsls	r3, r3, #2
 800e38e:	58d3      	ldr	r3, [r2, r3]
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	1cfa      	adds	r2, r7, #3
 800e394:	7811      	ldrb	r1, [r2, #0]
 800e396:	687a      	ldr	r2, [r7, #4]
 800e398:	0010      	movs	r0, r2
 800e39a:	4798      	blx	r3

  return USBD_OK;
 800e39c:	2300      	movs	r3, #0
}
 800e39e:	0018      	movs	r0, r3
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	b002      	add	sp, #8
 800e3a4:	bd80      	pop	{r7, pc}
	...

0800e3a8 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
 800e3b0:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	22aa      	movs	r2, #170	@ 0xaa
 800e3b6:	0092      	lsls	r2, r2, #2
 800e3b8:	4694      	mov	ip, r2
 800e3ba:	4463      	add	r3, ip
 800e3bc:	683a      	ldr	r2, [r7, #0]
 800e3be:	0011      	movs	r1, r2
 800e3c0:	0018      	movs	r0, r3
 800e3c2:	f001 f810 	bl	800f3e6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e3c6:	687a      	ldr	r2, [r7, #4]
 800e3c8:	23a5      	movs	r3, #165	@ 0xa5
 800e3ca:	009b      	lsls	r3, r3, #2
 800e3cc:	2101      	movs	r1, #1
 800e3ce:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	4a23      	ldr	r2, [pc, #140]	@ (800e460 <USBD_LL_SetupStage+0xb8>)
 800e3d4:	5a9b      	ldrh	r3, [r3, r2]
 800e3d6:	0019      	movs	r1, r3
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	23a6      	movs	r3, #166	@ 0xa6
 800e3dc:	009b      	lsls	r3, r3, #2
 800e3de:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	23aa      	movs	r3, #170	@ 0xaa
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	5cd3      	ldrb	r3, [r2, r3]
 800e3e8:	001a      	movs	r2, r3
 800e3ea:	231f      	movs	r3, #31
 800e3ec:	4013      	ands	r3, r2
 800e3ee:	2b02      	cmp	r3, #2
 800e3f0:	d019      	beq.n	800e426 <USBD_LL_SetupStage+0x7e>
 800e3f2:	d822      	bhi.n	800e43a <USBD_LL_SetupStage+0x92>
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d002      	beq.n	800e3fe <USBD_LL_SetupStage+0x56>
 800e3f8:	2b01      	cmp	r3, #1
 800e3fa:	d00a      	beq.n	800e412 <USBD_LL_SetupStage+0x6a>
 800e3fc:	e01d      	b.n	800e43a <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	22aa      	movs	r2, #170	@ 0xaa
 800e402:	0092      	lsls	r2, r2, #2
 800e404:	189a      	adds	r2, r3, r2
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	0011      	movs	r1, r2
 800e40a:	0018      	movs	r0, r3
 800e40c:	f000 fa10 	bl	800e830 <USBD_StdDevReq>
      break;
 800e410:	e020      	b.n	800e454 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800e412:	687b      	ldr	r3, [r7, #4]
 800e414:	22aa      	movs	r2, #170	@ 0xaa
 800e416:	0092      	lsls	r2, r2, #2
 800e418:	189a      	adds	r2, r3, r2
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	0011      	movs	r1, r2
 800e41e:	0018      	movs	r0, r3
 800e420:	f000 fa78 	bl	800e914 <USBD_StdItfReq>
      break;
 800e424:	e016      	b.n	800e454 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	22aa      	movs	r2, #170	@ 0xaa
 800e42a:	0092      	lsls	r2, r2, #2
 800e42c:	189a      	adds	r2, r3, r2
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	0011      	movs	r1, r2
 800e432:	0018      	movs	r0, r3
 800e434:	f000 fac5 	bl	800e9c2 <USBD_StdEPReq>
      break;
 800e438:	e00c      	b.n	800e454 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e43a:	687a      	ldr	r2, [r7, #4]
 800e43c:	23aa      	movs	r3, #170	@ 0xaa
 800e43e:	009b      	lsls	r3, r3, #2
 800e440:	5cd3      	ldrb	r3, [r2, r3]
 800e442:	227f      	movs	r2, #127	@ 0x7f
 800e444:	4393      	bics	r3, r2
 800e446:	b2da      	uxtb	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	0011      	movs	r1, r2
 800e44c:	0018      	movs	r0, r3
 800e44e:	f001 fcb0 	bl	800fdb2 <USBD_LL_StallEP>
      break;
 800e452:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800e454:	2300      	movs	r3, #0
}
 800e456:	0018      	movs	r0, r3
 800e458:	46bd      	mov	sp, r7
 800e45a:	b002      	add	sp, #8
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	46c0      	nop			@ (mov r8, r8)
 800e460:	000002ae 	.word	0x000002ae

0800e464 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b086      	sub	sp, #24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	607a      	str	r2, [r7, #4]
 800e46e:	200b      	movs	r0, #11
 800e470:	183b      	adds	r3, r7, r0
 800e472:	1c0a      	adds	r2, r1, #0
 800e474:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e476:	183b      	adds	r3, r7, r0
 800e478:	781b      	ldrb	r3, [r3, #0]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d154      	bne.n	800e528 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800e47e:	68fb      	ldr	r3, [r7, #12]
 800e480:	3355      	adds	r3, #85	@ 0x55
 800e482:	33ff      	adds	r3, #255	@ 0xff
 800e484:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e486:	68fa      	ldr	r2, [r7, #12]
 800e488:	23a5      	movs	r3, #165	@ 0xa5
 800e48a:	009b      	lsls	r3, r3, #2
 800e48c:	58d3      	ldr	r3, [r2, r3]
 800e48e:	2b03      	cmp	r3, #3
 800e490:	d139      	bne.n	800e506 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800e492:	697b      	ldr	r3, [r7, #20]
 800e494:	68da      	ldr	r2, [r3, #12]
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	691b      	ldr	r3, [r3, #16]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	d919      	bls.n	800e4d2 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	68da      	ldr	r2, [r3, #12]
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	691b      	ldr	r3, [r3, #16]
 800e4a6:	1ad2      	subs	r2, r2, r3
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e4ac:	697b      	ldr	r3, [r7, #20]
 800e4ae:	68da      	ldr	r2, [r3, #12]
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d203      	bcs.n	800e4c0 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800e4bc:	b29b      	uxth	r3, r3
 800e4be:	e002      	b.n	800e4c6 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800e4c4:	b29b      	uxth	r3, r3
 800e4c6:	6879      	ldr	r1, [r7, #4]
 800e4c8:	68f8      	ldr	r0, [r7, #12]
 800e4ca:	001a      	movs	r2, r3
 800e4cc:	f001 f898 	bl	800f600 <USBD_CtlContinueRx>
 800e4d0:	e045      	b.n	800e55e <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e4d2:	68fa      	ldr	r2, [r7, #12]
 800e4d4:	23ad      	movs	r3, #173	@ 0xad
 800e4d6:	009b      	lsls	r3, r3, #2
 800e4d8:	58d3      	ldr	r3, [r2, r3]
 800e4da:	691b      	ldr	r3, [r3, #16]
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d00d      	beq.n	800e4fc <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e4e0:	68fa      	ldr	r2, [r7, #12]
 800e4e2:	23a7      	movs	r3, #167	@ 0xa7
 800e4e4:	009b      	lsls	r3, r3, #2
 800e4e6:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e4e8:	2b03      	cmp	r3, #3
 800e4ea:	d107      	bne.n	800e4fc <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e4ec:	68fa      	ldr	r2, [r7, #12]
 800e4ee:	23ad      	movs	r3, #173	@ 0xad
 800e4f0:	009b      	lsls	r3, r3, #2
 800e4f2:	58d3      	ldr	r3, [r2, r3]
 800e4f4:	691b      	ldr	r3, [r3, #16]
 800e4f6:	68fa      	ldr	r2, [r7, #12]
 800e4f8:	0010      	movs	r0, r2
 800e4fa:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	0018      	movs	r0, r3
 800e500:	f001 f891 	bl	800f626 <USBD_CtlSendStatus>
 800e504:	e02b      	b.n	800e55e <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800e506:	68fa      	ldr	r2, [r7, #12]
 800e508:	23a5      	movs	r3, #165	@ 0xa5
 800e50a:	009b      	lsls	r3, r3, #2
 800e50c:	58d3      	ldr	r3, [r2, r3]
 800e50e:	2b05      	cmp	r3, #5
 800e510:	d125      	bne.n	800e55e <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	23a5      	movs	r3, #165	@ 0xa5
 800e516:	009b      	lsls	r3, r3, #2
 800e518:	2100      	movs	r1, #0
 800e51a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800e51c:	68fb      	ldr	r3, [r7, #12]
 800e51e:	2100      	movs	r1, #0
 800e520:	0018      	movs	r0, r3
 800e522:	f001 fc46 	bl	800fdb2 <USBD_LL_StallEP>
 800e526:	e01a      	b.n	800e55e <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e528:	68fa      	ldr	r2, [r7, #12]
 800e52a:	23ad      	movs	r3, #173	@ 0xad
 800e52c:	009b      	lsls	r3, r3, #2
 800e52e:	58d3      	ldr	r3, [r2, r3]
 800e530:	699b      	ldr	r3, [r3, #24]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d011      	beq.n	800e55a <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e536:	68fa      	ldr	r2, [r7, #12]
 800e538:	23a7      	movs	r3, #167	@ 0xa7
 800e53a:	009b      	lsls	r3, r3, #2
 800e53c:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800e53e:	2b03      	cmp	r3, #3
 800e540:	d10b      	bne.n	800e55a <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800e542:	68fa      	ldr	r2, [r7, #12]
 800e544:	23ad      	movs	r3, #173	@ 0xad
 800e546:	009b      	lsls	r3, r3, #2
 800e548:	58d3      	ldr	r3, [r2, r3]
 800e54a:	699b      	ldr	r3, [r3, #24]
 800e54c:	220b      	movs	r2, #11
 800e54e:	18ba      	adds	r2, r7, r2
 800e550:	7811      	ldrb	r1, [r2, #0]
 800e552:	68fa      	ldr	r2, [r7, #12]
 800e554:	0010      	movs	r0, r2
 800e556:	4798      	blx	r3
 800e558:	e001      	b.n	800e55e <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e55a:	2302      	movs	r3, #2
 800e55c:	e000      	b.n	800e560 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800e55e:	2300      	movs	r3, #0
}
 800e560:	0018      	movs	r0, r3
 800e562:	46bd      	mov	sp, r7
 800e564:	b006      	add	sp, #24
 800e566:	bd80      	pop	{r7, pc}

0800e568 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b086      	sub	sp, #24
 800e56c:	af00      	add	r7, sp, #0
 800e56e:	60f8      	str	r0, [r7, #12]
 800e570:	607a      	str	r2, [r7, #4]
 800e572:	200b      	movs	r0, #11
 800e574:	183b      	adds	r3, r7, r0
 800e576:	1c0a      	adds	r2, r1, #0
 800e578:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800e57a:	183b      	adds	r3, r7, r0
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d000      	beq.n	800e584 <USBD_LL_DataInStage+0x1c>
 800e582:	e08e      	b.n	800e6a2 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	3314      	adds	r3, #20
 800e588:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e58a:	68fa      	ldr	r2, [r7, #12]
 800e58c:	23a5      	movs	r3, #165	@ 0xa5
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	58d3      	ldr	r3, [r2, r3]
 800e592:	2b02      	cmp	r3, #2
 800e594:	d164      	bne.n	800e660 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	68da      	ldr	r2, [r3, #12]
 800e59a:	697b      	ldr	r3, [r7, #20]
 800e59c:	691b      	ldr	r3, [r3, #16]
 800e59e:	429a      	cmp	r2, r3
 800e5a0:	d915      	bls.n	800e5ce <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800e5a2:	697b      	ldr	r3, [r7, #20]
 800e5a4:	68da      	ldr	r2, [r3, #12]
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	691b      	ldr	r3, [r3, #16]
 800e5aa:	1ad2      	subs	r2, r2, r3
 800e5ac:	697b      	ldr	r3, [r7, #20]
 800e5ae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800e5b0:	697b      	ldr	r3, [r7, #20]
 800e5b2:	68db      	ldr	r3, [r3, #12]
 800e5b4:	b29a      	uxth	r2, r3
 800e5b6:	6879      	ldr	r1, [r7, #4]
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	0018      	movs	r0, r3
 800e5bc:	f000 ffe9 	bl	800f592 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e5c0:	68f8      	ldr	r0, [r7, #12]
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	2100      	movs	r1, #0
 800e5c8:	f001 fcdb 	bl	800ff82 <USBD_LL_PrepareReceive>
 800e5cc:	e059      	b.n	800e682 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e5ce:	697b      	ldr	r3, [r7, #20]
 800e5d0:	689a      	ldr	r2, [r3, #8]
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	691b      	ldr	r3, [r3, #16]
 800e5d6:	0019      	movs	r1, r3
 800e5d8:	0010      	movs	r0, r2
 800e5da:	f7f1 fe1b 	bl	8000214 <__aeabi_uidivmod>
 800e5de:	1e0b      	subs	r3, r1, #0
 800e5e0:	d11f      	bne.n	800e622 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800e5e2:	697b      	ldr	r3, [r7, #20]
 800e5e4:	689a      	ldr	r2, [r3, #8]
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800e5ea:	429a      	cmp	r2, r3
 800e5ec:	d319      	bcc.n	800e622 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	689a      	ldr	r2, [r3, #8]
 800e5f2:	68f9      	ldr	r1, [r7, #12]
 800e5f4:	23a6      	movs	r3, #166	@ 0xa6
 800e5f6:	009b      	lsls	r3, r3, #2
 800e5f8:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d211      	bcs.n	800e622 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	2200      	movs	r2, #0
 800e602:	2100      	movs	r1, #0
 800e604:	0018      	movs	r0, r3
 800e606:	f000 ffc4 	bl	800f592 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e60a:	68fa      	ldr	r2, [r7, #12]
 800e60c:	23a6      	movs	r3, #166	@ 0xa6
 800e60e:	009b      	lsls	r3, r3, #2
 800e610:	2100      	movs	r1, #0
 800e612:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e614:	68f8      	ldr	r0, [r7, #12]
 800e616:	2300      	movs	r3, #0
 800e618:	2200      	movs	r2, #0
 800e61a:	2100      	movs	r1, #0
 800e61c:	f001 fcb1 	bl	800ff82 <USBD_LL_PrepareReceive>
 800e620:	e02f      	b.n	800e682 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e622:	68fa      	ldr	r2, [r7, #12]
 800e624:	23ad      	movs	r3, #173	@ 0xad
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	58d3      	ldr	r3, [r2, r3]
 800e62a:	68db      	ldr	r3, [r3, #12]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d00d      	beq.n	800e64c <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e630:	68fa      	ldr	r2, [r7, #12]
 800e632:	23a7      	movs	r3, #167	@ 0xa7
 800e634:	009b      	lsls	r3, r3, #2
 800e636:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d107      	bne.n	800e64c <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e63c:	68fa      	ldr	r2, [r7, #12]
 800e63e:	23ad      	movs	r3, #173	@ 0xad
 800e640:	009b      	lsls	r3, r3, #2
 800e642:	58d3      	ldr	r3, [r2, r3]
 800e644:	68db      	ldr	r3, [r3, #12]
 800e646:	68fa      	ldr	r2, [r7, #12]
 800e648:	0010      	movs	r0, r2
 800e64a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800e64c:	68fb      	ldr	r3, [r7, #12]
 800e64e:	2180      	movs	r1, #128	@ 0x80
 800e650:	0018      	movs	r0, r3
 800e652:	f001 fbae 	bl	800fdb2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800e656:	68fb      	ldr	r3, [r7, #12]
 800e658:	0018      	movs	r0, r3
 800e65a:	f000 fff8 	bl	800f64e <USBD_CtlReceiveStatus>
 800e65e:	e010      	b.n	800e682 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e660:	68fa      	ldr	r2, [r7, #12]
 800e662:	23a5      	movs	r3, #165	@ 0xa5
 800e664:	009b      	lsls	r3, r3, #2
 800e666:	58d3      	ldr	r3, [r2, r3]
 800e668:	2b04      	cmp	r3, #4
 800e66a:	d005      	beq.n	800e678 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800e66c:	68fa      	ldr	r2, [r7, #12]
 800e66e:	23a5      	movs	r3, #165	@ 0xa5
 800e670:	009b      	lsls	r3, r3, #2
 800e672:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800e674:	2b00      	cmp	r3, #0
 800e676:	d104      	bne.n	800e682 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2180      	movs	r1, #128	@ 0x80
 800e67c:	0018      	movs	r0, r3
 800e67e:	f001 fb98 	bl	800fdb2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	23a8      	movs	r3, #168	@ 0xa8
 800e686:	009b      	lsls	r3, r3, #2
 800e688:	5cd3      	ldrb	r3, [r2, r3]
 800e68a:	2b01      	cmp	r3, #1
 800e68c:	d124      	bne.n	800e6d8 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	0018      	movs	r0, r3
 800e692:	f7ff fe42 	bl	800e31a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e696:	68fa      	ldr	r2, [r7, #12]
 800e698:	23a8      	movs	r3, #168	@ 0xa8
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	2100      	movs	r1, #0
 800e69e:	54d1      	strb	r1, [r2, r3]
 800e6a0:	e01a      	b.n	800e6d8 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e6a2:	68fa      	ldr	r2, [r7, #12]
 800e6a4:	23ad      	movs	r3, #173	@ 0xad
 800e6a6:	009b      	lsls	r3, r3, #2
 800e6a8:	58d3      	ldr	r3, [r2, r3]
 800e6aa:	695b      	ldr	r3, [r3, #20]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d011      	beq.n	800e6d4 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e6b0:	68fa      	ldr	r2, [r7, #12]
 800e6b2:	23a7      	movs	r3, #167	@ 0xa7
 800e6b4:	009b      	lsls	r3, r3, #2
 800e6b6:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800e6b8:	2b03      	cmp	r3, #3
 800e6ba:	d10b      	bne.n	800e6d4 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800e6bc:	68fa      	ldr	r2, [r7, #12]
 800e6be:	23ad      	movs	r3, #173	@ 0xad
 800e6c0:	009b      	lsls	r3, r3, #2
 800e6c2:	58d3      	ldr	r3, [r2, r3]
 800e6c4:	695b      	ldr	r3, [r3, #20]
 800e6c6:	220b      	movs	r2, #11
 800e6c8:	18ba      	adds	r2, r7, r2
 800e6ca:	7811      	ldrb	r1, [r2, #0]
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	0010      	movs	r0, r2
 800e6d0:	4798      	blx	r3
 800e6d2:	e001      	b.n	800e6d8 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e6d4:	2302      	movs	r3, #2
 800e6d6:	e000      	b.n	800e6da <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800e6d8:	2300      	movs	r3, #0
}
 800e6da:	0018      	movs	r0, r3
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	b006      	add	sp, #24
 800e6e0:	bd80      	pop	{r7, pc}

0800e6e2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800e6e2:	b580      	push	{r7, lr}
 800e6e4:	b082      	sub	sp, #8
 800e6e6:	af00      	add	r7, sp, #0
 800e6e8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e6ea:	6878      	ldr	r0, [r7, #4]
 800e6ec:	2340      	movs	r3, #64	@ 0x40
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	f001 fafc 	bl	800fcee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	23ac      	movs	r3, #172	@ 0xac
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	23b2      	movs	r3, #178	@ 0xb2
 800e704:	005b      	lsls	r3, r3, #1
 800e706:	2140      	movs	r1, #64	@ 0x40
 800e708:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	2340      	movs	r3, #64	@ 0x40
 800e70e:	2200      	movs	r2, #0
 800e710:	2180      	movs	r1, #128	@ 0x80
 800e712:	f001 faec 	bl	800fcee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	2201      	movs	r2, #1
 800e71a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	2240      	movs	r2, #64	@ 0x40
 800e720:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e722:	687a      	ldr	r2, [r7, #4]
 800e724:	23a7      	movs	r3, #167	@ 0xa7
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	2101      	movs	r1, #1
 800e72a:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800e72c:	687a      	ldr	r2, [r7, #4]
 800e72e:	23a5      	movs	r3, #165	@ 0xa5
 800e730:	009b      	lsls	r3, r3, #2
 800e732:	2100      	movs	r1, #0
 800e734:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	23a9      	movs	r3, #169	@ 0xa9
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	2100      	movs	r1, #0
 800e744:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800e746:	687a      	ldr	r2, [r7, #4]
 800e748:	23ae      	movs	r3, #174	@ 0xae
 800e74a:	009b      	lsls	r3, r3, #2
 800e74c:	58d3      	ldr	r3, [r2, r3]
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d00a      	beq.n	800e768 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	23ad      	movs	r3, #173	@ 0xad
 800e756:	009b      	lsls	r3, r3, #2
 800e758:	58d3      	ldr	r3, [r2, r3]
 800e75a:	685a      	ldr	r2, [r3, #4]
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	685b      	ldr	r3, [r3, #4]
 800e760:	b2d9      	uxtb	r1, r3
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	0018      	movs	r0, r3
 800e766:	4790      	blx	r2
  }

  return USBD_OK;
 800e768:	2300      	movs	r3, #0
}
 800e76a:	0018      	movs	r0, r3
 800e76c:	46bd      	mov	sp, r7
 800e76e:	b002      	add	sp, #8
 800e770:	bd80      	pop	{r7, pc}

0800e772 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e772:	b580      	push	{r7, lr}
 800e774:	b082      	sub	sp, #8
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
 800e77a:	000a      	movs	r2, r1
 800e77c:	1cfb      	adds	r3, r7, #3
 800e77e:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	1cfa      	adds	r2, r7, #3
 800e784:	7812      	ldrb	r2, [r2, #0]
 800e786:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e788:	2300      	movs	r3, #0
}
 800e78a:	0018      	movs	r0, r3
 800e78c:	46bd      	mov	sp, r7
 800e78e:	b002      	add	sp, #8
 800e790:	bd80      	pop	{r7, pc}
	...

0800e794 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b082      	sub	sp, #8
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	23a7      	movs	r3, #167	@ 0xa7
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	5cd1      	ldrb	r1, [r2, r3]
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	4a06      	ldr	r2, [pc, #24]	@ (800e7c0 <USBD_LL_Suspend+0x2c>)
 800e7a8:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800e7aa:	687a      	ldr	r2, [r7, #4]
 800e7ac:	23a7      	movs	r3, #167	@ 0xa7
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	2104      	movs	r1, #4
 800e7b2:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800e7b4:	2300      	movs	r3, #0
}
 800e7b6:	0018      	movs	r0, r3
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	b002      	add	sp, #8
 800e7bc:	bd80      	pop	{r7, pc}
 800e7be:	46c0      	nop			@ (mov r8, r8)
 800e7c0:	0000029d 	.word	0x0000029d

0800e7c4 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b082      	sub	sp, #8
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	23a7      	movs	r3, #167	@ 0xa7
 800e7d0:	009b      	lsls	r3, r3, #2
 800e7d2:	5cd3      	ldrb	r3, [r2, r3]
 800e7d4:	2b04      	cmp	r3, #4
 800e7d6:	d106      	bne.n	800e7e6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	4a05      	ldr	r2, [pc, #20]	@ (800e7f0 <USBD_LL_Resume+0x2c>)
 800e7dc:	5c99      	ldrb	r1, [r3, r2]
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	23a7      	movs	r3, #167	@ 0xa7
 800e7e2:	009b      	lsls	r3, r3, #2
 800e7e4:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800e7e6:	2300      	movs	r3, #0
}
 800e7e8:	0018      	movs	r0, r3
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	b002      	add	sp, #8
 800e7ee:	bd80      	pop	{r7, pc}
 800e7f0:	0000029d 	.word	0x0000029d

0800e7f4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e7f4:	b580      	push	{r7, lr}
 800e7f6:	b082      	sub	sp, #8
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7fc:	687a      	ldr	r2, [r7, #4]
 800e7fe:	23a7      	movs	r3, #167	@ 0xa7
 800e800:	009b      	lsls	r3, r3, #2
 800e802:	5cd3      	ldrb	r3, [r2, r3]
 800e804:	2b03      	cmp	r3, #3
 800e806:	d10e      	bne.n	800e826 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800e808:	687a      	ldr	r2, [r7, #4]
 800e80a:	23ad      	movs	r3, #173	@ 0xad
 800e80c:	009b      	lsls	r3, r3, #2
 800e80e:	58d3      	ldr	r3, [r2, r3]
 800e810:	69db      	ldr	r3, [r3, #28]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d007      	beq.n	800e826 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800e816:	687a      	ldr	r2, [r7, #4]
 800e818:	23ad      	movs	r3, #173	@ 0xad
 800e81a:	009b      	lsls	r3, r3, #2
 800e81c:	58d3      	ldr	r3, [r2, r3]
 800e81e:	69db      	ldr	r3, [r3, #28]
 800e820:	687a      	ldr	r2, [r7, #4]
 800e822:	0010      	movs	r0, r2
 800e824:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e826:	2300      	movs	r3, #0
}
 800e828:	0018      	movs	r0, r3
 800e82a:	46bd      	mov	sp, r7
 800e82c:	b002      	add	sp, #8
 800e82e:	bd80      	pop	{r7, pc}

0800e830 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800e830:	b580      	push	{r7, lr}
 800e832:	b084      	sub	sp, #16
 800e834:	af00      	add	r7, sp, #0
 800e836:	6078      	str	r0, [r7, #4]
 800e838:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e83a:	230f      	movs	r3, #15
 800e83c:	18fb      	adds	r3, r7, r3
 800e83e:	2200      	movs	r2, #0
 800e840:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e842:	683b      	ldr	r3, [r7, #0]
 800e844:	781b      	ldrb	r3, [r3, #0]
 800e846:	001a      	movs	r2, r3
 800e848:	2360      	movs	r3, #96	@ 0x60
 800e84a:	4013      	ands	r3, r2
 800e84c:	2b40      	cmp	r3, #64	@ 0x40
 800e84e:	d004      	beq.n	800e85a <USBD_StdDevReq+0x2a>
 800e850:	d84f      	bhi.n	800e8f2 <USBD_StdDevReq+0xc2>
 800e852:	2b00      	cmp	r3, #0
 800e854:	d00b      	beq.n	800e86e <USBD_StdDevReq+0x3e>
 800e856:	2b20      	cmp	r3, #32
 800e858:	d14b      	bne.n	800e8f2 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e85a:	687a      	ldr	r2, [r7, #4]
 800e85c:	23ad      	movs	r3, #173	@ 0xad
 800e85e:	009b      	lsls	r3, r3, #2
 800e860:	58d3      	ldr	r3, [r2, r3]
 800e862:	689b      	ldr	r3, [r3, #8]
 800e864:	6839      	ldr	r1, [r7, #0]
 800e866:	687a      	ldr	r2, [r7, #4]
 800e868:	0010      	movs	r0, r2
 800e86a:	4798      	blx	r3
      break;
 800e86c:	e048      	b.n	800e900 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e86e:	683b      	ldr	r3, [r7, #0]
 800e870:	785b      	ldrb	r3, [r3, #1]
 800e872:	2b09      	cmp	r3, #9
 800e874:	d835      	bhi.n	800e8e2 <USBD_StdDevReq+0xb2>
 800e876:	009a      	lsls	r2, r3, #2
 800e878:	4b25      	ldr	r3, [pc, #148]	@ (800e910 <USBD_StdDevReq+0xe0>)
 800e87a:	18d3      	adds	r3, r2, r3
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e880:	683a      	ldr	r2, [r7, #0]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	0011      	movs	r1, r2
 800e886:	0018      	movs	r0, r3
 800e888:	f000 fa52 	bl	800ed30 <USBD_GetDescriptor>
          break;
 800e88c:	e030      	b.n	800e8f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e88e:	683a      	ldr	r2, [r7, #0]
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	0011      	movs	r1, r2
 800e894:	0018      	movs	r0, r3
 800e896:	f000 fbfd 	bl	800f094 <USBD_SetAddress>
          break;
 800e89a:	e029      	b.n	800e8f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800e89c:	683a      	ldr	r2, [r7, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	0011      	movs	r1, r2
 800e8a2:	0018      	movs	r0, r3
 800e8a4:	f000 fc4a 	bl	800f13c <USBD_SetConfig>
          break;
 800e8a8:	e022      	b.n	800e8f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e8aa:	683a      	ldr	r2, [r7, #0]
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	0011      	movs	r1, r2
 800e8b0:	0018      	movs	r0, r3
 800e8b2:	f000 fce7 	bl	800f284 <USBD_GetConfig>
          break;
 800e8b6:	e01b      	b.n	800e8f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e8b8:	683a      	ldr	r2, [r7, #0]
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	0011      	movs	r1, r2
 800e8be:	0018      	movs	r0, r3
 800e8c0:	f000 fd1b 	bl	800f2fa <USBD_GetStatus>
          break;
 800e8c4:	e014      	b.n	800e8f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e8c6:	683a      	ldr	r2, [r7, #0]
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	0011      	movs	r1, r2
 800e8cc:	0018      	movs	r0, r3
 800e8ce:	f000 fd4e 	bl	800f36e <USBD_SetFeature>
          break;
 800e8d2:	e00d      	b.n	800e8f0 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e8d4:	683a      	ldr	r2, [r7, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	0011      	movs	r1, r2
 800e8da:	0018      	movs	r0, r3
 800e8dc:	f000 fd5d 	bl	800f39a <USBD_ClrFeature>
          break;
 800e8e0:	e006      	b.n	800e8f0 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e8e2:	683a      	ldr	r2, [r7, #0]
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	0011      	movs	r1, r2
 800e8e8:	0018      	movs	r0, r3
 800e8ea:	f000 fdb4 	bl	800f456 <USBD_CtlError>
          break;
 800e8ee:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800e8f0:	e006      	b.n	800e900 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800e8f2:	683a      	ldr	r2, [r7, #0]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	0011      	movs	r1, r2
 800e8f8:	0018      	movs	r0, r3
 800e8fa:	f000 fdac 	bl	800f456 <USBD_CtlError>
      break;
 800e8fe:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800e900:	230f      	movs	r3, #15
 800e902:	18fb      	adds	r3, r7, r3
 800e904:	781b      	ldrb	r3, [r3, #0]
}
 800e906:	0018      	movs	r0, r3
 800e908:	46bd      	mov	sp, r7
 800e90a:	b004      	add	sp, #16
 800e90c:	bd80      	pop	{r7, pc}
 800e90e:	46c0      	nop			@ (mov r8, r8)
 800e910:	08010cfc 	.word	0x08010cfc

0800e914 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800e914:	b5b0      	push	{r4, r5, r7, lr}
 800e916:	b084      	sub	sp, #16
 800e918:	af00      	add	r7, sp, #0
 800e91a:	6078      	str	r0, [r7, #4]
 800e91c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e91e:	230f      	movs	r3, #15
 800e920:	18fb      	adds	r3, r7, r3
 800e922:	2200      	movs	r2, #0
 800e924:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e926:	683b      	ldr	r3, [r7, #0]
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	001a      	movs	r2, r3
 800e92c:	2360      	movs	r3, #96	@ 0x60
 800e92e:	4013      	ands	r3, r2
 800e930:	2b40      	cmp	r3, #64	@ 0x40
 800e932:	d004      	beq.n	800e93e <USBD_StdItfReq+0x2a>
 800e934:	d839      	bhi.n	800e9aa <USBD_StdItfReq+0x96>
 800e936:	2b00      	cmp	r3, #0
 800e938:	d001      	beq.n	800e93e <USBD_StdItfReq+0x2a>
 800e93a:	2b20      	cmp	r3, #32
 800e93c:	d135      	bne.n	800e9aa <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e93e:	687a      	ldr	r2, [r7, #4]
 800e940:	23a7      	movs	r3, #167	@ 0xa7
 800e942:	009b      	lsls	r3, r3, #2
 800e944:	5cd3      	ldrb	r3, [r2, r3]
 800e946:	3b01      	subs	r3, #1
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d825      	bhi.n	800e998 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e94c:	683b      	ldr	r3, [r7, #0]
 800e94e:	889b      	ldrh	r3, [r3, #4]
 800e950:	b2db      	uxtb	r3, r3
 800e952:	2b01      	cmp	r3, #1
 800e954:	d819      	bhi.n	800e98a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800e956:	687a      	ldr	r2, [r7, #4]
 800e958:	23ad      	movs	r3, #173	@ 0xad
 800e95a:	009b      	lsls	r3, r3, #2
 800e95c:	58d3      	ldr	r3, [r2, r3]
 800e95e:	689b      	ldr	r3, [r3, #8]
 800e960:	250f      	movs	r5, #15
 800e962:	197c      	adds	r4, r7, r5
 800e964:	6839      	ldr	r1, [r7, #0]
 800e966:	687a      	ldr	r2, [r7, #4]
 800e968:	0010      	movs	r0, r2
 800e96a:	4798      	blx	r3
 800e96c:	0003      	movs	r3, r0
 800e96e:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	88db      	ldrh	r3, [r3, #6]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d116      	bne.n	800e9a6 <USBD_StdItfReq+0x92>
 800e978:	197b      	adds	r3, r7, r5
 800e97a:	781b      	ldrb	r3, [r3, #0]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	d112      	bne.n	800e9a6 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	0018      	movs	r0, r3
 800e984:	f000 fe4f 	bl	800f626 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e988:	e00d      	b.n	800e9a6 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800e98a:	683a      	ldr	r2, [r7, #0]
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	0011      	movs	r1, r2
 800e990:	0018      	movs	r0, r3
 800e992:	f000 fd60 	bl	800f456 <USBD_CtlError>
          break;
 800e996:	e006      	b.n	800e9a6 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800e998:	683a      	ldr	r2, [r7, #0]
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	0011      	movs	r1, r2
 800e99e:	0018      	movs	r0, r3
 800e9a0:	f000 fd59 	bl	800f456 <USBD_CtlError>
          break;
 800e9a4:	e000      	b.n	800e9a8 <USBD_StdItfReq+0x94>
          break;
 800e9a6:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800e9a8:	e006      	b.n	800e9b8 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800e9aa:	683a      	ldr	r2, [r7, #0]
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	0011      	movs	r1, r2
 800e9b0:	0018      	movs	r0, r3
 800e9b2:	f000 fd50 	bl	800f456 <USBD_CtlError>
      break;
 800e9b6:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800e9b8:	2300      	movs	r3, #0
}
 800e9ba:	0018      	movs	r0, r3
 800e9bc:	46bd      	mov	sp, r7
 800e9be:	b004      	add	sp, #16
 800e9c0:	bdb0      	pop	{r4, r5, r7, pc}

0800e9c2 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800e9c2:	b5b0      	push	{r4, r5, r7, lr}
 800e9c4:	b084      	sub	sp, #16
 800e9c6:	af00      	add	r7, sp, #0
 800e9c8:	6078      	str	r0, [r7, #4]
 800e9ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800e9cc:	230f      	movs	r3, #15
 800e9ce:	18fb      	adds	r3, r7, r3
 800e9d0:	2200      	movs	r2, #0
 800e9d2:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800e9d4:	683b      	ldr	r3, [r7, #0]
 800e9d6:	889a      	ldrh	r2, [r3, #4]
 800e9d8:	230e      	movs	r3, #14
 800e9da:	18fb      	adds	r3, r7, r3
 800e9dc:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e9de:	683b      	ldr	r3, [r7, #0]
 800e9e0:	781b      	ldrb	r3, [r3, #0]
 800e9e2:	001a      	movs	r2, r3
 800e9e4:	2360      	movs	r3, #96	@ 0x60
 800e9e6:	4013      	ands	r3, r2
 800e9e8:	2b40      	cmp	r3, #64	@ 0x40
 800e9ea:	d006      	beq.n	800e9fa <USBD_StdEPReq+0x38>
 800e9ec:	d900      	bls.n	800e9f0 <USBD_StdEPReq+0x2e>
 800e9ee:	e190      	b.n	800ed12 <USBD_StdEPReq+0x350>
 800e9f0:	2b00      	cmp	r3, #0
 800e9f2:	d00c      	beq.n	800ea0e <USBD_StdEPReq+0x4c>
 800e9f4:	2b20      	cmp	r3, #32
 800e9f6:	d000      	beq.n	800e9fa <USBD_StdEPReq+0x38>
 800e9f8:	e18b      	b.n	800ed12 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800e9fa:	687a      	ldr	r2, [r7, #4]
 800e9fc:	23ad      	movs	r3, #173	@ 0xad
 800e9fe:	009b      	lsls	r3, r3, #2
 800ea00:	58d3      	ldr	r3, [r2, r3]
 800ea02:	689b      	ldr	r3, [r3, #8]
 800ea04:	6839      	ldr	r1, [r7, #0]
 800ea06:	687a      	ldr	r2, [r7, #4]
 800ea08:	0010      	movs	r0, r2
 800ea0a:	4798      	blx	r3
      break;
 800ea0c:	e188      	b.n	800ed20 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800ea0e:	683b      	ldr	r3, [r7, #0]
 800ea10:	781b      	ldrb	r3, [r3, #0]
 800ea12:	001a      	movs	r2, r3
 800ea14:	2360      	movs	r3, #96	@ 0x60
 800ea16:	4013      	ands	r3, r2
 800ea18:	2b20      	cmp	r3, #32
 800ea1a:	d10f      	bne.n	800ea3c <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ea1c:	687a      	ldr	r2, [r7, #4]
 800ea1e:	23ad      	movs	r3, #173	@ 0xad
 800ea20:	009b      	lsls	r3, r3, #2
 800ea22:	58d3      	ldr	r3, [r2, r3]
 800ea24:	689b      	ldr	r3, [r3, #8]
 800ea26:	250f      	movs	r5, #15
 800ea28:	197c      	adds	r4, r7, r5
 800ea2a:	6839      	ldr	r1, [r7, #0]
 800ea2c:	687a      	ldr	r2, [r7, #4]
 800ea2e:	0010      	movs	r0, r2
 800ea30:	4798      	blx	r3
 800ea32:	0003      	movs	r3, r0
 800ea34:	7023      	strb	r3, [r4, #0]

        return ret;
 800ea36:	197b      	adds	r3, r7, r5
 800ea38:	781b      	ldrb	r3, [r3, #0]
 800ea3a:	e174      	b.n	800ed26 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	785b      	ldrb	r3, [r3, #1]
 800ea40:	2b03      	cmp	r3, #3
 800ea42:	d007      	beq.n	800ea54 <USBD_StdEPReq+0x92>
 800ea44:	dd00      	ble.n	800ea48 <USBD_StdEPReq+0x86>
 800ea46:	e15c      	b.n	800ed02 <USBD_StdEPReq+0x340>
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d100      	bne.n	800ea4e <USBD_StdEPReq+0x8c>
 800ea4c:	e092      	b.n	800eb74 <USBD_StdEPReq+0x1b2>
 800ea4e:	2b01      	cmp	r3, #1
 800ea50:	d04b      	beq.n	800eaea <USBD_StdEPReq+0x128>
 800ea52:	e156      	b.n	800ed02 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ea54:	687a      	ldr	r2, [r7, #4]
 800ea56:	23a7      	movs	r3, #167	@ 0xa7
 800ea58:	009b      	lsls	r3, r3, #2
 800ea5a:	5cd3      	ldrb	r3, [r2, r3]
 800ea5c:	2b02      	cmp	r3, #2
 800ea5e:	d002      	beq.n	800ea66 <USBD_StdEPReq+0xa4>
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	d01d      	beq.n	800eaa0 <USBD_StdEPReq+0xde>
 800ea64:	e039      	b.n	800eada <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ea66:	220e      	movs	r2, #14
 800ea68:	18bb      	adds	r3, r7, r2
 800ea6a:	781b      	ldrb	r3, [r3, #0]
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d010      	beq.n	800ea92 <USBD_StdEPReq+0xd0>
 800ea70:	18bb      	adds	r3, r7, r2
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	2b80      	cmp	r3, #128	@ 0x80
 800ea76:	d00c      	beq.n	800ea92 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800ea78:	18bb      	adds	r3, r7, r2
 800ea7a:	781a      	ldrb	r2, [r3, #0]
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	0011      	movs	r1, r2
 800ea80:	0018      	movs	r0, r3
 800ea82:	f001 f996 	bl	800fdb2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	2180      	movs	r1, #128	@ 0x80
 800ea8a:	0018      	movs	r0, r3
 800ea8c:	f001 f991 	bl	800fdb2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ea90:	e02a      	b.n	800eae8 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800ea92:	683a      	ldr	r2, [r7, #0]
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	0011      	movs	r1, r2
 800ea98:	0018      	movs	r0, r3
 800ea9a:	f000 fcdc 	bl	800f456 <USBD_CtlError>
              break;
 800ea9e:	e023      	b.n	800eae8 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	885b      	ldrh	r3, [r3, #2]
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d113      	bne.n	800ead0 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800eaa8:	220e      	movs	r2, #14
 800eaaa:	18bb      	adds	r3, r7, r2
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00e      	beq.n	800ead0 <USBD_StdEPReq+0x10e>
 800eab2:	18bb      	adds	r3, r7, r2
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	2b80      	cmp	r3, #128	@ 0x80
 800eab8:	d00a      	beq.n	800ead0 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800eaba:	683b      	ldr	r3, [r7, #0]
 800eabc:	88db      	ldrh	r3, [r3, #6]
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d106      	bne.n	800ead0 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800eac2:	18bb      	adds	r3, r7, r2
 800eac4:	781a      	ldrb	r2, [r3, #0]
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	0011      	movs	r1, r2
 800eaca:	0018      	movs	r0, r3
 800eacc:	f001 f971 	bl	800fdb2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	0018      	movs	r0, r3
 800ead4:	f000 fda7 	bl	800f626 <USBD_CtlSendStatus>

              break;
 800ead8:	e006      	b.n	800eae8 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800eada:	683a      	ldr	r2, [r7, #0]
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	0011      	movs	r1, r2
 800eae0:	0018      	movs	r0, r3
 800eae2:	f000 fcb8 	bl	800f456 <USBD_CtlError>
              break;
 800eae6:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800eae8:	e112      	b.n	800ed10 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800eaea:	687a      	ldr	r2, [r7, #4]
 800eaec:	23a7      	movs	r3, #167	@ 0xa7
 800eaee:	009b      	lsls	r3, r3, #2
 800eaf0:	5cd3      	ldrb	r3, [r2, r3]
 800eaf2:	2b02      	cmp	r3, #2
 800eaf4:	d002      	beq.n	800eafc <USBD_StdEPReq+0x13a>
 800eaf6:	2b03      	cmp	r3, #3
 800eaf8:	d01d      	beq.n	800eb36 <USBD_StdEPReq+0x174>
 800eafa:	e032      	b.n	800eb62 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eafc:	220e      	movs	r2, #14
 800eafe:	18bb      	adds	r3, r7, r2
 800eb00:	781b      	ldrb	r3, [r3, #0]
 800eb02:	2b00      	cmp	r3, #0
 800eb04:	d010      	beq.n	800eb28 <USBD_StdEPReq+0x166>
 800eb06:	18bb      	adds	r3, r7, r2
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2b80      	cmp	r3, #128	@ 0x80
 800eb0c:	d00c      	beq.n	800eb28 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800eb0e:	18bb      	adds	r3, r7, r2
 800eb10:	781a      	ldrb	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	0011      	movs	r1, r2
 800eb16:	0018      	movs	r0, r3
 800eb18:	f001 f94b 	bl	800fdb2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2180      	movs	r1, #128	@ 0x80
 800eb20:	0018      	movs	r0, r3
 800eb22:	f001 f946 	bl	800fdb2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800eb26:	e024      	b.n	800eb72 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800eb28:	683a      	ldr	r2, [r7, #0]
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	0011      	movs	r1, r2
 800eb2e:	0018      	movs	r0, r3
 800eb30:	f000 fc91 	bl	800f456 <USBD_CtlError>
              break;
 800eb34:	e01d      	b.n	800eb72 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	885b      	ldrh	r3, [r3, #2]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d118      	bne.n	800eb70 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800eb3e:	210e      	movs	r1, #14
 800eb40:	187b      	adds	r3, r7, r1
 800eb42:	781b      	ldrb	r3, [r3, #0]
 800eb44:	227f      	movs	r2, #127	@ 0x7f
 800eb46:	4013      	ands	r3, r2
 800eb48:	d006      	beq.n	800eb58 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800eb4a:	187b      	adds	r3, r7, r1
 800eb4c:	781a      	ldrb	r2, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	0011      	movs	r1, r2
 800eb52:	0018      	movs	r0, r3
 800eb54:	f001 f958 	bl	800fe08 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	0018      	movs	r0, r3
 800eb5c:	f000 fd63 	bl	800f626 <USBD_CtlSendStatus>
              }
              break;
 800eb60:	e006      	b.n	800eb70 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	0011      	movs	r1, r2
 800eb68:	0018      	movs	r0, r3
 800eb6a:	f000 fc74 	bl	800f456 <USBD_CtlError>
              break;
 800eb6e:	e000      	b.n	800eb72 <USBD_StdEPReq+0x1b0>
              break;
 800eb70:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800eb72:	e0cd      	b.n	800ed10 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800eb74:	687a      	ldr	r2, [r7, #4]
 800eb76:	23a7      	movs	r3, #167	@ 0xa7
 800eb78:	009b      	lsls	r3, r3, #2
 800eb7a:	5cd3      	ldrb	r3, [r2, r3]
 800eb7c:	2b02      	cmp	r3, #2
 800eb7e:	d002      	beq.n	800eb86 <USBD_StdEPReq+0x1c4>
 800eb80:	2b03      	cmp	r3, #3
 800eb82:	d03c      	beq.n	800ebfe <USBD_StdEPReq+0x23c>
 800eb84:	e0b5      	b.n	800ecf2 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eb86:	220e      	movs	r2, #14
 800eb88:	18bb      	adds	r3, r7, r2
 800eb8a:	781b      	ldrb	r3, [r3, #0]
 800eb8c:	2b00      	cmp	r3, #0
 800eb8e:	d00a      	beq.n	800eba6 <USBD_StdEPReq+0x1e4>
 800eb90:	18bb      	adds	r3, r7, r2
 800eb92:	781b      	ldrb	r3, [r3, #0]
 800eb94:	2b80      	cmp	r3, #128	@ 0x80
 800eb96:	d006      	beq.n	800eba6 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800eb98:	683a      	ldr	r2, [r7, #0]
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	0011      	movs	r1, r2
 800eb9e:	0018      	movs	r0, r3
 800eba0:	f000 fc59 	bl	800f456 <USBD_CtlError>
                break;
 800eba4:	e0ac      	b.n	800ed00 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eba6:	220e      	movs	r2, #14
 800eba8:	18bb      	adds	r3, r7, r2
 800ebaa:	781b      	ldrb	r3, [r3, #0]
 800ebac:	b25b      	sxtb	r3, r3
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	da0c      	bge.n	800ebcc <USBD_StdEPReq+0x20a>
 800ebb2:	18bb      	adds	r3, r7, r2
 800ebb4:	781b      	ldrb	r3, [r3, #0]
 800ebb6:	227f      	movs	r2, #127	@ 0x7f
 800ebb8:	401a      	ands	r2, r3
 800ebba:	0013      	movs	r3, r2
 800ebbc:	009b      	lsls	r3, r3, #2
 800ebbe:	189b      	adds	r3, r3, r2
 800ebc0:	009b      	lsls	r3, r3, #2
 800ebc2:	3310      	adds	r3, #16
 800ebc4:	687a      	ldr	r2, [r7, #4]
 800ebc6:	18d3      	adds	r3, r2, r3
 800ebc8:	3304      	adds	r3, #4
 800ebca:	e00d      	b.n	800ebe8 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ebcc:	230e      	movs	r3, #14
 800ebce:	18fb      	adds	r3, r7, r3
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	227f      	movs	r2, #127	@ 0x7f
 800ebd4:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ebd6:	0013      	movs	r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	189b      	adds	r3, r3, r2
 800ebdc:	009b      	lsls	r3, r3, #2
 800ebde:	3351      	adds	r3, #81	@ 0x51
 800ebe0:	33ff      	adds	r3, #255	@ 0xff
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	18d3      	adds	r3, r2, r3
 800ebe6:	3304      	adds	r3, #4
 800ebe8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800ebea:	68bb      	ldr	r3, [r7, #8]
 800ebec:	2200      	movs	r2, #0
 800ebee:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ebf0:	68b9      	ldr	r1, [r7, #8]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	2202      	movs	r2, #2
 800ebf6:	0018      	movs	r0, r3
 800ebf8:	f000 fcab 	bl	800f552 <USBD_CtlSendData>
              break;
 800ebfc:	e080      	b.n	800ed00 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800ebfe:	220e      	movs	r2, #14
 800ec00:	18bb      	adds	r3, r7, r2
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	b25b      	sxtb	r3, r3
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	da14      	bge.n	800ec34 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ec0a:	18bb      	adds	r3, r7, r2
 800ec0c:	781b      	ldrb	r3, [r3, #0]
 800ec0e:	220f      	movs	r2, #15
 800ec10:	401a      	ands	r2, r3
 800ec12:	6879      	ldr	r1, [r7, #4]
 800ec14:	0013      	movs	r3, r2
 800ec16:	009b      	lsls	r3, r3, #2
 800ec18:	189b      	adds	r3, r3, r2
 800ec1a:	009b      	lsls	r3, r3, #2
 800ec1c:	18cb      	adds	r3, r1, r3
 800ec1e:	3318      	adds	r3, #24
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d11e      	bne.n	800ec64 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ec26:	683a      	ldr	r2, [r7, #0]
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	0011      	movs	r1, r2
 800ec2c:	0018      	movs	r0, r3
 800ec2e:	f000 fc12 	bl	800f456 <USBD_CtlError>
                  break;
 800ec32:	e065      	b.n	800ed00 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ec34:	230e      	movs	r3, #14
 800ec36:	18fb      	adds	r3, r7, r3
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	220f      	movs	r2, #15
 800ec3c:	401a      	ands	r2, r3
 800ec3e:	6878      	ldr	r0, [r7, #4]
 800ec40:	23ac      	movs	r3, #172	@ 0xac
 800ec42:	0059      	lsls	r1, r3, #1
 800ec44:	0013      	movs	r3, r2
 800ec46:	009b      	lsls	r3, r3, #2
 800ec48:	189b      	adds	r3, r3, r2
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	18c3      	adds	r3, r0, r3
 800ec4e:	185b      	adds	r3, r3, r1
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d106      	bne.n	800ec64 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800ec56:	683a      	ldr	r2, [r7, #0]
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	0011      	movs	r1, r2
 800ec5c:	0018      	movs	r0, r3
 800ec5e:	f000 fbfa 	bl	800f456 <USBD_CtlError>
                  break;
 800ec62:	e04d      	b.n	800ed00 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec64:	220e      	movs	r2, #14
 800ec66:	18bb      	adds	r3, r7, r2
 800ec68:	781b      	ldrb	r3, [r3, #0]
 800ec6a:	b25b      	sxtb	r3, r3
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	da0c      	bge.n	800ec8a <USBD_StdEPReq+0x2c8>
 800ec70:	18bb      	adds	r3, r7, r2
 800ec72:	781b      	ldrb	r3, [r3, #0]
 800ec74:	227f      	movs	r2, #127	@ 0x7f
 800ec76:	401a      	ands	r2, r3
 800ec78:	0013      	movs	r3, r2
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	189b      	adds	r3, r3, r2
 800ec7e:	009b      	lsls	r3, r3, #2
 800ec80:	3310      	adds	r3, #16
 800ec82:	687a      	ldr	r2, [r7, #4]
 800ec84:	18d3      	adds	r3, r2, r3
 800ec86:	3304      	adds	r3, #4
 800ec88:	e00d      	b.n	800eca6 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ec8a:	230e      	movs	r3, #14
 800ec8c:	18fb      	adds	r3, r7, r3
 800ec8e:	781b      	ldrb	r3, [r3, #0]
 800ec90:	227f      	movs	r2, #127	@ 0x7f
 800ec92:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ec94:	0013      	movs	r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	189b      	adds	r3, r3, r2
 800ec9a:	009b      	lsls	r3, r3, #2
 800ec9c:	3351      	adds	r3, #81	@ 0x51
 800ec9e:	33ff      	adds	r3, #255	@ 0xff
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	18d3      	adds	r3, r2, r3
 800eca4:	3304      	adds	r3, #4
 800eca6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800eca8:	220e      	movs	r2, #14
 800ecaa:	18bb      	adds	r3, r7, r2
 800ecac:	781b      	ldrb	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d003      	beq.n	800ecba <USBD_StdEPReq+0x2f8>
 800ecb2:	18bb      	adds	r3, r7, r2
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	2b80      	cmp	r3, #128	@ 0x80
 800ecb8:	d103      	bne.n	800ecc2 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800ecba:	68bb      	ldr	r3, [r7, #8]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	601a      	str	r2, [r3, #0]
 800ecc0:	e010      	b.n	800ece4 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800ecc2:	230e      	movs	r3, #14
 800ecc4:	18fb      	adds	r3, r7, r3
 800ecc6:	781a      	ldrb	r2, [r3, #0]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	0011      	movs	r1, r2
 800eccc:	0018      	movs	r0, r3
 800ecce:	f001 f8c6 	bl	800fe5e <USBD_LL_IsStallEP>
 800ecd2:	1e03      	subs	r3, r0, #0
 800ecd4:	d003      	beq.n	800ecde <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800ecd6:	68bb      	ldr	r3, [r7, #8]
 800ecd8:	2201      	movs	r2, #1
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	e002      	b.n	800ece4 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	2200      	movs	r2, #0
 800ece2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800ece4:	68b9      	ldr	r1, [r7, #8]
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	2202      	movs	r2, #2
 800ecea:	0018      	movs	r0, r3
 800ecec:	f000 fc31 	bl	800f552 <USBD_CtlSendData>
              break;
 800ecf0:	e006      	b.n	800ed00 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800ecf2:	683a      	ldr	r2, [r7, #0]
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	0011      	movs	r1, r2
 800ecf8:	0018      	movs	r0, r3
 800ecfa:	f000 fbac 	bl	800f456 <USBD_CtlError>
              break;
 800ecfe:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800ed00:	e006      	b.n	800ed10 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800ed02:	683a      	ldr	r2, [r7, #0]
 800ed04:	687b      	ldr	r3, [r7, #4]
 800ed06:	0011      	movs	r1, r2
 800ed08:	0018      	movs	r0, r3
 800ed0a:	f000 fba4 	bl	800f456 <USBD_CtlError>
          break;
 800ed0e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800ed10:	e006      	b.n	800ed20 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800ed12:	683a      	ldr	r2, [r7, #0]
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	0011      	movs	r1, r2
 800ed18:	0018      	movs	r0, r3
 800ed1a:	f000 fb9c 	bl	800f456 <USBD_CtlError>
      break;
 800ed1e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800ed20:	230f      	movs	r3, #15
 800ed22:	18fb      	adds	r3, r7, r3
 800ed24:	781b      	ldrb	r3, [r3, #0]
}
 800ed26:	0018      	movs	r0, r3
 800ed28:	46bd      	mov	sp, r7
 800ed2a:	b004      	add	sp, #16
 800ed2c:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800ed30 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	b084      	sub	sp, #16
 800ed34:	af00      	add	r7, sp, #0
 800ed36:	6078      	str	r0, [r7, #4]
 800ed38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ed3a:	2308      	movs	r3, #8
 800ed3c:	18fb      	adds	r3, r7, r3
 800ed3e:	2200      	movs	r2, #0
 800ed40:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800ed42:	2300      	movs	r3, #0
 800ed44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ed46:	230b      	movs	r3, #11
 800ed48:	18fb      	adds	r3, r7, r3
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	885b      	ldrh	r3, [r3, #2]
 800ed52:	0a1b      	lsrs	r3, r3, #8
 800ed54:	b29b      	uxth	r3, r3
 800ed56:	2b07      	cmp	r3, #7
 800ed58:	d900      	bls.n	800ed5c <USBD_GetDescriptor+0x2c>
 800ed5a:	e159      	b.n	800f010 <USBD_GetDescriptor+0x2e0>
 800ed5c:	009a      	lsls	r2, r3, #2
 800ed5e:	4bcb      	ldr	r3, [pc, #812]	@ (800f08c <USBD_GetDescriptor+0x35c>)
 800ed60:	18d3      	adds	r3, r2, r3
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ed66:	687a      	ldr	r2, [r7, #4]
 800ed68:	23ac      	movs	r3, #172	@ 0xac
 800ed6a:	009b      	lsls	r3, r3, #2
 800ed6c:	58d3      	ldr	r3, [r2, r3]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	687a      	ldr	r2, [r7, #4]
 800ed72:	7c12      	ldrb	r2, [r2, #16]
 800ed74:	2108      	movs	r1, #8
 800ed76:	1879      	adds	r1, r7, r1
 800ed78:	0010      	movs	r0, r2
 800ed7a:	4798      	blx	r3
 800ed7c:	0003      	movs	r3, r0
 800ed7e:	60fb      	str	r3, [r7, #12]
      break;
 800ed80:	e153      	b.n	800f02a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	7c1b      	ldrb	r3, [r3, #16]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d10f      	bne.n	800edaa <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	23ad      	movs	r3, #173	@ 0xad
 800ed8e:	009b      	lsls	r3, r3, #2
 800ed90:	58d3      	ldr	r3, [r2, r3]
 800ed92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed94:	2208      	movs	r2, #8
 800ed96:	18ba      	adds	r2, r7, r2
 800ed98:	0010      	movs	r0, r2
 800ed9a:	4798      	blx	r3
 800ed9c:	0003      	movs	r3, r0
 800ed9e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800eda0:	68fb      	ldr	r3, [r7, #12]
 800eda2:	3301      	adds	r3, #1
 800eda4:	2202      	movs	r2, #2
 800eda6:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800eda8:	e13f      	b.n	800f02a <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800edaa:	687a      	ldr	r2, [r7, #4]
 800edac:	23ad      	movs	r3, #173	@ 0xad
 800edae:	009b      	lsls	r3, r3, #2
 800edb0:	58d3      	ldr	r3, [r2, r3]
 800edb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800edb4:	2208      	movs	r2, #8
 800edb6:	18ba      	adds	r2, r7, r2
 800edb8:	0010      	movs	r0, r2
 800edba:	4798      	blx	r3
 800edbc:	0003      	movs	r3, r0
 800edbe:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	3301      	adds	r3, #1
 800edc4:	2202      	movs	r2, #2
 800edc6:	701a      	strb	r2, [r3, #0]
      break;
 800edc8:	e12f      	b.n	800f02a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800edca:	683b      	ldr	r3, [r7, #0]
 800edcc:	885b      	ldrh	r3, [r3, #2]
 800edce:	b2db      	uxtb	r3, r3
 800edd0:	2b05      	cmp	r3, #5
 800edd2:	d900      	bls.n	800edd6 <USBD_GetDescriptor+0xa6>
 800edd4:	e0d0      	b.n	800ef78 <USBD_GetDescriptor+0x248>
 800edd6:	009a      	lsls	r2, r3, #2
 800edd8:	4bad      	ldr	r3, [pc, #692]	@ (800f090 <USBD_GetDescriptor+0x360>)
 800edda:	18d3      	adds	r3, r2, r3
 800eddc:	681b      	ldr	r3, [r3, #0]
 800edde:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	23ac      	movs	r3, #172	@ 0xac
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	58d3      	ldr	r3, [r2, r3]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00d      	beq.n	800ee0a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800edee:	687a      	ldr	r2, [r7, #4]
 800edf0:	23ac      	movs	r3, #172	@ 0xac
 800edf2:	009b      	lsls	r3, r3, #2
 800edf4:	58d3      	ldr	r3, [r2, r3]
 800edf6:	685b      	ldr	r3, [r3, #4]
 800edf8:	687a      	ldr	r2, [r7, #4]
 800edfa:	7c12      	ldrb	r2, [r2, #16]
 800edfc:	2108      	movs	r1, #8
 800edfe:	1879      	adds	r1, r7, r1
 800ee00:	0010      	movs	r0, r2
 800ee02:	4798      	blx	r3
 800ee04:	0003      	movs	r3, r0
 800ee06:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee08:	e0c3      	b.n	800ef92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ee0a:	683a      	ldr	r2, [r7, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	0011      	movs	r1, r2
 800ee10:	0018      	movs	r0, r3
 800ee12:	f000 fb20 	bl	800f456 <USBD_CtlError>
            err++;
 800ee16:	210b      	movs	r1, #11
 800ee18:	187b      	adds	r3, r7, r1
 800ee1a:	781a      	ldrb	r2, [r3, #0]
 800ee1c:	187b      	adds	r3, r7, r1
 800ee1e:	3201      	adds	r2, #1
 800ee20:	701a      	strb	r2, [r3, #0]
          break;
 800ee22:	e0b6      	b.n	800ef92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ee24:	687a      	ldr	r2, [r7, #4]
 800ee26:	23ac      	movs	r3, #172	@ 0xac
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	58d3      	ldr	r3, [r2, r3]
 800ee2c:	689b      	ldr	r3, [r3, #8]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00d      	beq.n	800ee4e <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ee32:	687a      	ldr	r2, [r7, #4]
 800ee34:	23ac      	movs	r3, #172	@ 0xac
 800ee36:	009b      	lsls	r3, r3, #2
 800ee38:	58d3      	ldr	r3, [r2, r3]
 800ee3a:	689b      	ldr	r3, [r3, #8]
 800ee3c:	687a      	ldr	r2, [r7, #4]
 800ee3e:	7c12      	ldrb	r2, [r2, #16]
 800ee40:	2108      	movs	r1, #8
 800ee42:	1879      	adds	r1, r7, r1
 800ee44:	0010      	movs	r0, r2
 800ee46:	4798      	blx	r3
 800ee48:	0003      	movs	r3, r0
 800ee4a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee4c:	e0a1      	b.n	800ef92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ee4e:	683a      	ldr	r2, [r7, #0]
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	0011      	movs	r1, r2
 800ee54:	0018      	movs	r0, r3
 800ee56:	f000 fafe 	bl	800f456 <USBD_CtlError>
            err++;
 800ee5a:	210b      	movs	r1, #11
 800ee5c:	187b      	adds	r3, r7, r1
 800ee5e:	781a      	ldrb	r2, [r3, #0]
 800ee60:	187b      	adds	r3, r7, r1
 800ee62:	3201      	adds	r2, #1
 800ee64:	701a      	strb	r2, [r3, #0]
          break;
 800ee66:	e094      	b.n	800ef92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ee68:	687a      	ldr	r2, [r7, #4]
 800ee6a:	23ac      	movs	r3, #172	@ 0xac
 800ee6c:	009b      	lsls	r3, r3, #2
 800ee6e:	58d3      	ldr	r3, [r2, r3]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d00d      	beq.n	800ee92 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ee76:	687a      	ldr	r2, [r7, #4]
 800ee78:	23ac      	movs	r3, #172	@ 0xac
 800ee7a:	009b      	lsls	r3, r3, #2
 800ee7c:	58d3      	ldr	r3, [r2, r3]
 800ee7e:	68db      	ldr	r3, [r3, #12]
 800ee80:	687a      	ldr	r2, [r7, #4]
 800ee82:	7c12      	ldrb	r2, [r2, #16]
 800ee84:	2108      	movs	r1, #8
 800ee86:	1879      	adds	r1, r7, r1
 800ee88:	0010      	movs	r0, r2
 800ee8a:	4798      	blx	r3
 800ee8c:	0003      	movs	r3, r0
 800ee8e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ee90:	e07f      	b.n	800ef92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ee92:	683a      	ldr	r2, [r7, #0]
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	0011      	movs	r1, r2
 800ee98:	0018      	movs	r0, r3
 800ee9a:	f000 fadc 	bl	800f456 <USBD_CtlError>
            err++;
 800ee9e:	210b      	movs	r1, #11
 800eea0:	187b      	adds	r3, r7, r1
 800eea2:	781a      	ldrb	r2, [r3, #0]
 800eea4:	187b      	adds	r3, r7, r1
 800eea6:	3201      	adds	r2, #1
 800eea8:	701a      	strb	r2, [r3, #0]
          break;
 800eeaa:	e072      	b.n	800ef92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800eeac:	687a      	ldr	r2, [r7, #4]
 800eeae:	23ac      	movs	r3, #172	@ 0xac
 800eeb0:	009b      	lsls	r3, r3, #2
 800eeb2:	58d3      	ldr	r3, [r2, r3]
 800eeb4:	691b      	ldr	r3, [r3, #16]
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	d00d      	beq.n	800eed6 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800eeba:	687a      	ldr	r2, [r7, #4]
 800eebc:	23ac      	movs	r3, #172	@ 0xac
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	58d3      	ldr	r3, [r2, r3]
 800eec2:	691b      	ldr	r3, [r3, #16]
 800eec4:	687a      	ldr	r2, [r7, #4]
 800eec6:	7c12      	ldrb	r2, [r2, #16]
 800eec8:	2108      	movs	r1, #8
 800eeca:	1879      	adds	r1, r7, r1
 800eecc:	0010      	movs	r0, r2
 800eece:	4798      	blx	r3
 800eed0:	0003      	movs	r3, r0
 800eed2:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800eed4:	e05d      	b.n	800ef92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800eed6:	683a      	ldr	r2, [r7, #0]
 800eed8:	687b      	ldr	r3, [r7, #4]
 800eeda:	0011      	movs	r1, r2
 800eedc:	0018      	movs	r0, r3
 800eede:	f000 faba 	bl	800f456 <USBD_CtlError>
            err++;
 800eee2:	210b      	movs	r1, #11
 800eee4:	187b      	adds	r3, r7, r1
 800eee6:	781a      	ldrb	r2, [r3, #0]
 800eee8:	187b      	adds	r3, r7, r1
 800eeea:	3201      	adds	r2, #1
 800eeec:	701a      	strb	r2, [r3, #0]
          break;
 800eeee:	e050      	b.n	800ef92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800eef0:	687a      	ldr	r2, [r7, #4]
 800eef2:	23ac      	movs	r3, #172	@ 0xac
 800eef4:	009b      	lsls	r3, r3, #2
 800eef6:	58d3      	ldr	r3, [r2, r3]
 800eef8:	695b      	ldr	r3, [r3, #20]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d00d      	beq.n	800ef1a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	23ac      	movs	r3, #172	@ 0xac
 800ef02:	009b      	lsls	r3, r3, #2
 800ef04:	58d3      	ldr	r3, [r2, r3]
 800ef06:	695b      	ldr	r3, [r3, #20]
 800ef08:	687a      	ldr	r2, [r7, #4]
 800ef0a:	7c12      	ldrb	r2, [r2, #16]
 800ef0c:	2108      	movs	r1, #8
 800ef0e:	1879      	adds	r1, r7, r1
 800ef10:	0010      	movs	r0, r2
 800ef12:	4798      	blx	r3
 800ef14:	0003      	movs	r3, r0
 800ef16:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef18:	e03b      	b.n	800ef92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ef1a:	683a      	ldr	r2, [r7, #0]
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	0011      	movs	r1, r2
 800ef20:	0018      	movs	r0, r3
 800ef22:	f000 fa98 	bl	800f456 <USBD_CtlError>
            err++;
 800ef26:	210b      	movs	r1, #11
 800ef28:	187b      	adds	r3, r7, r1
 800ef2a:	781a      	ldrb	r2, [r3, #0]
 800ef2c:	187b      	adds	r3, r7, r1
 800ef2e:	3201      	adds	r2, #1
 800ef30:	701a      	strb	r2, [r3, #0]
          break;
 800ef32:	e02e      	b.n	800ef92 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ef34:	687a      	ldr	r2, [r7, #4]
 800ef36:	23ac      	movs	r3, #172	@ 0xac
 800ef38:	009b      	lsls	r3, r3, #2
 800ef3a:	58d3      	ldr	r3, [r2, r3]
 800ef3c:	699b      	ldr	r3, [r3, #24]
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d00d      	beq.n	800ef5e <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ef42:	687a      	ldr	r2, [r7, #4]
 800ef44:	23ac      	movs	r3, #172	@ 0xac
 800ef46:	009b      	lsls	r3, r3, #2
 800ef48:	58d3      	ldr	r3, [r2, r3]
 800ef4a:	699b      	ldr	r3, [r3, #24]
 800ef4c:	687a      	ldr	r2, [r7, #4]
 800ef4e:	7c12      	ldrb	r2, [r2, #16]
 800ef50:	2108      	movs	r1, #8
 800ef52:	1879      	adds	r1, r7, r1
 800ef54:	0010      	movs	r0, r2
 800ef56:	4798      	blx	r3
 800ef58:	0003      	movs	r3, r0
 800ef5a:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ef5c:	e019      	b.n	800ef92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800ef5e:	683a      	ldr	r2, [r7, #0]
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	0011      	movs	r1, r2
 800ef64:	0018      	movs	r0, r3
 800ef66:	f000 fa76 	bl	800f456 <USBD_CtlError>
            err++;
 800ef6a:	210b      	movs	r1, #11
 800ef6c:	187b      	adds	r3, r7, r1
 800ef6e:	781a      	ldrb	r2, [r3, #0]
 800ef70:	187b      	adds	r3, r7, r1
 800ef72:	3201      	adds	r2, #1
 800ef74:	701a      	strb	r2, [r3, #0]
          break;
 800ef76:	e00c      	b.n	800ef92 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800ef78:	683a      	ldr	r2, [r7, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	0011      	movs	r1, r2
 800ef7e:	0018      	movs	r0, r3
 800ef80:	f000 fa69 	bl	800f456 <USBD_CtlError>
          err++;
 800ef84:	210b      	movs	r1, #11
 800ef86:	187b      	adds	r3, r7, r1
 800ef88:	781a      	ldrb	r2, [r3, #0]
 800ef8a:	187b      	adds	r3, r7, r1
 800ef8c:	3201      	adds	r2, #1
 800ef8e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800ef90:	e04b      	b.n	800f02a <USBD_GetDescriptor+0x2fa>
 800ef92:	e04a      	b.n	800f02a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	7c1b      	ldrb	r3, [r3, #16]
 800ef98:	2b00      	cmp	r3, #0
 800ef9a:	d10b      	bne.n	800efb4 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800ef9c:	687a      	ldr	r2, [r7, #4]
 800ef9e:	23ad      	movs	r3, #173	@ 0xad
 800efa0:	009b      	lsls	r3, r3, #2
 800efa2:	58d3      	ldr	r3, [r2, r3]
 800efa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800efa6:	2208      	movs	r2, #8
 800efa8:	18ba      	adds	r2, r7, r2
 800efaa:	0010      	movs	r0, r2
 800efac:	4798      	blx	r3
 800efae:	0003      	movs	r3, r0
 800efb0:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800efb2:	e03a      	b.n	800f02a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800efb4:	683a      	ldr	r2, [r7, #0]
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	0011      	movs	r1, r2
 800efba:	0018      	movs	r0, r3
 800efbc:	f000 fa4b 	bl	800f456 <USBD_CtlError>
        err++;
 800efc0:	210b      	movs	r1, #11
 800efc2:	187b      	adds	r3, r7, r1
 800efc4:	781a      	ldrb	r2, [r3, #0]
 800efc6:	187b      	adds	r3, r7, r1
 800efc8:	3201      	adds	r2, #1
 800efca:	701a      	strb	r2, [r3, #0]
      break;
 800efcc:	e02d      	b.n	800f02a <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	7c1b      	ldrb	r3, [r3, #16]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10f      	bne.n	800eff6 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800efd6:	687a      	ldr	r2, [r7, #4]
 800efd8:	23ad      	movs	r3, #173	@ 0xad
 800efda:	009b      	lsls	r3, r3, #2
 800efdc:	58d3      	ldr	r3, [r2, r3]
 800efde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800efe0:	2208      	movs	r2, #8
 800efe2:	18ba      	adds	r2, r7, r2
 800efe4:	0010      	movs	r0, r2
 800efe6:	4798      	blx	r3
 800efe8:	0003      	movs	r3, r0
 800efea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	3301      	adds	r3, #1
 800eff0:	2207      	movs	r2, #7
 800eff2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eff4:	e019      	b.n	800f02a <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800eff6:	683a      	ldr	r2, [r7, #0]
 800eff8:	687b      	ldr	r3, [r7, #4]
 800effa:	0011      	movs	r1, r2
 800effc:	0018      	movs	r0, r3
 800effe:	f000 fa2a 	bl	800f456 <USBD_CtlError>
        err++;
 800f002:	210b      	movs	r1, #11
 800f004:	187b      	adds	r3, r7, r1
 800f006:	781a      	ldrb	r2, [r3, #0]
 800f008:	187b      	adds	r3, r7, r1
 800f00a:	3201      	adds	r2, #1
 800f00c:	701a      	strb	r2, [r3, #0]
      break;
 800f00e:	e00c      	b.n	800f02a <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800f010:	683a      	ldr	r2, [r7, #0]
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	0011      	movs	r1, r2
 800f016:	0018      	movs	r0, r3
 800f018:	f000 fa1d 	bl	800f456 <USBD_CtlError>
      err++;
 800f01c:	210b      	movs	r1, #11
 800f01e:	187b      	adds	r3, r7, r1
 800f020:	781a      	ldrb	r2, [r3, #0]
 800f022:	187b      	adds	r3, r7, r1
 800f024:	3201      	adds	r2, #1
 800f026:	701a      	strb	r2, [r3, #0]
      break;
 800f028:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800f02a:	230b      	movs	r3, #11
 800f02c:	18fb      	adds	r3, r7, r3
 800f02e:	781b      	ldrb	r3, [r3, #0]
 800f030:	2b00      	cmp	r3, #0
 800f032:	d127      	bne.n	800f084 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800f034:	2108      	movs	r1, #8
 800f036:	187b      	adds	r3, r7, r1
 800f038:	881b      	ldrh	r3, [r3, #0]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d019      	beq.n	800f072 <USBD_GetDescriptor+0x342>
 800f03e:	683b      	ldr	r3, [r7, #0]
 800f040:	88db      	ldrh	r3, [r3, #6]
 800f042:	2b00      	cmp	r3, #0
 800f044:	d015      	beq.n	800f072 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	88da      	ldrh	r2, [r3, #6]
 800f04a:	187b      	adds	r3, r7, r1
 800f04c:	881b      	ldrh	r3, [r3, #0]
 800f04e:	1c18      	adds	r0, r3, #0
 800f050:	1c11      	adds	r1, r2, #0
 800f052:	b28a      	uxth	r2, r1
 800f054:	b283      	uxth	r3, r0
 800f056:	429a      	cmp	r2, r3
 800f058:	d900      	bls.n	800f05c <USBD_GetDescriptor+0x32c>
 800f05a:	1c01      	adds	r1, r0, #0
 800f05c:	b28a      	uxth	r2, r1
 800f05e:	2108      	movs	r1, #8
 800f060:	187b      	adds	r3, r7, r1
 800f062:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f064:	187b      	adds	r3, r7, r1
 800f066:	881a      	ldrh	r2, [r3, #0]
 800f068:	68f9      	ldr	r1, [r7, #12]
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	0018      	movs	r0, r3
 800f06e:	f000 fa70 	bl	800f552 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800f072:	683b      	ldr	r3, [r7, #0]
 800f074:	88db      	ldrh	r3, [r3, #6]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d105      	bne.n	800f086 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	0018      	movs	r0, r3
 800f07e:	f000 fad2 	bl	800f626 <USBD_CtlSendStatus>
 800f082:	e000      	b.n	800f086 <USBD_GetDescriptor+0x356>
    return;
 800f084:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800f086:	46bd      	mov	sp, r7
 800f088:	b004      	add	sp, #16
 800f08a:	bd80      	pop	{r7, pc}
 800f08c:	08010d24 	.word	0x08010d24
 800f090:	08010d44 	.word	0x08010d44

0800f094 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f094:	b590      	push	{r4, r7, lr}
 800f096:	b085      	sub	sp, #20
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f09e:	683b      	ldr	r3, [r7, #0]
 800f0a0:	889b      	ldrh	r3, [r3, #4]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d13d      	bne.n	800f122 <USBD_SetAddress+0x8e>
 800f0a6:	683b      	ldr	r3, [r7, #0]
 800f0a8:	88db      	ldrh	r3, [r3, #6]
 800f0aa:	2b00      	cmp	r3, #0
 800f0ac:	d139      	bne.n	800f122 <USBD_SetAddress+0x8e>
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	885b      	ldrh	r3, [r3, #2]
 800f0b2:	2b7f      	cmp	r3, #127	@ 0x7f
 800f0b4:	d835      	bhi.n	800f122 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f0b6:	683b      	ldr	r3, [r7, #0]
 800f0b8:	885b      	ldrh	r3, [r3, #2]
 800f0ba:	b2da      	uxtb	r2, r3
 800f0bc:	230f      	movs	r3, #15
 800f0be:	18fb      	adds	r3, r7, r3
 800f0c0:	217f      	movs	r1, #127	@ 0x7f
 800f0c2:	400a      	ands	r2, r1
 800f0c4:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0c6:	687a      	ldr	r2, [r7, #4]
 800f0c8:	23a7      	movs	r3, #167	@ 0xa7
 800f0ca:	009b      	lsls	r3, r3, #2
 800f0cc:	5cd3      	ldrb	r3, [r2, r3]
 800f0ce:	2b03      	cmp	r3, #3
 800f0d0:	d106      	bne.n	800f0e0 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800f0d2:	683a      	ldr	r2, [r7, #0]
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	0011      	movs	r1, r2
 800f0d8:	0018      	movs	r0, r3
 800f0da:	f000 f9bc 	bl	800f456 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f0de:	e027      	b.n	800f130 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	240f      	movs	r4, #15
 800f0e4:	193a      	adds	r2, r7, r4
 800f0e6:	4914      	ldr	r1, [pc, #80]	@ (800f138 <USBD_SetAddress+0xa4>)
 800f0e8:	7812      	ldrb	r2, [r2, #0]
 800f0ea:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f0ec:	193b      	adds	r3, r7, r4
 800f0ee:	781a      	ldrb	r2, [r3, #0]
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	0011      	movs	r1, r2
 800f0f4:	0018      	movs	r0, r3
 800f0f6:	f000 fee2 	bl	800febe <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	0018      	movs	r0, r3
 800f0fe:	f000 fa92 	bl	800f626 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f102:	193b      	adds	r3, r7, r4
 800f104:	781b      	ldrb	r3, [r3, #0]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d005      	beq.n	800f116 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f10a:	687a      	ldr	r2, [r7, #4]
 800f10c:	23a7      	movs	r3, #167	@ 0xa7
 800f10e:	009b      	lsls	r3, r3, #2
 800f110:	2102      	movs	r1, #2
 800f112:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f114:	e00c      	b.n	800f130 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f116:	687a      	ldr	r2, [r7, #4]
 800f118:	23a7      	movs	r3, #167	@ 0xa7
 800f11a:	009b      	lsls	r3, r3, #2
 800f11c:	2101      	movs	r1, #1
 800f11e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f120:	e006      	b.n	800f130 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f122:	683a      	ldr	r2, [r7, #0]
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	0011      	movs	r1, r2
 800f128:	0018      	movs	r0, r3
 800f12a:	f000 f994 	bl	800f456 <USBD_CtlError>
  }
}
 800f12e:	46c0      	nop			@ (mov r8, r8)
 800f130:	46c0      	nop			@ (mov r8, r8)
 800f132:	46bd      	mov	sp, r7
 800f134:	b005      	add	sp, #20
 800f136:	bd90      	pop	{r4, r7, pc}
 800f138:	0000029e 	.word	0x0000029e

0800f13c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f13c:	b580      	push	{r7, lr}
 800f13e:	b082      	sub	sp, #8
 800f140:	af00      	add	r7, sp, #0
 800f142:	6078      	str	r0, [r7, #4]
 800f144:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f146:	683b      	ldr	r3, [r7, #0]
 800f148:	885b      	ldrh	r3, [r3, #2]
 800f14a:	b2da      	uxtb	r2, r3
 800f14c:	4b4c      	ldr	r3, [pc, #304]	@ (800f280 <USBD_SetConfig+0x144>)
 800f14e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f150:	4b4b      	ldr	r3, [pc, #300]	@ (800f280 <USBD_SetConfig+0x144>)
 800f152:	781b      	ldrb	r3, [r3, #0]
 800f154:	2b01      	cmp	r3, #1
 800f156:	d906      	bls.n	800f166 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800f158:	683a      	ldr	r2, [r7, #0]
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	0011      	movs	r1, r2
 800f15e:	0018      	movs	r0, r3
 800f160:	f000 f979 	bl	800f456 <USBD_CtlError>
 800f164:	e088      	b.n	800f278 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800f166:	687a      	ldr	r2, [r7, #4]
 800f168:	23a7      	movs	r3, #167	@ 0xa7
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	5cd3      	ldrb	r3, [r2, r3]
 800f16e:	2b02      	cmp	r3, #2
 800f170:	d002      	beq.n	800f178 <USBD_SetConfig+0x3c>
 800f172:	2b03      	cmp	r3, #3
 800f174:	d029      	beq.n	800f1ca <USBD_SetConfig+0x8e>
 800f176:	e071      	b.n	800f25c <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800f178:	4b41      	ldr	r3, [pc, #260]	@ (800f280 <USBD_SetConfig+0x144>)
 800f17a:	781b      	ldrb	r3, [r3, #0]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d01f      	beq.n	800f1c0 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800f180:	4b3f      	ldr	r3, [pc, #252]	@ (800f280 <USBD_SetConfig+0x144>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	001a      	movs	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f18a:	687a      	ldr	r2, [r7, #4]
 800f18c:	23a7      	movs	r3, #167	@ 0xa7
 800f18e:	009b      	lsls	r3, r3, #2
 800f190:	2103      	movs	r1, #3
 800f192:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f194:	4b3a      	ldr	r3, [pc, #232]	@ (800f280 <USBD_SetConfig+0x144>)
 800f196:	781a      	ldrb	r2, [r3, #0]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	0011      	movs	r1, r2
 800f19c:	0018      	movs	r0, r3
 800f19e:	f7ff f8c5 	bl	800e32c <USBD_SetClassConfig>
 800f1a2:	0003      	movs	r3, r0
 800f1a4:	2b02      	cmp	r3, #2
 800f1a6:	d106      	bne.n	800f1b6 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800f1a8:	683a      	ldr	r2, [r7, #0]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	0011      	movs	r1, r2
 800f1ae:	0018      	movs	r0, r3
 800f1b0:	f000 f951 	bl	800f456 <USBD_CtlError>
            return;
 800f1b4:	e060      	b.n	800f278 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	0018      	movs	r0, r3
 800f1ba:	f000 fa34 	bl	800f626 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f1be:	e05b      	b.n	800f278 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	0018      	movs	r0, r3
 800f1c4:	f000 fa2f 	bl	800f626 <USBD_CtlSendStatus>
        break;
 800f1c8:	e056      	b.n	800f278 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800f1ca:	4b2d      	ldr	r3, [pc, #180]	@ (800f280 <USBD_SetConfig+0x144>)
 800f1cc:	781b      	ldrb	r3, [r3, #0]
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	d115      	bne.n	800f1fe <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	23a7      	movs	r3, #167	@ 0xa7
 800f1d6:	009b      	lsls	r3, r3, #2
 800f1d8:	2102      	movs	r1, #2
 800f1da:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800f1dc:	4b28      	ldr	r3, [pc, #160]	@ (800f280 <USBD_SetConfig+0x144>)
 800f1de:	781b      	ldrb	r3, [r3, #0]
 800f1e0:	001a      	movs	r2, r3
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800f1e6:	4b26      	ldr	r3, [pc, #152]	@ (800f280 <USBD_SetConfig+0x144>)
 800f1e8:	781a      	ldrb	r2, [r3, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	0011      	movs	r1, r2
 800f1ee:	0018      	movs	r0, r3
 800f1f0:	f7ff f8c3 	bl	800e37a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	0018      	movs	r0, r3
 800f1f8:	f000 fa15 	bl	800f626 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800f1fc:	e03c      	b.n	800f278 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800f1fe:	4b20      	ldr	r3, [pc, #128]	@ (800f280 <USBD_SetConfig+0x144>)
 800f200:	781b      	ldrb	r3, [r3, #0]
 800f202:	001a      	movs	r2, r3
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	429a      	cmp	r2, r3
 800f20a:	d022      	beq.n	800f252 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	685b      	ldr	r3, [r3, #4]
 800f210:	b2da      	uxtb	r2, r3
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	0011      	movs	r1, r2
 800f216:	0018      	movs	r0, r3
 800f218:	f7ff f8af 	bl	800e37a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800f21c:	4b18      	ldr	r3, [pc, #96]	@ (800f280 <USBD_SetConfig+0x144>)
 800f21e:	781b      	ldrb	r3, [r3, #0]
 800f220:	001a      	movs	r2, r3
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800f226:	4b16      	ldr	r3, [pc, #88]	@ (800f280 <USBD_SetConfig+0x144>)
 800f228:	781a      	ldrb	r2, [r3, #0]
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	0011      	movs	r1, r2
 800f22e:	0018      	movs	r0, r3
 800f230:	f7ff f87c 	bl	800e32c <USBD_SetClassConfig>
 800f234:	0003      	movs	r3, r0
 800f236:	2b02      	cmp	r3, #2
 800f238:	d106      	bne.n	800f248 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800f23a:	683a      	ldr	r2, [r7, #0]
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	0011      	movs	r1, r2
 800f240:	0018      	movs	r0, r3
 800f242:	f000 f908 	bl	800f456 <USBD_CtlError>
            return;
 800f246:	e017      	b.n	800f278 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	0018      	movs	r0, r3
 800f24c:	f000 f9eb 	bl	800f626 <USBD_CtlSendStatus>
        break;
 800f250:	e012      	b.n	800f278 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	0018      	movs	r0, r3
 800f256:	f000 f9e6 	bl	800f626 <USBD_CtlSendStatus>
        break;
 800f25a:	e00d      	b.n	800f278 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800f25c:	683a      	ldr	r2, [r7, #0]
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	0011      	movs	r1, r2
 800f262:	0018      	movs	r0, r3
 800f264:	f000 f8f7 	bl	800f456 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800f268:	4b05      	ldr	r3, [pc, #20]	@ (800f280 <USBD_SetConfig+0x144>)
 800f26a:	781a      	ldrb	r2, [r3, #0]
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	0011      	movs	r1, r2
 800f270:	0018      	movs	r0, r3
 800f272:	f7ff f882 	bl	800e37a <USBD_ClrClassConfig>
        break;
 800f276:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800f278:	46bd      	mov	sp, r7
 800f27a:	b002      	add	sp, #8
 800f27c:	bd80      	pop	{r7, pc}
 800f27e:	46c0      	nop			@ (mov r8, r8)
 800f280:	20000a84 	.word	0x20000a84

0800f284 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f28e:	683b      	ldr	r3, [r7, #0]
 800f290:	88db      	ldrh	r3, [r3, #6]
 800f292:	2b01      	cmp	r3, #1
 800f294:	d006      	beq.n	800f2a4 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800f296:	683a      	ldr	r2, [r7, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	0011      	movs	r1, r2
 800f29c:	0018      	movs	r0, r3
 800f29e:	f000 f8da 	bl	800f456 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f2a2:	e026      	b.n	800f2f2 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800f2a4:	687a      	ldr	r2, [r7, #4]
 800f2a6:	23a7      	movs	r3, #167	@ 0xa7
 800f2a8:	009b      	lsls	r3, r3, #2
 800f2aa:	5cd3      	ldrb	r3, [r2, r3]
 800f2ac:	2b02      	cmp	r3, #2
 800f2ae:	dc02      	bgt.n	800f2b6 <USBD_GetConfig+0x32>
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	dc03      	bgt.n	800f2bc <USBD_GetConfig+0x38>
 800f2b4:	e016      	b.n	800f2e4 <USBD_GetConfig+0x60>
 800f2b6:	2b03      	cmp	r3, #3
 800f2b8:	d00c      	beq.n	800f2d4 <USBD_GetConfig+0x50>
 800f2ba:	e013      	b.n	800f2e4 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	2200      	movs	r2, #0
 800f2c0:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	3308      	adds	r3, #8
 800f2c6:	0019      	movs	r1, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	0018      	movs	r0, r3
 800f2ce:	f000 f940 	bl	800f552 <USBD_CtlSendData>
        break;
 800f2d2:	e00e      	b.n	800f2f2 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	1d19      	adds	r1, r3, #4
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	0018      	movs	r0, r3
 800f2de:	f000 f938 	bl	800f552 <USBD_CtlSendData>
        break;
 800f2e2:	e006      	b.n	800f2f2 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800f2e4:	683a      	ldr	r2, [r7, #0]
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	0011      	movs	r1, r2
 800f2ea:	0018      	movs	r0, r3
 800f2ec:	f000 f8b3 	bl	800f456 <USBD_CtlError>
        break;
 800f2f0:	46c0      	nop			@ (mov r8, r8)
}
 800f2f2:	46c0      	nop			@ (mov r8, r8)
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	b002      	add	sp, #8
 800f2f8:	bd80      	pop	{r7, pc}

0800f2fa <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f2fa:	b580      	push	{r7, lr}
 800f2fc:	b082      	sub	sp, #8
 800f2fe:	af00      	add	r7, sp, #0
 800f300:	6078      	str	r0, [r7, #4]
 800f302:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f304:	687a      	ldr	r2, [r7, #4]
 800f306:	23a7      	movs	r3, #167	@ 0xa7
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	5cd3      	ldrb	r3, [r2, r3]
 800f30c:	3b01      	subs	r3, #1
 800f30e:	2b02      	cmp	r3, #2
 800f310:	d822      	bhi.n	800f358 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800f312:	683b      	ldr	r3, [r7, #0]
 800f314:	88db      	ldrh	r3, [r3, #6]
 800f316:	2b02      	cmp	r3, #2
 800f318:	d006      	beq.n	800f328 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800f31a:	683a      	ldr	r2, [r7, #0]
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	0011      	movs	r1, r2
 800f320:	0018      	movs	r0, r3
 800f322:	f000 f898 	bl	800f456 <USBD_CtlError>
        break;
 800f326:	e01e      	b.n	800f366 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	60da      	str	r2, [r3, #12]
#endif

      if (pdev->dev_remote_wakeup)
 800f32e:	687a      	ldr	r2, [r7, #4]
 800f330:	23a9      	movs	r3, #169	@ 0xa9
 800f332:	009b      	lsls	r3, r3, #2
 800f334:	58d3      	ldr	r3, [r2, r3]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d005      	beq.n	800f346 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	68db      	ldr	r3, [r3, #12]
 800f33e:	2202      	movs	r2, #2
 800f340:	431a      	orrs	r2, r3
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	330c      	adds	r3, #12
 800f34a:	0019      	movs	r1, r3
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2202      	movs	r2, #2
 800f350:	0018      	movs	r0, r3
 800f352:	f000 f8fe 	bl	800f552 <USBD_CtlSendData>
      break;
 800f356:	e006      	b.n	800f366 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800f358:	683a      	ldr	r2, [r7, #0]
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	0011      	movs	r1, r2
 800f35e:	0018      	movs	r0, r3
 800f360:	f000 f879 	bl	800f456 <USBD_CtlError>
      break;
 800f364:	46c0      	nop			@ (mov r8, r8)
  }
}
 800f366:	46c0      	nop			@ (mov r8, r8)
 800f368:	46bd      	mov	sp, r7
 800f36a:	b002      	add	sp, #8
 800f36c:	bd80      	pop	{r7, pc}

0800f36e <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f36e:	b580      	push	{r7, lr}
 800f370:	b082      	sub	sp, #8
 800f372:	af00      	add	r7, sp, #0
 800f374:	6078      	str	r0, [r7, #4]
 800f376:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	885b      	ldrh	r3, [r3, #2]
 800f37c:	2b01      	cmp	r3, #1
 800f37e:	d108      	bne.n	800f392 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	23a9      	movs	r3, #169	@ 0xa9
 800f384:	009b      	lsls	r3, r3, #2
 800f386:	2101      	movs	r1, #1
 800f388:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	0018      	movs	r0, r3
 800f38e:	f000 f94a 	bl	800f626 <USBD_CtlSendStatus>
  }
}
 800f392:	46c0      	nop			@ (mov r8, r8)
 800f394:	46bd      	mov	sp, r7
 800f396:	b002      	add	sp, #8
 800f398:	bd80      	pop	{r7, pc}

0800f39a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800f39a:	b580      	push	{r7, lr}
 800f39c:	b082      	sub	sp, #8
 800f39e:	af00      	add	r7, sp, #0
 800f3a0:	6078      	str	r0, [r7, #4]
 800f3a2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	23a7      	movs	r3, #167	@ 0xa7
 800f3a8:	009b      	lsls	r3, r3, #2
 800f3aa:	5cd3      	ldrb	r3, [r2, r3]
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	2b02      	cmp	r3, #2
 800f3b0:	d80d      	bhi.n	800f3ce <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f3b2:	683b      	ldr	r3, [r7, #0]
 800f3b4:	885b      	ldrh	r3, [r3, #2]
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d110      	bne.n	800f3dc <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800f3ba:	687a      	ldr	r2, [r7, #4]
 800f3bc:	23a9      	movs	r3, #169	@ 0xa9
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	0018      	movs	r0, r3
 800f3c8:	f000 f92d 	bl	800f626 <USBD_CtlSendStatus>
      }
      break;
 800f3cc:	e006      	b.n	800f3dc <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800f3ce:	683a      	ldr	r2, [r7, #0]
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	0011      	movs	r1, r2
 800f3d4:	0018      	movs	r0, r3
 800f3d6:	f000 f83e 	bl	800f456 <USBD_CtlError>
      break;
 800f3da:	e000      	b.n	800f3de <USBD_ClrFeature+0x44>
      break;
 800f3dc:	46c0      	nop			@ (mov r8, r8)
  }
}
 800f3de:	46c0      	nop			@ (mov r8, r8)
 800f3e0:	46bd      	mov	sp, r7
 800f3e2:	b002      	add	sp, #8
 800f3e4:	bd80      	pop	{r7, pc}

0800f3e6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f3e6:	b580      	push	{r7, lr}
 800f3e8:	b082      	sub	sp, #8
 800f3ea:	af00      	add	r7, sp, #0
 800f3ec:	6078      	str	r0, [r7, #4]
 800f3ee:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	781a      	ldrb	r2, [r3, #0]
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	785a      	ldrb	r2, [r3, #1]
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	3302      	adds	r3, #2
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	001a      	movs	r2, r3
 800f408:	683b      	ldr	r3, [r7, #0]
 800f40a:	3303      	adds	r3, #3
 800f40c:	781b      	ldrb	r3, [r3, #0]
 800f40e:	021b      	lsls	r3, r3, #8
 800f410:	b29b      	uxth	r3, r3
 800f412:	18d3      	adds	r3, r2, r3
 800f414:	b29a      	uxth	r2, r3
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	3304      	adds	r3, #4
 800f41e:	781b      	ldrb	r3, [r3, #0]
 800f420:	001a      	movs	r2, r3
 800f422:	683b      	ldr	r3, [r7, #0]
 800f424:	3305      	adds	r3, #5
 800f426:	781b      	ldrb	r3, [r3, #0]
 800f428:	021b      	lsls	r3, r3, #8
 800f42a:	b29b      	uxth	r3, r3
 800f42c:	18d3      	adds	r3, r2, r3
 800f42e:	b29a      	uxth	r2, r3
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800f434:	683b      	ldr	r3, [r7, #0]
 800f436:	3306      	adds	r3, #6
 800f438:	781b      	ldrb	r3, [r3, #0]
 800f43a:	001a      	movs	r2, r3
 800f43c:	683b      	ldr	r3, [r7, #0]
 800f43e:	3307      	adds	r3, #7
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	021b      	lsls	r3, r3, #8
 800f444:	b29b      	uxth	r3, r3
 800f446:	18d3      	adds	r3, r2, r3
 800f448:	b29a      	uxth	r2, r3
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	80da      	strh	r2, [r3, #6]

}
 800f44e:	46c0      	nop			@ (mov r8, r8)
 800f450:	46bd      	mov	sp, r7
 800f452:	b002      	add	sp, #8
 800f454:	bd80      	pop	{r7, pc}

0800f456 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800f456:	b580      	push	{r7, lr}
 800f458:	b082      	sub	sp, #8
 800f45a:	af00      	add	r7, sp, #0
 800f45c:	6078      	str	r0, [r7, #4]
 800f45e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	2180      	movs	r1, #128	@ 0x80
 800f464:	0018      	movs	r0, r3
 800f466:	f000 fca4 	bl	800fdb2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800f46a:	687b      	ldr	r3, [r7, #4]
 800f46c:	2100      	movs	r1, #0
 800f46e:	0018      	movs	r0, r3
 800f470:	f000 fc9f 	bl	800fdb2 <USBD_LL_StallEP>
}
 800f474:	46c0      	nop			@ (mov r8, r8)
 800f476:	46bd      	mov	sp, r7
 800f478:	b002      	add	sp, #8
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f47c:	b590      	push	{r4, r7, lr}
 800f47e:	b087      	sub	sp, #28
 800f480:	af00      	add	r7, sp, #0
 800f482:	60f8      	str	r0, [r7, #12]
 800f484:	60b9      	str	r1, [r7, #8]
 800f486:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f488:	2417      	movs	r4, #23
 800f48a:	193b      	adds	r3, r7, r4
 800f48c:	2200      	movs	r2, #0
 800f48e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	2b00      	cmp	r3, #0
 800f494:	d03c      	beq.n	800f510 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	0018      	movs	r0, r3
 800f49a:	f000 f83d 	bl	800f518 <USBD_GetLen>
 800f49e:	0003      	movs	r3, r0
 800f4a0:	3301      	adds	r3, #1
 800f4a2:	b29b      	uxth	r3, r3
 800f4a4:	18db      	adds	r3, r3, r3
 800f4a6:	b29a      	uxth	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800f4ac:	193b      	adds	r3, r7, r4
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	193a      	adds	r2, r7, r4
 800f4b2:	1c59      	adds	r1, r3, #1
 800f4b4:	7011      	strb	r1, [r2, #0]
 800f4b6:	001a      	movs	r2, r3
 800f4b8:	68bb      	ldr	r3, [r7, #8]
 800f4ba:	189b      	adds	r3, r3, r2
 800f4bc:	687a      	ldr	r2, [r7, #4]
 800f4be:	7812      	ldrb	r2, [r2, #0]
 800f4c0:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800f4c2:	193b      	adds	r3, r7, r4
 800f4c4:	781b      	ldrb	r3, [r3, #0]
 800f4c6:	193a      	adds	r2, r7, r4
 800f4c8:	1c59      	adds	r1, r3, #1
 800f4ca:	7011      	strb	r1, [r2, #0]
 800f4cc:	001a      	movs	r2, r3
 800f4ce:	68bb      	ldr	r3, [r7, #8]
 800f4d0:	189b      	adds	r3, r3, r2
 800f4d2:	2203      	movs	r2, #3
 800f4d4:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800f4d6:	e017      	b.n	800f508 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800f4d8:	68fb      	ldr	r3, [r7, #12]
 800f4da:	1c5a      	adds	r2, r3, #1
 800f4dc:	60fa      	str	r2, [r7, #12]
 800f4de:	2417      	movs	r4, #23
 800f4e0:	193a      	adds	r2, r7, r4
 800f4e2:	7812      	ldrb	r2, [r2, #0]
 800f4e4:	1939      	adds	r1, r7, r4
 800f4e6:	1c50      	adds	r0, r2, #1
 800f4e8:	7008      	strb	r0, [r1, #0]
 800f4ea:	0011      	movs	r1, r2
 800f4ec:	68ba      	ldr	r2, [r7, #8]
 800f4ee:	1852      	adds	r2, r2, r1
 800f4f0:	781b      	ldrb	r3, [r3, #0]
 800f4f2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800f4f4:	193b      	adds	r3, r7, r4
 800f4f6:	781b      	ldrb	r3, [r3, #0]
 800f4f8:	193a      	adds	r2, r7, r4
 800f4fa:	1c59      	adds	r1, r3, #1
 800f4fc:	7011      	strb	r1, [r2, #0]
 800f4fe:	001a      	movs	r2, r3
 800f500:	68bb      	ldr	r3, [r7, #8]
 800f502:	189b      	adds	r3, r3, r2
 800f504:	2200      	movs	r2, #0
 800f506:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	781b      	ldrb	r3, [r3, #0]
 800f50c:	2b00      	cmp	r3, #0
 800f50e:	d1e3      	bne.n	800f4d8 <USBD_GetString+0x5c>
    }
  }
}
 800f510:	46c0      	nop			@ (mov r8, r8)
 800f512:	46bd      	mov	sp, r7
 800f514:	b007      	add	sp, #28
 800f516:	bd90      	pop	{r4, r7, pc}

0800f518 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f518:	b580      	push	{r7, lr}
 800f51a:	b084      	sub	sp, #16
 800f51c:	af00      	add	r7, sp, #0
 800f51e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f520:	230f      	movs	r3, #15
 800f522:	18fb      	adds	r3, r7, r3
 800f524:	2200      	movs	r2, #0
 800f526:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800f528:	e008      	b.n	800f53c <USBD_GetLen+0x24>
  {
    len++;
 800f52a:	210f      	movs	r1, #15
 800f52c:	187b      	adds	r3, r7, r1
 800f52e:	781a      	ldrb	r2, [r3, #0]
 800f530:	187b      	adds	r3, r7, r1
 800f532:	3201      	adds	r2, #1
 800f534:	701a      	strb	r2, [r3, #0]
    buf++;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	3301      	adds	r3, #1
 800f53a:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	781b      	ldrb	r3, [r3, #0]
 800f540:	2b00      	cmp	r3, #0
 800f542:	d1f2      	bne.n	800f52a <USBD_GetLen+0x12>
  }

  return len;
 800f544:	230f      	movs	r3, #15
 800f546:	18fb      	adds	r3, r7, r3
 800f548:	781b      	ldrb	r3, [r3, #0]
}
 800f54a:	0018      	movs	r0, r3
 800f54c:	46bd      	mov	sp, r7
 800f54e:	b004      	add	sp, #16
 800f550:	bd80      	pop	{r7, pc}

0800f552 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800f552:	b580      	push	{r7, lr}
 800f554:	b084      	sub	sp, #16
 800f556:	af00      	add	r7, sp, #0
 800f558:	60f8      	str	r0, [r7, #12]
 800f55a:	60b9      	str	r1, [r7, #8]
 800f55c:	1dbb      	adds	r3, r7, #6
 800f55e:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f560:	68fa      	ldr	r2, [r7, #12]
 800f562:	23a5      	movs	r3, #165	@ 0xa5
 800f564:	009b      	lsls	r3, r3, #2
 800f566:	2102      	movs	r1, #2
 800f568:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800f56a:	1dbb      	adds	r3, r7, #6
 800f56c:	881a      	ldrh	r2, [r3, #0]
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800f572:	1dbb      	adds	r3, r7, #6
 800f574:	881a      	ldrh	r2, [r3, #0]
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f57a:	1dbb      	adds	r3, r7, #6
 800f57c:	881b      	ldrh	r3, [r3, #0]
 800f57e:	68ba      	ldr	r2, [r7, #8]
 800f580:	68f8      	ldr	r0, [r7, #12]
 800f582:	2100      	movs	r1, #0
 800f584:	f000 fcc6 	bl	800ff14 <USBD_LL_Transmit>

  return USBD_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	0018      	movs	r0, r3
 800f58c:	46bd      	mov	sp, r7
 800f58e:	b004      	add	sp, #16
 800f590:	bd80      	pop	{r7, pc}

0800f592 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800f592:	b580      	push	{r7, lr}
 800f594:	b084      	sub	sp, #16
 800f596:	af00      	add	r7, sp, #0
 800f598:	60f8      	str	r0, [r7, #12]
 800f59a:	60b9      	str	r1, [r7, #8]
 800f59c:	1dbb      	adds	r3, r7, #6
 800f59e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f5a0:	1dbb      	adds	r3, r7, #6
 800f5a2:	881b      	ldrh	r3, [r3, #0]
 800f5a4:	68ba      	ldr	r2, [r7, #8]
 800f5a6:	68f8      	ldr	r0, [r7, #12]
 800f5a8:	2100      	movs	r1, #0
 800f5aa:	f000 fcb3 	bl	800ff14 <USBD_LL_Transmit>

  return USBD_OK;
 800f5ae:	2300      	movs	r3, #0
}
 800f5b0:	0018      	movs	r0, r3
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	b004      	add	sp, #16
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	60f8      	str	r0, [r7, #12]
 800f5c0:	60b9      	str	r1, [r7, #8]
 800f5c2:	1dbb      	adds	r3, r7, #6
 800f5c4:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f5c6:	68fa      	ldr	r2, [r7, #12]
 800f5c8:	23a5      	movs	r3, #165	@ 0xa5
 800f5ca:	009b      	lsls	r3, r3, #2
 800f5cc:	2103      	movs	r1, #3
 800f5ce:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800f5d0:	1dbb      	adds	r3, r7, #6
 800f5d2:	8819      	ldrh	r1, [r3, #0]
 800f5d4:	68fa      	ldr	r2, [r7, #12]
 800f5d6:	23ae      	movs	r3, #174	@ 0xae
 800f5d8:	005b      	lsls	r3, r3, #1
 800f5da:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800f5dc:	1dbb      	adds	r3, r7, #6
 800f5de:	8819      	ldrh	r1, [r3, #0]
 800f5e0:	68fa      	ldr	r2, [r7, #12]
 800f5e2:	23b0      	movs	r3, #176	@ 0xb0
 800f5e4:	005b      	lsls	r3, r3, #1
 800f5e6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f5e8:	1dbb      	adds	r3, r7, #6
 800f5ea:	881b      	ldrh	r3, [r3, #0]
 800f5ec:	68ba      	ldr	r2, [r7, #8]
 800f5ee:	68f8      	ldr	r0, [r7, #12]
 800f5f0:	2100      	movs	r1, #0
 800f5f2:	f000 fcc6 	bl	800ff82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f5f6:	2300      	movs	r3, #0
}
 800f5f8:	0018      	movs	r0, r3
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	b004      	add	sp, #16
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b084      	sub	sp, #16
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	60b9      	str	r1, [r7, #8]
 800f60a:	1dbb      	adds	r3, r7, #6
 800f60c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f60e:	1dbb      	adds	r3, r7, #6
 800f610:	881b      	ldrh	r3, [r3, #0]
 800f612:	68ba      	ldr	r2, [r7, #8]
 800f614:	68f8      	ldr	r0, [r7, #12]
 800f616:	2100      	movs	r1, #0
 800f618:	f000 fcb3 	bl	800ff82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f61c:	2300      	movs	r3, #0
}
 800f61e:	0018      	movs	r0, r3
 800f620:	46bd      	mov	sp, r7
 800f622:	b004      	add	sp, #16
 800f624:	bd80      	pop	{r7, pc}

0800f626 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f626:	b580      	push	{r7, lr}
 800f628:	b082      	sub	sp, #8
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f62e:	687a      	ldr	r2, [r7, #4]
 800f630:	23a5      	movs	r3, #165	@ 0xa5
 800f632:	009b      	lsls	r3, r3, #2
 800f634:	2104      	movs	r1, #4
 800f636:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f638:	6878      	ldr	r0, [r7, #4]
 800f63a:	2300      	movs	r3, #0
 800f63c:	2200      	movs	r2, #0
 800f63e:	2100      	movs	r1, #0
 800f640:	f000 fc68 	bl	800ff14 <USBD_LL_Transmit>

  return USBD_OK;
 800f644:	2300      	movs	r3, #0
}
 800f646:	0018      	movs	r0, r3
 800f648:	46bd      	mov	sp, r7
 800f64a:	b002      	add	sp, #8
 800f64c:	bd80      	pop	{r7, pc}

0800f64e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f64e:	b580      	push	{r7, lr}
 800f650:	b082      	sub	sp, #8
 800f652:	af00      	add	r7, sp, #0
 800f654:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f656:	687a      	ldr	r2, [r7, #4]
 800f658:	23a5      	movs	r3, #165	@ 0xa5
 800f65a:	009b      	lsls	r3, r3, #2
 800f65c:	2105      	movs	r1, #5
 800f65e:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f660:	6878      	ldr	r0, [r7, #4]
 800f662:	2300      	movs	r3, #0
 800f664:	2200      	movs	r2, #0
 800f666:	2100      	movs	r1, #0
 800f668:	f000 fc8b 	bl	800ff82 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f66c:	2300      	movs	r3, #0
}
 800f66e:	0018      	movs	r0, r3
 800f670:	46bd      	mov	sp, r7
 800f672:	b002      	add	sp, #8
 800f674:	bd80      	pop	{r7, pc}
	...

0800f678 <RegisterUSBReceiveCallback>:
/*
 * -- Insert your external function declaration here --
 */
/* USER CODE BEGIN 1 */
void RegisterUSBReceiveCallback(UsbDataReceivedCallback callback)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b082      	sub	sp, #8
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
	rxCallback = callback;
 800f680:	4b03      	ldr	r3, [pc, #12]	@ (800f690 <RegisterUSBReceiveCallback+0x18>)
 800f682:	687a      	ldr	r2, [r7, #4]
 800f684:	601a      	str	r2, [r3, #0]
}
 800f686:	46c0      	nop			@ (mov r8, r8)
 800f688:	46bd      	mov	sp, r7
 800f68a:	b002      	add	sp, #8
 800f68c:	bd80      	pop	{r7, pc}
 800f68e:	46c0      	nop			@ (mov r8, r8)
 800f690:	20000a88 	.word	0x20000a88

0800f694 <GetUSBHandle>:

USBD_HandleTypeDef* GetUSBHandle()
{
 800f694:	b580      	push	{r7, lr}
 800f696:	af00      	add	r7, sp, #0
	return &hUsbDeviceFS;
 800f698:	4b01      	ldr	r3, [pc, #4]	@ (800f6a0 <GetUSBHandle+0xc>)
}
 800f69a:	0018      	movs	r0, r3
 800f69c:	46bd      	mov	sp, r7
 800f69e:	bd80      	pop	{r7, pc}
 800f6a0:	20000a8c 	.word	0x20000a8c

0800f6a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f6a4:	b580      	push	{r7, lr}
 800f6a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f6a8:	4914      	ldr	r1, [pc, #80]	@ (800f6fc <MX_USB_DEVICE_Init+0x58>)
 800f6aa:	4b15      	ldr	r3, [pc, #84]	@ (800f700 <MX_USB_DEVICE_Init+0x5c>)
 800f6ac:	2200      	movs	r2, #0
 800f6ae:	0018      	movs	r0, r3
 800f6b0:	f7fe fdd5 	bl	800e25e <USBD_Init>
 800f6b4:	1e03      	subs	r3, r0, #0
 800f6b6:	d001      	beq.n	800f6bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f6b8:	f7f5 feec 	bl	8005494 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f6bc:	4a11      	ldr	r2, [pc, #68]	@ (800f704 <MX_USB_DEVICE_Init+0x60>)
 800f6be:	4b10      	ldr	r3, [pc, #64]	@ (800f700 <MX_USB_DEVICE_Init+0x5c>)
 800f6c0:	0011      	movs	r1, r2
 800f6c2:	0018      	movs	r0, r3
 800f6c4:	f7fe fdfc 	bl	800e2c0 <USBD_RegisterClass>
 800f6c8:	1e03      	subs	r3, r0, #0
 800f6ca:	d001      	beq.n	800f6d0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800f6cc:	f7f5 fee2 	bl	8005494 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f6d0:	4a0d      	ldr	r2, [pc, #52]	@ (800f708 <MX_USB_DEVICE_Init+0x64>)
 800f6d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f700 <MX_USB_DEVICE_Init+0x5c>)
 800f6d4:	0011      	movs	r1, r2
 800f6d6:	0018      	movs	r0, r3
 800f6d8:	f7fe fd48 	bl	800e16c <USBD_CDC_RegisterInterface>
 800f6dc:	1e03      	subs	r3, r0, #0
 800f6de:	d001      	beq.n	800f6e4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800f6e0:	f7f5 fed8 	bl	8005494 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f6e4:	4b06      	ldr	r3, [pc, #24]	@ (800f700 <MX_USB_DEVICE_Init+0x5c>)
 800f6e6:	0018      	movs	r0, r3
 800f6e8:	f7fe fe0a 	bl	800e300 <USBD_Start>
 800f6ec:	1e03      	subs	r3, r0, #0
 800f6ee:	d001      	beq.n	800f6f4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800f6f0:	f7f5 fed0 	bl	8005494 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f6f4:	46c0      	nop			@ (mov r8, r8)
 800f6f6:	46bd      	mov	sp, r7
 800f6f8:	bd80      	pop	{r7, pc}
 800f6fa:	46c0      	nop			@ (mov r8, r8)
 800f6fc:	20000140 	.word	0x20000140
 800f700:	20000a8c 	.word	0x20000a8c
 800f704:	2000002c 	.word	0x2000002c
 800f708:	20000130 	.word	0x20000130

0800f70c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f710:	4907      	ldr	r1, [pc, #28]	@ (800f730 <CDC_Init_FS+0x24>)
 800f712:	4b08      	ldr	r3, [pc, #32]	@ (800f734 <CDC_Init_FS+0x28>)
 800f714:	2200      	movs	r2, #0
 800f716:	0018      	movs	r0, r3
 800f718:	f7fe fd43 	bl	800e1a2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f71c:	4a06      	ldr	r2, [pc, #24]	@ (800f738 <CDC_Init_FS+0x2c>)
 800f71e:	4b05      	ldr	r3, [pc, #20]	@ (800f734 <CDC_Init_FS+0x28>)
 800f720:	0011      	movs	r1, r2
 800f722:	0018      	movs	r0, r3
 800f724:	f7fe fd59 	bl	800e1da <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f728:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f72a:	0018      	movs	r0, r3
 800f72c:	46bd      	mov	sp, r7
 800f72e:	bd80      	pop	{r7, pc}
 800f730:	20001150 	.word	0x20001150
 800f734:	20000a8c 	.word	0x20000a8c
 800f738:	20000d50 	.word	0x20000d50

0800f73c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f73c:	b580      	push	{r7, lr}
 800f73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f740:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f742:	0018      	movs	r0, r3
 800f744:	46bd      	mov	sp, r7
 800f746:	bd80      	pop	{r7, pc}

0800f748 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f748:	b580      	push	{r7, lr}
 800f74a:	b082      	sub	sp, #8
 800f74c:	af00      	add	r7, sp, #0
 800f74e:	6039      	str	r1, [r7, #0]
 800f750:	0011      	movs	r1, r2
 800f752:	1dfb      	adds	r3, r7, #7
 800f754:	1c02      	adds	r2, r0, #0
 800f756:	701a      	strb	r2, [r3, #0]
 800f758:	1d3b      	adds	r3, r7, #4
 800f75a:	1c0a      	adds	r2, r1, #0
 800f75c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f75e:	1dfb      	adds	r3, r7, #7
 800f760:	781b      	ldrb	r3, [r3, #0]
 800f762:	2b23      	cmp	r3, #35	@ 0x23
 800f764:	d804      	bhi.n	800f770 <CDC_Control_FS+0x28>
 800f766:	009a      	lsls	r2, r3, #2
 800f768:	4b04      	ldr	r3, [pc, #16]	@ (800f77c <CDC_Control_FS+0x34>)
 800f76a:	18d3      	adds	r3, r2, r3
 800f76c:	681b      	ldr	r3, [r3, #0]
 800f76e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f770:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800f772:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f774:	0018      	movs	r0, r3
 800f776:	46bd      	mov	sp, r7
 800f778:	b002      	add	sp, #8
 800f77a:	bd80      	pop	{r7, pc}
 800f77c:	08010d5c 	.word	0x08010d5c

0800f780 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f780:	b580      	push	{r7, lr}
 800f782:	b082      	sub	sp, #8
 800f784:	af00      	add	r7, sp, #0
 800f786:	6078      	str	r0, [r7, #4]
 800f788:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f78a:	687a      	ldr	r2, [r7, #4]
 800f78c:	4b06      	ldr	r3, [pc, #24]	@ (800f7a8 <CDC_Receive_FS+0x28>)
 800f78e:	0011      	movs	r1, r2
 800f790:	0018      	movs	r0, r3
 800f792:	f7fe fd22 	bl	800e1da <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f796:	4b04      	ldr	r3, [pc, #16]	@ (800f7a8 <CDC_Receive_FS+0x28>)
 800f798:	0018      	movs	r0, r3
 800f79a:	f7fe fd32 	bl	800e202 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800f79e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f7a0:	0018      	movs	r0, r3
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	b002      	add	sp, #8
 800f7a6:	bd80      	pop	{r7, pc}
 800f7a8:	20000a8c 	.word	0x20000a8c

0800f7ac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b082      	sub	sp, #8
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	0002      	movs	r2, r0
 800f7b4:	6039      	str	r1, [r7, #0]
 800f7b6:	1dfb      	adds	r3, r7, #7
 800f7b8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f7ba:	683b      	ldr	r3, [r7, #0]
 800f7bc:	2212      	movs	r2, #18
 800f7be:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f7c0:	4b02      	ldr	r3, [pc, #8]	@ (800f7cc <USBD_FS_DeviceDescriptor+0x20>)
}
 800f7c2:	0018      	movs	r0, r3
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	b002      	add	sp, #8
 800f7c8:	bd80      	pop	{r7, pc}
 800f7ca:	46c0      	nop			@ (mov r8, r8)
 800f7cc:	2000015c 	.word	0x2000015c

0800f7d0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b082      	sub	sp, #8
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	0002      	movs	r2, r0
 800f7d8:	6039      	str	r1, [r7, #0]
 800f7da:	1dfb      	adds	r3, r7, #7
 800f7dc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f7de:	683b      	ldr	r3, [r7, #0]
 800f7e0:	2204      	movs	r2, #4
 800f7e2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f7e4:	4b02      	ldr	r3, [pc, #8]	@ (800f7f0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f7e6:	0018      	movs	r0, r3
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	b002      	add	sp, #8
 800f7ec:	bd80      	pop	{r7, pc}
 800f7ee:	46c0      	nop			@ (mov r8, r8)
 800f7f0:	20000170 	.word	0x20000170

0800f7f4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	0002      	movs	r2, r0
 800f7fc:	6039      	str	r1, [r7, #0]
 800f7fe:	1dfb      	adds	r3, r7, #7
 800f800:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800f802:	1dfb      	adds	r3, r7, #7
 800f804:	781b      	ldrb	r3, [r3, #0]
 800f806:	2b00      	cmp	r3, #0
 800f808:	d106      	bne.n	800f818 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f80a:	683a      	ldr	r2, [r7, #0]
 800f80c:	4908      	ldr	r1, [pc, #32]	@ (800f830 <USBD_FS_ProductStrDescriptor+0x3c>)
 800f80e:	4b09      	ldr	r3, [pc, #36]	@ (800f834 <USBD_FS_ProductStrDescriptor+0x40>)
 800f810:	0018      	movs	r0, r3
 800f812:	f7ff fe33 	bl	800f47c <USBD_GetString>
 800f816:	e005      	b.n	800f824 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f818:	683a      	ldr	r2, [r7, #0]
 800f81a:	4905      	ldr	r1, [pc, #20]	@ (800f830 <USBD_FS_ProductStrDescriptor+0x3c>)
 800f81c:	4b05      	ldr	r3, [pc, #20]	@ (800f834 <USBD_FS_ProductStrDescriptor+0x40>)
 800f81e:	0018      	movs	r0, r3
 800f820:	f7ff fe2c 	bl	800f47c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f824:	4b02      	ldr	r3, [pc, #8]	@ (800f830 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800f826:	0018      	movs	r0, r3
 800f828:	46bd      	mov	sp, r7
 800f82a:	b002      	add	sp, #8
 800f82c:	bd80      	pop	{r7, pc}
 800f82e:	46c0      	nop			@ (mov r8, r8)
 800f830:	20001550 	.word	0x20001550
 800f834:	08010b88 	.word	0x08010b88

0800f838 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f838:	b580      	push	{r7, lr}
 800f83a:	b082      	sub	sp, #8
 800f83c:	af00      	add	r7, sp, #0
 800f83e:	0002      	movs	r2, r0
 800f840:	6039      	str	r1, [r7, #0]
 800f842:	1dfb      	adds	r3, r7, #7
 800f844:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f846:	683a      	ldr	r2, [r7, #0]
 800f848:	4904      	ldr	r1, [pc, #16]	@ (800f85c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f84a:	4b05      	ldr	r3, [pc, #20]	@ (800f860 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800f84c:	0018      	movs	r0, r3
 800f84e:	f7ff fe15 	bl	800f47c <USBD_GetString>
  return USBD_StrDesc;
 800f852:	4b02      	ldr	r3, [pc, #8]	@ (800f85c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800f854:	0018      	movs	r0, r3
 800f856:	46bd      	mov	sp, r7
 800f858:	b002      	add	sp, #8
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	20001550 	.word	0x20001550
 800f860:	08010b9c 	.word	0x08010b9c

0800f864 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f864:	b580      	push	{r7, lr}
 800f866:	b082      	sub	sp, #8
 800f868:	af00      	add	r7, sp, #0
 800f86a:	0002      	movs	r2, r0
 800f86c:	6039      	str	r1, [r7, #0]
 800f86e:	1dfb      	adds	r3, r7, #7
 800f870:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	221a      	movs	r2, #26
 800f876:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f878:	f000 f84c 	bl	800f914 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f87c:	4b02      	ldr	r3, [pc, #8]	@ (800f888 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800f87e:	0018      	movs	r0, r3
 800f880:	46bd      	mov	sp, r7
 800f882:	b002      	add	sp, #8
 800f884:	bd80      	pop	{r7, pc}
 800f886:	46c0      	nop			@ (mov r8, r8)
 800f888:	20000174 	.word	0x20000174

0800f88c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f88c:	b580      	push	{r7, lr}
 800f88e:	b082      	sub	sp, #8
 800f890:	af00      	add	r7, sp, #0
 800f892:	0002      	movs	r2, r0
 800f894:	6039      	str	r1, [r7, #0]
 800f896:	1dfb      	adds	r3, r7, #7
 800f898:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800f89a:	1dfb      	adds	r3, r7, #7
 800f89c:	781b      	ldrb	r3, [r3, #0]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d106      	bne.n	800f8b0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8a2:	683a      	ldr	r2, [r7, #0]
 800f8a4:	4908      	ldr	r1, [pc, #32]	@ (800f8c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800f8a6:	4b09      	ldr	r3, [pc, #36]	@ (800f8cc <USBD_FS_ConfigStrDescriptor+0x40>)
 800f8a8:	0018      	movs	r0, r3
 800f8aa:	f7ff fde7 	bl	800f47c <USBD_GetString>
 800f8ae:	e005      	b.n	800f8bc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f8b0:	683a      	ldr	r2, [r7, #0]
 800f8b2:	4905      	ldr	r1, [pc, #20]	@ (800f8c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800f8b4:	4b05      	ldr	r3, [pc, #20]	@ (800f8cc <USBD_FS_ConfigStrDescriptor+0x40>)
 800f8b6:	0018      	movs	r0, r3
 800f8b8:	f7ff fde0 	bl	800f47c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f8bc:	4b02      	ldr	r3, [pc, #8]	@ (800f8c8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800f8be:	0018      	movs	r0, r3
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	b002      	add	sp, #8
 800f8c4:	bd80      	pop	{r7, pc}
 800f8c6:	46c0      	nop			@ (mov r8, r8)
 800f8c8:	20001550 	.word	0x20001550
 800f8cc:	08010bac 	.word	0x08010bac

0800f8d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f8d0:	b580      	push	{r7, lr}
 800f8d2:	b082      	sub	sp, #8
 800f8d4:	af00      	add	r7, sp, #0
 800f8d6:	0002      	movs	r2, r0
 800f8d8:	6039      	str	r1, [r7, #0]
 800f8da:	1dfb      	adds	r3, r7, #7
 800f8dc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800f8de:	1dfb      	adds	r3, r7, #7
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d106      	bne.n	800f8f4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f8e6:	683a      	ldr	r2, [r7, #0]
 800f8e8:	4908      	ldr	r1, [pc, #32]	@ (800f90c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800f8ea:	4b09      	ldr	r3, [pc, #36]	@ (800f910 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800f8ec:	0018      	movs	r0, r3
 800f8ee:	f7ff fdc5 	bl	800f47c <USBD_GetString>
 800f8f2:	e005      	b.n	800f900 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f8f4:	683a      	ldr	r2, [r7, #0]
 800f8f6:	4905      	ldr	r1, [pc, #20]	@ (800f90c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800f8f8:	4b05      	ldr	r3, [pc, #20]	@ (800f910 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800f8fa:	0018      	movs	r0, r3
 800f8fc:	f7ff fdbe 	bl	800f47c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f900:	4b02      	ldr	r3, [pc, #8]	@ (800f90c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800f902:	0018      	movs	r0, r3
 800f904:	46bd      	mov	sp, r7
 800f906:	b002      	add	sp, #8
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	46c0      	nop			@ (mov r8, r8)
 800f90c:	20001550 	.word	0x20001550
 800f910:	08010bb8 	.word	0x08010bb8

0800f914 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f914:	b580      	push	{r7, lr}
 800f916:	b084      	sub	sp, #16
 800f918:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f91a:	4b10      	ldr	r3, [pc, #64]	@ (800f95c <Get_SerialNum+0x48>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f920:	4b0f      	ldr	r3, [pc, #60]	@ (800f960 <Get_SerialNum+0x4c>)
 800f922:	681b      	ldr	r3, [r3, #0]
 800f924:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f926:	4b0f      	ldr	r3, [pc, #60]	@ (800f964 <Get_SerialNum+0x50>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f92c:	68fa      	ldr	r2, [r7, #12]
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	18d3      	adds	r3, r2, r3
 800f932:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d00b      	beq.n	800f952 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f93a:	490b      	ldr	r1, [pc, #44]	@ (800f968 <Get_SerialNum+0x54>)
 800f93c:	68fb      	ldr	r3, [r7, #12]
 800f93e:	2208      	movs	r2, #8
 800f940:	0018      	movs	r0, r3
 800f942:	f000 f815 	bl	800f970 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f946:	4909      	ldr	r1, [pc, #36]	@ (800f96c <Get_SerialNum+0x58>)
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	2204      	movs	r2, #4
 800f94c:	0018      	movs	r0, r3
 800f94e:	f000 f80f 	bl	800f970 <IntToUnicode>
  }
}
 800f952:	46c0      	nop			@ (mov r8, r8)
 800f954:	46bd      	mov	sp, r7
 800f956:	b004      	add	sp, #16
 800f958:	bd80      	pop	{r7, pc}
 800f95a:	46c0      	nop			@ (mov r8, r8)
 800f95c:	1ffff7ac 	.word	0x1ffff7ac
 800f960:	1ffff7b0 	.word	0x1ffff7b0
 800f964:	1ffff7b4 	.word	0x1ffff7b4
 800f968:	20000176 	.word	0x20000176
 800f96c:	20000186 	.word	0x20000186

0800f970 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f970:	b580      	push	{r7, lr}
 800f972:	b086      	sub	sp, #24
 800f974:	af00      	add	r7, sp, #0
 800f976:	60f8      	str	r0, [r7, #12]
 800f978:	60b9      	str	r1, [r7, #8]
 800f97a:	1dfb      	adds	r3, r7, #7
 800f97c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800f97e:	2117      	movs	r1, #23
 800f980:	187b      	adds	r3, r7, r1
 800f982:	2200      	movs	r2, #0
 800f984:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800f986:	187b      	adds	r3, r7, r1
 800f988:	2200      	movs	r2, #0
 800f98a:	701a      	strb	r2, [r3, #0]
 800f98c:	e02f      	b.n	800f9ee <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	0f1b      	lsrs	r3, r3, #28
 800f992:	2b09      	cmp	r3, #9
 800f994:	d80d      	bhi.n	800f9b2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	0f1b      	lsrs	r3, r3, #28
 800f99a:	b2da      	uxtb	r2, r3
 800f99c:	2317      	movs	r3, #23
 800f99e:	18fb      	adds	r3, r7, r3
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	005b      	lsls	r3, r3, #1
 800f9a4:	0019      	movs	r1, r3
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	185b      	adds	r3, r3, r1
 800f9aa:	3230      	adds	r2, #48	@ 0x30
 800f9ac:	b2d2      	uxtb	r2, r2
 800f9ae:	701a      	strb	r2, [r3, #0]
 800f9b0:	e00c      	b.n	800f9cc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	0f1b      	lsrs	r3, r3, #28
 800f9b6:	b2da      	uxtb	r2, r3
 800f9b8:	2317      	movs	r3, #23
 800f9ba:	18fb      	adds	r3, r7, r3
 800f9bc:	781b      	ldrb	r3, [r3, #0]
 800f9be:	005b      	lsls	r3, r3, #1
 800f9c0:	0019      	movs	r1, r3
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	185b      	adds	r3, r3, r1
 800f9c6:	3237      	adds	r2, #55	@ 0x37
 800f9c8:	b2d2      	uxtb	r2, r2
 800f9ca:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f9cc:	68fb      	ldr	r3, [r7, #12]
 800f9ce:	011b      	lsls	r3, r3, #4
 800f9d0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f9d2:	2117      	movs	r1, #23
 800f9d4:	187b      	adds	r3, r7, r1
 800f9d6:	781b      	ldrb	r3, [r3, #0]
 800f9d8:	005b      	lsls	r3, r3, #1
 800f9da:	3301      	adds	r3, #1
 800f9dc:	68ba      	ldr	r2, [r7, #8]
 800f9de:	18d3      	adds	r3, r2, r3
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f9e4:	187b      	adds	r3, r7, r1
 800f9e6:	781a      	ldrb	r2, [r3, #0]
 800f9e8:	187b      	adds	r3, r7, r1
 800f9ea:	3201      	adds	r2, #1
 800f9ec:	701a      	strb	r2, [r3, #0]
 800f9ee:	2317      	movs	r3, #23
 800f9f0:	18fa      	adds	r2, r7, r3
 800f9f2:	1dfb      	adds	r3, r7, #7
 800f9f4:	7812      	ldrb	r2, [r2, #0]
 800f9f6:	781b      	ldrb	r3, [r3, #0]
 800f9f8:	429a      	cmp	r2, r3
 800f9fa:	d3c8      	bcc.n	800f98e <IntToUnicode+0x1e>
  }
}
 800f9fc:	46c0      	nop			@ (mov r8, r8)
 800f9fe:	46c0      	nop			@ (mov r8, r8)
 800fa00:	46bd      	mov	sp, r7
 800fa02:	b006      	add	sp, #24
 800fa04:	bd80      	pop	{r7, pc}
	...

0800fa08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fa08:	b580      	push	{r7, lr}
 800fa0a:	b084      	sub	sp, #16
 800fa0c:	af00      	add	r7, sp, #0
 800fa0e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	4a0e      	ldr	r2, [pc, #56]	@ (800fa50 <HAL_PCD_MspInit+0x48>)
 800fa16:	4293      	cmp	r3, r2
 800fa18:	d115      	bne.n	800fa46 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800fa1a:	4b0e      	ldr	r3, [pc, #56]	@ (800fa54 <HAL_PCD_MspInit+0x4c>)
 800fa1c:	69da      	ldr	r2, [r3, #28]
 800fa1e:	4b0d      	ldr	r3, [pc, #52]	@ (800fa54 <HAL_PCD_MspInit+0x4c>)
 800fa20:	2180      	movs	r1, #128	@ 0x80
 800fa22:	0409      	lsls	r1, r1, #16
 800fa24:	430a      	orrs	r2, r1
 800fa26:	61da      	str	r2, [r3, #28]
 800fa28:	4b0a      	ldr	r3, [pc, #40]	@ (800fa54 <HAL_PCD_MspInit+0x4c>)
 800fa2a:	69da      	ldr	r2, [r3, #28]
 800fa2c:	2380      	movs	r3, #128	@ 0x80
 800fa2e:	041b      	lsls	r3, r3, #16
 800fa30:	4013      	ands	r3, r2
 800fa32:	60fb      	str	r3, [r7, #12]
 800fa34:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800fa36:	2200      	movs	r2, #0
 800fa38:	2100      	movs	r1, #0
 800fa3a:	201f      	movs	r0, #31
 800fa3c:	f7f6 fcfa 	bl	8006434 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800fa40:	201f      	movs	r0, #31
 800fa42:	f7f6 fd0c 	bl	800645e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800fa46:	46c0      	nop			@ (mov r8, r8)
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	b004      	add	sp, #16
 800fa4c:	bd80      	pop	{r7, pc}
 800fa4e:	46c0      	nop			@ (mov r8, r8)
 800fa50:	40005c00 	.word	0x40005c00
 800fa54:	40021000 	.word	0x40021000

0800fa58 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa58:	b580      	push	{r7, lr}
 800fa5a:	b082      	sub	sp, #8
 800fa5c:	af00      	add	r7, sp, #0
 800fa5e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fa60:	687a      	ldr	r2, [r7, #4]
 800fa62:	23b6      	movs	r3, #182	@ 0xb6
 800fa64:	009b      	lsls	r3, r3, #2
 800fa66:	58d2      	ldr	r2, [r2, r3]
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	21a6      	movs	r1, #166	@ 0xa6
 800fa6c:	0089      	lsls	r1, r1, #2
 800fa6e:	468c      	mov	ip, r1
 800fa70:	4463      	add	r3, ip
 800fa72:	0019      	movs	r1, r3
 800fa74:	0010      	movs	r0, r2
 800fa76:	f7fe fc97 	bl	800e3a8 <USBD_LL_SetupStage>
}
 800fa7a:	46c0      	nop			@ (mov r8, r8)
 800fa7c:	46bd      	mov	sp, r7
 800fa7e:	b002      	add	sp, #8
 800fa80:	bd80      	pop	{r7, pc}

0800fa82 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fa82:	b590      	push	{r4, r7, lr}
 800fa84:	b083      	sub	sp, #12
 800fa86:	af00      	add	r7, sp, #0
 800fa88:	6078      	str	r0, [r7, #4]
 800fa8a:	000a      	movs	r2, r1
 800fa8c:	1cfb      	adds	r3, r7, #3
 800fa8e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fa90:	687a      	ldr	r2, [r7, #4]
 800fa92:	23b6      	movs	r3, #182	@ 0xb6
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	58d4      	ldr	r4, [r2, r3]
 800fa98:	1cfb      	adds	r3, r7, #3
 800fa9a:	781a      	ldrb	r2, [r3, #0]
 800fa9c:	6878      	ldr	r0, [r7, #4]
 800fa9e:	23b2      	movs	r3, #178	@ 0xb2
 800faa0:	0059      	lsls	r1, r3, #1
 800faa2:	0013      	movs	r3, r2
 800faa4:	009b      	lsls	r3, r3, #2
 800faa6:	189b      	adds	r3, r3, r2
 800faa8:	00db      	lsls	r3, r3, #3
 800faaa:	18c3      	adds	r3, r0, r3
 800faac:	185b      	adds	r3, r3, r1
 800faae:	681a      	ldr	r2, [r3, #0]
 800fab0:	1cfb      	adds	r3, r7, #3
 800fab2:	781b      	ldrb	r3, [r3, #0]
 800fab4:	0019      	movs	r1, r3
 800fab6:	0020      	movs	r0, r4
 800fab8:	f7fe fcd4 	bl	800e464 <USBD_LL_DataOutStage>
}
 800fabc:	46c0      	nop			@ (mov r8, r8)
 800fabe:	46bd      	mov	sp, r7
 800fac0:	b003      	add	sp, #12
 800fac2:	bd90      	pop	{r4, r7, pc}

0800fac4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fac4:	b580      	push	{r7, lr}
 800fac6:	b082      	sub	sp, #8
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
 800facc:	000a      	movs	r2, r1
 800face:	1cfb      	adds	r3, r7, #3
 800fad0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	23b6      	movs	r3, #182	@ 0xb6
 800fad6:	009b      	lsls	r3, r3, #2
 800fad8:	58d0      	ldr	r0, [r2, r3]
 800fada:	1cfb      	adds	r3, r7, #3
 800fadc:	781a      	ldrb	r2, [r3, #0]
 800fade:	6879      	ldr	r1, [r7, #4]
 800fae0:	0013      	movs	r3, r2
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	189b      	adds	r3, r3, r2
 800fae6:	00db      	lsls	r3, r3, #3
 800fae8:	18cb      	adds	r3, r1, r3
 800faea:	3324      	adds	r3, #36	@ 0x24
 800faec:	681a      	ldr	r2, [r3, #0]
 800faee:	1cfb      	adds	r3, r7, #3
 800faf0:	781b      	ldrb	r3, [r3, #0]
 800faf2:	0019      	movs	r1, r3
 800faf4:	f7fe fd38 	bl	800e568 <USBD_LL_DataInStage>
}
 800faf8:	46c0      	nop			@ (mov r8, r8)
 800fafa:	46bd      	mov	sp, r7
 800fafc:	b002      	add	sp, #8
 800fafe:	bd80      	pop	{r7, pc}

0800fb00 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb00:	b580      	push	{r7, lr}
 800fb02:	b082      	sub	sp, #8
 800fb04:	af00      	add	r7, sp, #0
 800fb06:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fb08:	687a      	ldr	r2, [r7, #4]
 800fb0a:	23b6      	movs	r3, #182	@ 0xb6
 800fb0c:	009b      	lsls	r3, r3, #2
 800fb0e:	58d3      	ldr	r3, [r2, r3]
 800fb10:	0018      	movs	r0, r3
 800fb12:	f7fe fe6f 	bl	800e7f4 <USBD_LL_SOF>
}
 800fb16:	46c0      	nop			@ (mov r8, r8)
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	b002      	add	sp, #8
 800fb1c:	bd80      	pop	{r7, pc}

0800fb1e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb1e:	b580      	push	{r7, lr}
 800fb20:	b084      	sub	sp, #16
 800fb22:	af00      	add	r7, sp, #0
 800fb24:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fb26:	230f      	movs	r3, #15
 800fb28:	18fb      	adds	r3, r7, r3
 800fb2a:	2201      	movs	r2, #1
 800fb2c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	795b      	ldrb	r3, [r3, #5]
 800fb32:	2b02      	cmp	r3, #2
 800fb34:	d001      	beq.n	800fb3a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800fb36:	f7f5 fcad 	bl	8005494 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fb3a:	687a      	ldr	r2, [r7, #4]
 800fb3c:	23b6      	movs	r3, #182	@ 0xb6
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	58d2      	ldr	r2, [r2, r3]
 800fb42:	230f      	movs	r3, #15
 800fb44:	18fb      	adds	r3, r7, r3
 800fb46:	781b      	ldrb	r3, [r3, #0]
 800fb48:	0019      	movs	r1, r3
 800fb4a:	0010      	movs	r0, r2
 800fb4c:	f7fe fe11 	bl	800e772 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fb50:	687a      	ldr	r2, [r7, #4]
 800fb52:	23b6      	movs	r3, #182	@ 0xb6
 800fb54:	009b      	lsls	r3, r3, #2
 800fb56:	58d3      	ldr	r3, [r2, r3]
 800fb58:	0018      	movs	r0, r3
 800fb5a:	f7fe fdc2 	bl	800e6e2 <USBD_LL_Reset>
}
 800fb5e:	46c0      	nop			@ (mov r8, r8)
 800fb60:	46bd      	mov	sp, r7
 800fb62:	b004      	add	sp, #16
 800fb64:	bd80      	pop	{r7, pc}
	...

0800fb68 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fb68:	b580      	push	{r7, lr}
 800fb6a:	b082      	sub	sp, #8
 800fb6c:	af00      	add	r7, sp, #0
 800fb6e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fb70:	687a      	ldr	r2, [r7, #4]
 800fb72:	23b6      	movs	r3, #182	@ 0xb6
 800fb74:	009b      	lsls	r3, r3, #2
 800fb76:	58d3      	ldr	r3, [r2, r3]
 800fb78:	0018      	movs	r0, r3
 800fb7a:	f7fe fe0b 	bl	800e794 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	7a5b      	ldrb	r3, [r3, #9]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d005      	beq.n	800fb92 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fb86:	4b05      	ldr	r3, [pc, #20]	@ (800fb9c <HAL_PCD_SuspendCallback+0x34>)
 800fb88:	691a      	ldr	r2, [r3, #16]
 800fb8a:	4b04      	ldr	r3, [pc, #16]	@ (800fb9c <HAL_PCD_SuspendCallback+0x34>)
 800fb8c:	2106      	movs	r1, #6
 800fb8e:	430a      	orrs	r2, r1
 800fb90:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800fb92:	46c0      	nop			@ (mov r8, r8)
 800fb94:	46bd      	mov	sp, r7
 800fb96:	b002      	add	sp, #8
 800fb98:	bd80      	pop	{r7, pc}
 800fb9a:	46c0      	nop			@ (mov r8, r8)
 800fb9c:	e000ed00 	.word	0xe000ed00

0800fba0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fba0:	b580      	push	{r7, lr}
 800fba2:	b082      	sub	sp, #8
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	7a5b      	ldrb	r3, [r3, #9]
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d007      	beq.n	800fbc0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fbb0:	4b09      	ldr	r3, [pc, #36]	@ (800fbd8 <HAL_PCD_ResumeCallback+0x38>)
 800fbb2:	691a      	ldr	r2, [r3, #16]
 800fbb4:	4b08      	ldr	r3, [pc, #32]	@ (800fbd8 <HAL_PCD_ResumeCallback+0x38>)
 800fbb6:	2106      	movs	r1, #6
 800fbb8:	438a      	bics	r2, r1
 800fbba:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800fbbc:	f000 fa42 	bl	8010044 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fbc0:	687a      	ldr	r2, [r7, #4]
 800fbc2:	23b6      	movs	r3, #182	@ 0xb6
 800fbc4:	009b      	lsls	r3, r3, #2
 800fbc6:	58d3      	ldr	r3, [r2, r3]
 800fbc8:	0018      	movs	r0, r3
 800fbca:	f7fe fdfb 	bl	800e7c4 <USBD_LL_Resume>
}
 800fbce:	46c0      	nop			@ (mov r8, r8)
 800fbd0:	46bd      	mov	sp, r7
 800fbd2:	b002      	add	sp, #8
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	46c0      	nop			@ (mov r8, r8)
 800fbd8:	e000ed00 	.word	0xe000ed00

0800fbdc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b082      	sub	sp, #8
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800fbe4:	4a2d      	ldr	r2, [pc, #180]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fbe6:	23b6      	movs	r3, #182	@ 0xb6
 800fbe8:	009b      	lsls	r3, r3, #2
 800fbea:	6879      	ldr	r1, [r7, #4]
 800fbec:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800fbee:	687a      	ldr	r2, [r7, #4]
 800fbf0:	23b0      	movs	r3, #176	@ 0xb0
 800fbf2:	009b      	lsls	r3, r3, #2
 800fbf4:	4929      	ldr	r1, [pc, #164]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fbf6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800fbf8:	4b28      	ldr	r3, [pc, #160]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fbfa:	4a29      	ldr	r2, [pc, #164]	@ (800fca0 <USBD_LL_Init+0xc4>)
 800fbfc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800fbfe:	4b27      	ldr	r3, [pc, #156]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fc00:	2208      	movs	r2, #8
 800fc02:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800fc04:	4b25      	ldr	r3, [pc, #148]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fc06:	2202      	movs	r2, #2
 800fc08:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fc0a:	4b24      	ldr	r3, [pc, #144]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fc0c:	2202      	movs	r2, #2
 800fc0e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800fc10:	4b22      	ldr	r3, [pc, #136]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fc12:	2200      	movs	r2, #0
 800fc14:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = ENABLE;
 800fc16:	4b21      	ldr	r3, [pc, #132]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fc18:	2201      	movs	r2, #1
 800fc1a:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800fc1c:	4b1f      	ldr	r3, [pc, #124]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fc1e:	2200      	movs	r2, #0
 800fc20:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800fc22:	4b1e      	ldr	r3, [pc, #120]	@ (800fc9c <USBD_LL_Init+0xc0>)
 800fc24:	0018      	movs	r0, r3
 800fc26:	f7f8 fadd 	bl	80081e4 <HAL_PCD_Init>
 800fc2a:	1e03      	subs	r3, r0, #0
 800fc2c:	d001      	beq.n	800fc32 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800fc2e:	f7f5 fc31 	bl	8005494 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800fc32:	687a      	ldr	r2, [r7, #4]
 800fc34:	23b0      	movs	r3, #176	@ 0xb0
 800fc36:	009b      	lsls	r3, r3, #2
 800fc38:	58d0      	ldr	r0, [r2, r3]
 800fc3a:	2318      	movs	r3, #24
 800fc3c:	2200      	movs	r2, #0
 800fc3e:	2100      	movs	r1, #0
 800fc40:	f7fa f88e 	bl	8009d60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800fc44:	687a      	ldr	r2, [r7, #4]
 800fc46:	23b0      	movs	r3, #176	@ 0xb0
 800fc48:	009b      	lsls	r3, r3, #2
 800fc4a:	58d0      	ldr	r0, [r2, r3]
 800fc4c:	2358      	movs	r3, #88	@ 0x58
 800fc4e:	2200      	movs	r2, #0
 800fc50:	2180      	movs	r1, #128	@ 0x80
 800fc52:	f7fa f885 	bl	8009d60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	23b0      	movs	r3, #176	@ 0xb0
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	58d0      	ldr	r0, [r2, r3]
 800fc5e:	23c0      	movs	r3, #192	@ 0xc0
 800fc60:	2200      	movs	r2, #0
 800fc62:	2181      	movs	r1, #129	@ 0x81
 800fc64:	f7fa f87c 	bl	8009d60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800fc68:	687a      	ldr	r2, [r7, #4]
 800fc6a:	23b0      	movs	r3, #176	@ 0xb0
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	58d0      	ldr	r0, [r2, r3]
 800fc70:	2388      	movs	r3, #136	@ 0x88
 800fc72:	005b      	lsls	r3, r3, #1
 800fc74:	2200      	movs	r2, #0
 800fc76:	2101      	movs	r1, #1
 800fc78:	f7fa f872 	bl	8009d60 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800fc7c:	687a      	ldr	r2, [r7, #4]
 800fc7e:	23b0      	movs	r3, #176	@ 0xb0
 800fc80:	009b      	lsls	r3, r3, #2
 800fc82:	58d0      	ldr	r0, [r2, r3]
 800fc84:	2380      	movs	r3, #128	@ 0x80
 800fc86:	005b      	lsls	r3, r3, #1
 800fc88:	2200      	movs	r2, #0
 800fc8a:	2182      	movs	r1, #130	@ 0x82
 800fc8c:	f7fa f868 	bl	8009d60 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800fc90:	2300      	movs	r3, #0
}
 800fc92:	0018      	movs	r0, r3
 800fc94:	46bd      	mov	sp, r7
 800fc96:	b002      	add	sp, #8
 800fc98:	bd80      	pop	{r7, pc}
 800fc9a:	46c0      	nop			@ (mov r8, r8)
 800fc9c:	20001750 	.word	0x20001750
 800fca0:	40005c00 	.word	0x40005c00

0800fca4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800fca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fca6:	b085      	sub	sp, #20
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fcac:	210f      	movs	r1, #15
 800fcae:	187b      	adds	r3, r7, r1
 800fcb0:	2200      	movs	r2, #0
 800fcb2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fcb4:	260e      	movs	r6, #14
 800fcb6:	19bb      	adds	r3, r7, r6
 800fcb8:	2200      	movs	r2, #0
 800fcba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800fcbc:	687a      	ldr	r2, [r7, #4]
 800fcbe:	23b0      	movs	r3, #176	@ 0xb0
 800fcc0:	009b      	lsls	r3, r3, #2
 800fcc2:	58d3      	ldr	r3, [r2, r3]
 800fcc4:	000d      	movs	r5, r1
 800fcc6:	187c      	adds	r4, r7, r1
 800fcc8:	0018      	movs	r0, r3
 800fcca:	f7f8 fb7f 	bl	80083cc <HAL_PCD_Start>
 800fcce:	0003      	movs	r3, r0
 800fcd0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fcd2:	19bc      	adds	r4, r7, r6
 800fcd4:	197b      	adds	r3, r7, r5
 800fcd6:	781b      	ldrb	r3, [r3, #0]
 800fcd8:	0018      	movs	r0, r3
 800fcda:	f000 f9ba 	bl	8010052 <USBD_Get_USB_Status>
 800fcde:	0003      	movs	r3, r0
 800fce0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800fce2:	19bb      	adds	r3, r7, r6
 800fce4:	781b      	ldrb	r3, [r3, #0]
}
 800fce6:	0018      	movs	r0, r3
 800fce8:	46bd      	mov	sp, r7
 800fcea:	b005      	add	sp, #20
 800fcec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fcee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800fcee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fcf0:	b085      	sub	sp, #20
 800fcf2:	af00      	add	r7, sp, #0
 800fcf4:	6078      	str	r0, [r7, #4]
 800fcf6:	000c      	movs	r4, r1
 800fcf8:	0010      	movs	r0, r2
 800fcfa:	0019      	movs	r1, r3
 800fcfc:	1cfb      	adds	r3, r7, #3
 800fcfe:	1c22      	adds	r2, r4, #0
 800fd00:	701a      	strb	r2, [r3, #0]
 800fd02:	1cbb      	adds	r3, r7, #2
 800fd04:	1c02      	adds	r2, r0, #0
 800fd06:	701a      	strb	r2, [r3, #0]
 800fd08:	003b      	movs	r3, r7
 800fd0a:	1c0a      	adds	r2, r1, #0
 800fd0c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd0e:	260f      	movs	r6, #15
 800fd10:	19bb      	adds	r3, r7, r6
 800fd12:	2200      	movs	r2, #0
 800fd14:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd16:	250e      	movs	r5, #14
 800fd18:	197b      	adds	r3, r7, r5
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800fd1e:	687a      	ldr	r2, [r7, #4]
 800fd20:	23b0      	movs	r3, #176	@ 0xb0
 800fd22:	009b      	lsls	r3, r3, #2
 800fd24:	58d0      	ldr	r0, [r2, r3]
 800fd26:	19bc      	adds	r4, r7, r6
 800fd28:	1cbb      	adds	r3, r7, #2
 800fd2a:	781d      	ldrb	r5, [r3, #0]
 800fd2c:	003b      	movs	r3, r7
 800fd2e:	881a      	ldrh	r2, [r3, #0]
 800fd30:	1cfb      	adds	r3, r7, #3
 800fd32:	7819      	ldrb	r1, [r3, #0]
 800fd34:	002b      	movs	r3, r5
 800fd36:	f7f8 fcdd 	bl	80086f4 <HAL_PCD_EP_Open>
 800fd3a:	0003      	movs	r3, r0
 800fd3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd3e:	250e      	movs	r5, #14
 800fd40:	197c      	adds	r4, r7, r5
 800fd42:	19bb      	adds	r3, r7, r6
 800fd44:	781b      	ldrb	r3, [r3, #0]
 800fd46:	0018      	movs	r0, r3
 800fd48:	f000 f983 	bl	8010052 <USBD_Get_USB_Status>
 800fd4c:	0003      	movs	r3, r0
 800fd4e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800fd50:	197b      	adds	r3, r7, r5
 800fd52:	781b      	ldrb	r3, [r3, #0]
}
 800fd54:	0018      	movs	r0, r3
 800fd56:	46bd      	mov	sp, r7
 800fd58:	b005      	add	sp, #20
 800fd5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fd5c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fd5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fd5e:	b085      	sub	sp, #20
 800fd60:	af00      	add	r7, sp, #0
 800fd62:	6078      	str	r0, [r7, #4]
 800fd64:	000a      	movs	r2, r1
 800fd66:	1cfb      	adds	r3, r7, #3
 800fd68:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fd6a:	210f      	movs	r1, #15
 800fd6c:	187b      	adds	r3, r7, r1
 800fd6e:	2200      	movs	r2, #0
 800fd70:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fd72:	260e      	movs	r6, #14
 800fd74:	19bb      	adds	r3, r7, r6
 800fd76:	2200      	movs	r2, #0
 800fd78:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800fd7a:	687a      	ldr	r2, [r7, #4]
 800fd7c:	23b0      	movs	r3, #176	@ 0xb0
 800fd7e:	009b      	lsls	r3, r3, #2
 800fd80:	58d2      	ldr	r2, [r2, r3]
 800fd82:	000d      	movs	r5, r1
 800fd84:	187c      	adds	r4, r7, r1
 800fd86:	1cfb      	adds	r3, r7, #3
 800fd88:	781b      	ldrb	r3, [r3, #0]
 800fd8a:	0019      	movs	r1, r3
 800fd8c:	0010      	movs	r0, r2
 800fd8e:	f7f8 fd20 	bl	80087d2 <HAL_PCD_EP_Close>
 800fd92:	0003      	movs	r3, r0
 800fd94:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fd96:	19bc      	adds	r4, r7, r6
 800fd98:	197b      	adds	r3, r7, r5
 800fd9a:	781b      	ldrb	r3, [r3, #0]
 800fd9c:	0018      	movs	r0, r3
 800fd9e:	f000 f958 	bl	8010052 <USBD_Get_USB_Status>
 800fda2:	0003      	movs	r3, r0
 800fda4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800fda6:	19bb      	adds	r3, r7, r6
 800fda8:	781b      	ldrb	r3, [r3, #0]
}
 800fdaa:	0018      	movs	r0, r3
 800fdac:	46bd      	mov	sp, r7
 800fdae:	b005      	add	sp, #20
 800fdb0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fdb2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fdb2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fdb4:	b085      	sub	sp, #20
 800fdb6:	af00      	add	r7, sp, #0
 800fdb8:	6078      	str	r0, [r7, #4]
 800fdba:	000a      	movs	r2, r1
 800fdbc:	1cfb      	adds	r3, r7, #3
 800fdbe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fdc0:	210f      	movs	r1, #15
 800fdc2:	187b      	adds	r3, r7, r1
 800fdc4:	2200      	movs	r2, #0
 800fdc6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fdc8:	260e      	movs	r6, #14
 800fdca:	19bb      	adds	r3, r7, r6
 800fdcc:	2200      	movs	r2, #0
 800fdce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	23b0      	movs	r3, #176	@ 0xb0
 800fdd4:	009b      	lsls	r3, r3, #2
 800fdd6:	58d2      	ldr	r2, [r2, r3]
 800fdd8:	000d      	movs	r5, r1
 800fdda:	187c      	adds	r4, r7, r1
 800fddc:	1cfb      	adds	r3, r7, #3
 800fdde:	781b      	ldrb	r3, [r3, #0]
 800fde0:	0019      	movs	r1, r3
 800fde2:	0010      	movs	r0, r2
 800fde4:	f7f8 fdd2 	bl	800898c <HAL_PCD_EP_SetStall>
 800fde8:	0003      	movs	r3, r0
 800fdea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fdec:	19bc      	adds	r4, r7, r6
 800fdee:	197b      	adds	r3, r7, r5
 800fdf0:	781b      	ldrb	r3, [r3, #0]
 800fdf2:	0018      	movs	r0, r3
 800fdf4:	f000 f92d 	bl	8010052 <USBD_Get_USB_Status>
 800fdf8:	0003      	movs	r3, r0
 800fdfa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800fdfc:	19bb      	adds	r3, r7, r6
 800fdfe:	781b      	ldrb	r3, [r3, #0]
}
 800fe00:	0018      	movs	r0, r3
 800fe02:	46bd      	mov	sp, r7
 800fe04:	b005      	add	sp, #20
 800fe06:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe08 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe0a:	b085      	sub	sp, #20
 800fe0c:	af00      	add	r7, sp, #0
 800fe0e:	6078      	str	r0, [r7, #4]
 800fe10:	000a      	movs	r2, r1
 800fe12:	1cfb      	adds	r3, r7, #3
 800fe14:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fe16:	210f      	movs	r1, #15
 800fe18:	187b      	adds	r3, r7, r1
 800fe1a:	2200      	movs	r2, #0
 800fe1c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fe1e:	260e      	movs	r6, #14
 800fe20:	19bb      	adds	r3, r7, r6
 800fe22:	2200      	movs	r2, #0
 800fe24:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	23b0      	movs	r3, #176	@ 0xb0
 800fe2a:	009b      	lsls	r3, r3, #2
 800fe2c:	58d2      	ldr	r2, [r2, r3]
 800fe2e:	000d      	movs	r5, r1
 800fe30:	187c      	adds	r4, r7, r1
 800fe32:	1cfb      	adds	r3, r7, #3
 800fe34:	781b      	ldrb	r3, [r3, #0]
 800fe36:	0019      	movs	r1, r3
 800fe38:	0010      	movs	r0, r2
 800fe3a:	f7f8 fe03 	bl	8008a44 <HAL_PCD_EP_ClrStall>
 800fe3e:	0003      	movs	r3, r0
 800fe40:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fe42:	19bc      	adds	r4, r7, r6
 800fe44:	197b      	adds	r3, r7, r5
 800fe46:	781b      	ldrb	r3, [r3, #0]
 800fe48:	0018      	movs	r0, r3
 800fe4a:	f000 f902 	bl	8010052 <USBD_Get_USB_Status>
 800fe4e:	0003      	movs	r3, r0
 800fe50:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800fe52:	19bb      	adds	r3, r7, r6
 800fe54:	781b      	ldrb	r3, [r3, #0]
}
 800fe56:	0018      	movs	r0, r3
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	b005      	add	sp, #20
 800fe5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fe5e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fe5e:	b580      	push	{r7, lr}
 800fe60:	b084      	sub	sp, #16
 800fe62:	af00      	add	r7, sp, #0
 800fe64:	6078      	str	r0, [r7, #4]
 800fe66:	000a      	movs	r2, r1
 800fe68:	1cfb      	adds	r3, r7, #3
 800fe6a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fe6c:	687a      	ldr	r2, [r7, #4]
 800fe6e:	23b0      	movs	r3, #176	@ 0xb0
 800fe70:	009b      	lsls	r3, r3, #2
 800fe72:	58d3      	ldr	r3, [r2, r3]
 800fe74:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fe76:	1cfb      	adds	r3, r7, #3
 800fe78:	781b      	ldrb	r3, [r3, #0]
 800fe7a:	b25b      	sxtb	r3, r3
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	da0c      	bge.n	800fe9a <USBD_LL_IsStallEP+0x3c>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fe80:	1cfb      	adds	r3, r7, #3
 800fe82:	781b      	ldrb	r3, [r3, #0]
 800fe84:	227f      	movs	r2, #127	@ 0x7f
 800fe86:	401a      	ands	r2, r3
 800fe88:	68f9      	ldr	r1, [r7, #12]
 800fe8a:	0013      	movs	r3, r2
 800fe8c:	009b      	lsls	r3, r3, #2
 800fe8e:	189b      	adds	r3, r3, r2
 800fe90:	00db      	lsls	r3, r3, #3
 800fe92:	18cb      	adds	r3, r1, r3
 800fe94:	3312      	adds	r3, #18
 800fe96:	781b      	ldrb	r3, [r3, #0]
 800fe98:	e00d      	b.n	800feb6 <USBD_LL_IsStallEP+0x58>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fe9a:	1cfb      	adds	r3, r7, #3
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	227f      	movs	r2, #127	@ 0x7f
 800fea0:	401a      	ands	r2, r3
 800fea2:	68f8      	ldr	r0, [r7, #12]
 800fea4:	23a9      	movs	r3, #169	@ 0xa9
 800fea6:	0059      	lsls	r1, r3, #1
 800fea8:	0013      	movs	r3, r2
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	189b      	adds	r3, r3, r2
 800feae:	00db      	lsls	r3, r3, #3
 800feb0:	18c3      	adds	r3, r0, r3
 800feb2:	185b      	adds	r3, r3, r1
 800feb4:	781b      	ldrb	r3, [r3, #0]
  }
}
 800feb6:	0018      	movs	r0, r3
 800feb8:	46bd      	mov	sp, r7
 800feba:	b004      	add	sp, #16
 800febc:	bd80      	pop	{r7, pc}

0800febe <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800febe:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fec0:	b085      	sub	sp, #20
 800fec2:	af00      	add	r7, sp, #0
 800fec4:	6078      	str	r0, [r7, #4]
 800fec6:	000a      	movs	r2, r1
 800fec8:	1cfb      	adds	r3, r7, #3
 800feca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fecc:	210f      	movs	r1, #15
 800fece:	187b      	adds	r3, r7, r1
 800fed0:	2200      	movs	r2, #0
 800fed2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fed4:	260e      	movs	r6, #14
 800fed6:	19bb      	adds	r3, r7, r6
 800fed8:	2200      	movs	r2, #0
 800feda:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fedc:	687a      	ldr	r2, [r7, #4]
 800fede:	23b0      	movs	r3, #176	@ 0xb0
 800fee0:	009b      	lsls	r3, r3, #2
 800fee2:	58d2      	ldr	r2, [r2, r3]
 800fee4:	000d      	movs	r5, r1
 800fee6:	187c      	adds	r4, r7, r1
 800fee8:	1cfb      	adds	r3, r7, #3
 800feea:	781b      	ldrb	r3, [r3, #0]
 800feec:	0019      	movs	r1, r3
 800feee:	0010      	movs	r0, r2
 800fef0:	f7f8 fbd6 	bl	80086a0 <HAL_PCD_SetAddress>
 800fef4:	0003      	movs	r3, r0
 800fef6:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fef8:	19bc      	adds	r4, r7, r6
 800fefa:	197b      	adds	r3, r7, r5
 800fefc:	781b      	ldrb	r3, [r3, #0]
 800fefe:	0018      	movs	r0, r3
 800ff00:	f000 f8a7 	bl	8010052 <USBD_Get_USB_Status>
 800ff04:	0003      	movs	r3, r0
 800ff06:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ff08:	19bb      	adds	r3, r7, r6
 800ff0a:	781b      	ldrb	r3, [r3, #0]
}
 800ff0c:	0018      	movs	r0, r3
 800ff0e:	46bd      	mov	sp, r7
 800ff10:	b005      	add	sp, #20
 800ff12:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff14 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ff14:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff16:	b087      	sub	sp, #28
 800ff18:	af00      	add	r7, sp, #0
 800ff1a:	60f8      	str	r0, [r7, #12]
 800ff1c:	0008      	movs	r0, r1
 800ff1e:	607a      	str	r2, [r7, #4]
 800ff20:	0019      	movs	r1, r3
 800ff22:	230b      	movs	r3, #11
 800ff24:	18fb      	adds	r3, r7, r3
 800ff26:	1c02      	adds	r2, r0, #0
 800ff28:	701a      	strb	r2, [r3, #0]
 800ff2a:	2408      	movs	r4, #8
 800ff2c:	193b      	adds	r3, r7, r4
 800ff2e:	1c0a      	adds	r2, r1, #0
 800ff30:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff32:	2117      	movs	r1, #23
 800ff34:	187b      	adds	r3, r7, r1
 800ff36:	2200      	movs	r2, #0
 800ff38:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff3a:	2516      	movs	r5, #22
 800ff3c:	197b      	adds	r3, r7, r5
 800ff3e:	2200      	movs	r2, #0
 800ff40:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	23b0      	movs	r3, #176	@ 0xb0
 800ff46:	009b      	lsls	r3, r3, #2
 800ff48:	58d0      	ldr	r0, [r2, r3]
 800ff4a:	193b      	adds	r3, r7, r4
 800ff4c:	881d      	ldrh	r5, [r3, #0]
 800ff4e:	000e      	movs	r6, r1
 800ff50:	187c      	adds	r4, r7, r1
 800ff52:	687a      	ldr	r2, [r7, #4]
 800ff54:	230b      	movs	r3, #11
 800ff56:	18fb      	adds	r3, r7, r3
 800ff58:	7819      	ldrb	r1, [r3, #0]
 800ff5a:	002b      	movs	r3, r5
 800ff5c:	f7f8 fcda 	bl	8008914 <HAL_PCD_EP_Transmit>
 800ff60:	0003      	movs	r3, r0
 800ff62:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff64:	2516      	movs	r5, #22
 800ff66:	197c      	adds	r4, r7, r5
 800ff68:	19bb      	adds	r3, r7, r6
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	0018      	movs	r0, r3
 800ff6e:	f000 f870 	bl	8010052 <USBD_Get_USB_Status>
 800ff72:	0003      	movs	r3, r0
 800ff74:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ff76:	197b      	adds	r3, r7, r5
 800ff78:	781b      	ldrb	r3, [r3, #0]
}
 800ff7a:	0018      	movs	r0, r3
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	b007      	add	sp, #28
 800ff80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ff82 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800ff82:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff84:	b087      	sub	sp, #28
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	60f8      	str	r0, [r7, #12]
 800ff8a:	0008      	movs	r0, r1
 800ff8c:	607a      	str	r2, [r7, #4]
 800ff8e:	0019      	movs	r1, r3
 800ff90:	230b      	movs	r3, #11
 800ff92:	18fb      	adds	r3, r7, r3
 800ff94:	1c02      	adds	r2, r0, #0
 800ff96:	701a      	strb	r2, [r3, #0]
 800ff98:	2408      	movs	r4, #8
 800ff9a:	193b      	adds	r3, r7, r4
 800ff9c:	1c0a      	adds	r2, r1, #0
 800ff9e:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffa0:	2117      	movs	r1, #23
 800ffa2:	187b      	adds	r3, r7, r1
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffa8:	2516      	movs	r5, #22
 800ffaa:	197b      	adds	r3, r7, r5
 800ffac:	2200      	movs	r2, #0
 800ffae:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ffb0:	68fa      	ldr	r2, [r7, #12]
 800ffb2:	23b0      	movs	r3, #176	@ 0xb0
 800ffb4:	009b      	lsls	r3, r3, #2
 800ffb6:	58d0      	ldr	r0, [r2, r3]
 800ffb8:	193b      	adds	r3, r7, r4
 800ffba:	881d      	ldrh	r5, [r3, #0]
 800ffbc:	000e      	movs	r6, r1
 800ffbe:	187c      	adds	r4, r7, r1
 800ffc0:	687a      	ldr	r2, [r7, #4]
 800ffc2:	230b      	movs	r3, #11
 800ffc4:	18fb      	adds	r3, r7, r3
 800ffc6:	7819      	ldrb	r1, [r3, #0]
 800ffc8:	002b      	movs	r3, r5
 800ffca:	f7f8 fc53 	bl	8008874 <HAL_PCD_EP_Receive>
 800ffce:	0003      	movs	r3, r0
 800ffd0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffd2:	2516      	movs	r5, #22
 800ffd4:	197c      	adds	r4, r7, r5
 800ffd6:	19bb      	adds	r3, r7, r6
 800ffd8:	781b      	ldrb	r3, [r3, #0]
 800ffda:	0018      	movs	r0, r3
 800ffdc:	f000 f839 	bl	8010052 <USBD_Get_USB_Status>
 800ffe0:	0003      	movs	r3, r0
 800ffe2:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800ffe4:	197b      	adds	r3, r7, r5
 800ffe6:	781b      	ldrb	r3, [r3, #0]
}
 800ffe8:	0018      	movs	r0, r3
 800ffea:	46bd      	mov	sp, r7
 800ffec:	b007      	add	sp, #28
 800ffee:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fff0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fff0:	b580      	push	{r7, lr}
 800fff2:	b082      	sub	sp, #8
 800fff4:	af00      	add	r7, sp, #0
 800fff6:	6078      	str	r0, [r7, #4]
 800fff8:	000a      	movs	r2, r1
 800fffa:	1cfb      	adds	r3, r7, #3
 800fffc:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	23b0      	movs	r3, #176	@ 0xb0
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	58d2      	ldr	r2, [r2, r3]
 8010006:	1cfb      	adds	r3, r7, #3
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	0019      	movs	r1, r3
 801000c:	0010      	movs	r0, r2
 801000e:	f7f8 fc68 	bl	80088e2 <HAL_PCD_EP_GetRxCount>
 8010012:	0003      	movs	r3, r0
}
 8010014:	0018      	movs	r0, r3
 8010016:	46bd      	mov	sp, r7
 8010018:	b002      	add	sp, #8
 801001a:	bd80      	pop	{r7, pc}

0801001c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 801001c:	b580      	push	{r7, lr}
 801001e:	b082      	sub	sp, #8
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8010024:	4b02      	ldr	r3, [pc, #8]	@ (8010030 <USBD_static_malloc+0x14>)
}
 8010026:	0018      	movs	r0, r3
 8010028:	46bd      	mov	sp, r7
 801002a:	b002      	add	sp, #8
 801002c:	bd80      	pop	{r7, pc}
 801002e:	46c0      	nop			@ (mov r8, r8)
 8010030:	20001a2c 	.word	0x20001a2c

08010034 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8010034:	b580      	push	{r7, lr}
 8010036:	b082      	sub	sp, #8
 8010038:	af00      	add	r7, sp, #0
 801003a:	6078      	str	r0, [r7, #4]

}
 801003c:	46c0      	nop			@ (mov r8, r8)
 801003e:	46bd      	mov	sp, r7
 8010040:	b002      	add	sp, #8
 8010042:	bd80      	pop	{r7, pc}

08010044 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8010044:	b580      	push	{r7, lr}
 8010046:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8010048:	f7f4 fe08 	bl	8004c5c <SystemClock_Config>
}
 801004c:	46c0      	nop			@ (mov r8, r8)
 801004e:	46bd      	mov	sp, r7
 8010050:	bd80      	pop	{r7, pc}

08010052 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010052:	b580      	push	{r7, lr}
 8010054:	b084      	sub	sp, #16
 8010056:	af00      	add	r7, sp, #0
 8010058:	0002      	movs	r2, r0
 801005a:	1dfb      	adds	r3, r7, #7
 801005c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801005e:	230f      	movs	r3, #15
 8010060:	18fb      	adds	r3, r7, r3
 8010062:	2200      	movs	r2, #0
 8010064:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8010066:	1dfb      	adds	r3, r7, #7
 8010068:	781b      	ldrb	r3, [r3, #0]
 801006a:	2b03      	cmp	r3, #3
 801006c:	d017      	beq.n	801009e <USBD_Get_USB_Status+0x4c>
 801006e:	dc1b      	bgt.n	80100a8 <USBD_Get_USB_Status+0x56>
 8010070:	2b02      	cmp	r3, #2
 8010072:	d00f      	beq.n	8010094 <USBD_Get_USB_Status+0x42>
 8010074:	dc18      	bgt.n	80100a8 <USBD_Get_USB_Status+0x56>
 8010076:	2b00      	cmp	r3, #0
 8010078:	d002      	beq.n	8010080 <USBD_Get_USB_Status+0x2e>
 801007a:	2b01      	cmp	r3, #1
 801007c:	d005      	beq.n	801008a <USBD_Get_USB_Status+0x38>
 801007e:	e013      	b.n	80100a8 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010080:	230f      	movs	r3, #15
 8010082:	18fb      	adds	r3, r7, r3
 8010084:	2200      	movs	r2, #0
 8010086:	701a      	strb	r2, [r3, #0]
    break;
 8010088:	e013      	b.n	80100b2 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801008a:	230f      	movs	r3, #15
 801008c:	18fb      	adds	r3, r7, r3
 801008e:	2202      	movs	r2, #2
 8010090:	701a      	strb	r2, [r3, #0]
    break;
 8010092:	e00e      	b.n	80100b2 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010094:	230f      	movs	r3, #15
 8010096:	18fb      	adds	r3, r7, r3
 8010098:	2201      	movs	r2, #1
 801009a:	701a      	strb	r2, [r3, #0]
    break;
 801009c:	e009      	b.n	80100b2 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801009e:	230f      	movs	r3, #15
 80100a0:	18fb      	adds	r3, r7, r3
 80100a2:	2202      	movs	r2, #2
 80100a4:	701a      	strb	r2, [r3, #0]
    break;
 80100a6:	e004      	b.n	80100b2 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 80100a8:	230f      	movs	r3, #15
 80100aa:	18fb      	adds	r3, r7, r3
 80100ac:	2202      	movs	r2, #2
 80100ae:	701a      	strb	r2, [r3, #0]
    break;
 80100b0:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 80100b2:	230f      	movs	r3, #15
 80100b4:	18fb      	adds	r3, r7, r3
 80100b6:	781b      	ldrb	r3, [r3, #0]
}
 80100b8:	0018      	movs	r0, r3
 80100ba:	46bd      	mov	sp, r7
 80100bc:	b004      	add	sp, #16
 80100be:	bd80      	pop	{r7, pc}

080100c0 <_ZdlPvj>:
 80100c0:	b510      	push	{r4, lr}
 80100c2:	f000 f801 	bl	80100c8 <_ZdlPv>
 80100c6:	bd10      	pop	{r4, pc}

080100c8 <_ZdlPv>:
 80100c8:	b510      	push	{r4, lr}
 80100ca:	f000 fcaf 	bl	8010a2c <free>
 80100ce:	bd10      	pop	{r4, pc}

080100d0 <powf>:
 80100d0:	b570      	push	{r4, r5, r6, lr}
 80100d2:	1c0c      	adds	r4, r1, #0
 80100d4:	1c06      	adds	r6, r0, #0
 80100d6:	f000 f859 	bl	801018c <__ieee754_powf>
 80100da:	1c21      	adds	r1, r4, #0
 80100dc:	1c05      	adds	r5, r0, #0
 80100de:	1c20      	adds	r0, r4, #0
 80100e0:	f7f0 ff60 	bl	8000fa4 <__aeabi_fcmpun>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	d133      	bne.n	8010150 <powf+0x80>
 80100e8:	2100      	movs	r1, #0
 80100ea:	1c30      	adds	r0, r6, #0
 80100ec:	f7f0 f8a4 	bl	8000238 <__aeabi_fcmpeq>
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d014      	beq.n	801011e <powf+0x4e>
 80100f4:	2100      	movs	r1, #0
 80100f6:	1c20      	adds	r0, r4, #0
 80100f8:	f7f0 f89e 	bl	8000238 <__aeabi_fcmpeq>
 80100fc:	2800      	cmp	r0, #0
 80100fe:	d138      	bne.n	8010172 <powf+0xa2>
 8010100:	1c20      	adds	r0, r4, #0
 8010102:	f000 f839 	bl	8010178 <finitef>
 8010106:	2800      	cmp	r0, #0
 8010108:	d022      	beq.n	8010150 <powf+0x80>
 801010a:	2100      	movs	r1, #0
 801010c:	1c20      	adds	r0, r4, #0
 801010e:	f7f0 f899 	bl	8000244 <__aeabi_fcmplt>
 8010112:	2800      	cmp	r0, #0
 8010114:	d01c      	beq.n	8010150 <powf+0x80>
 8010116:	f000 fcab 	bl	8010a70 <__errno>
 801011a:	2322      	movs	r3, #34	@ 0x22
 801011c:	e017      	b.n	801014e <powf+0x7e>
 801011e:	1c28      	adds	r0, r5, #0
 8010120:	f000 f82a 	bl	8010178 <finitef>
 8010124:	2800      	cmp	r0, #0
 8010126:	d115      	bne.n	8010154 <powf+0x84>
 8010128:	1c30      	adds	r0, r6, #0
 801012a:	f000 f825 	bl	8010178 <finitef>
 801012e:	2800      	cmp	r0, #0
 8010130:	d010      	beq.n	8010154 <powf+0x84>
 8010132:	1c20      	adds	r0, r4, #0
 8010134:	f000 f820 	bl	8010178 <finitef>
 8010138:	2800      	cmp	r0, #0
 801013a:	d00b      	beq.n	8010154 <powf+0x84>
 801013c:	1c29      	adds	r1, r5, #0
 801013e:	1c28      	adds	r0, r5, #0
 8010140:	f7f0 ff30 	bl	8000fa4 <__aeabi_fcmpun>
 8010144:	2800      	cmp	r0, #0
 8010146:	d0e6      	beq.n	8010116 <powf+0x46>
 8010148:	f000 fc92 	bl	8010a70 <__errno>
 801014c:	2321      	movs	r3, #33	@ 0x21
 801014e:	6003      	str	r3, [r0, #0]
 8010150:	1c28      	adds	r0, r5, #0
 8010152:	bd70      	pop	{r4, r5, r6, pc}
 8010154:	2100      	movs	r1, #0
 8010156:	1c28      	adds	r0, r5, #0
 8010158:	f7f0 f86e 	bl	8000238 <__aeabi_fcmpeq>
 801015c:	2800      	cmp	r0, #0
 801015e:	d0f7      	beq.n	8010150 <powf+0x80>
 8010160:	1c30      	adds	r0, r6, #0
 8010162:	f000 f809 	bl	8010178 <finitef>
 8010166:	2800      	cmp	r0, #0
 8010168:	d0f2      	beq.n	8010150 <powf+0x80>
 801016a:	1c20      	adds	r0, r4, #0
 801016c:	f000 f804 	bl	8010178 <finitef>
 8010170:	e7cf      	b.n	8010112 <powf+0x42>
 8010172:	25fe      	movs	r5, #254	@ 0xfe
 8010174:	05ad      	lsls	r5, r5, #22
 8010176:	e7eb      	b.n	8010150 <powf+0x80>

08010178 <finitef>:
 8010178:	22ff      	movs	r2, #255	@ 0xff
 801017a:	0043      	lsls	r3, r0, #1
 801017c:	085b      	lsrs	r3, r3, #1
 801017e:	2001      	movs	r0, #1
 8010180:	05d2      	lsls	r2, r2, #23
 8010182:	4293      	cmp	r3, r2
 8010184:	db00      	blt.n	8010188 <finitef+0x10>
 8010186:	2000      	movs	r0, #0
 8010188:	4770      	bx	lr
	...

0801018c <__ieee754_powf>:
 801018c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801018e:	b08b      	sub	sp, #44	@ 0x2c
 8010190:	9101      	str	r1, [sp, #4]
 8010192:	9f01      	ldr	r7, [sp, #4]
 8010194:	1c04      	adds	r4, r0, #0
 8010196:	007b      	lsls	r3, r7, #1
 8010198:	9004      	str	r0, [sp, #16]
 801019a:	085e      	lsrs	r6, r3, #1
 801019c:	2b00      	cmp	r3, #0
 801019e:	d10d      	bne.n	80101bc <__ieee754_powf+0x30>
 80101a0:	2380      	movs	r3, #128	@ 0x80
 80101a2:	03db      	lsls	r3, r3, #15
 80101a4:	4043      	eors	r3, r0
 80101a6:	4a96      	ldr	r2, [pc, #600]	@ (8010400 <__ieee754_powf+0x274>)
 80101a8:	005b      	lsls	r3, r3, #1
 80101aa:	4293      	cmp	r3, r2
 80101ac:	d800      	bhi.n	80101b0 <__ieee754_powf+0x24>
 80101ae:	e310      	b.n	80107d2 <__ieee754_powf+0x646>
 80101b0:	9901      	ldr	r1, [sp, #4]
 80101b2:	1c20      	adds	r0, r4, #0
 80101b4:	f7f0 f8a4 	bl	8000300 <__aeabi_fadd>
 80101b8:	b00b      	add	sp, #44	@ 0x2c
 80101ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80101bc:	23ff      	movs	r3, #255	@ 0xff
 80101be:	22fe      	movs	r2, #254	@ 0xfe
 80101c0:	0045      	lsls	r5, r0, #1
 80101c2:	086d      	lsrs	r5, r5, #1
 80101c4:	05db      	lsls	r3, r3, #23
 80101c6:	0592      	lsls	r2, r2, #22
 80101c8:	429d      	cmp	r5, r3
 80101ca:	d801      	bhi.n	80101d0 <__ieee754_powf+0x44>
 80101cc:	429e      	cmp	r6, r3
 80101ce:	d906      	bls.n	80101de <__ieee754_powf+0x52>
 80101d0:	4294      	cmp	r4, r2
 80101d2:	d1ed      	bne.n	80101b0 <__ieee754_powf+0x24>
 80101d4:	2380      	movs	r3, #128	@ 0x80
 80101d6:	9a01      	ldr	r2, [sp, #4]
 80101d8:	03db      	lsls	r3, r3, #15
 80101da:	4053      	eors	r3, r2
 80101dc:	e7e3      	b.n	80101a6 <__ieee754_powf+0x1a>
 80101de:	2100      	movs	r1, #0
 80101e0:	9102      	str	r1, [sp, #8]
 80101e2:	2800      	cmp	r0, #0
 80101e4:	da22      	bge.n	801022c <__ieee754_powf+0xa0>
 80101e6:	2197      	movs	r1, #151	@ 0x97
 80101e8:	05c9      	lsls	r1, r1, #23
 80101ea:	428e      	cmp	r6, r1
 80101ec:	d21c      	bcs.n	8010228 <__ieee754_powf+0x9c>
 80101ee:	4296      	cmp	r6, r2
 80101f0:	d332      	bcc.n	8010258 <__ieee754_powf+0xcc>
 80101f2:	2296      	movs	r2, #150	@ 0x96
 80101f4:	15f3      	asrs	r3, r6, #23
 80101f6:	1ad2      	subs	r2, r2, r3
 80101f8:	0033      	movs	r3, r6
 80101fa:	4113      	asrs	r3, r2
 80101fc:	0019      	movs	r1, r3
 80101fe:	4091      	lsls	r1, r2
 8010200:	42b1      	cmp	r1, r6
 8010202:	d104      	bne.n	801020e <__ieee754_powf+0x82>
 8010204:	2201      	movs	r2, #1
 8010206:	4013      	ands	r3, r2
 8010208:	1892      	adds	r2, r2, r2
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	9302      	str	r3, [sp, #8]
 801020e:	23fe      	movs	r3, #254	@ 0xfe
 8010210:	059b      	lsls	r3, r3, #22
 8010212:	429e      	cmp	r6, r3
 8010214:	d120      	bne.n	8010258 <__ieee754_powf+0xcc>
 8010216:	1c20      	adds	r0, r4, #0
 8010218:	2f00      	cmp	r7, #0
 801021a:	dacd      	bge.n	80101b8 <__ieee754_powf+0x2c>
 801021c:	20fe      	movs	r0, #254	@ 0xfe
 801021e:	1c21      	adds	r1, r4, #0
 8010220:	0580      	lsls	r0, r0, #22
 8010222:	f7f0 f9f7 	bl	8000614 <__aeabi_fdiv>
 8010226:	e7c7      	b.n	80101b8 <__ieee754_powf+0x2c>
 8010228:	2202      	movs	r2, #2
 801022a:	9202      	str	r2, [sp, #8]
 801022c:	429e      	cmp	r6, r3
 801022e:	d1ee      	bne.n	801020e <__ieee754_powf+0x82>
 8010230:	23fe      	movs	r3, #254	@ 0xfe
 8010232:	059b      	lsls	r3, r3, #22
 8010234:	429d      	cmp	r5, r3
 8010236:	d100      	bne.n	801023a <__ieee754_powf+0xae>
 8010238:	e2cb      	b.n	80107d2 <__ieee754_powf+0x646>
 801023a:	d904      	bls.n	8010246 <__ieee754_powf+0xba>
 801023c:	9801      	ldr	r0, [sp, #4]
 801023e:	2f00      	cmp	r7, #0
 8010240:	daba      	bge.n	80101b8 <__ieee754_powf+0x2c>
 8010242:	2000      	movs	r0, #0
 8010244:	e7b8      	b.n	80101b8 <__ieee754_powf+0x2c>
 8010246:	2f00      	cmp	r7, #0
 8010248:	dafb      	bge.n	8010242 <__ieee754_powf+0xb6>
 801024a:	2280      	movs	r2, #128	@ 0x80
 801024c:	0612      	lsls	r2, r2, #24
 801024e:	4694      	mov	ip, r2
 8010250:	9b01      	ldr	r3, [sp, #4]
 8010252:	4463      	add	r3, ip
 8010254:	0018      	movs	r0, r3
 8010256:	e7af      	b.n	80101b8 <__ieee754_powf+0x2c>
 8010258:	2380      	movs	r3, #128	@ 0x80
 801025a:	05db      	lsls	r3, r3, #23
 801025c:	429f      	cmp	r7, r3
 801025e:	d104      	bne.n	801026a <__ieee754_powf+0xde>
 8010260:	1c21      	adds	r1, r4, #0
 8010262:	1c20      	adds	r0, r4, #0
 8010264:	f7f0 fbbc 	bl	80009e0 <__aeabi_fmul>
 8010268:	e7a6      	b.n	80101b8 <__ieee754_powf+0x2c>
 801026a:	23fc      	movs	r3, #252	@ 0xfc
 801026c:	059b      	lsls	r3, r3, #22
 801026e:	429f      	cmp	r7, r3
 8010270:	d105      	bne.n	801027e <__ieee754_powf+0xf2>
 8010272:	2c00      	cmp	r4, #0
 8010274:	db03      	blt.n	801027e <__ieee754_powf+0xf2>
 8010276:	1c20      	adds	r0, r4, #0
 8010278:	f000 fb60 	bl	801093c <__ieee754_sqrtf>
 801027c:	e79c      	b.n	80101b8 <__ieee754_powf+0x2c>
 801027e:	1c20      	adds	r0, r4, #0
 8010280:	9503      	str	r5, [sp, #12]
 8010282:	f000 fadf 	bl	8010844 <fabsf>
 8010286:	22fe      	movs	r2, #254	@ 0xfe
 8010288:	00a3      	lsls	r3, r4, #2
 801028a:	089b      	lsrs	r3, r3, #2
 801028c:	0592      	lsls	r2, r2, #22
 801028e:	4293      	cmp	r3, r2
 8010290:	d001      	beq.n	8010296 <__ieee754_powf+0x10a>
 8010292:	2d00      	cmp	r5, #0
 8010294:	d11c      	bne.n	80102d0 <__ieee754_powf+0x144>
 8010296:	2f00      	cmp	r7, #0
 8010298:	da04      	bge.n	80102a4 <__ieee754_powf+0x118>
 801029a:	1c01      	adds	r1, r0, #0
 801029c:	20fe      	movs	r0, #254	@ 0xfe
 801029e:	0580      	lsls	r0, r0, #22
 80102a0:	f7f0 f9b8 	bl	8000614 <__aeabi_fdiv>
 80102a4:	9b04      	ldr	r3, [sp, #16]
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	db00      	blt.n	80102ac <__ieee754_powf+0x120>
 80102aa:	e785      	b.n	80101b8 <__ieee754_powf+0x2c>
 80102ac:	4b55      	ldr	r3, [pc, #340]	@ (8010404 <__ieee754_powf+0x278>)
 80102ae:	18ed      	adds	r5, r5, r3
 80102b0:	9b02      	ldr	r3, [sp, #8]
 80102b2:	431d      	orrs	r5, r3
 80102b4:	d104      	bne.n	80102c0 <__ieee754_powf+0x134>
 80102b6:	1c01      	adds	r1, r0, #0
 80102b8:	f7f0 fcd0 	bl	8000c5c <__aeabi_fsub>
 80102bc:	1c01      	adds	r1, r0, #0
 80102be:	e7b0      	b.n	8010222 <__ieee754_powf+0x96>
 80102c0:	9b02      	ldr	r3, [sp, #8]
 80102c2:	2b01      	cmp	r3, #1
 80102c4:	d000      	beq.n	80102c8 <__ieee754_powf+0x13c>
 80102c6:	e777      	b.n	80101b8 <__ieee754_powf+0x2c>
 80102c8:	2380      	movs	r3, #128	@ 0x80
 80102ca:	061b      	lsls	r3, r3, #24
 80102cc:	18c0      	adds	r0, r0, r3
 80102ce:	e773      	b.n	80101b8 <__ieee754_powf+0x2c>
 80102d0:	0fe3      	lsrs	r3, r4, #31
 80102d2:	3b01      	subs	r3, #1
 80102d4:	9305      	str	r3, [sp, #20]
 80102d6:	9a05      	ldr	r2, [sp, #20]
 80102d8:	9b02      	ldr	r3, [sp, #8]
 80102da:	4313      	orrs	r3, r2
 80102dc:	d102      	bne.n	80102e4 <__ieee754_powf+0x158>
 80102de:	1c21      	adds	r1, r4, #0
 80102e0:	1c20      	adds	r0, r4, #0
 80102e2:	e7e9      	b.n	80102b8 <__ieee754_powf+0x12c>
 80102e4:	239a      	movs	r3, #154	@ 0x9a
 80102e6:	05db      	lsls	r3, r3, #23
 80102e8:	429e      	cmp	r6, r3
 80102ea:	d800      	bhi.n	80102ee <__ieee754_powf+0x162>
 80102ec:	e098      	b.n	8010420 <__ieee754_powf+0x294>
 80102ee:	4b46      	ldr	r3, [pc, #280]	@ (8010408 <__ieee754_powf+0x27c>)
 80102f0:	429d      	cmp	r5, r3
 80102f2:	d805      	bhi.n	8010300 <__ieee754_powf+0x174>
 80102f4:	2f00      	cmp	r7, #0
 80102f6:	da08      	bge.n	801030a <__ieee754_powf+0x17e>
 80102f8:	2000      	movs	r0, #0
 80102fa:	f000 fb19 	bl	8010930 <__math_oflowf>
 80102fe:	e75b      	b.n	80101b8 <__ieee754_powf+0x2c>
 8010300:	4b42      	ldr	r3, [pc, #264]	@ (801040c <__ieee754_powf+0x280>)
 8010302:	429d      	cmp	r5, r3
 8010304:	d905      	bls.n	8010312 <__ieee754_powf+0x186>
 8010306:	2f00      	cmp	r7, #0
 8010308:	dcf6      	bgt.n	80102f8 <__ieee754_powf+0x16c>
 801030a:	2000      	movs	r0, #0
 801030c:	f000 fb0a 	bl	8010924 <__math_uflowf>
 8010310:	e752      	b.n	80101b8 <__ieee754_powf+0x2c>
 8010312:	21fe      	movs	r1, #254	@ 0xfe
 8010314:	0589      	lsls	r1, r1, #22
 8010316:	f7f0 fca1 	bl	8000c5c <__aeabi_fsub>
 801031a:	493d      	ldr	r1, [pc, #244]	@ (8010410 <__ieee754_powf+0x284>)
 801031c:	1c04      	adds	r4, r0, #0
 801031e:	f7f0 fb5f 	bl	80009e0 <__aeabi_fmul>
 8010322:	493c      	ldr	r1, [pc, #240]	@ (8010414 <__ieee754_powf+0x288>)
 8010324:	1c05      	adds	r5, r0, #0
 8010326:	1c20      	adds	r0, r4, #0
 8010328:	f7f0 fb5a 	bl	80009e0 <__aeabi_fmul>
 801032c:	21fa      	movs	r1, #250	@ 0xfa
 801032e:	1c06      	adds	r6, r0, #0
 8010330:	0589      	lsls	r1, r1, #22
 8010332:	1c20      	adds	r0, r4, #0
 8010334:	f7f0 fb54 	bl	80009e0 <__aeabi_fmul>
 8010338:	1c01      	adds	r1, r0, #0
 801033a:	4837      	ldr	r0, [pc, #220]	@ (8010418 <__ieee754_powf+0x28c>)
 801033c:	f7f0 fc8e 	bl	8000c5c <__aeabi_fsub>
 8010340:	1c21      	adds	r1, r4, #0
 8010342:	f7f0 fb4d 	bl	80009e0 <__aeabi_fmul>
 8010346:	1c01      	adds	r1, r0, #0
 8010348:	20fc      	movs	r0, #252	@ 0xfc
 801034a:	0580      	lsls	r0, r0, #22
 801034c:	f7f0 fc86 	bl	8000c5c <__aeabi_fsub>
 8010350:	1c21      	adds	r1, r4, #0
 8010352:	1c07      	adds	r7, r0, #0
 8010354:	1c20      	adds	r0, r4, #0
 8010356:	f7f0 fb43 	bl	80009e0 <__aeabi_fmul>
 801035a:	1c01      	adds	r1, r0, #0
 801035c:	1c38      	adds	r0, r7, #0
 801035e:	f7f0 fb3f 	bl	80009e0 <__aeabi_fmul>
 8010362:	492e      	ldr	r1, [pc, #184]	@ (801041c <__ieee754_powf+0x290>)
 8010364:	f7f0 fb3c 	bl	80009e0 <__aeabi_fmul>
 8010368:	1c01      	adds	r1, r0, #0
 801036a:	1c30      	adds	r0, r6, #0
 801036c:	f7f0 fc76 	bl	8000c5c <__aeabi_fsub>
 8010370:	1c01      	adds	r1, r0, #0
 8010372:	1c06      	adds	r6, r0, #0
 8010374:	1c28      	adds	r0, r5, #0
 8010376:	f7ef ffc3 	bl	8000300 <__aeabi_fadd>
 801037a:	0b04      	lsrs	r4, r0, #12
 801037c:	0324      	lsls	r4, r4, #12
 801037e:	1c29      	adds	r1, r5, #0
 8010380:	1c20      	adds	r0, r4, #0
 8010382:	f7f0 fc6b 	bl	8000c5c <__aeabi_fsub>
 8010386:	1c01      	adds	r1, r0, #0
 8010388:	1c30      	adds	r0, r6, #0
 801038a:	f7f0 fc67 	bl	8000c5c <__aeabi_fsub>
 801038e:	9b02      	ldr	r3, [sp, #8]
 8010390:	9a05      	ldr	r2, [sp, #20]
 8010392:	3b01      	subs	r3, #1
 8010394:	1c06      	adds	r6, r0, #0
 8010396:	4313      	orrs	r3, r2
 8010398:	d100      	bne.n	801039c <__ieee754_powf+0x210>
 801039a:	e14e      	b.n	801063a <__ieee754_powf+0x4ae>
 801039c:	27fe      	movs	r7, #254	@ 0xfe
 801039e:	05bf      	lsls	r7, r7, #22
 80103a0:	9b01      	ldr	r3, [sp, #4]
 80103a2:	9801      	ldr	r0, [sp, #4]
 80103a4:	0b1d      	lsrs	r5, r3, #12
 80103a6:	032d      	lsls	r5, r5, #12
 80103a8:	1c29      	adds	r1, r5, #0
 80103aa:	f7f0 fc57 	bl	8000c5c <__aeabi_fsub>
 80103ae:	1c21      	adds	r1, r4, #0
 80103b0:	f7f0 fb16 	bl	80009e0 <__aeabi_fmul>
 80103b4:	9901      	ldr	r1, [sp, #4]
 80103b6:	9002      	str	r0, [sp, #8]
 80103b8:	1c30      	adds	r0, r6, #0
 80103ba:	f7f0 fb11 	bl	80009e0 <__aeabi_fmul>
 80103be:	1c01      	adds	r1, r0, #0
 80103c0:	9802      	ldr	r0, [sp, #8]
 80103c2:	f7ef ff9d 	bl	8000300 <__aeabi_fadd>
 80103c6:	1c29      	adds	r1, r5, #0
 80103c8:	9001      	str	r0, [sp, #4]
 80103ca:	1c20      	adds	r0, r4, #0
 80103cc:	f7f0 fb08 	bl	80009e0 <__aeabi_fmul>
 80103d0:	1c01      	adds	r1, r0, #0
 80103d2:	1c04      	adds	r4, r0, #0
 80103d4:	9801      	ldr	r0, [sp, #4]
 80103d6:	f7ef ff93 	bl	8000300 <__aeabi_fadd>
 80103da:	0043      	lsls	r3, r0, #1
 80103dc:	1c06      	adds	r6, r0, #0
 80103de:	9002      	str	r0, [sp, #8]
 80103e0:	085b      	lsrs	r3, r3, #1
 80103e2:	2800      	cmp	r0, #0
 80103e4:	dc00      	bgt.n	80103e8 <__ieee754_powf+0x25c>
 80103e6:	e13e      	b.n	8010666 <__ieee754_powf+0x4da>
 80103e8:	2286      	movs	r2, #134	@ 0x86
 80103ea:	05d2      	lsls	r2, r2, #23
 80103ec:	4293      	cmp	r3, r2
 80103ee:	d800      	bhi.n	80103f2 <__ieee754_powf+0x266>
 80103f0:	e125      	b.n	801063e <__ieee754_powf+0x4b2>
 80103f2:	2100      	movs	r1, #0
 80103f4:	1c38      	adds	r0, r7, #0
 80103f6:	f7ef ff25 	bl	8000244 <__aeabi_fcmplt>
 80103fa:	1e43      	subs	r3, r0, #1
 80103fc:	4198      	sbcs	r0, r3
 80103fe:	e77c      	b.n	80102fa <__ieee754_powf+0x16e>
 8010400:	ff800000 	.word	0xff800000
 8010404:	c0800000 	.word	0xc0800000
 8010408:	3f7ffff3 	.word	0x3f7ffff3
 801040c:	3f800007 	.word	0x3f800007
 8010410:	3fb8aa00 	.word	0x3fb8aa00
 8010414:	36eca570 	.word	0x36eca570
 8010418:	3eaaaaab 	.word	0x3eaaaaab
 801041c:	3fb8aa3b 	.word	0x3fb8aa3b
 8010420:	23ff      	movs	r3, #255	@ 0xff
 8010422:	05db      	lsls	r3, r3, #23
 8010424:	2200      	movs	r2, #0
 8010426:	4223      	tst	r3, r4
 8010428:	d106      	bne.n	8010438 <__ieee754_powf+0x2ac>
 801042a:	2197      	movs	r1, #151	@ 0x97
 801042c:	05c9      	lsls	r1, r1, #23
 801042e:	f7f0 fad7 	bl	80009e0 <__aeabi_fmul>
 8010432:	2218      	movs	r2, #24
 8010434:	9003      	str	r0, [sp, #12]
 8010436:	4252      	negs	r2, r2
 8010438:	24fe      	movs	r4, #254	@ 0xfe
 801043a:	9b03      	ldr	r3, [sp, #12]
 801043c:	05a4      	lsls	r4, r4, #22
 801043e:	15db      	asrs	r3, r3, #23
 8010440:	3b7f      	subs	r3, #127	@ 0x7f
 8010442:	189b      	adds	r3, r3, r2
 8010444:	9304      	str	r3, [sp, #16]
 8010446:	9b03      	ldr	r3, [sp, #12]
 8010448:	4ae3      	ldr	r2, [pc, #908]	@ (80107d8 <__ieee754_powf+0x64c>)
 801044a:	025b      	lsls	r3, r3, #9
 801044c:	0a5b      	lsrs	r3, r3, #9
 801044e:	2500      	movs	r5, #0
 8010450:	431c      	orrs	r4, r3
 8010452:	4293      	cmp	r3, r2
 8010454:	dd09      	ble.n	801046a <__ieee754_powf+0x2de>
 8010456:	4ae1      	ldr	r2, [pc, #900]	@ (80107dc <__ieee754_powf+0x650>)
 8010458:	3501      	adds	r5, #1
 801045a:	4293      	cmp	r3, r2
 801045c:	dd05      	ble.n	801046a <__ieee754_powf+0x2de>
 801045e:	9b04      	ldr	r3, [sp, #16]
 8010460:	195b      	adds	r3, r3, r5
 8010462:	2500      	movs	r5, #0
 8010464:	9304      	str	r3, [sp, #16]
 8010466:	4bde      	ldr	r3, [pc, #888]	@ (80107e0 <__ieee754_powf+0x654>)
 8010468:	18e4      	adds	r4, r4, r3
 801046a:	4bde      	ldr	r3, [pc, #888]	@ (80107e4 <__ieee754_powf+0x658>)
 801046c:	00aa      	lsls	r2, r5, #2
 801046e:	58d7      	ldr	r7, [r2, r3]
 8010470:	1c20      	adds	r0, r4, #0
 8010472:	1c39      	adds	r1, r7, #0
 8010474:	9206      	str	r2, [sp, #24]
 8010476:	9409      	str	r4, [sp, #36]	@ 0x24
 8010478:	f7f0 fbf0 	bl	8000c5c <__aeabi_fsub>
 801047c:	1c21      	adds	r1, r4, #0
 801047e:	9007      	str	r0, [sp, #28]
 8010480:	1c38      	adds	r0, r7, #0
 8010482:	f7ef ff3d 	bl	8000300 <__aeabi_fadd>
 8010486:	1c01      	adds	r1, r0, #0
 8010488:	20fe      	movs	r0, #254	@ 0xfe
 801048a:	0580      	lsls	r0, r0, #22
 801048c:	f7f0 f8c2 	bl	8000614 <__aeabi_fdiv>
 8010490:	1c01      	adds	r1, r0, #0
 8010492:	9008      	str	r0, [sp, #32]
 8010494:	9807      	ldr	r0, [sp, #28]
 8010496:	f7f0 faa3 	bl	80009e0 <__aeabi_fmul>
 801049a:	9003      	str	r0, [sp, #12]
 801049c:	9b03      	ldr	r3, [sp, #12]
 801049e:	2280      	movs	r2, #128	@ 0x80
 80104a0:	0b1e      	lsrs	r6, r3, #12
 80104a2:	2380      	movs	r3, #128	@ 0x80
 80104a4:	1064      	asrs	r4, r4, #1
 80104a6:	0592      	lsls	r2, r2, #22
 80104a8:	02db      	lsls	r3, r3, #11
 80104aa:	4322      	orrs	r2, r4
 80104ac:	18d2      	adds	r2, r2, r3
 80104ae:	056d      	lsls	r5, r5, #21
 80104b0:	1955      	adds	r5, r2, r5
 80104b2:	0336      	lsls	r6, r6, #12
 80104b4:	1c29      	adds	r1, r5, #0
 80104b6:	1c30      	adds	r0, r6, #0
 80104b8:	f7f0 fa92 	bl	80009e0 <__aeabi_fmul>
 80104bc:	1c01      	adds	r1, r0, #0
 80104be:	9807      	ldr	r0, [sp, #28]
 80104c0:	f7f0 fbcc 	bl	8000c5c <__aeabi_fsub>
 80104c4:	1c39      	adds	r1, r7, #0
 80104c6:	1c04      	adds	r4, r0, #0
 80104c8:	1c28      	adds	r0, r5, #0
 80104ca:	f7f0 fbc7 	bl	8000c5c <__aeabi_fsub>
 80104ce:	1c01      	adds	r1, r0, #0
 80104d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80104d2:	f7f0 fbc3 	bl	8000c5c <__aeabi_fsub>
 80104d6:	1c31      	adds	r1, r6, #0
 80104d8:	f7f0 fa82 	bl	80009e0 <__aeabi_fmul>
 80104dc:	1c01      	adds	r1, r0, #0
 80104de:	1c20      	adds	r0, r4, #0
 80104e0:	f7f0 fbbc 	bl	8000c5c <__aeabi_fsub>
 80104e4:	9908      	ldr	r1, [sp, #32]
 80104e6:	f7f0 fa7b 	bl	80009e0 <__aeabi_fmul>
 80104ea:	9903      	ldr	r1, [sp, #12]
 80104ec:	9007      	str	r0, [sp, #28]
 80104ee:	1c08      	adds	r0, r1, #0
 80104f0:	f7f0 fa76 	bl	80009e0 <__aeabi_fmul>
 80104f4:	49bc      	ldr	r1, [pc, #752]	@ (80107e8 <__ieee754_powf+0x65c>)
 80104f6:	1c04      	adds	r4, r0, #0
 80104f8:	f7f0 fa72 	bl	80009e0 <__aeabi_fmul>
 80104fc:	49bb      	ldr	r1, [pc, #748]	@ (80107ec <__ieee754_powf+0x660>)
 80104fe:	f7ef feff 	bl	8000300 <__aeabi_fadd>
 8010502:	1c21      	adds	r1, r4, #0
 8010504:	f7f0 fa6c 	bl	80009e0 <__aeabi_fmul>
 8010508:	49b9      	ldr	r1, [pc, #740]	@ (80107f0 <__ieee754_powf+0x664>)
 801050a:	f7ef fef9 	bl	8000300 <__aeabi_fadd>
 801050e:	1c21      	adds	r1, r4, #0
 8010510:	f7f0 fa66 	bl	80009e0 <__aeabi_fmul>
 8010514:	49b7      	ldr	r1, [pc, #732]	@ (80107f4 <__ieee754_powf+0x668>)
 8010516:	f7ef fef3 	bl	8000300 <__aeabi_fadd>
 801051a:	1c21      	adds	r1, r4, #0
 801051c:	f7f0 fa60 	bl	80009e0 <__aeabi_fmul>
 8010520:	49b5      	ldr	r1, [pc, #724]	@ (80107f8 <__ieee754_powf+0x66c>)
 8010522:	f7ef feed 	bl	8000300 <__aeabi_fadd>
 8010526:	1c21      	adds	r1, r4, #0
 8010528:	f7f0 fa5a 	bl	80009e0 <__aeabi_fmul>
 801052c:	49b3      	ldr	r1, [pc, #716]	@ (80107fc <__ieee754_powf+0x670>)
 801052e:	f7ef fee7 	bl	8000300 <__aeabi_fadd>
 8010532:	1c21      	adds	r1, r4, #0
 8010534:	1c05      	adds	r5, r0, #0
 8010536:	1c20      	adds	r0, r4, #0
 8010538:	f7f0 fa52 	bl	80009e0 <__aeabi_fmul>
 801053c:	1c01      	adds	r1, r0, #0
 801053e:	1c28      	adds	r0, r5, #0
 8010540:	f7f0 fa4e 	bl	80009e0 <__aeabi_fmul>
 8010544:	1c31      	adds	r1, r6, #0
 8010546:	1c04      	adds	r4, r0, #0
 8010548:	9803      	ldr	r0, [sp, #12]
 801054a:	f7ef fed9 	bl	8000300 <__aeabi_fadd>
 801054e:	9907      	ldr	r1, [sp, #28]
 8010550:	f7f0 fa46 	bl	80009e0 <__aeabi_fmul>
 8010554:	1c21      	adds	r1, r4, #0
 8010556:	f7ef fed3 	bl	8000300 <__aeabi_fadd>
 801055a:	1c31      	adds	r1, r6, #0
 801055c:	9008      	str	r0, [sp, #32]
 801055e:	1c30      	adds	r0, r6, #0
 8010560:	f7f0 fa3e 	bl	80009e0 <__aeabi_fmul>
 8010564:	49a6      	ldr	r1, [pc, #664]	@ (8010800 <__ieee754_powf+0x674>)
 8010566:	1c07      	adds	r7, r0, #0
 8010568:	f7ef feca 	bl	8000300 <__aeabi_fadd>
 801056c:	9908      	ldr	r1, [sp, #32]
 801056e:	f7ef fec7 	bl	8000300 <__aeabi_fadd>
 8010572:	0b04      	lsrs	r4, r0, #12
 8010574:	0324      	lsls	r4, r4, #12
 8010576:	1c21      	adds	r1, r4, #0
 8010578:	1c30      	adds	r0, r6, #0
 801057a:	f7f0 fa31 	bl	80009e0 <__aeabi_fmul>
 801057e:	49a0      	ldr	r1, [pc, #640]	@ (8010800 <__ieee754_powf+0x674>)
 8010580:	1c05      	adds	r5, r0, #0
 8010582:	1c20      	adds	r0, r4, #0
 8010584:	f7f0 fb6a 	bl	8000c5c <__aeabi_fsub>
 8010588:	1c39      	adds	r1, r7, #0
 801058a:	f7f0 fb67 	bl	8000c5c <__aeabi_fsub>
 801058e:	1c01      	adds	r1, r0, #0
 8010590:	9808      	ldr	r0, [sp, #32]
 8010592:	f7f0 fb63 	bl	8000c5c <__aeabi_fsub>
 8010596:	9903      	ldr	r1, [sp, #12]
 8010598:	f7f0 fa22 	bl	80009e0 <__aeabi_fmul>
 801059c:	1c21      	adds	r1, r4, #0
 801059e:	1c06      	adds	r6, r0, #0
 80105a0:	9807      	ldr	r0, [sp, #28]
 80105a2:	f7f0 fa1d 	bl	80009e0 <__aeabi_fmul>
 80105a6:	1c01      	adds	r1, r0, #0
 80105a8:	1c30      	adds	r0, r6, #0
 80105aa:	f7ef fea9 	bl	8000300 <__aeabi_fadd>
 80105ae:	1c06      	adds	r6, r0, #0
 80105b0:	1c01      	adds	r1, r0, #0
 80105b2:	1c28      	adds	r0, r5, #0
 80105b4:	f7ef fea4 	bl	8000300 <__aeabi_fadd>
 80105b8:	0b04      	lsrs	r4, r0, #12
 80105ba:	0324      	lsls	r4, r4, #12
 80105bc:	4991      	ldr	r1, [pc, #580]	@ (8010804 <__ieee754_powf+0x678>)
 80105be:	1c20      	adds	r0, r4, #0
 80105c0:	f7f0 fa0e 	bl	80009e0 <__aeabi_fmul>
 80105c4:	1c29      	adds	r1, r5, #0
 80105c6:	9003      	str	r0, [sp, #12]
 80105c8:	1c20      	adds	r0, r4, #0
 80105ca:	f7f0 fb47 	bl	8000c5c <__aeabi_fsub>
 80105ce:	1c01      	adds	r1, r0, #0
 80105d0:	1c30      	adds	r0, r6, #0
 80105d2:	f7f0 fb43 	bl	8000c5c <__aeabi_fsub>
 80105d6:	498c      	ldr	r1, [pc, #560]	@ (8010808 <__ieee754_powf+0x67c>)
 80105d8:	f7f0 fa02 	bl	80009e0 <__aeabi_fmul>
 80105dc:	498b      	ldr	r1, [pc, #556]	@ (801080c <__ieee754_powf+0x680>)
 80105de:	1c05      	adds	r5, r0, #0
 80105e0:	1c20      	adds	r0, r4, #0
 80105e2:	f7f0 f9fd 	bl	80009e0 <__aeabi_fmul>
 80105e6:	1c01      	adds	r1, r0, #0
 80105e8:	1c28      	adds	r0, r5, #0
 80105ea:	f7ef fe89 	bl	8000300 <__aeabi_fadd>
 80105ee:	9a06      	ldr	r2, [sp, #24]
 80105f0:	4b87      	ldr	r3, [pc, #540]	@ (8010810 <__ieee754_powf+0x684>)
 80105f2:	58d1      	ldr	r1, [r2, r3]
 80105f4:	f7ef fe84 	bl	8000300 <__aeabi_fadd>
 80105f8:	1c05      	adds	r5, r0, #0
 80105fa:	9804      	ldr	r0, [sp, #16]
 80105fc:	f7f0 fd08 	bl	8001010 <__aeabi_i2f>
 8010600:	4b84      	ldr	r3, [pc, #528]	@ (8010814 <__ieee754_powf+0x688>)
 8010602:	9a06      	ldr	r2, [sp, #24]
 8010604:	1c06      	adds	r6, r0, #0
 8010606:	58d7      	ldr	r7, [r2, r3]
 8010608:	1c29      	adds	r1, r5, #0
 801060a:	9803      	ldr	r0, [sp, #12]
 801060c:	f7ef fe78 	bl	8000300 <__aeabi_fadd>
 8010610:	1c39      	adds	r1, r7, #0
 8010612:	f7ef fe75 	bl	8000300 <__aeabi_fadd>
 8010616:	1c31      	adds	r1, r6, #0
 8010618:	f7ef fe72 	bl	8000300 <__aeabi_fadd>
 801061c:	0b04      	lsrs	r4, r0, #12
 801061e:	0324      	lsls	r4, r4, #12
 8010620:	1c31      	adds	r1, r6, #0
 8010622:	1c20      	adds	r0, r4, #0
 8010624:	f7f0 fb1a 	bl	8000c5c <__aeabi_fsub>
 8010628:	1c39      	adds	r1, r7, #0
 801062a:	f7f0 fb17 	bl	8000c5c <__aeabi_fsub>
 801062e:	9903      	ldr	r1, [sp, #12]
 8010630:	f7f0 fb14 	bl	8000c5c <__aeabi_fsub>
 8010634:	1c01      	adds	r1, r0, #0
 8010636:	1c28      	adds	r0, r5, #0
 8010638:	e6a7      	b.n	801038a <__ieee754_powf+0x1fe>
 801063a:	4f77      	ldr	r7, [pc, #476]	@ (8010818 <__ieee754_powf+0x68c>)
 801063c:	e6b0      	b.n	80103a0 <__ieee754_powf+0x214>
 801063e:	4293      	cmp	r3, r2
 8010640:	d126      	bne.n	8010690 <__ieee754_powf+0x504>
 8010642:	4976      	ldr	r1, [pc, #472]	@ (801081c <__ieee754_powf+0x690>)
 8010644:	9801      	ldr	r0, [sp, #4]
 8010646:	f7ef fe5b 	bl	8000300 <__aeabi_fadd>
 801064a:	1c21      	adds	r1, r4, #0
 801064c:	1c05      	adds	r5, r0, #0
 801064e:	1c30      	adds	r0, r6, #0
 8010650:	f7f0 fb04 	bl	8000c5c <__aeabi_fsub>
 8010654:	1c01      	adds	r1, r0, #0
 8010656:	1c28      	adds	r0, r5, #0
 8010658:	f7ef fe08 	bl	800026c <__aeabi_fcmpgt>
 801065c:	2800      	cmp	r0, #0
 801065e:	d000      	beq.n	8010662 <__ieee754_powf+0x4d6>
 8010660:	e6c7      	b.n	80103f2 <__ieee754_powf+0x266>
 8010662:	2386      	movs	r3, #134	@ 0x86
 8010664:	e01a      	b.n	801069c <__ieee754_powf+0x510>
 8010666:	4a6e      	ldr	r2, [pc, #440]	@ (8010820 <__ieee754_powf+0x694>)
 8010668:	4293      	cmp	r3, r2
 801066a:	d906      	bls.n	801067a <__ieee754_powf+0x4ee>
 801066c:	2100      	movs	r1, #0
 801066e:	1c38      	adds	r0, r7, #0
 8010670:	f7ef fde8 	bl	8000244 <__aeabi_fcmplt>
 8010674:	1e43      	subs	r3, r0, #1
 8010676:	4198      	sbcs	r0, r3
 8010678:	e648      	b.n	801030c <__ieee754_powf+0x180>
 801067a:	4293      	cmp	r3, r2
 801067c:	d108      	bne.n	8010690 <__ieee754_powf+0x504>
 801067e:	1c21      	adds	r1, r4, #0
 8010680:	f7f0 faec 	bl	8000c5c <__aeabi_fsub>
 8010684:	9901      	ldr	r1, [sp, #4]
 8010686:	f7ef fdfb 	bl	8000280 <__aeabi_fcmpge>
 801068a:	2800      	cmp	r0, #0
 801068c:	d0e9      	beq.n	8010662 <__ieee754_powf+0x4d6>
 801068e:	e7ed      	b.n	801066c <__ieee754_powf+0x4e0>
 8010690:	22fc      	movs	r2, #252	@ 0xfc
 8010692:	2500      	movs	r5, #0
 8010694:	0592      	lsls	r2, r2, #22
 8010696:	4293      	cmp	r3, r2
 8010698:	d91a      	bls.n	80106d0 <__ieee754_powf+0x544>
 801069a:	15db      	asrs	r3, r3, #23
 801069c:	2580      	movs	r5, #128	@ 0x80
 801069e:	042d      	lsls	r5, r5, #16
 80106a0:	002a      	movs	r2, r5
 80106a2:	3b7e      	subs	r3, #126	@ 0x7e
 80106a4:	411a      	asrs	r2, r3
 80106a6:	1993      	adds	r3, r2, r6
 80106a8:	15da      	asrs	r2, r3, #23
 80106aa:	494d      	ldr	r1, [pc, #308]	@ (80107e0 <__ieee754_powf+0x654>)
 80106ac:	b2d2      	uxtb	r2, r2
 80106ae:	3a7f      	subs	r2, #127	@ 0x7f
 80106b0:	4111      	asrs	r1, r2
 80106b2:	4019      	ands	r1, r3
 80106b4:	025b      	lsls	r3, r3, #9
 80106b6:	0a5b      	lsrs	r3, r3, #9
 80106b8:	431d      	orrs	r5, r3
 80106ba:	2317      	movs	r3, #23
 80106bc:	1a9b      	subs	r3, r3, r2
 80106be:	411d      	asrs	r5, r3
 80106c0:	9b02      	ldr	r3, [sp, #8]
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	da00      	bge.n	80106c8 <__ieee754_powf+0x53c>
 80106c6:	426d      	negs	r5, r5
 80106c8:	1c20      	adds	r0, r4, #0
 80106ca:	f7f0 fac7 	bl	8000c5c <__aeabi_fsub>
 80106ce:	1c04      	adds	r4, r0, #0
 80106d0:	9901      	ldr	r1, [sp, #4]
 80106d2:	1c20      	adds	r0, r4, #0
 80106d4:	f7ef fe14 	bl	8000300 <__aeabi_fadd>
 80106d8:	0b00      	lsrs	r0, r0, #12
 80106da:	0303      	lsls	r3, r0, #12
 80106dc:	1c18      	adds	r0, r3, #0
 80106de:	4951      	ldr	r1, [pc, #324]	@ (8010824 <__ieee754_powf+0x698>)
 80106e0:	001e      	movs	r6, r3
 80106e2:	f7f0 f97d 	bl	80009e0 <__aeabi_fmul>
 80106e6:	1c21      	adds	r1, r4, #0
 80106e8:	9002      	str	r0, [sp, #8]
 80106ea:	1c30      	adds	r0, r6, #0
 80106ec:	f7f0 fab6 	bl	8000c5c <__aeabi_fsub>
 80106f0:	1c01      	adds	r1, r0, #0
 80106f2:	9801      	ldr	r0, [sp, #4]
 80106f4:	f7f0 fab2 	bl	8000c5c <__aeabi_fsub>
 80106f8:	494b      	ldr	r1, [pc, #300]	@ (8010828 <__ieee754_powf+0x69c>)
 80106fa:	f7f0 f971 	bl	80009e0 <__aeabi_fmul>
 80106fe:	494b      	ldr	r1, [pc, #300]	@ (801082c <__ieee754_powf+0x6a0>)
 8010700:	1c04      	adds	r4, r0, #0
 8010702:	1c30      	adds	r0, r6, #0
 8010704:	f7f0 f96c 	bl	80009e0 <__aeabi_fmul>
 8010708:	1c01      	adds	r1, r0, #0
 801070a:	1c20      	adds	r0, r4, #0
 801070c:	f7ef fdf8 	bl	8000300 <__aeabi_fadd>
 8010710:	1c06      	adds	r6, r0, #0
 8010712:	1c01      	adds	r1, r0, #0
 8010714:	9802      	ldr	r0, [sp, #8]
 8010716:	f7ef fdf3 	bl	8000300 <__aeabi_fadd>
 801071a:	9902      	ldr	r1, [sp, #8]
 801071c:	1c04      	adds	r4, r0, #0
 801071e:	f7f0 fa9d 	bl	8000c5c <__aeabi_fsub>
 8010722:	1c01      	adds	r1, r0, #0
 8010724:	1c30      	adds	r0, r6, #0
 8010726:	f7f0 fa99 	bl	8000c5c <__aeabi_fsub>
 801072a:	1c21      	adds	r1, r4, #0
 801072c:	9001      	str	r0, [sp, #4]
 801072e:	1c20      	adds	r0, r4, #0
 8010730:	f7f0 f956 	bl	80009e0 <__aeabi_fmul>
 8010734:	493e      	ldr	r1, [pc, #248]	@ (8010830 <__ieee754_powf+0x6a4>)
 8010736:	1c06      	adds	r6, r0, #0
 8010738:	f7f0 f952 	bl	80009e0 <__aeabi_fmul>
 801073c:	493d      	ldr	r1, [pc, #244]	@ (8010834 <__ieee754_powf+0x6a8>)
 801073e:	f7f0 fa8d 	bl	8000c5c <__aeabi_fsub>
 8010742:	1c31      	adds	r1, r6, #0
 8010744:	f7f0 f94c 	bl	80009e0 <__aeabi_fmul>
 8010748:	493b      	ldr	r1, [pc, #236]	@ (8010838 <__ieee754_powf+0x6ac>)
 801074a:	f7ef fdd9 	bl	8000300 <__aeabi_fadd>
 801074e:	1c31      	adds	r1, r6, #0
 8010750:	f7f0 f946 	bl	80009e0 <__aeabi_fmul>
 8010754:	4939      	ldr	r1, [pc, #228]	@ (801083c <__ieee754_powf+0x6b0>)
 8010756:	f7f0 fa81 	bl	8000c5c <__aeabi_fsub>
 801075a:	1c31      	adds	r1, r6, #0
 801075c:	f7f0 f940 	bl	80009e0 <__aeabi_fmul>
 8010760:	4937      	ldr	r1, [pc, #220]	@ (8010840 <__ieee754_powf+0x6b4>)
 8010762:	f7ef fdcd 	bl	8000300 <__aeabi_fadd>
 8010766:	1c31      	adds	r1, r6, #0
 8010768:	f7f0 f93a 	bl	80009e0 <__aeabi_fmul>
 801076c:	1c01      	adds	r1, r0, #0
 801076e:	1c20      	adds	r0, r4, #0
 8010770:	f7f0 fa74 	bl	8000c5c <__aeabi_fsub>
 8010774:	1c06      	adds	r6, r0, #0
 8010776:	1c01      	adds	r1, r0, #0
 8010778:	1c20      	adds	r0, r4, #0
 801077a:	f7f0 f931 	bl	80009e0 <__aeabi_fmul>
 801077e:	2180      	movs	r1, #128	@ 0x80
 8010780:	9002      	str	r0, [sp, #8]
 8010782:	05c9      	lsls	r1, r1, #23
 8010784:	1c30      	adds	r0, r6, #0
 8010786:	f7f0 fa69 	bl	8000c5c <__aeabi_fsub>
 801078a:	1c01      	adds	r1, r0, #0
 801078c:	9802      	ldr	r0, [sp, #8]
 801078e:	f7ef ff41 	bl	8000614 <__aeabi_fdiv>
 8010792:	9901      	ldr	r1, [sp, #4]
 8010794:	1c06      	adds	r6, r0, #0
 8010796:	1c20      	adds	r0, r4, #0
 8010798:	f7f0 f922 	bl	80009e0 <__aeabi_fmul>
 801079c:	9901      	ldr	r1, [sp, #4]
 801079e:	f7ef fdaf 	bl	8000300 <__aeabi_fadd>
 80107a2:	1c01      	adds	r1, r0, #0
 80107a4:	1c30      	adds	r0, r6, #0
 80107a6:	f7f0 fa59 	bl	8000c5c <__aeabi_fsub>
 80107aa:	1c21      	adds	r1, r4, #0
 80107ac:	f7f0 fa56 	bl	8000c5c <__aeabi_fsub>
 80107b0:	1c01      	adds	r1, r0, #0
 80107b2:	20fe      	movs	r0, #254	@ 0xfe
 80107b4:	0580      	lsls	r0, r0, #22
 80107b6:	f7f0 fa51 	bl	8000c5c <__aeabi_fsub>
 80107ba:	05eb      	lsls	r3, r5, #23
 80107bc:	181b      	adds	r3, r3, r0
 80107be:	15da      	asrs	r2, r3, #23
 80107c0:	2a00      	cmp	r2, #0
 80107c2:	dc04      	bgt.n	80107ce <__ieee754_powf+0x642>
 80107c4:	0029      	movs	r1, r5
 80107c6:	f000 f841 	bl	801084c <scalbnf>
 80107ca:	1c39      	adds	r1, r7, #0
 80107cc:	e54a      	b.n	8010264 <__ieee754_powf+0xd8>
 80107ce:	1c18      	adds	r0, r3, #0
 80107d0:	e7fb      	b.n	80107ca <__ieee754_powf+0x63e>
 80107d2:	20fe      	movs	r0, #254	@ 0xfe
 80107d4:	0580      	lsls	r0, r0, #22
 80107d6:	e4ef      	b.n	80101b8 <__ieee754_powf+0x2c>
 80107d8:	001cc471 	.word	0x001cc471
 80107dc:	005db3d6 	.word	0x005db3d6
 80107e0:	ff800000 	.word	0xff800000
 80107e4:	08010dfc 	.word	0x08010dfc
 80107e8:	3e53f142 	.word	0x3e53f142
 80107ec:	3e6c3255 	.word	0x3e6c3255
 80107f0:	3e8ba305 	.word	0x3e8ba305
 80107f4:	3eaaaaab 	.word	0x3eaaaaab
 80107f8:	3edb6db7 	.word	0x3edb6db7
 80107fc:	3f19999a 	.word	0x3f19999a
 8010800:	40400000 	.word	0x40400000
 8010804:	3f763800 	.word	0x3f763800
 8010808:	3f76384f 	.word	0x3f76384f
 801080c:	369dc3a0 	.word	0x369dc3a0
 8010810:	08010dec 	.word	0x08010dec
 8010814:	08010df4 	.word	0x08010df4
 8010818:	bf800000 	.word	0xbf800000
 801081c:	3338aa3c 	.word	0x3338aa3c
 8010820:	43160000 	.word	0x43160000
 8010824:	3f317200 	.word	0x3f317200
 8010828:	3f317218 	.word	0x3f317218
 801082c:	35bfbe8c 	.word	0x35bfbe8c
 8010830:	3331bb4c 	.word	0x3331bb4c
 8010834:	35ddea0e 	.word	0x35ddea0e
 8010838:	388ab355 	.word	0x388ab355
 801083c:	3b360b61 	.word	0x3b360b61
 8010840:	3e2aaaab 	.word	0x3e2aaaab

08010844 <fabsf>:
 8010844:	0040      	lsls	r0, r0, #1
 8010846:	0840      	lsrs	r0, r0, #1
 8010848:	4770      	bx	lr
	...

0801084c <scalbnf>:
 801084c:	0043      	lsls	r3, r0, #1
 801084e:	b570      	push	{r4, r5, r6, lr}
 8010850:	0002      	movs	r2, r0
 8010852:	000c      	movs	r4, r1
 8010854:	085d      	lsrs	r5, r3, #1
 8010856:	2b00      	cmp	r3, #0
 8010858:	d006      	beq.n	8010868 <scalbnf+0x1c>
 801085a:	21ff      	movs	r1, #255	@ 0xff
 801085c:	05c9      	lsls	r1, r1, #23
 801085e:	428d      	cmp	r5, r1
 8010860:	d303      	bcc.n	801086a <scalbnf+0x1e>
 8010862:	1c01      	adds	r1, r0, #0
 8010864:	f7ef fd4c 	bl	8000300 <__aeabi_fadd>
 8010868:	bd70      	pop	{r4, r5, r6, pc}
 801086a:	4208      	tst	r0, r1
 801086c:	d118      	bne.n	80108a0 <scalbnf+0x54>
 801086e:	2198      	movs	r1, #152	@ 0x98
 8010870:	05c9      	lsls	r1, r1, #23
 8010872:	f7f0 f8b5 	bl	80009e0 <__aeabi_fmul>
 8010876:	4b19      	ldr	r3, [pc, #100]	@ (80108dc <scalbnf+0x90>)
 8010878:	429c      	cmp	r4, r3
 801087a:	db0d      	blt.n	8010898 <scalbnf+0x4c>
 801087c:	0002      	movs	r2, r0
 801087e:	15c3      	asrs	r3, r0, #23
 8010880:	b2db      	uxtb	r3, r3
 8010882:	3b19      	subs	r3, #25
 8010884:	4916      	ldr	r1, [pc, #88]	@ (80108e0 <scalbnf+0x94>)
 8010886:	428c      	cmp	r4, r1
 8010888:	dd0c      	ble.n	80108a4 <scalbnf+0x58>
 801088a:	4b16      	ldr	r3, [pc, #88]	@ (80108e4 <scalbnf+0x98>)
 801088c:	2800      	cmp	r0, #0
 801088e:	da00      	bge.n	8010892 <scalbnf+0x46>
 8010890:	4b15      	ldr	r3, [pc, #84]	@ (80108e8 <scalbnf+0x9c>)
 8010892:	4914      	ldr	r1, [pc, #80]	@ (80108e4 <scalbnf+0x98>)
 8010894:	1c18      	adds	r0, r3, #0
 8010896:	e000      	b.n	801089a <scalbnf+0x4e>
 8010898:	4914      	ldr	r1, [pc, #80]	@ (80108ec <scalbnf+0xa0>)
 801089a:	f7f0 f8a1 	bl	80009e0 <__aeabi_fmul>
 801089e:	e7e3      	b.n	8010868 <scalbnf+0x1c>
 80108a0:	0e1b      	lsrs	r3, r3, #24
 80108a2:	e7ef      	b.n	8010884 <scalbnf+0x38>
 80108a4:	1919      	adds	r1, r3, r4
 80108a6:	29fe      	cmp	r1, #254	@ 0xfe
 80108a8:	dcef      	bgt.n	801088a <scalbnf+0x3e>
 80108aa:	2900      	cmp	r1, #0
 80108ac:	dd04      	ble.n	80108b8 <scalbnf+0x6c>
 80108ae:	4810      	ldr	r0, [pc, #64]	@ (80108f0 <scalbnf+0xa4>)
 80108b0:	05c9      	lsls	r1, r1, #23
 80108b2:	4010      	ands	r0, r2
 80108b4:	4308      	orrs	r0, r1
 80108b6:	e7d7      	b.n	8010868 <scalbnf+0x1c>
 80108b8:	000b      	movs	r3, r1
 80108ba:	3316      	adds	r3, #22
 80108bc:	da05      	bge.n	80108ca <scalbnf+0x7e>
 80108be:	4b0b      	ldr	r3, [pc, #44]	@ (80108ec <scalbnf+0xa0>)
 80108c0:	2800      	cmp	r0, #0
 80108c2:	da00      	bge.n	80108c6 <scalbnf+0x7a>
 80108c4:	4b0b      	ldr	r3, [pc, #44]	@ (80108f4 <scalbnf+0xa8>)
 80108c6:	4909      	ldr	r1, [pc, #36]	@ (80108ec <scalbnf+0xa0>)
 80108c8:	e7e4      	b.n	8010894 <scalbnf+0x48>
 80108ca:	3119      	adds	r1, #25
 80108cc:	05c8      	lsls	r0, r1, #23
 80108ce:	21cc      	movs	r1, #204	@ 0xcc
 80108d0:	4b07      	ldr	r3, [pc, #28]	@ (80108f0 <scalbnf+0xa4>)
 80108d2:	0589      	lsls	r1, r1, #22
 80108d4:	401a      	ands	r2, r3
 80108d6:	4310      	orrs	r0, r2
 80108d8:	e7df      	b.n	801089a <scalbnf+0x4e>
 80108da:	46c0      	nop			@ (mov r8, r8)
 80108dc:	ffff3cb0 	.word	0xffff3cb0
 80108e0:	0000c350 	.word	0x0000c350
 80108e4:	7149f2ca 	.word	0x7149f2ca
 80108e8:	f149f2ca 	.word	0xf149f2ca
 80108ec:	0da24260 	.word	0x0da24260
 80108f0:	807fffff 	.word	0x807fffff
 80108f4:	8da24260 	.word	0x8da24260

080108f8 <with_errnof>:
 80108f8:	b570      	push	{r4, r5, r6, lr}
 80108fa:	000d      	movs	r5, r1
 80108fc:	1c04      	adds	r4, r0, #0
 80108fe:	f000 f8b7 	bl	8010a70 <__errno>
 8010902:	6005      	str	r5, [r0, #0]
 8010904:	1c20      	adds	r0, r4, #0
 8010906:	bd70      	pop	{r4, r5, r6, pc}

08010908 <xflowf>:
 8010908:	b510      	push	{r4, lr}
 801090a:	1c0b      	adds	r3, r1, #0
 801090c:	2800      	cmp	r0, #0
 801090e:	d002      	beq.n	8010916 <xflowf+0xe>
 8010910:	2380      	movs	r3, #128	@ 0x80
 8010912:	061b      	lsls	r3, r3, #24
 8010914:	18cb      	adds	r3, r1, r3
 8010916:	1c18      	adds	r0, r3, #0
 8010918:	f7f0 f862 	bl	80009e0 <__aeabi_fmul>
 801091c:	2122      	movs	r1, #34	@ 0x22
 801091e:	f7ff ffeb 	bl	80108f8 <with_errnof>
 8010922:	bd10      	pop	{r4, pc}

08010924 <__math_uflowf>:
 8010924:	2180      	movs	r1, #128	@ 0x80
 8010926:	b510      	push	{r4, lr}
 8010928:	0549      	lsls	r1, r1, #21
 801092a:	f7ff ffed 	bl	8010908 <xflowf>
 801092e:	bd10      	pop	{r4, pc}

08010930 <__math_oflowf>:
 8010930:	21e0      	movs	r1, #224	@ 0xe0
 8010932:	b510      	push	{r4, lr}
 8010934:	05c9      	lsls	r1, r1, #23
 8010936:	f7ff ffe7 	bl	8010908 <xflowf>
 801093a:	bd10      	pop	{r4, pc}

0801093c <__ieee754_sqrtf>:
 801093c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801093e:	0003      	movs	r3, r0
 8010940:	0042      	lsls	r2, r0, #1
 8010942:	1c04      	adds	r4, r0, #0
 8010944:	20ff      	movs	r0, #255	@ 0xff
 8010946:	0852      	lsrs	r2, r2, #1
 8010948:	05c0      	lsls	r0, r0, #23
 801094a:	4282      	cmp	r2, r0
 801094c:	d30a      	bcc.n	8010964 <__ieee754_sqrtf+0x28>
 801094e:	1c21      	adds	r1, r4, #0
 8010950:	1c20      	adds	r0, r4, #0
 8010952:	f7f0 f845 	bl	80009e0 <__aeabi_fmul>
 8010956:	1c01      	adds	r1, r0, #0
 8010958:	1c20      	adds	r0, r4, #0
 801095a:	f7ef fcd1 	bl	8000300 <__aeabi_fadd>
 801095e:	1c04      	adds	r4, r0, #0
 8010960:	1c20      	adds	r0, r4, #0
 8010962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010964:	2a00      	cmp	r2, #0
 8010966:	d0fb      	beq.n	8010960 <__ieee754_sqrtf+0x24>
 8010968:	2c00      	cmp	r4, #0
 801096a:	da07      	bge.n	801097c <__ieee754_sqrtf+0x40>
 801096c:	1c21      	adds	r1, r4, #0
 801096e:	1c20      	adds	r0, r4, #0
 8010970:	f7f0 f974 	bl	8000c5c <__aeabi_fsub>
 8010974:	1c01      	adds	r1, r0, #0
 8010976:	f7ef fe4d 	bl	8000614 <__aeabi_fdiv>
 801097a:	e7f0      	b.n	801095e <__ieee754_sqrtf+0x22>
 801097c:	0022      	movs	r2, r4
 801097e:	15e1      	asrs	r1, r4, #23
 8010980:	4002      	ands	r2, r0
 8010982:	4204      	tst	r4, r0
 8010984:	d046      	beq.n	8010a14 <__ieee754_sqrtf+0xd8>
 8010986:	2280      	movs	r2, #128	@ 0x80
 8010988:	000f      	movs	r7, r1
 801098a:	025b      	lsls	r3, r3, #9
 801098c:	0a5b      	lsrs	r3, r3, #9
 801098e:	0412      	lsls	r2, r2, #16
 8010990:	3f7f      	subs	r7, #127	@ 0x7f
 8010992:	4313      	orrs	r3, r2
 8010994:	07c9      	lsls	r1, r1, #31
 8010996:	d400      	bmi.n	801099a <__ieee754_sqrtf+0x5e>
 8010998:	005b      	lsls	r3, r3, #1
 801099a:	2400      	movs	r4, #0
 801099c:	2180      	movs	r1, #128	@ 0x80
 801099e:	2019      	movs	r0, #25
 80109a0:	0026      	movs	r6, r4
 80109a2:	107f      	asrs	r7, r7, #1
 80109a4:	005b      	lsls	r3, r3, #1
 80109a6:	0449      	lsls	r1, r1, #17
 80109a8:	1875      	adds	r5, r6, r1
 80109aa:	001a      	movs	r2, r3
 80109ac:	429d      	cmp	r5, r3
 80109ae:	dc02      	bgt.n	80109b6 <__ieee754_sqrtf+0x7a>
 80109b0:	186e      	adds	r6, r5, r1
 80109b2:	1b5a      	subs	r2, r3, r5
 80109b4:	1864      	adds	r4, r4, r1
 80109b6:	3801      	subs	r0, #1
 80109b8:	0053      	lsls	r3, r2, #1
 80109ba:	0849      	lsrs	r1, r1, #1
 80109bc:	2800      	cmp	r0, #0
 80109be:	d1f3      	bne.n	80109a8 <__ieee754_sqrtf+0x6c>
 80109c0:	2a00      	cmp	r2, #0
 80109c2:	d019      	beq.n	80109f8 <__ieee754_sqrtf+0xbc>
 80109c4:	4d17      	ldr	r5, [pc, #92]	@ (8010a24 <__ieee754_sqrtf+0xe8>)
 80109c6:	4e18      	ldr	r6, [pc, #96]	@ (8010a28 <__ieee754_sqrtf+0xec>)
 80109c8:	6828      	ldr	r0, [r5, #0]
 80109ca:	6831      	ldr	r1, [r6, #0]
 80109cc:	682b      	ldr	r3, [r5, #0]
 80109ce:	9301      	str	r3, [sp, #4]
 80109d0:	f7f0 f944 	bl	8000c5c <__aeabi_fsub>
 80109d4:	1c01      	adds	r1, r0, #0
 80109d6:	9801      	ldr	r0, [sp, #4]
 80109d8:	f7ef fc3e 	bl	8000258 <__aeabi_fcmple>
 80109dc:	2800      	cmp	r0, #0
 80109de:	d00b      	beq.n	80109f8 <__ieee754_sqrtf+0xbc>
 80109e0:	6828      	ldr	r0, [r5, #0]
 80109e2:	6831      	ldr	r1, [r6, #0]
 80109e4:	f7ef fc8c 	bl	8000300 <__aeabi_fadd>
 80109e8:	682d      	ldr	r5, [r5, #0]
 80109ea:	1c01      	adds	r1, r0, #0
 80109ec:	1c28      	adds	r0, r5, #0
 80109ee:	f7ef fc29 	bl	8000244 <__aeabi_fcmplt>
 80109f2:	2800      	cmp	r0, #0
 80109f4:	d011      	beq.n	8010a1a <__ieee754_sqrtf+0xde>
 80109f6:	3402      	adds	r4, #2
 80109f8:	23fc      	movs	r3, #252	@ 0xfc
 80109fa:	1064      	asrs	r4, r4, #1
 80109fc:	059b      	lsls	r3, r3, #22
 80109fe:	18e3      	adds	r3, r4, r3
 8010a00:	05fc      	lsls	r4, r7, #23
 8010a02:	18e4      	adds	r4, r4, r3
 8010a04:	e7ac      	b.n	8010960 <__ieee754_sqrtf+0x24>
 8010a06:	005b      	lsls	r3, r3, #1
 8010a08:	3201      	adds	r2, #1
 8010a0a:	4203      	tst	r3, r0
 8010a0c:	d0fb      	beq.n	8010a06 <__ieee754_sqrtf+0xca>
 8010a0e:	3a01      	subs	r2, #1
 8010a10:	1a89      	subs	r1, r1, r2
 8010a12:	e7b8      	b.n	8010986 <__ieee754_sqrtf+0x4a>
 8010a14:	2080      	movs	r0, #128	@ 0x80
 8010a16:	0400      	lsls	r0, r0, #16
 8010a18:	e7f7      	b.n	8010a0a <__ieee754_sqrtf+0xce>
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	3401      	adds	r4, #1
 8010a1e:	439c      	bics	r4, r3
 8010a20:	e7ea      	b.n	80109f8 <__ieee754_sqrtf+0xbc>
 8010a22:	46c0      	nop			@ (mov r8, r8)
 8010a24:	20000194 	.word	0x20000194
 8010a28:	20000190 	.word	0x20000190

08010a2c <free>:
 8010a2c:	b510      	push	{r4, lr}
 8010a2e:	4b03      	ldr	r3, [pc, #12]	@ (8010a3c <free+0x10>)
 8010a30:	0001      	movs	r1, r0
 8010a32:	6818      	ldr	r0, [r3, #0]
 8010a34:	f000 f852 	bl	8010adc <_free_r>
 8010a38:	bd10      	pop	{r4, pc}
 8010a3a:	46c0      	nop			@ (mov r8, r8)
 8010a3c:	20000198 	.word	0x20000198

08010a40 <__malloc_lock>:
 8010a40:	b510      	push	{r4, lr}
 8010a42:	4802      	ldr	r0, [pc, #8]	@ (8010a4c <__malloc_lock+0xc>)
 8010a44:	f000 f83e 	bl	8010ac4 <__retarget_lock_acquire_recursive>
 8010a48:	bd10      	pop	{r4, pc}
 8010a4a:	46c0      	nop			@ (mov r8, r8)
 8010a4c:	20001d88 	.word	0x20001d88

08010a50 <__malloc_unlock>:
 8010a50:	b510      	push	{r4, lr}
 8010a52:	4802      	ldr	r0, [pc, #8]	@ (8010a5c <__malloc_unlock+0xc>)
 8010a54:	f000 f837 	bl	8010ac6 <__retarget_lock_release_recursive>
 8010a58:	bd10      	pop	{r4, pc}
 8010a5a:	46c0      	nop			@ (mov r8, r8)
 8010a5c:	20001d88 	.word	0x20001d88

08010a60 <memset>:
 8010a60:	0003      	movs	r3, r0
 8010a62:	1882      	adds	r2, r0, r2
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d100      	bne.n	8010a6a <memset+0xa>
 8010a68:	4770      	bx	lr
 8010a6a:	7019      	strb	r1, [r3, #0]
 8010a6c:	3301      	adds	r3, #1
 8010a6e:	e7f9      	b.n	8010a64 <memset+0x4>

08010a70 <__errno>:
 8010a70:	4b01      	ldr	r3, [pc, #4]	@ (8010a78 <__errno+0x8>)
 8010a72:	6818      	ldr	r0, [r3, #0]
 8010a74:	4770      	bx	lr
 8010a76:	46c0      	nop			@ (mov r8, r8)
 8010a78:	20000198 	.word	0x20000198

08010a7c <__libc_init_array>:
 8010a7c:	b570      	push	{r4, r5, r6, lr}
 8010a7e:	2600      	movs	r6, #0
 8010a80:	4c0c      	ldr	r4, [pc, #48]	@ (8010ab4 <__libc_init_array+0x38>)
 8010a82:	4d0d      	ldr	r5, [pc, #52]	@ (8010ab8 <__libc_init_array+0x3c>)
 8010a84:	1b64      	subs	r4, r4, r5
 8010a86:	10a4      	asrs	r4, r4, #2
 8010a88:	42a6      	cmp	r6, r4
 8010a8a:	d109      	bne.n	8010aa0 <__libc_init_array+0x24>
 8010a8c:	2600      	movs	r6, #0
 8010a8e:	f000 f86f 	bl	8010b70 <_init>
 8010a92:	4c0a      	ldr	r4, [pc, #40]	@ (8010abc <__libc_init_array+0x40>)
 8010a94:	4d0a      	ldr	r5, [pc, #40]	@ (8010ac0 <__libc_init_array+0x44>)
 8010a96:	1b64      	subs	r4, r4, r5
 8010a98:	10a4      	asrs	r4, r4, #2
 8010a9a:	42a6      	cmp	r6, r4
 8010a9c:	d105      	bne.n	8010aaa <__libc_init_array+0x2e>
 8010a9e:	bd70      	pop	{r4, r5, r6, pc}
 8010aa0:	00b3      	lsls	r3, r6, #2
 8010aa2:	58eb      	ldr	r3, [r5, r3]
 8010aa4:	4798      	blx	r3
 8010aa6:	3601      	adds	r6, #1
 8010aa8:	e7ee      	b.n	8010a88 <__libc_init_array+0xc>
 8010aaa:	00b3      	lsls	r3, r6, #2
 8010aac:	58eb      	ldr	r3, [r5, r3]
 8010aae:	4798      	blx	r3
 8010ab0:	3601      	adds	r6, #1
 8010ab2:	e7f2      	b.n	8010a9a <__libc_init_array+0x1e>
 8010ab4:	08010e04 	.word	0x08010e04
 8010ab8:	08010e04 	.word	0x08010e04
 8010abc:	08010e0c 	.word	0x08010e0c
 8010ac0:	08010e04 	.word	0x08010e04

08010ac4 <__retarget_lock_acquire_recursive>:
 8010ac4:	4770      	bx	lr

08010ac6 <__retarget_lock_release_recursive>:
 8010ac6:	4770      	bx	lr

08010ac8 <memcpy>:
 8010ac8:	2300      	movs	r3, #0
 8010aca:	b510      	push	{r4, lr}
 8010acc:	429a      	cmp	r2, r3
 8010ace:	d100      	bne.n	8010ad2 <memcpy+0xa>
 8010ad0:	bd10      	pop	{r4, pc}
 8010ad2:	5ccc      	ldrb	r4, [r1, r3]
 8010ad4:	54c4      	strb	r4, [r0, r3]
 8010ad6:	3301      	adds	r3, #1
 8010ad8:	e7f8      	b.n	8010acc <memcpy+0x4>
	...

08010adc <_free_r>:
 8010adc:	b570      	push	{r4, r5, r6, lr}
 8010ade:	0005      	movs	r5, r0
 8010ae0:	1e0c      	subs	r4, r1, #0
 8010ae2:	d010      	beq.n	8010b06 <_free_r+0x2a>
 8010ae4:	3c04      	subs	r4, #4
 8010ae6:	6823      	ldr	r3, [r4, #0]
 8010ae8:	2b00      	cmp	r3, #0
 8010aea:	da00      	bge.n	8010aee <_free_r+0x12>
 8010aec:	18e4      	adds	r4, r4, r3
 8010aee:	0028      	movs	r0, r5
 8010af0:	f7ff ffa6 	bl	8010a40 <__malloc_lock>
 8010af4:	4a1d      	ldr	r2, [pc, #116]	@ (8010b6c <_free_r+0x90>)
 8010af6:	6813      	ldr	r3, [r2, #0]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d105      	bne.n	8010b08 <_free_r+0x2c>
 8010afc:	6063      	str	r3, [r4, #4]
 8010afe:	6014      	str	r4, [r2, #0]
 8010b00:	0028      	movs	r0, r5
 8010b02:	f7ff ffa5 	bl	8010a50 <__malloc_unlock>
 8010b06:	bd70      	pop	{r4, r5, r6, pc}
 8010b08:	42a3      	cmp	r3, r4
 8010b0a:	d908      	bls.n	8010b1e <_free_r+0x42>
 8010b0c:	6820      	ldr	r0, [r4, #0]
 8010b0e:	1821      	adds	r1, r4, r0
 8010b10:	428b      	cmp	r3, r1
 8010b12:	d1f3      	bne.n	8010afc <_free_r+0x20>
 8010b14:	6819      	ldr	r1, [r3, #0]
 8010b16:	685b      	ldr	r3, [r3, #4]
 8010b18:	1809      	adds	r1, r1, r0
 8010b1a:	6021      	str	r1, [r4, #0]
 8010b1c:	e7ee      	b.n	8010afc <_free_r+0x20>
 8010b1e:	001a      	movs	r2, r3
 8010b20:	685b      	ldr	r3, [r3, #4]
 8010b22:	2b00      	cmp	r3, #0
 8010b24:	d001      	beq.n	8010b2a <_free_r+0x4e>
 8010b26:	42a3      	cmp	r3, r4
 8010b28:	d9f9      	bls.n	8010b1e <_free_r+0x42>
 8010b2a:	6811      	ldr	r1, [r2, #0]
 8010b2c:	1850      	adds	r0, r2, r1
 8010b2e:	42a0      	cmp	r0, r4
 8010b30:	d10b      	bne.n	8010b4a <_free_r+0x6e>
 8010b32:	6820      	ldr	r0, [r4, #0]
 8010b34:	1809      	adds	r1, r1, r0
 8010b36:	1850      	adds	r0, r2, r1
 8010b38:	6011      	str	r1, [r2, #0]
 8010b3a:	4283      	cmp	r3, r0
 8010b3c:	d1e0      	bne.n	8010b00 <_free_r+0x24>
 8010b3e:	6818      	ldr	r0, [r3, #0]
 8010b40:	685b      	ldr	r3, [r3, #4]
 8010b42:	1841      	adds	r1, r0, r1
 8010b44:	6011      	str	r1, [r2, #0]
 8010b46:	6053      	str	r3, [r2, #4]
 8010b48:	e7da      	b.n	8010b00 <_free_r+0x24>
 8010b4a:	42a0      	cmp	r0, r4
 8010b4c:	d902      	bls.n	8010b54 <_free_r+0x78>
 8010b4e:	230c      	movs	r3, #12
 8010b50:	602b      	str	r3, [r5, #0]
 8010b52:	e7d5      	b.n	8010b00 <_free_r+0x24>
 8010b54:	6820      	ldr	r0, [r4, #0]
 8010b56:	1821      	adds	r1, r4, r0
 8010b58:	428b      	cmp	r3, r1
 8010b5a:	d103      	bne.n	8010b64 <_free_r+0x88>
 8010b5c:	6819      	ldr	r1, [r3, #0]
 8010b5e:	685b      	ldr	r3, [r3, #4]
 8010b60:	1809      	adds	r1, r1, r0
 8010b62:	6021      	str	r1, [r4, #0]
 8010b64:	6063      	str	r3, [r4, #4]
 8010b66:	6054      	str	r4, [r2, #4]
 8010b68:	e7ca      	b.n	8010b00 <_free_r+0x24>
 8010b6a:	46c0      	nop			@ (mov r8, r8)
 8010b6c:	20001c4c 	.word	0x20001c4c

08010b70 <_init>:
 8010b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b72:	46c0      	nop			@ (mov r8, r8)
 8010b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b76:	bc08      	pop	{r3}
 8010b78:	469e      	mov	lr, r3
 8010b7a:	4770      	bx	lr

08010b7c <_fini>:
 8010b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b7e:	46c0      	nop			@ (mov r8, r8)
 8010b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010b82:	bc08      	pop	{r3}
 8010b84:	469e      	mov	lr, r3
 8010b86:	4770      	bx	lr
