
MicLightREV5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000eabc  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b0  0800eb7c  0800eb7c  0000fb7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed2c  0800ed2c  000101e0  2**0
                  CONTENTS
  4 .ARM          00000000  0800ed2c  0800ed2c  000101e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ed2c  0800ed2c  000101e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ed2c  0800ed2c  0000fd2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ed34  0800ed34  0000fd34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e0  20000000  0800ed3c  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001614  200001e0  0800ef1c  000101e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000804  200017f4  0800ef1c  000107f4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000101e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b89a  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000490c  00000000  00000000  0002baa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001708  00000000  00000000  000303b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000011ab  00000000  00000000  00031ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020937  00000000  00000000  00032c63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9f7  00000000  00000000  0005359a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a3449  00000000  00000000  00071f91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001153da  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ae4  00000000  00000000  00115420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  0011af04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e0 	.word	0x200001e0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800eb64 	.word	0x0800eb64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001e4 	.word	0x200001e4
 8000104:	0800eb64 	.word	0x0800eb64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	0010      	movs	r0, r2
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	0019      	movs	r1, r3
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			@ (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f000 fec7 	bl	8001198 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f000 fe07 	bl	8001028 <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f000 feb9 	bl	8001198 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			@ (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 feaf 	bl	8001198 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			@ (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 fe31 	bl	80010b0 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			@ (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 fe27 	bl	80010b0 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			@ (mov r8, r8)

08000470 <__aeabi_cfrcmple>:
 8000470:	4684      	mov	ip, r0
 8000472:	0008      	movs	r0, r1
 8000474:	4661      	mov	r1, ip
 8000476:	e7ff      	b.n	8000478 <__aeabi_cfcmpeq>

08000478 <__aeabi_cfcmpeq>:
 8000478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800047a:	f000 f8c9 	bl	8000610 <__lesf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	d401      	bmi.n	8000486 <__aeabi_cfcmpeq+0xe>
 8000482:	2100      	movs	r1, #0
 8000484:	42c8      	cmn	r0, r1
 8000486:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000488 <__aeabi_fcmpeq>:
 8000488:	b510      	push	{r4, lr}
 800048a:	f000 f849 	bl	8000520 <__eqsf2>
 800048e:	4240      	negs	r0, r0
 8000490:	3001      	adds	r0, #1
 8000492:	bd10      	pop	{r4, pc}

08000494 <__aeabi_fcmplt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f000 f8bb 	bl	8000610 <__lesf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	db01      	blt.n	80004a2 <__aeabi_fcmplt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_fcmple>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f000 f8b1 	bl	8000610 <__lesf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	dd01      	ble.n	80004b6 <__aeabi_fcmple+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_fcmpgt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f000 f857 	bl	8000570 <__gesf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dc01      	bgt.n	80004ca <__aeabi_fcmpgt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_fcmpge>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f000 f84d 	bl	8000570 <__gesf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	da01      	bge.n	80004de <__aeabi_fcmpge+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_d2uiz>:
 80004e4:	b570      	push	{r4, r5, r6, lr}
 80004e6:	2200      	movs	r2, #0
 80004e8:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <__aeabi_d2uiz+0x38>)
 80004ea:	0004      	movs	r4, r0
 80004ec:	000d      	movs	r5, r1
 80004ee:	f7ff ffb5 	bl	800045c <__aeabi_dcmpge>
 80004f2:	2800      	cmp	r0, #0
 80004f4:	d104      	bne.n	8000500 <__aeabi_d2uiz+0x1c>
 80004f6:	0020      	movs	r0, r4
 80004f8:	0029      	movs	r1, r5
 80004fa:	f001 fd23 	bl	8001f44 <__aeabi_d2iz>
 80004fe:	bd70      	pop	{r4, r5, r6, pc}
 8000500:	4b06      	ldr	r3, [pc, #24]	@ (800051c <__aeabi_d2uiz+0x38>)
 8000502:	2200      	movs	r2, #0
 8000504:	0020      	movs	r0, r4
 8000506:	0029      	movs	r1, r5
 8000508:	f001 f980 	bl	800180c <__aeabi_dsub>
 800050c:	f001 fd1a 	bl	8001f44 <__aeabi_d2iz>
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	061b      	lsls	r3, r3, #24
 8000514:	469c      	mov	ip, r3
 8000516:	4460      	add	r0, ip
 8000518:	e7f1      	b.n	80004fe <__aeabi_d2uiz+0x1a>
 800051a:	46c0      	nop			@ (mov r8, r8)
 800051c:	41e00000 	.word	0x41e00000

08000520 <__eqsf2>:
 8000520:	b570      	push	{r4, r5, r6, lr}
 8000522:	0042      	lsls	r2, r0, #1
 8000524:	024e      	lsls	r6, r1, #9
 8000526:	004c      	lsls	r4, r1, #1
 8000528:	0245      	lsls	r5, r0, #9
 800052a:	0a6d      	lsrs	r5, r5, #9
 800052c:	0e12      	lsrs	r2, r2, #24
 800052e:	0fc3      	lsrs	r3, r0, #31
 8000530:	0a76      	lsrs	r6, r6, #9
 8000532:	0e24      	lsrs	r4, r4, #24
 8000534:	0fc9      	lsrs	r1, r1, #31
 8000536:	2aff      	cmp	r2, #255	@ 0xff
 8000538:	d010      	beq.n	800055c <__eqsf2+0x3c>
 800053a:	2cff      	cmp	r4, #255	@ 0xff
 800053c:	d00c      	beq.n	8000558 <__eqsf2+0x38>
 800053e:	2001      	movs	r0, #1
 8000540:	42a2      	cmp	r2, r4
 8000542:	d10a      	bne.n	800055a <__eqsf2+0x3a>
 8000544:	42b5      	cmp	r5, r6
 8000546:	d108      	bne.n	800055a <__eqsf2+0x3a>
 8000548:	428b      	cmp	r3, r1
 800054a:	d00f      	beq.n	800056c <__eqsf2+0x4c>
 800054c:	2a00      	cmp	r2, #0
 800054e:	d104      	bne.n	800055a <__eqsf2+0x3a>
 8000550:	0028      	movs	r0, r5
 8000552:	1e43      	subs	r3, r0, #1
 8000554:	4198      	sbcs	r0, r3
 8000556:	e000      	b.n	800055a <__eqsf2+0x3a>
 8000558:	2001      	movs	r0, #1
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	2001      	movs	r0, #1
 800055e:	2cff      	cmp	r4, #255	@ 0xff
 8000560:	d1fb      	bne.n	800055a <__eqsf2+0x3a>
 8000562:	4335      	orrs	r5, r6
 8000564:	d1f9      	bne.n	800055a <__eqsf2+0x3a>
 8000566:	404b      	eors	r3, r1
 8000568:	0018      	movs	r0, r3
 800056a:	e7f6      	b.n	800055a <__eqsf2+0x3a>
 800056c:	2000      	movs	r0, #0
 800056e:	e7f4      	b.n	800055a <__eqsf2+0x3a>

08000570 <__gesf2>:
 8000570:	b530      	push	{r4, r5, lr}
 8000572:	0042      	lsls	r2, r0, #1
 8000574:	0244      	lsls	r4, r0, #9
 8000576:	024d      	lsls	r5, r1, #9
 8000578:	0fc3      	lsrs	r3, r0, #31
 800057a:	0048      	lsls	r0, r1, #1
 800057c:	0a64      	lsrs	r4, r4, #9
 800057e:	0e12      	lsrs	r2, r2, #24
 8000580:	0a6d      	lsrs	r5, r5, #9
 8000582:	0e00      	lsrs	r0, r0, #24
 8000584:	0fc9      	lsrs	r1, r1, #31
 8000586:	2aff      	cmp	r2, #255	@ 0xff
 8000588:	d019      	beq.n	80005be <__gesf2+0x4e>
 800058a:	28ff      	cmp	r0, #255	@ 0xff
 800058c:	d00b      	beq.n	80005a6 <__gesf2+0x36>
 800058e:	2a00      	cmp	r2, #0
 8000590:	d11e      	bne.n	80005d0 <__gesf2+0x60>
 8000592:	2800      	cmp	r0, #0
 8000594:	d10b      	bne.n	80005ae <__gesf2+0x3e>
 8000596:	2d00      	cmp	r5, #0
 8000598:	d027      	beq.n	80005ea <__gesf2+0x7a>
 800059a:	2c00      	cmp	r4, #0
 800059c:	d134      	bne.n	8000608 <__gesf2+0x98>
 800059e:	2900      	cmp	r1, #0
 80005a0:	d02f      	beq.n	8000602 <__gesf2+0x92>
 80005a2:	0008      	movs	r0, r1
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	2d00      	cmp	r5, #0
 80005a8:	d128      	bne.n	80005fc <__gesf2+0x8c>
 80005aa:	2a00      	cmp	r2, #0
 80005ac:	d101      	bne.n	80005b2 <__gesf2+0x42>
 80005ae:	2c00      	cmp	r4, #0
 80005b0:	d0f5      	beq.n	800059e <__gesf2+0x2e>
 80005b2:	428b      	cmp	r3, r1
 80005b4:	d107      	bne.n	80005c6 <__gesf2+0x56>
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d023      	beq.n	8000602 <__gesf2+0x92>
 80005ba:	0018      	movs	r0, r3
 80005bc:	e7f2      	b.n	80005a4 <__gesf2+0x34>
 80005be:	2c00      	cmp	r4, #0
 80005c0:	d11c      	bne.n	80005fc <__gesf2+0x8c>
 80005c2:	28ff      	cmp	r0, #255	@ 0xff
 80005c4:	d014      	beq.n	80005f0 <__gesf2+0x80>
 80005c6:	1e58      	subs	r0, r3, #1
 80005c8:	2302      	movs	r3, #2
 80005ca:	4018      	ands	r0, r3
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7e9      	b.n	80005a4 <__gesf2+0x34>
 80005d0:	2800      	cmp	r0, #0
 80005d2:	d0f8      	beq.n	80005c6 <__gesf2+0x56>
 80005d4:	428b      	cmp	r3, r1
 80005d6:	d1f6      	bne.n	80005c6 <__gesf2+0x56>
 80005d8:	4282      	cmp	r2, r0
 80005da:	dcf4      	bgt.n	80005c6 <__gesf2+0x56>
 80005dc:	dbeb      	blt.n	80005b6 <__gesf2+0x46>
 80005de:	42ac      	cmp	r4, r5
 80005e0:	d8f1      	bhi.n	80005c6 <__gesf2+0x56>
 80005e2:	2000      	movs	r0, #0
 80005e4:	42ac      	cmp	r4, r5
 80005e6:	d2dd      	bcs.n	80005a4 <__gesf2+0x34>
 80005e8:	e7e5      	b.n	80005b6 <__gesf2+0x46>
 80005ea:	2c00      	cmp	r4, #0
 80005ec:	d0da      	beq.n	80005a4 <__gesf2+0x34>
 80005ee:	e7ea      	b.n	80005c6 <__gesf2+0x56>
 80005f0:	2d00      	cmp	r5, #0
 80005f2:	d103      	bne.n	80005fc <__gesf2+0x8c>
 80005f4:	428b      	cmp	r3, r1
 80005f6:	d1e6      	bne.n	80005c6 <__gesf2+0x56>
 80005f8:	2000      	movs	r0, #0
 80005fa:	e7d3      	b.n	80005a4 <__gesf2+0x34>
 80005fc:	2002      	movs	r0, #2
 80005fe:	4240      	negs	r0, r0
 8000600:	e7d0      	b.n	80005a4 <__gesf2+0x34>
 8000602:	2001      	movs	r0, #1
 8000604:	4240      	negs	r0, r0
 8000606:	e7cd      	b.n	80005a4 <__gesf2+0x34>
 8000608:	428b      	cmp	r3, r1
 800060a:	d0e8      	beq.n	80005de <__gesf2+0x6e>
 800060c:	e7db      	b.n	80005c6 <__gesf2+0x56>
 800060e:	46c0      	nop			@ (mov r8, r8)

08000610 <__lesf2>:
 8000610:	b530      	push	{r4, r5, lr}
 8000612:	0042      	lsls	r2, r0, #1
 8000614:	0244      	lsls	r4, r0, #9
 8000616:	024d      	lsls	r5, r1, #9
 8000618:	0fc3      	lsrs	r3, r0, #31
 800061a:	0048      	lsls	r0, r1, #1
 800061c:	0a64      	lsrs	r4, r4, #9
 800061e:	0e12      	lsrs	r2, r2, #24
 8000620:	0a6d      	lsrs	r5, r5, #9
 8000622:	0e00      	lsrs	r0, r0, #24
 8000624:	0fc9      	lsrs	r1, r1, #31
 8000626:	2aff      	cmp	r2, #255	@ 0xff
 8000628:	d01a      	beq.n	8000660 <__lesf2+0x50>
 800062a:	28ff      	cmp	r0, #255	@ 0xff
 800062c:	d00e      	beq.n	800064c <__lesf2+0x3c>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d11e      	bne.n	8000670 <__lesf2+0x60>
 8000632:	2800      	cmp	r0, #0
 8000634:	d10e      	bne.n	8000654 <__lesf2+0x44>
 8000636:	2d00      	cmp	r5, #0
 8000638:	d02a      	beq.n	8000690 <__lesf2+0x80>
 800063a:	2c00      	cmp	r4, #0
 800063c:	d00c      	beq.n	8000658 <__lesf2+0x48>
 800063e:	428b      	cmp	r3, r1
 8000640:	d01d      	beq.n	800067e <__lesf2+0x6e>
 8000642:	1e58      	subs	r0, r3, #1
 8000644:	2302      	movs	r3, #2
 8000646:	4018      	ands	r0, r3
 8000648:	3801      	subs	r0, #1
 800064a:	e010      	b.n	800066e <__lesf2+0x5e>
 800064c:	2d00      	cmp	r5, #0
 800064e:	d10d      	bne.n	800066c <__lesf2+0x5c>
 8000650:	2a00      	cmp	r2, #0
 8000652:	d120      	bne.n	8000696 <__lesf2+0x86>
 8000654:	2c00      	cmp	r4, #0
 8000656:	d11e      	bne.n	8000696 <__lesf2+0x86>
 8000658:	2900      	cmp	r1, #0
 800065a:	d023      	beq.n	80006a4 <__lesf2+0x94>
 800065c:	0008      	movs	r0, r1
 800065e:	e006      	b.n	800066e <__lesf2+0x5e>
 8000660:	2c00      	cmp	r4, #0
 8000662:	d103      	bne.n	800066c <__lesf2+0x5c>
 8000664:	28ff      	cmp	r0, #255	@ 0xff
 8000666:	d1ec      	bne.n	8000642 <__lesf2+0x32>
 8000668:	2d00      	cmp	r5, #0
 800066a:	d017      	beq.n	800069c <__lesf2+0x8c>
 800066c:	2002      	movs	r0, #2
 800066e:	bd30      	pop	{r4, r5, pc}
 8000670:	2800      	cmp	r0, #0
 8000672:	d0e6      	beq.n	8000642 <__lesf2+0x32>
 8000674:	428b      	cmp	r3, r1
 8000676:	d1e4      	bne.n	8000642 <__lesf2+0x32>
 8000678:	4282      	cmp	r2, r0
 800067a:	dce2      	bgt.n	8000642 <__lesf2+0x32>
 800067c:	db04      	blt.n	8000688 <__lesf2+0x78>
 800067e:	42ac      	cmp	r4, r5
 8000680:	d8df      	bhi.n	8000642 <__lesf2+0x32>
 8000682:	2000      	movs	r0, #0
 8000684:	42ac      	cmp	r4, r5
 8000686:	d2f2      	bcs.n	800066e <__lesf2+0x5e>
 8000688:	2b00      	cmp	r3, #0
 800068a:	d00b      	beq.n	80006a4 <__lesf2+0x94>
 800068c:	0018      	movs	r0, r3
 800068e:	e7ee      	b.n	800066e <__lesf2+0x5e>
 8000690:	2c00      	cmp	r4, #0
 8000692:	d0ec      	beq.n	800066e <__lesf2+0x5e>
 8000694:	e7d5      	b.n	8000642 <__lesf2+0x32>
 8000696:	428b      	cmp	r3, r1
 8000698:	d1d3      	bne.n	8000642 <__lesf2+0x32>
 800069a:	e7f5      	b.n	8000688 <__lesf2+0x78>
 800069c:	2000      	movs	r0, #0
 800069e:	428b      	cmp	r3, r1
 80006a0:	d0e5      	beq.n	800066e <__lesf2+0x5e>
 80006a2:	e7ce      	b.n	8000642 <__lesf2+0x32>
 80006a4:	2001      	movs	r0, #1
 80006a6:	4240      	negs	r0, r0
 80006a8:	e7e1      	b.n	800066e <__lesf2+0x5e>
 80006aa:	46c0      	nop			@ (mov r8, r8)

080006ac <__aeabi_fsub>:
 80006ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80006ae:	4647      	mov	r7, r8
 80006b0:	46ce      	mov	lr, r9
 80006b2:	024e      	lsls	r6, r1, #9
 80006b4:	0243      	lsls	r3, r0, #9
 80006b6:	0045      	lsls	r5, r0, #1
 80006b8:	0a72      	lsrs	r2, r6, #9
 80006ba:	0fc4      	lsrs	r4, r0, #31
 80006bc:	0048      	lsls	r0, r1, #1
 80006be:	b580      	push	{r7, lr}
 80006c0:	4694      	mov	ip, r2
 80006c2:	0a5f      	lsrs	r7, r3, #9
 80006c4:	0e2d      	lsrs	r5, r5, #24
 80006c6:	099b      	lsrs	r3, r3, #6
 80006c8:	0e00      	lsrs	r0, r0, #24
 80006ca:	0fc9      	lsrs	r1, r1, #31
 80006cc:	09b6      	lsrs	r6, r6, #6
 80006ce:	28ff      	cmp	r0, #255	@ 0xff
 80006d0:	d024      	beq.n	800071c <__aeabi_fsub+0x70>
 80006d2:	2201      	movs	r2, #1
 80006d4:	4051      	eors	r1, r2
 80006d6:	1a2a      	subs	r2, r5, r0
 80006d8:	428c      	cmp	r4, r1
 80006da:	d00f      	beq.n	80006fc <__aeabi_fsub+0x50>
 80006dc:	2a00      	cmp	r2, #0
 80006de:	dc00      	bgt.n	80006e2 <__aeabi_fsub+0x36>
 80006e0:	e16a      	b.n	80009b8 <__aeabi_fsub+0x30c>
 80006e2:	2800      	cmp	r0, #0
 80006e4:	d135      	bne.n	8000752 <__aeabi_fsub+0xa6>
 80006e6:	2e00      	cmp	r6, #0
 80006e8:	d100      	bne.n	80006ec <__aeabi_fsub+0x40>
 80006ea:	e0a2      	b.n	8000832 <__aeabi_fsub+0x186>
 80006ec:	1e51      	subs	r1, r2, #1
 80006ee:	2a01      	cmp	r2, #1
 80006f0:	d100      	bne.n	80006f4 <__aeabi_fsub+0x48>
 80006f2:	e124      	b.n	800093e <__aeabi_fsub+0x292>
 80006f4:	2aff      	cmp	r2, #255	@ 0xff
 80006f6:	d021      	beq.n	800073c <__aeabi_fsub+0x90>
 80006f8:	000a      	movs	r2, r1
 80006fa:	e02f      	b.n	800075c <__aeabi_fsub+0xb0>
 80006fc:	2a00      	cmp	r2, #0
 80006fe:	dc00      	bgt.n	8000702 <__aeabi_fsub+0x56>
 8000700:	e167      	b.n	80009d2 <__aeabi_fsub+0x326>
 8000702:	2800      	cmp	r0, #0
 8000704:	d05e      	beq.n	80007c4 <__aeabi_fsub+0x118>
 8000706:	2dff      	cmp	r5, #255	@ 0xff
 8000708:	d018      	beq.n	800073c <__aeabi_fsub+0x90>
 800070a:	2180      	movs	r1, #128	@ 0x80
 800070c:	04c9      	lsls	r1, r1, #19
 800070e:	430e      	orrs	r6, r1
 8000710:	2a1b      	cmp	r2, #27
 8000712:	dc00      	bgt.n	8000716 <__aeabi_fsub+0x6a>
 8000714:	e076      	b.n	8000804 <__aeabi_fsub+0x158>
 8000716:	002a      	movs	r2, r5
 8000718:	3301      	adds	r3, #1
 800071a:	e032      	b.n	8000782 <__aeabi_fsub+0xd6>
 800071c:	002a      	movs	r2, r5
 800071e:	3aff      	subs	r2, #255	@ 0xff
 8000720:	4691      	mov	r9, r2
 8000722:	2e00      	cmp	r6, #0
 8000724:	d042      	beq.n	80007ac <__aeabi_fsub+0x100>
 8000726:	428c      	cmp	r4, r1
 8000728:	d055      	beq.n	80007d6 <__aeabi_fsub+0x12a>
 800072a:	464a      	mov	r2, r9
 800072c:	2a00      	cmp	r2, #0
 800072e:	d100      	bne.n	8000732 <__aeabi_fsub+0x86>
 8000730:	e09c      	b.n	800086c <__aeabi_fsub+0x1c0>
 8000732:	2d00      	cmp	r5, #0
 8000734:	d100      	bne.n	8000738 <__aeabi_fsub+0x8c>
 8000736:	e077      	b.n	8000828 <__aeabi_fsub+0x17c>
 8000738:	000c      	movs	r4, r1
 800073a:	0033      	movs	r3, r6
 800073c:	08db      	lsrs	r3, r3, #3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d100      	bne.n	8000744 <__aeabi_fsub+0x98>
 8000742:	e06e      	b.n	8000822 <__aeabi_fsub+0x176>
 8000744:	2280      	movs	r2, #128	@ 0x80
 8000746:	03d2      	lsls	r2, r2, #15
 8000748:	4313      	orrs	r3, r2
 800074a:	025b      	lsls	r3, r3, #9
 800074c:	20ff      	movs	r0, #255	@ 0xff
 800074e:	0a5b      	lsrs	r3, r3, #9
 8000750:	e024      	b.n	800079c <__aeabi_fsub+0xf0>
 8000752:	2dff      	cmp	r5, #255	@ 0xff
 8000754:	d0f2      	beq.n	800073c <__aeabi_fsub+0x90>
 8000756:	2180      	movs	r1, #128	@ 0x80
 8000758:	04c9      	lsls	r1, r1, #19
 800075a:	430e      	orrs	r6, r1
 800075c:	2101      	movs	r1, #1
 800075e:	2a1b      	cmp	r2, #27
 8000760:	dc08      	bgt.n	8000774 <__aeabi_fsub+0xc8>
 8000762:	0031      	movs	r1, r6
 8000764:	2020      	movs	r0, #32
 8000766:	40d1      	lsrs	r1, r2
 8000768:	1a82      	subs	r2, r0, r2
 800076a:	4096      	lsls	r6, r2
 800076c:	0032      	movs	r2, r6
 800076e:	1e50      	subs	r0, r2, #1
 8000770:	4182      	sbcs	r2, r0
 8000772:	4311      	orrs	r1, r2
 8000774:	1a5b      	subs	r3, r3, r1
 8000776:	015a      	lsls	r2, r3, #5
 8000778:	d460      	bmi.n	800083c <__aeabi_fsub+0x190>
 800077a:	2107      	movs	r1, #7
 800077c:	002a      	movs	r2, r5
 800077e:	4019      	ands	r1, r3
 8000780:	d057      	beq.n	8000832 <__aeabi_fsub+0x186>
 8000782:	210f      	movs	r1, #15
 8000784:	4019      	ands	r1, r3
 8000786:	2904      	cmp	r1, #4
 8000788:	d000      	beq.n	800078c <__aeabi_fsub+0xe0>
 800078a:	3304      	adds	r3, #4
 800078c:	0159      	lsls	r1, r3, #5
 800078e:	d550      	bpl.n	8000832 <__aeabi_fsub+0x186>
 8000790:	1c50      	adds	r0, r2, #1
 8000792:	2afe      	cmp	r2, #254	@ 0xfe
 8000794:	d045      	beq.n	8000822 <__aeabi_fsub+0x176>
 8000796:	019b      	lsls	r3, r3, #6
 8000798:	b2c0      	uxtb	r0, r0
 800079a:	0a5b      	lsrs	r3, r3, #9
 800079c:	05c0      	lsls	r0, r0, #23
 800079e:	4318      	orrs	r0, r3
 80007a0:	07e4      	lsls	r4, r4, #31
 80007a2:	4320      	orrs	r0, r4
 80007a4:	bcc0      	pop	{r6, r7}
 80007a6:	46b9      	mov	r9, r7
 80007a8:	46b0      	mov	r8, r6
 80007aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007ac:	2201      	movs	r2, #1
 80007ae:	4051      	eors	r1, r2
 80007b0:	428c      	cmp	r4, r1
 80007b2:	d1ba      	bne.n	800072a <__aeabi_fsub+0x7e>
 80007b4:	464a      	mov	r2, r9
 80007b6:	2a00      	cmp	r2, #0
 80007b8:	d010      	beq.n	80007dc <__aeabi_fsub+0x130>
 80007ba:	2d00      	cmp	r5, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_fsub+0x114>
 80007be:	e098      	b.n	80008f2 <__aeabi_fsub+0x246>
 80007c0:	2300      	movs	r3, #0
 80007c2:	e7bb      	b.n	800073c <__aeabi_fsub+0x90>
 80007c4:	2e00      	cmp	r6, #0
 80007c6:	d034      	beq.n	8000832 <__aeabi_fsub+0x186>
 80007c8:	1e51      	subs	r1, r2, #1
 80007ca:	2a01      	cmp	r2, #1
 80007cc:	d06e      	beq.n	80008ac <__aeabi_fsub+0x200>
 80007ce:	2aff      	cmp	r2, #255	@ 0xff
 80007d0:	d0b4      	beq.n	800073c <__aeabi_fsub+0x90>
 80007d2:	000a      	movs	r2, r1
 80007d4:	e79c      	b.n	8000710 <__aeabi_fsub+0x64>
 80007d6:	2a00      	cmp	r2, #0
 80007d8:	d000      	beq.n	80007dc <__aeabi_fsub+0x130>
 80007da:	e088      	b.n	80008ee <__aeabi_fsub+0x242>
 80007dc:	20fe      	movs	r0, #254	@ 0xfe
 80007de:	1c6a      	adds	r2, r5, #1
 80007e0:	4210      	tst	r0, r2
 80007e2:	d000      	beq.n	80007e6 <__aeabi_fsub+0x13a>
 80007e4:	e092      	b.n	800090c <__aeabi_fsub+0x260>
 80007e6:	2d00      	cmp	r5, #0
 80007e8:	d000      	beq.n	80007ec <__aeabi_fsub+0x140>
 80007ea:	e0a4      	b.n	8000936 <__aeabi_fsub+0x28a>
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d100      	bne.n	80007f2 <__aeabi_fsub+0x146>
 80007f0:	e0cb      	b.n	800098a <__aeabi_fsub+0x2de>
 80007f2:	2e00      	cmp	r6, #0
 80007f4:	d000      	beq.n	80007f8 <__aeabi_fsub+0x14c>
 80007f6:	e0ca      	b.n	800098e <__aeabi_fsub+0x2e2>
 80007f8:	2200      	movs	r2, #0
 80007fa:	08db      	lsrs	r3, r3, #3
 80007fc:	025b      	lsls	r3, r3, #9
 80007fe:	0a5b      	lsrs	r3, r3, #9
 8000800:	b2d0      	uxtb	r0, r2
 8000802:	e7cb      	b.n	800079c <__aeabi_fsub+0xf0>
 8000804:	0031      	movs	r1, r6
 8000806:	2020      	movs	r0, #32
 8000808:	40d1      	lsrs	r1, r2
 800080a:	1a82      	subs	r2, r0, r2
 800080c:	4096      	lsls	r6, r2
 800080e:	0032      	movs	r2, r6
 8000810:	1e50      	subs	r0, r2, #1
 8000812:	4182      	sbcs	r2, r0
 8000814:	430a      	orrs	r2, r1
 8000816:	189b      	adds	r3, r3, r2
 8000818:	015a      	lsls	r2, r3, #5
 800081a:	d5ae      	bpl.n	800077a <__aeabi_fsub+0xce>
 800081c:	1c6a      	adds	r2, r5, #1
 800081e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000820:	d14a      	bne.n	80008b8 <__aeabi_fsub+0x20c>
 8000822:	20ff      	movs	r0, #255	@ 0xff
 8000824:	2300      	movs	r3, #0
 8000826:	e7b9      	b.n	800079c <__aeabi_fsub+0xf0>
 8000828:	22ff      	movs	r2, #255	@ 0xff
 800082a:	2b00      	cmp	r3, #0
 800082c:	d14b      	bne.n	80008c6 <__aeabi_fsub+0x21a>
 800082e:	000c      	movs	r4, r1
 8000830:	0033      	movs	r3, r6
 8000832:	08db      	lsrs	r3, r3, #3
 8000834:	2aff      	cmp	r2, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fsub+0x18e>
 8000838:	e781      	b.n	800073e <__aeabi_fsub+0x92>
 800083a:	e7df      	b.n	80007fc <__aeabi_fsub+0x150>
 800083c:	019f      	lsls	r7, r3, #6
 800083e:	09bf      	lsrs	r7, r7, #6
 8000840:	0038      	movs	r0, r7
 8000842:	f001 fcd9 	bl	80021f8 <__clzsi2>
 8000846:	3805      	subs	r0, #5
 8000848:	4087      	lsls	r7, r0
 800084a:	4285      	cmp	r5, r0
 800084c:	dc21      	bgt.n	8000892 <__aeabi_fsub+0x1e6>
 800084e:	003b      	movs	r3, r7
 8000850:	2120      	movs	r1, #32
 8000852:	1b42      	subs	r2, r0, r5
 8000854:	3201      	adds	r2, #1
 8000856:	40d3      	lsrs	r3, r2
 8000858:	1a8a      	subs	r2, r1, r2
 800085a:	4097      	lsls	r7, r2
 800085c:	1e7a      	subs	r2, r7, #1
 800085e:	4197      	sbcs	r7, r2
 8000860:	2200      	movs	r2, #0
 8000862:	433b      	orrs	r3, r7
 8000864:	0759      	lsls	r1, r3, #29
 8000866:	d000      	beq.n	800086a <__aeabi_fsub+0x1be>
 8000868:	e78b      	b.n	8000782 <__aeabi_fsub+0xd6>
 800086a:	e78f      	b.n	800078c <__aeabi_fsub+0xe0>
 800086c:	20fe      	movs	r0, #254	@ 0xfe
 800086e:	1c6a      	adds	r2, r5, #1
 8000870:	4210      	tst	r0, r2
 8000872:	d112      	bne.n	800089a <__aeabi_fsub+0x1ee>
 8000874:	2d00      	cmp	r5, #0
 8000876:	d152      	bne.n	800091e <__aeabi_fsub+0x272>
 8000878:	2b00      	cmp	r3, #0
 800087a:	d07c      	beq.n	8000976 <__aeabi_fsub+0x2ca>
 800087c:	2e00      	cmp	r6, #0
 800087e:	d0bb      	beq.n	80007f8 <__aeabi_fsub+0x14c>
 8000880:	1b9a      	subs	r2, r3, r6
 8000882:	0150      	lsls	r0, r2, #5
 8000884:	d400      	bmi.n	8000888 <__aeabi_fsub+0x1dc>
 8000886:	e08b      	b.n	80009a0 <__aeabi_fsub+0x2f4>
 8000888:	2401      	movs	r4, #1
 800088a:	2200      	movs	r2, #0
 800088c:	1af3      	subs	r3, r6, r3
 800088e:	400c      	ands	r4, r1
 8000890:	e7e8      	b.n	8000864 <__aeabi_fsub+0x1b8>
 8000892:	4b56      	ldr	r3, [pc, #344]	@ (80009ec <__aeabi_fsub+0x340>)
 8000894:	1a2a      	subs	r2, r5, r0
 8000896:	403b      	ands	r3, r7
 8000898:	e7e4      	b.n	8000864 <__aeabi_fsub+0x1b8>
 800089a:	1b9f      	subs	r7, r3, r6
 800089c:	017a      	lsls	r2, r7, #5
 800089e:	d446      	bmi.n	800092e <__aeabi_fsub+0x282>
 80008a0:	2f00      	cmp	r7, #0
 80008a2:	d1cd      	bne.n	8000840 <__aeabi_fsub+0x194>
 80008a4:	2400      	movs	r4, #0
 80008a6:	2000      	movs	r0, #0
 80008a8:	2300      	movs	r3, #0
 80008aa:	e777      	b.n	800079c <__aeabi_fsub+0xf0>
 80008ac:	199b      	adds	r3, r3, r6
 80008ae:	2501      	movs	r5, #1
 80008b0:	3201      	adds	r2, #1
 80008b2:	0159      	lsls	r1, r3, #5
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_fsub+0x20c>
 80008b6:	e760      	b.n	800077a <__aeabi_fsub+0xce>
 80008b8:	2101      	movs	r1, #1
 80008ba:	484d      	ldr	r0, [pc, #308]	@ (80009f0 <__aeabi_fsub+0x344>)
 80008bc:	4019      	ands	r1, r3
 80008be:	085b      	lsrs	r3, r3, #1
 80008c0:	4003      	ands	r3, r0
 80008c2:	430b      	orrs	r3, r1
 80008c4:	e7ce      	b.n	8000864 <__aeabi_fsub+0x1b8>
 80008c6:	1e57      	subs	r7, r2, #1
 80008c8:	2a01      	cmp	r2, #1
 80008ca:	d05a      	beq.n	8000982 <__aeabi_fsub+0x2d6>
 80008cc:	000c      	movs	r4, r1
 80008ce:	2aff      	cmp	r2, #255	@ 0xff
 80008d0:	d033      	beq.n	800093a <__aeabi_fsub+0x28e>
 80008d2:	2201      	movs	r2, #1
 80008d4:	2f1b      	cmp	r7, #27
 80008d6:	dc07      	bgt.n	80008e8 <__aeabi_fsub+0x23c>
 80008d8:	2120      	movs	r1, #32
 80008da:	1bc9      	subs	r1, r1, r7
 80008dc:	001a      	movs	r2, r3
 80008de:	408b      	lsls	r3, r1
 80008e0:	40fa      	lsrs	r2, r7
 80008e2:	1e59      	subs	r1, r3, #1
 80008e4:	418b      	sbcs	r3, r1
 80008e6:	431a      	orrs	r2, r3
 80008e8:	0005      	movs	r5, r0
 80008ea:	1ab3      	subs	r3, r6, r2
 80008ec:	e743      	b.n	8000776 <__aeabi_fsub+0xca>
 80008ee:	2d00      	cmp	r5, #0
 80008f0:	d123      	bne.n	800093a <__aeabi_fsub+0x28e>
 80008f2:	22ff      	movs	r2, #255	@ 0xff
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d09b      	beq.n	8000830 <__aeabi_fsub+0x184>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d0d6      	beq.n	80008ac <__aeabi_fsub+0x200>
 80008fe:	2aff      	cmp	r2, #255	@ 0xff
 8000900:	d01b      	beq.n	800093a <__aeabi_fsub+0x28e>
 8000902:	291b      	cmp	r1, #27
 8000904:	dd2c      	ble.n	8000960 <__aeabi_fsub+0x2b4>
 8000906:	0002      	movs	r2, r0
 8000908:	1c73      	adds	r3, r6, #1
 800090a:	e73a      	b.n	8000782 <__aeabi_fsub+0xd6>
 800090c:	2aff      	cmp	r2, #255	@ 0xff
 800090e:	d088      	beq.n	8000822 <__aeabi_fsub+0x176>
 8000910:	199b      	adds	r3, r3, r6
 8000912:	085b      	lsrs	r3, r3, #1
 8000914:	0759      	lsls	r1, r3, #29
 8000916:	d000      	beq.n	800091a <__aeabi_fsub+0x26e>
 8000918:	e733      	b.n	8000782 <__aeabi_fsub+0xd6>
 800091a:	08db      	lsrs	r3, r3, #3
 800091c:	e76e      	b.n	80007fc <__aeabi_fsub+0x150>
 800091e:	2b00      	cmp	r3, #0
 8000920:	d110      	bne.n	8000944 <__aeabi_fsub+0x298>
 8000922:	2e00      	cmp	r6, #0
 8000924:	d043      	beq.n	80009ae <__aeabi_fsub+0x302>
 8000926:	2401      	movs	r4, #1
 8000928:	0033      	movs	r3, r6
 800092a:	400c      	ands	r4, r1
 800092c:	e706      	b.n	800073c <__aeabi_fsub+0x90>
 800092e:	2401      	movs	r4, #1
 8000930:	1af7      	subs	r7, r6, r3
 8000932:	400c      	ands	r4, r1
 8000934:	e784      	b.n	8000840 <__aeabi_fsub+0x194>
 8000936:	2b00      	cmp	r3, #0
 8000938:	d104      	bne.n	8000944 <__aeabi_fsub+0x298>
 800093a:	0033      	movs	r3, r6
 800093c:	e6fe      	b.n	800073c <__aeabi_fsub+0x90>
 800093e:	2501      	movs	r5, #1
 8000940:	1b9b      	subs	r3, r3, r6
 8000942:	e718      	b.n	8000776 <__aeabi_fsub+0xca>
 8000944:	2e00      	cmp	r6, #0
 8000946:	d100      	bne.n	800094a <__aeabi_fsub+0x29e>
 8000948:	e6f8      	b.n	800073c <__aeabi_fsub+0x90>
 800094a:	2280      	movs	r2, #128	@ 0x80
 800094c:	03d2      	lsls	r2, r2, #15
 800094e:	4297      	cmp	r7, r2
 8000950:	d304      	bcc.n	800095c <__aeabi_fsub+0x2b0>
 8000952:	4594      	cmp	ip, r2
 8000954:	d202      	bcs.n	800095c <__aeabi_fsub+0x2b0>
 8000956:	2401      	movs	r4, #1
 8000958:	0033      	movs	r3, r6
 800095a:	400c      	ands	r4, r1
 800095c:	08db      	lsrs	r3, r3, #3
 800095e:	e6f1      	b.n	8000744 <__aeabi_fsub+0x98>
 8000960:	001a      	movs	r2, r3
 8000962:	2520      	movs	r5, #32
 8000964:	40ca      	lsrs	r2, r1
 8000966:	1a69      	subs	r1, r5, r1
 8000968:	408b      	lsls	r3, r1
 800096a:	1e59      	subs	r1, r3, #1
 800096c:	418b      	sbcs	r3, r1
 800096e:	4313      	orrs	r3, r2
 8000970:	0005      	movs	r5, r0
 8000972:	199b      	adds	r3, r3, r6
 8000974:	e750      	b.n	8000818 <__aeabi_fsub+0x16c>
 8000976:	2e00      	cmp	r6, #0
 8000978:	d094      	beq.n	80008a4 <__aeabi_fsub+0x1f8>
 800097a:	2401      	movs	r4, #1
 800097c:	0033      	movs	r3, r6
 800097e:	400c      	ands	r4, r1
 8000980:	e73a      	b.n	80007f8 <__aeabi_fsub+0x14c>
 8000982:	000c      	movs	r4, r1
 8000984:	2501      	movs	r5, #1
 8000986:	1af3      	subs	r3, r6, r3
 8000988:	e6f5      	b.n	8000776 <__aeabi_fsub+0xca>
 800098a:	0033      	movs	r3, r6
 800098c:	e734      	b.n	80007f8 <__aeabi_fsub+0x14c>
 800098e:	199b      	adds	r3, r3, r6
 8000990:	2200      	movs	r2, #0
 8000992:	0159      	lsls	r1, r3, #5
 8000994:	d5c1      	bpl.n	800091a <__aeabi_fsub+0x26e>
 8000996:	4a15      	ldr	r2, [pc, #84]	@ (80009ec <__aeabi_fsub+0x340>)
 8000998:	4013      	ands	r3, r2
 800099a:	08db      	lsrs	r3, r3, #3
 800099c:	2201      	movs	r2, #1
 800099e:	e72d      	b.n	80007fc <__aeabi_fsub+0x150>
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fsub+0x2fa>
 80009a4:	e77e      	b.n	80008a4 <__aeabi_fsub+0x1f8>
 80009a6:	0013      	movs	r3, r2
 80009a8:	2200      	movs	r2, #0
 80009aa:	08db      	lsrs	r3, r3, #3
 80009ac:	e726      	b.n	80007fc <__aeabi_fsub+0x150>
 80009ae:	2380      	movs	r3, #128	@ 0x80
 80009b0:	2400      	movs	r4, #0
 80009b2:	20ff      	movs	r0, #255	@ 0xff
 80009b4:	03db      	lsls	r3, r3, #15
 80009b6:	e6f1      	b.n	800079c <__aeabi_fsub+0xf0>
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	d100      	bne.n	80009be <__aeabi_fsub+0x312>
 80009bc:	e756      	b.n	800086c <__aeabi_fsub+0x1c0>
 80009be:	1b47      	subs	r7, r0, r5
 80009c0:	003a      	movs	r2, r7
 80009c2:	2d00      	cmp	r5, #0
 80009c4:	d100      	bne.n	80009c8 <__aeabi_fsub+0x31c>
 80009c6:	e730      	b.n	800082a <__aeabi_fsub+0x17e>
 80009c8:	2280      	movs	r2, #128	@ 0x80
 80009ca:	04d2      	lsls	r2, r2, #19
 80009cc:	000c      	movs	r4, r1
 80009ce:	4313      	orrs	r3, r2
 80009d0:	e77f      	b.n	80008d2 <__aeabi_fsub+0x226>
 80009d2:	2a00      	cmp	r2, #0
 80009d4:	d100      	bne.n	80009d8 <__aeabi_fsub+0x32c>
 80009d6:	e701      	b.n	80007dc <__aeabi_fsub+0x130>
 80009d8:	1b41      	subs	r1, r0, r5
 80009da:	2d00      	cmp	r5, #0
 80009dc:	d101      	bne.n	80009e2 <__aeabi_fsub+0x336>
 80009de:	000a      	movs	r2, r1
 80009e0:	e788      	b.n	80008f4 <__aeabi_fsub+0x248>
 80009e2:	2280      	movs	r2, #128	@ 0x80
 80009e4:	04d2      	lsls	r2, r2, #19
 80009e6:	4313      	orrs	r3, r2
 80009e8:	e78b      	b.n	8000902 <__aeabi_fsub+0x256>
 80009ea:	46c0      	nop			@ (mov r8, r8)
 80009ec:	fbffffff 	.word	0xfbffffff
 80009f0:	7dffffff 	.word	0x7dffffff

080009f4 <__aeabi_ddiv>:
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	46de      	mov	lr, fp
 80009f8:	4645      	mov	r5, r8
 80009fa:	4657      	mov	r7, sl
 80009fc:	464e      	mov	r6, r9
 80009fe:	b5e0      	push	{r5, r6, r7, lr}
 8000a00:	b087      	sub	sp, #28
 8000a02:	9200      	str	r2, [sp, #0]
 8000a04:	9301      	str	r3, [sp, #4]
 8000a06:	030b      	lsls	r3, r1, #12
 8000a08:	0b1b      	lsrs	r3, r3, #12
 8000a0a:	469b      	mov	fp, r3
 8000a0c:	0fca      	lsrs	r2, r1, #31
 8000a0e:	004b      	lsls	r3, r1, #1
 8000a10:	0004      	movs	r4, r0
 8000a12:	4680      	mov	r8, r0
 8000a14:	0d5b      	lsrs	r3, r3, #21
 8000a16:	9202      	str	r2, [sp, #8]
 8000a18:	d100      	bne.n	8000a1c <__aeabi_ddiv+0x28>
 8000a1a:	e16a      	b.n	8000cf2 <__aeabi_ddiv+0x2fe>
 8000a1c:	4ad4      	ldr	r2, [pc, #848]	@ (8000d70 <__aeabi_ddiv+0x37c>)
 8000a1e:	4293      	cmp	r3, r2
 8000a20:	d100      	bne.n	8000a24 <__aeabi_ddiv+0x30>
 8000a22:	e18c      	b.n	8000d3e <__aeabi_ddiv+0x34a>
 8000a24:	4659      	mov	r1, fp
 8000a26:	0f42      	lsrs	r2, r0, #29
 8000a28:	00c9      	lsls	r1, r1, #3
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	2180      	movs	r1, #128	@ 0x80
 8000a2e:	0409      	lsls	r1, r1, #16
 8000a30:	4311      	orrs	r1, r2
 8000a32:	00c2      	lsls	r2, r0, #3
 8000a34:	4690      	mov	r8, r2
 8000a36:	4acf      	ldr	r2, [pc, #828]	@ (8000d74 <__aeabi_ddiv+0x380>)
 8000a38:	4689      	mov	r9, r1
 8000a3a:	4692      	mov	sl, r2
 8000a3c:	449a      	add	sl, r3
 8000a3e:	2300      	movs	r3, #0
 8000a40:	2400      	movs	r4, #0
 8000a42:	9303      	str	r3, [sp, #12]
 8000a44:	9e00      	ldr	r6, [sp, #0]
 8000a46:	9f01      	ldr	r7, [sp, #4]
 8000a48:	033b      	lsls	r3, r7, #12
 8000a4a:	0b1b      	lsrs	r3, r3, #12
 8000a4c:	469b      	mov	fp, r3
 8000a4e:	007b      	lsls	r3, r7, #1
 8000a50:	0030      	movs	r0, r6
 8000a52:	0d5b      	lsrs	r3, r3, #21
 8000a54:	0ffd      	lsrs	r5, r7, #31
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d100      	bne.n	8000a5c <__aeabi_ddiv+0x68>
 8000a5a:	e128      	b.n	8000cae <__aeabi_ddiv+0x2ba>
 8000a5c:	4ac4      	ldr	r2, [pc, #784]	@ (8000d70 <__aeabi_ddiv+0x37c>)
 8000a5e:	4293      	cmp	r3, r2
 8000a60:	d100      	bne.n	8000a64 <__aeabi_ddiv+0x70>
 8000a62:	e177      	b.n	8000d54 <__aeabi_ddiv+0x360>
 8000a64:	4659      	mov	r1, fp
 8000a66:	0f72      	lsrs	r2, r6, #29
 8000a68:	00c9      	lsls	r1, r1, #3
 8000a6a:	430a      	orrs	r2, r1
 8000a6c:	2180      	movs	r1, #128	@ 0x80
 8000a6e:	0409      	lsls	r1, r1, #16
 8000a70:	4311      	orrs	r1, r2
 8000a72:	468b      	mov	fp, r1
 8000a74:	49bf      	ldr	r1, [pc, #764]	@ (8000d74 <__aeabi_ddiv+0x380>)
 8000a76:	00f2      	lsls	r2, r6, #3
 8000a78:	468c      	mov	ip, r1
 8000a7a:	4651      	mov	r1, sl
 8000a7c:	4463      	add	r3, ip
 8000a7e:	1acb      	subs	r3, r1, r3
 8000a80:	469a      	mov	sl, r3
 8000a82:	2300      	movs	r3, #0
 8000a84:	9e02      	ldr	r6, [sp, #8]
 8000a86:	406e      	eors	r6, r5
 8000a88:	2c0f      	cmp	r4, #15
 8000a8a:	d827      	bhi.n	8000adc <__aeabi_ddiv+0xe8>
 8000a8c:	49ba      	ldr	r1, [pc, #744]	@ (8000d78 <__aeabi_ddiv+0x384>)
 8000a8e:	00a4      	lsls	r4, r4, #2
 8000a90:	5909      	ldr	r1, [r1, r4]
 8000a92:	468f      	mov	pc, r1
 8000a94:	46cb      	mov	fp, r9
 8000a96:	4642      	mov	r2, r8
 8000a98:	9e02      	ldr	r6, [sp, #8]
 8000a9a:	9b03      	ldr	r3, [sp, #12]
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d016      	beq.n	8000ace <__aeabi_ddiv+0xda>
 8000aa0:	2b03      	cmp	r3, #3
 8000aa2:	d100      	bne.n	8000aa6 <__aeabi_ddiv+0xb2>
 8000aa4:	e2a6      	b.n	8000ff4 <__aeabi_ddiv+0x600>
 8000aa6:	2b01      	cmp	r3, #1
 8000aa8:	d000      	beq.n	8000aac <__aeabi_ddiv+0xb8>
 8000aaa:	e0df      	b.n	8000c6c <__aeabi_ddiv+0x278>
 8000aac:	2200      	movs	r2, #0
 8000aae:	2300      	movs	r3, #0
 8000ab0:	2400      	movs	r4, #0
 8000ab2:	4690      	mov	r8, r2
 8000ab4:	051b      	lsls	r3, r3, #20
 8000ab6:	4323      	orrs	r3, r4
 8000ab8:	07f6      	lsls	r6, r6, #31
 8000aba:	4333      	orrs	r3, r6
 8000abc:	4640      	mov	r0, r8
 8000abe:	0019      	movs	r1, r3
 8000ac0:	b007      	add	sp, #28
 8000ac2:	bcf0      	pop	{r4, r5, r6, r7}
 8000ac4:	46bb      	mov	fp, r7
 8000ac6:	46b2      	mov	sl, r6
 8000ac8:	46a9      	mov	r9, r5
 8000aca:	46a0      	mov	r8, r4
 8000acc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ace:	2200      	movs	r2, #0
 8000ad0:	2400      	movs	r4, #0
 8000ad2:	4690      	mov	r8, r2
 8000ad4:	4ba6      	ldr	r3, [pc, #664]	@ (8000d70 <__aeabi_ddiv+0x37c>)
 8000ad6:	e7ed      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8000ad8:	002e      	movs	r6, r5
 8000ada:	e7df      	b.n	8000a9c <__aeabi_ddiv+0xa8>
 8000adc:	45cb      	cmp	fp, r9
 8000ade:	d200      	bcs.n	8000ae2 <__aeabi_ddiv+0xee>
 8000ae0:	e1d4      	b.n	8000e8c <__aeabi_ddiv+0x498>
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_ddiv+0xf2>
 8000ae4:	e1cf      	b.n	8000e86 <__aeabi_ddiv+0x492>
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	425b      	negs	r3, r3
 8000aea:	469c      	mov	ip, r3
 8000aec:	4644      	mov	r4, r8
 8000aee:	4648      	mov	r0, r9
 8000af0:	2700      	movs	r7, #0
 8000af2:	44e2      	add	sl, ip
 8000af4:	465b      	mov	r3, fp
 8000af6:	0e15      	lsrs	r5, r2, #24
 8000af8:	021b      	lsls	r3, r3, #8
 8000afa:	431d      	orrs	r5, r3
 8000afc:	0c19      	lsrs	r1, r3, #16
 8000afe:	042b      	lsls	r3, r5, #16
 8000b00:	0212      	lsls	r2, r2, #8
 8000b02:	9500      	str	r5, [sp, #0]
 8000b04:	0c1d      	lsrs	r5, r3, #16
 8000b06:	4691      	mov	r9, r2
 8000b08:	9102      	str	r1, [sp, #8]
 8000b0a:	9503      	str	r5, [sp, #12]
 8000b0c:	f7ff fb82 	bl	8000214 <__aeabi_uidivmod>
 8000b10:	0002      	movs	r2, r0
 8000b12:	436a      	muls	r2, r5
 8000b14:	040b      	lsls	r3, r1, #16
 8000b16:	0c21      	lsrs	r1, r4, #16
 8000b18:	4680      	mov	r8, r0
 8000b1a:	4319      	orrs	r1, r3
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	d909      	bls.n	8000b34 <__aeabi_ddiv+0x140>
 8000b20:	9d00      	ldr	r5, [sp, #0]
 8000b22:	2301      	movs	r3, #1
 8000b24:	46ac      	mov	ip, r5
 8000b26:	425b      	negs	r3, r3
 8000b28:	4461      	add	r1, ip
 8000b2a:	469c      	mov	ip, r3
 8000b2c:	44e0      	add	r8, ip
 8000b2e:	428d      	cmp	r5, r1
 8000b30:	d800      	bhi.n	8000b34 <__aeabi_ddiv+0x140>
 8000b32:	e1fb      	b.n	8000f2c <__aeabi_ddiv+0x538>
 8000b34:	1a88      	subs	r0, r1, r2
 8000b36:	9902      	ldr	r1, [sp, #8]
 8000b38:	f7ff fb6c 	bl	8000214 <__aeabi_uidivmod>
 8000b3c:	9a03      	ldr	r2, [sp, #12]
 8000b3e:	0424      	lsls	r4, r4, #16
 8000b40:	4342      	muls	r2, r0
 8000b42:	0409      	lsls	r1, r1, #16
 8000b44:	0c24      	lsrs	r4, r4, #16
 8000b46:	0003      	movs	r3, r0
 8000b48:	430c      	orrs	r4, r1
 8000b4a:	42a2      	cmp	r2, r4
 8000b4c:	d906      	bls.n	8000b5c <__aeabi_ddiv+0x168>
 8000b4e:	9900      	ldr	r1, [sp, #0]
 8000b50:	3b01      	subs	r3, #1
 8000b52:	468c      	mov	ip, r1
 8000b54:	4464      	add	r4, ip
 8000b56:	42a1      	cmp	r1, r4
 8000b58:	d800      	bhi.n	8000b5c <__aeabi_ddiv+0x168>
 8000b5a:	e1e1      	b.n	8000f20 <__aeabi_ddiv+0x52c>
 8000b5c:	1aa0      	subs	r0, r4, r2
 8000b5e:	4642      	mov	r2, r8
 8000b60:	0412      	lsls	r2, r2, #16
 8000b62:	431a      	orrs	r2, r3
 8000b64:	4693      	mov	fp, r2
 8000b66:	464b      	mov	r3, r9
 8000b68:	4659      	mov	r1, fp
 8000b6a:	0c1b      	lsrs	r3, r3, #16
 8000b6c:	001d      	movs	r5, r3
 8000b6e:	9304      	str	r3, [sp, #16]
 8000b70:	040b      	lsls	r3, r1, #16
 8000b72:	4649      	mov	r1, r9
 8000b74:	0409      	lsls	r1, r1, #16
 8000b76:	0c09      	lsrs	r1, r1, #16
 8000b78:	000c      	movs	r4, r1
 8000b7a:	0c1b      	lsrs	r3, r3, #16
 8000b7c:	435c      	muls	r4, r3
 8000b7e:	0c12      	lsrs	r2, r2, #16
 8000b80:	436b      	muls	r3, r5
 8000b82:	4688      	mov	r8, r1
 8000b84:	4351      	muls	r1, r2
 8000b86:	436a      	muls	r2, r5
 8000b88:	0c25      	lsrs	r5, r4, #16
 8000b8a:	46ac      	mov	ip, r5
 8000b8c:	185b      	adds	r3, r3, r1
 8000b8e:	4463      	add	r3, ip
 8000b90:	4299      	cmp	r1, r3
 8000b92:	d903      	bls.n	8000b9c <__aeabi_ddiv+0x1a8>
 8000b94:	2180      	movs	r1, #128	@ 0x80
 8000b96:	0249      	lsls	r1, r1, #9
 8000b98:	468c      	mov	ip, r1
 8000b9a:	4462      	add	r2, ip
 8000b9c:	0c19      	lsrs	r1, r3, #16
 8000b9e:	0424      	lsls	r4, r4, #16
 8000ba0:	041b      	lsls	r3, r3, #16
 8000ba2:	0c24      	lsrs	r4, r4, #16
 8000ba4:	188a      	adds	r2, r1, r2
 8000ba6:	191c      	adds	r4, r3, r4
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	d302      	bcc.n	8000bb2 <__aeabi_ddiv+0x1be>
 8000bac:	d116      	bne.n	8000bdc <__aeabi_ddiv+0x1e8>
 8000bae:	42a7      	cmp	r7, r4
 8000bb0:	d214      	bcs.n	8000bdc <__aeabi_ddiv+0x1e8>
 8000bb2:	465b      	mov	r3, fp
 8000bb4:	9d00      	ldr	r5, [sp, #0]
 8000bb6:	3b01      	subs	r3, #1
 8000bb8:	444f      	add	r7, r9
 8000bba:	9305      	str	r3, [sp, #20]
 8000bbc:	454f      	cmp	r7, r9
 8000bbe:	419b      	sbcs	r3, r3
 8000bc0:	46ac      	mov	ip, r5
 8000bc2:	425b      	negs	r3, r3
 8000bc4:	4463      	add	r3, ip
 8000bc6:	18c0      	adds	r0, r0, r3
 8000bc8:	4285      	cmp	r5, r0
 8000bca:	d300      	bcc.n	8000bce <__aeabi_ddiv+0x1da>
 8000bcc:	e1a1      	b.n	8000f12 <__aeabi_ddiv+0x51e>
 8000bce:	4282      	cmp	r2, r0
 8000bd0:	d900      	bls.n	8000bd4 <__aeabi_ddiv+0x1e0>
 8000bd2:	e1f6      	b.n	8000fc2 <__aeabi_ddiv+0x5ce>
 8000bd4:	d100      	bne.n	8000bd8 <__aeabi_ddiv+0x1e4>
 8000bd6:	e1f1      	b.n	8000fbc <__aeabi_ddiv+0x5c8>
 8000bd8:	9b05      	ldr	r3, [sp, #20]
 8000bda:	469b      	mov	fp, r3
 8000bdc:	1b3c      	subs	r4, r7, r4
 8000bde:	42a7      	cmp	r7, r4
 8000be0:	41bf      	sbcs	r7, r7
 8000be2:	9d00      	ldr	r5, [sp, #0]
 8000be4:	1a80      	subs	r0, r0, r2
 8000be6:	427f      	negs	r7, r7
 8000be8:	1bc0      	subs	r0, r0, r7
 8000bea:	4285      	cmp	r5, r0
 8000bec:	d100      	bne.n	8000bf0 <__aeabi_ddiv+0x1fc>
 8000bee:	e1d0      	b.n	8000f92 <__aeabi_ddiv+0x59e>
 8000bf0:	9902      	ldr	r1, [sp, #8]
 8000bf2:	f7ff fb0f 	bl	8000214 <__aeabi_uidivmod>
 8000bf6:	9a03      	ldr	r2, [sp, #12]
 8000bf8:	040b      	lsls	r3, r1, #16
 8000bfa:	4342      	muls	r2, r0
 8000bfc:	0c21      	lsrs	r1, r4, #16
 8000bfe:	0007      	movs	r7, r0
 8000c00:	4319      	orrs	r1, r3
 8000c02:	428a      	cmp	r2, r1
 8000c04:	d900      	bls.n	8000c08 <__aeabi_ddiv+0x214>
 8000c06:	e178      	b.n	8000efa <__aeabi_ddiv+0x506>
 8000c08:	1a88      	subs	r0, r1, r2
 8000c0a:	9902      	ldr	r1, [sp, #8]
 8000c0c:	f7ff fb02 	bl	8000214 <__aeabi_uidivmod>
 8000c10:	9a03      	ldr	r2, [sp, #12]
 8000c12:	0424      	lsls	r4, r4, #16
 8000c14:	4342      	muls	r2, r0
 8000c16:	0409      	lsls	r1, r1, #16
 8000c18:	0c24      	lsrs	r4, r4, #16
 8000c1a:	0003      	movs	r3, r0
 8000c1c:	430c      	orrs	r4, r1
 8000c1e:	42a2      	cmp	r2, r4
 8000c20:	d900      	bls.n	8000c24 <__aeabi_ddiv+0x230>
 8000c22:	e15d      	b.n	8000ee0 <__aeabi_ddiv+0x4ec>
 8000c24:	4641      	mov	r1, r8
 8000c26:	1aa4      	subs	r4, r4, r2
 8000c28:	043a      	lsls	r2, r7, #16
 8000c2a:	431a      	orrs	r2, r3
 8000c2c:	9d04      	ldr	r5, [sp, #16]
 8000c2e:	0413      	lsls	r3, r2, #16
 8000c30:	0c1b      	lsrs	r3, r3, #16
 8000c32:	4359      	muls	r1, r3
 8000c34:	4647      	mov	r7, r8
 8000c36:	436b      	muls	r3, r5
 8000c38:	469c      	mov	ip, r3
 8000c3a:	0c10      	lsrs	r0, r2, #16
 8000c3c:	4347      	muls	r7, r0
 8000c3e:	0c0b      	lsrs	r3, r1, #16
 8000c40:	44bc      	add	ip, r7
 8000c42:	4463      	add	r3, ip
 8000c44:	4368      	muls	r0, r5
 8000c46:	429f      	cmp	r7, r3
 8000c48:	d903      	bls.n	8000c52 <__aeabi_ddiv+0x25e>
 8000c4a:	2580      	movs	r5, #128	@ 0x80
 8000c4c:	026d      	lsls	r5, r5, #9
 8000c4e:	46ac      	mov	ip, r5
 8000c50:	4460      	add	r0, ip
 8000c52:	0c1f      	lsrs	r7, r3, #16
 8000c54:	0409      	lsls	r1, r1, #16
 8000c56:	041b      	lsls	r3, r3, #16
 8000c58:	0c09      	lsrs	r1, r1, #16
 8000c5a:	183f      	adds	r7, r7, r0
 8000c5c:	185b      	adds	r3, r3, r1
 8000c5e:	42bc      	cmp	r4, r7
 8000c60:	d200      	bcs.n	8000c64 <__aeabi_ddiv+0x270>
 8000c62:	e102      	b.n	8000e6a <__aeabi_ddiv+0x476>
 8000c64:	d100      	bne.n	8000c68 <__aeabi_ddiv+0x274>
 8000c66:	e0fd      	b.n	8000e64 <__aeabi_ddiv+0x470>
 8000c68:	2301      	movs	r3, #1
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	4b43      	ldr	r3, [pc, #268]	@ (8000d7c <__aeabi_ddiv+0x388>)
 8000c6e:	4453      	add	r3, sl
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	dc00      	bgt.n	8000c76 <__aeabi_ddiv+0x282>
 8000c74:	e0ae      	b.n	8000dd4 <__aeabi_ddiv+0x3e0>
 8000c76:	0751      	lsls	r1, r2, #29
 8000c78:	d000      	beq.n	8000c7c <__aeabi_ddiv+0x288>
 8000c7a:	e198      	b.n	8000fae <__aeabi_ddiv+0x5ba>
 8000c7c:	4659      	mov	r1, fp
 8000c7e:	01c9      	lsls	r1, r1, #7
 8000c80:	d506      	bpl.n	8000c90 <__aeabi_ddiv+0x29c>
 8000c82:	4659      	mov	r1, fp
 8000c84:	4b3e      	ldr	r3, [pc, #248]	@ (8000d80 <__aeabi_ddiv+0x38c>)
 8000c86:	4019      	ands	r1, r3
 8000c88:	2380      	movs	r3, #128	@ 0x80
 8000c8a:	468b      	mov	fp, r1
 8000c8c:	00db      	lsls	r3, r3, #3
 8000c8e:	4453      	add	r3, sl
 8000c90:	493c      	ldr	r1, [pc, #240]	@ (8000d84 <__aeabi_ddiv+0x390>)
 8000c92:	428b      	cmp	r3, r1
 8000c94:	dd00      	ble.n	8000c98 <__aeabi_ddiv+0x2a4>
 8000c96:	e71a      	b.n	8000ace <__aeabi_ddiv+0xda>
 8000c98:	4659      	mov	r1, fp
 8000c9a:	08d2      	lsrs	r2, r2, #3
 8000c9c:	0749      	lsls	r1, r1, #29
 8000c9e:	4311      	orrs	r1, r2
 8000ca0:	465a      	mov	r2, fp
 8000ca2:	055b      	lsls	r3, r3, #21
 8000ca4:	0254      	lsls	r4, r2, #9
 8000ca6:	4688      	mov	r8, r1
 8000ca8:	0b24      	lsrs	r4, r4, #12
 8000caa:	0d5b      	lsrs	r3, r3, #21
 8000cac:	e702      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8000cae:	465a      	mov	r2, fp
 8000cb0:	9b00      	ldr	r3, [sp, #0]
 8000cb2:	431a      	orrs	r2, r3
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_ddiv+0x2c4>
 8000cb6:	e07e      	b.n	8000db6 <__aeabi_ddiv+0x3c2>
 8000cb8:	465b      	mov	r3, fp
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d100      	bne.n	8000cc0 <__aeabi_ddiv+0x2cc>
 8000cbe:	e100      	b.n	8000ec2 <__aeabi_ddiv+0x4ce>
 8000cc0:	4658      	mov	r0, fp
 8000cc2:	f001 fa99 	bl	80021f8 <__clzsi2>
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	0003      	movs	r3, r0
 8000cca:	3a0b      	subs	r2, #11
 8000ccc:	271d      	movs	r7, #29
 8000cce:	9e00      	ldr	r6, [sp, #0]
 8000cd0:	1aba      	subs	r2, r7, r2
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	4658      	mov	r0, fp
 8000cd6:	40d6      	lsrs	r6, r2
 8000cd8:	3908      	subs	r1, #8
 8000cda:	4088      	lsls	r0, r1
 8000cdc:	0032      	movs	r2, r6
 8000cde:	4302      	orrs	r2, r0
 8000ce0:	4693      	mov	fp, r2
 8000ce2:	9a00      	ldr	r2, [sp, #0]
 8000ce4:	408a      	lsls	r2, r1
 8000ce6:	4928      	ldr	r1, [pc, #160]	@ (8000d88 <__aeabi_ddiv+0x394>)
 8000ce8:	4453      	add	r3, sl
 8000cea:	468a      	mov	sl, r1
 8000cec:	449a      	add	sl, r3
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e6c8      	b.n	8000a84 <__aeabi_ddiv+0x90>
 8000cf2:	465b      	mov	r3, fp
 8000cf4:	4303      	orrs	r3, r0
 8000cf6:	4699      	mov	r9, r3
 8000cf8:	d056      	beq.n	8000da8 <__aeabi_ddiv+0x3b4>
 8000cfa:	465b      	mov	r3, fp
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d100      	bne.n	8000d02 <__aeabi_ddiv+0x30e>
 8000d00:	e0cd      	b.n	8000e9e <__aeabi_ddiv+0x4aa>
 8000d02:	4658      	mov	r0, fp
 8000d04:	f001 fa78 	bl	80021f8 <__clzsi2>
 8000d08:	230b      	movs	r3, #11
 8000d0a:	425b      	negs	r3, r3
 8000d0c:	469c      	mov	ip, r3
 8000d0e:	0002      	movs	r2, r0
 8000d10:	4484      	add	ip, r0
 8000d12:	4666      	mov	r6, ip
 8000d14:	231d      	movs	r3, #29
 8000d16:	1b9b      	subs	r3, r3, r6
 8000d18:	0026      	movs	r6, r4
 8000d1a:	0011      	movs	r1, r2
 8000d1c:	4658      	mov	r0, fp
 8000d1e:	40de      	lsrs	r6, r3
 8000d20:	3908      	subs	r1, #8
 8000d22:	4088      	lsls	r0, r1
 8000d24:	0033      	movs	r3, r6
 8000d26:	4303      	orrs	r3, r0
 8000d28:	4699      	mov	r9, r3
 8000d2a:	0023      	movs	r3, r4
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	4698      	mov	r8, r3
 8000d30:	4b16      	ldr	r3, [pc, #88]	@ (8000d8c <__aeabi_ddiv+0x398>)
 8000d32:	2400      	movs	r4, #0
 8000d34:	1a9b      	subs	r3, r3, r2
 8000d36:	469a      	mov	sl, r3
 8000d38:	2300      	movs	r3, #0
 8000d3a:	9303      	str	r3, [sp, #12]
 8000d3c:	e682      	b.n	8000a44 <__aeabi_ddiv+0x50>
 8000d3e:	465a      	mov	r2, fp
 8000d40:	4302      	orrs	r2, r0
 8000d42:	4691      	mov	r9, r2
 8000d44:	d12a      	bne.n	8000d9c <__aeabi_ddiv+0x3a8>
 8000d46:	2200      	movs	r2, #0
 8000d48:	469a      	mov	sl, r3
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	4690      	mov	r8, r2
 8000d4e:	2408      	movs	r4, #8
 8000d50:	9303      	str	r3, [sp, #12]
 8000d52:	e677      	b.n	8000a44 <__aeabi_ddiv+0x50>
 8000d54:	465a      	mov	r2, fp
 8000d56:	9b00      	ldr	r3, [sp, #0]
 8000d58:	431a      	orrs	r2, r3
 8000d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000d90 <__aeabi_ddiv+0x39c>)
 8000d5c:	469c      	mov	ip, r3
 8000d5e:	44e2      	add	sl, ip
 8000d60:	2a00      	cmp	r2, #0
 8000d62:	d117      	bne.n	8000d94 <__aeabi_ddiv+0x3a0>
 8000d64:	2302      	movs	r3, #2
 8000d66:	431c      	orrs	r4, r3
 8000d68:	2300      	movs	r3, #0
 8000d6a:	469b      	mov	fp, r3
 8000d6c:	3302      	adds	r3, #2
 8000d6e:	e689      	b.n	8000a84 <__aeabi_ddiv+0x90>
 8000d70:	000007ff 	.word	0x000007ff
 8000d74:	fffffc01 	.word	0xfffffc01
 8000d78:	0800ebbc 	.word	0x0800ebbc
 8000d7c:	000003ff 	.word	0x000003ff
 8000d80:	feffffff 	.word	0xfeffffff
 8000d84:	000007fe 	.word	0x000007fe
 8000d88:	000003f3 	.word	0x000003f3
 8000d8c:	fffffc0d 	.word	0xfffffc0d
 8000d90:	fffff801 	.word	0xfffff801
 8000d94:	2303      	movs	r3, #3
 8000d96:	0032      	movs	r2, r6
 8000d98:	431c      	orrs	r4, r3
 8000d9a:	e673      	b.n	8000a84 <__aeabi_ddiv+0x90>
 8000d9c:	469a      	mov	sl, r3
 8000d9e:	2303      	movs	r3, #3
 8000da0:	46d9      	mov	r9, fp
 8000da2:	240c      	movs	r4, #12
 8000da4:	9303      	str	r3, [sp, #12]
 8000da6:	e64d      	b.n	8000a44 <__aeabi_ddiv+0x50>
 8000da8:	2300      	movs	r3, #0
 8000daa:	4698      	mov	r8, r3
 8000dac:	469a      	mov	sl, r3
 8000dae:	3301      	adds	r3, #1
 8000db0:	2404      	movs	r4, #4
 8000db2:	9303      	str	r3, [sp, #12]
 8000db4:	e646      	b.n	8000a44 <__aeabi_ddiv+0x50>
 8000db6:	2301      	movs	r3, #1
 8000db8:	431c      	orrs	r4, r3
 8000dba:	2300      	movs	r3, #0
 8000dbc:	469b      	mov	fp, r3
 8000dbe:	3301      	adds	r3, #1
 8000dc0:	e660      	b.n	8000a84 <__aeabi_ddiv+0x90>
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	2480      	movs	r4, #128	@ 0x80
 8000dc6:	4698      	mov	r8, r3
 8000dc8:	2600      	movs	r6, #0
 8000dca:	4b92      	ldr	r3, [pc, #584]	@ (8001014 <__aeabi_ddiv+0x620>)
 8000dcc:	0324      	lsls	r4, r4, #12
 8000dce:	e671      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	4252      	negs	r2, r2
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	2938      	cmp	r1, #56	@ 0x38
 8000dda:	dd00      	ble.n	8000dde <__aeabi_ddiv+0x3ea>
 8000ddc:	e666      	b.n	8000aac <__aeabi_ddiv+0xb8>
 8000dde:	291f      	cmp	r1, #31
 8000de0:	dc00      	bgt.n	8000de4 <__aeabi_ddiv+0x3f0>
 8000de2:	e0ab      	b.n	8000f3c <__aeabi_ddiv+0x548>
 8000de4:	201f      	movs	r0, #31
 8000de6:	4240      	negs	r0, r0
 8000de8:	1ac3      	subs	r3, r0, r3
 8000dea:	4658      	mov	r0, fp
 8000dec:	40d8      	lsrs	r0, r3
 8000dee:	0003      	movs	r3, r0
 8000df0:	2920      	cmp	r1, #32
 8000df2:	d004      	beq.n	8000dfe <__aeabi_ddiv+0x40a>
 8000df4:	4658      	mov	r0, fp
 8000df6:	4988      	ldr	r1, [pc, #544]	@ (8001018 <__aeabi_ddiv+0x624>)
 8000df8:	4451      	add	r1, sl
 8000dfa:	4088      	lsls	r0, r1
 8000dfc:	4302      	orrs	r2, r0
 8000dfe:	1e51      	subs	r1, r2, #1
 8000e00:	418a      	sbcs	r2, r1
 8000e02:	431a      	orrs	r2, r3
 8000e04:	2307      	movs	r3, #7
 8000e06:	0019      	movs	r1, r3
 8000e08:	2400      	movs	r4, #0
 8000e0a:	4011      	ands	r1, r2
 8000e0c:	4213      	tst	r3, r2
 8000e0e:	d00c      	beq.n	8000e2a <__aeabi_ddiv+0x436>
 8000e10:	230f      	movs	r3, #15
 8000e12:	4013      	ands	r3, r2
 8000e14:	2b04      	cmp	r3, #4
 8000e16:	d100      	bne.n	8000e1a <__aeabi_ddiv+0x426>
 8000e18:	e0f9      	b.n	800100e <__aeabi_ddiv+0x61a>
 8000e1a:	1d11      	adds	r1, r2, #4
 8000e1c:	4291      	cmp	r1, r2
 8000e1e:	419b      	sbcs	r3, r3
 8000e20:	000a      	movs	r2, r1
 8000e22:	425b      	negs	r3, r3
 8000e24:	0759      	lsls	r1, r3, #29
 8000e26:	025b      	lsls	r3, r3, #9
 8000e28:	0b1c      	lsrs	r4, r3, #12
 8000e2a:	08d2      	lsrs	r2, r2, #3
 8000e2c:	430a      	orrs	r2, r1
 8000e2e:	4690      	mov	r8, r2
 8000e30:	2300      	movs	r3, #0
 8000e32:	e63f      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8000e34:	2480      	movs	r4, #128	@ 0x80
 8000e36:	464b      	mov	r3, r9
 8000e38:	0324      	lsls	r4, r4, #12
 8000e3a:	4223      	tst	r3, r4
 8000e3c:	d009      	beq.n	8000e52 <__aeabi_ddiv+0x45e>
 8000e3e:	465b      	mov	r3, fp
 8000e40:	4223      	tst	r3, r4
 8000e42:	d106      	bne.n	8000e52 <__aeabi_ddiv+0x45e>
 8000e44:	431c      	orrs	r4, r3
 8000e46:	0324      	lsls	r4, r4, #12
 8000e48:	002e      	movs	r6, r5
 8000e4a:	4690      	mov	r8, r2
 8000e4c:	4b71      	ldr	r3, [pc, #452]	@ (8001014 <__aeabi_ddiv+0x620>)
 8000e4e:	0b24      	lsrs	r4, r4, #12
 8000e50:	e630      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8000e52:	2480      	movs	r4, #128	@ 0x80
 8000e54:	464b      	mov	r3, r9
 8000e56:	0324      	lsls	r4, r4, #12
 8000e58:	431c      	orrs	r4, r3
 8000e5a:	0324      	lsls	r4, r4, #12
 8000e5c:	9e02      	ldr	r6, [sp, #8]
 8000e5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001014 <__aeabi_ddiv+0x620>)
 8000e60:	0b24      	lsrs	r4, r4, #12
 8000e62:	e627      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d100      	bne.n	8000e6a <__aeabi_ddiv+0x476>
 8000e68:	e700      	b.n	8000c6c <__aeabi_ddiv+0x278>
 8000e6a:	9800      	ldr	r0, [sp, #0]
 8000e6c:	1e51      	subs	r1, r2, #1
 8000e6e:	4684      	mov	ip, r0
 8000e70:	4464      	add	r4, ip
 8000e72:	4284      	cmp	r4, r0
 8000e74:	d200      	bcs.n	8000e78 <__aeabi_ddiv+0x484>
 8000e76:	e084      	b.n	8000f82 <__aeabi_ddiv+0x58e>
 8000e78:	42bc      	cmp	r4, r7
 8000e7a:	d200      	bcs.n	8000e7e <__aeabi_ddiv+0x48a>
 8000e7c:	e0ae      	b.n	8000fdc <__aeabi_ddiv+0x5e8>
 8000e7e:	d100      	bne.n	8000e82 <__aeabi_ddiv+0x48e>
 8000e80:	e0c1      	b.n	8001006 <__aeabi_ddiv+0x612>
 8000e82:	000a      	movs	r2, r1
 8000e84:	e6f0      	b.n	8000c68 <__aeabi_ddiv+0x274>
 8000e86:	4542      	cmp	r2, r8
 8000e88:	d900      	bls.n	8000e8c <__aeabi_ddiv+0x498>
 8000e8a:	e62c      	b.n	8000ae6 <__aeabi_ddiv+0xf2>
 8000e8c:	464b      	mov	r3, r9
 8000e8e:	07dc      	lsls	r4, r3, #31
 8000e90:	0858      	lsrs	r0, r3, #1
 8000e92:	4643      	mov	r3, r8
 8000e94:	085b      	lsrs	r3, r3, #1
 8000e96:	431c      	orrs	r4, r3
 8000e98:	4643      	mov	r3, r8
 8000e9a:	07df      	lsls	r7, r3, #31
 8000e9c:	e62a      	b.n	8000af4 <__aeabi_ddiv+0x100>
 8000e9e:	f001 f9ab 	bl	80021f8 <__clzsi2>
 8000ea2:	2315      	movs	r3, #21
 8000ea4:	469c      	mov	ip, r3
 8000ea6:	4484      	add	ip, r0
 8000ea8:	0002      	movs	r2, r0
 8000eaa:	4663      	mov	r3, ip
 8000eac:	3220      	adds	r2, #32
 8000eae:	2b1c      	cmp	r3, #28
 8000eb0:	dc00      	bgt.n	8000eb4 <__aeabi_ddiv+0x4c0>
 8000eb2:	e72e      	b.n	8000d12 <__aeabi_ddiv+0x31e>
 8000eb4:	0023      	movs	r3, r4
 8000eb6:	3808      	subs	r0, #8
 8000eb8:	4083      	lsls	r3, r0
 8000eba:	4699      	mov	r9, r3
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	4698      	mov	r8, r3
 8000ec0:	e736      	b.n	8000d30 <__aeabi_ddiv+0x33c>
 8000ec2:	f001 f999 	bl	80021f8 <__clzsi2>
 8000ec6:	0002      	movs	r2, r0
 8000ec8:	0003      	movs	r3, r0
 8000eca:	3215      	adds	r2, #21
 8000ecc:	3320      	adds	r3, #32
 8000ece:	2a1c      	cmp	r2, #28
 8000ed0:	dc00      	bgt.n	8000ed4 <__aeabi_ddiv+0x4e0>
 8000ed2:	e6fb      	b.n	8000ccc <__aeabi_ddiv+0x2d8>
 8000ed4:	9900      	ldr	r1, [sp, #0]
 8000ed6:	3808      	subs	r0, #8
 8000ed8:	4081      	lsls	r1, r0
 8000eda:	2200      	movs	r2, #0
 8000edc:	468b      	mov	fp, r1
 8000ede:	e702      	b.n	8000ce6 <__aeabi_ddiv+0x2f2>
 8000ee0:	9900      	ldr	r1, [sp, #0]
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	4464      	add	r4, ip
 8000ee8:	42a1      	cmp	r1, r4
 8000eea:	d900      	bls.n	8000eee <__aeabi_ddiv+0x4fa>
 8000eec:	e69a      	b.n	8000c24 <__aeabi_ddiv+0x230>
 8000eee:	42a2      	cmp	r2, r4
 8000ef0:	d800      	bhi.n	8000ef4 <__aeabi_ddiv+0x500>
 8000ef2:	e697      	b.n	8000c24 <__aeabi_ddiv+0x230>
 8000ef4:	1e83      	subs	r3, r0, #2
 8000ef6:	4464      	add	r4, ip
 8000ef8:	e694      	b.n	8000c24 <__aeabi_ddiv+0x230>
 8000efa:	46ac      	mov	ip, r5
 8000efc:	4461      	add	r1, ip
 8000efe:	3f01      	subs	r7, #1
 8000f00:	428d      	cmp	r5, r1
 8000f02:	d900      	bls.n	8000f06 <__aeabi_ddiv+0x512>
 8000f04:	e680      	b.n	8000c08 <__aeabi_ddiv+0x214>
 8000f06:	428a      	cmp	r2, r1
 8000f08:	d800      	bhi.n	8000f0c <__aeabi_ddiv+0x518>
 8000f0a:	e67d      	b.n	8000c08 <__aeabi_ddiv+0x214>
 8000f0c:	1e87      	subs	r7, r0, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e67a      	b.n	8000c08 <__aeabi_ddiv+0x214>
 8000f12:	4285      	cmp	r5, r0
 8000f14:	d000      	beq.n	8000f18 <__aeabi_ddiv+0x524>
 8000f16:	e65f      	b.n	8000bd8 <__aeabi_ddiv+0x1e4>
 8000f18:	45b9      	cmp	r9, r7
 8000f1a:	d900      	bls.n	8000f1e <__aeabi_ddiv+0x52a>
 8000f1c:	e65c      	b.n	8000bd8 <__aeabi_ddiv+0x1e4>
 8000f1e:	e656      	b.n	8000bce <__aeabi_ddiv+0x1da>
 8000f20:	42a2      	cmp	r2, r4
 8000f22:	d800      	bhi.n	8000f26 <__aeabi_ddiv+0x532>
 8000f24:	e61a      	b.n	8000b5c <__aeabi_ddiv+0x168>
 8000f26:	1e83      	subs	r3, r0, #2
 8000f28:	4464      	add	r4, ip
 8000f2a:	e617      	b.n	8000b5c <__aeabi_ddiv+0x168>
 8000f2c:	428a      	cmp	r2, r1
 8000f2e:	d800      	bhi.n	8000f32 <__aeabi_ddiv+0x53e>
 8000f30:	e600      	b.n	8000b34 <__aeabi_ddiv+0x140>
 8000f32:	46ac      	mov	ip, r5
 8000f34:	1e83      	subs	r3, r0, #2
 8000f36:	4698      	mov	r8, r3
 8000f38:	4461      	add	r1, ip
 8000f3a:	e5fb      	b.n	8000b34 <__aeabi_ddiv+0x140>
 8000f3c:	4837      	ldr	r0, [pc, #220]	@ (800101c <__aeabi_ddiv+0x628>)
 8000f3e:	0014      	movs	r4, r2
 8000f40:	4450      	add	r0, sl
 8000f42:	4082      	lsls	r2, r0
 8000f44:	465b      	mov	r3, fp
 8000f46:	0017      	movs	r7, r2
 8000f48:	4083      	lsls	r3, r0
 8000f4a:	40cc      	lsrs	r4, r1
 8000f4c:	1e7a      	subs	r2, r7, #1
 8000f4e:	4197      	sbcs	r7, r2
 8000f50:	4323      	orrs	r3, r4
 8000f52:	433b      	orrs	r3, r7
 8000f54:	001a      	movs	r2, r3
 8000f56:	465b      	mov	r3, fp
 8000f58:	40cb      	lsrs	r3, r1
 8000f5a:	0751      	lsls	r1, r2, #29
 8000f5c:	d009      	beq.n	8000f72 <__aeabi_ddiv+0x57e>
 8000f5e:	210f      	movs	r1, #15
 8000f60:	4011      	ands	r1, r2
 8000f62:	2904      	cmp	r1, #4
 8000f64:	d005      	beq.n	8000f72 <__aeabi_ddiv+0x57e>
 8000f66:	1d11      	adds	r1, r2, #4
 8000f68:	4291      	cmp	r1, r2
 8000f6a:	4192      	sbcs	r2, r2
 8000f6c:	4252      	negs	r2, r2
 8000f6e:	189b      	adds	r3, r3, r2
 8000f70:	000a      	movs	r2, r1
 8000f72:	0219      	lsls	r1, r3, #8
 8000f74:	d400      	bmi.n	8000f78 <__aeabi_ddiv+0x584>
 8000f76:	e755      	b.n	8000e24 <__aeabi_ddiv+0x430>
 8000f78:	2200      	movs	r2, #0
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	2400      	movs	r4, #0
 8000f7e:	4690      	mov	r8, r2
 8000f80:	e598      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8000f82:	000a      	movs	r2, r1
 8000f84:	42bc      	cmp	r4, r7
 8000f86:	d000      	beq.n	8000f8a <__aeabi_ddiv+0x596>
 8000f88:	e66e      	b.n	8000c68 <__aeabi_ddiv+0x274>
 8000f8a:	454b      	cmp	r3, r9
 8000f8c:	d000      	beq.n	8000f90 <__aeabi_ddiv+0x59c>
 8000f8e:	e66b      	b.n	8000c68 <__aeabi_ddiv+0x274>
 8000f90:	e66c      	b.n	8000c6c <__aeabi_ddiv+0x278>
 8000f92:	4b23      	ldr	r3, [pc, #140]	@ (8001020 <__aeabi_ddiv+0x62c>)
 8000f94:	4a23      	ldr	r2, [pc, #140]	@ (8001024 <__aeabi_ddiv+0x630>)
 8000f96:	4453      	add	r3, sl
 8000f98:	4592      	cmp	sl, r2
 8000f9a:	da00      	bge.n	8000f9e <__aeabi_ddiv+0x5aa>
 8000f9c:	e718      	b.n	8000dd0 <__aeabi_ddiv+0x3dc>
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	4249      	negs	r1, r1
 8000fa2:	1d0a      	adds	r2, r1, #4
 8000fa4:	428a      	cmp	r2, r1
 8000fa6:	4189      	sbcs	r1, r1
 8000fa8:	4249      	negs	r1, r1
 8000faa:	448b      	add	fp, r1
 8000fac:	e666      	b.n	8000c7c <__aeabi_ddiv+0x288>
 8000fae:	210f      	movs	r1, #15
 8000fb0:	4011      	ands	r1, r2
 8000fb2:	2904      	cmp	r1, #4
 8000fb4:	d100      	bne.n	8000fb8 <__aeabi_ddiv+0x5c4>
 8000fb6:	e661      	b.n	8000c7c <__aeabi_ddiv+0x288>
 8000fb8:	0011      	movs	r1, r2
 8000fba:	e7f2      	b.n	8000fa2 <__aeabi_ddiv+0x5ae>
 8000fbc:	42bc      	cmp	r4, r7
 8000fbe:	d800      	bhi.n	8000fc2 <__aeabi_ddiv+0x5ce>
 8000fc0:	e60a      	b.n	8000bd8 <__aeabi_ddiv+0x1e4>
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	425b      	negs	r3, r3
 8000fc6:	469c      	mov	ip, r3
 8000fc8:	9900      	ldr	r1, [sp, #0]
 8000fca:	444f      	add	r7, r9
 8000fcc:	454f      	cmp	r7, r9
 8000fce:	419b      	sbcs	r3, r3
 8000fd0:	44e3      	add	fp, ip
 8000fd2:	468c      	mov	ip, r1
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	4463      	add	r3, ip
 8000fd8:	18c0      	adds	r0, r0, r3
 8000fda:	e5ff      	b.n	8000bdc <__aeabi_ddiv+0x1e8>
 8000fdc:	4649      	mov	r1, r9
 8000fde:	9d00      	ldr	r5, [sp, #0]
 8000fe0:	0048      	lsls	r0, r1, #1
 8000fe2:	4548      	cmp	r0, r9
 8000fe4:	4189      	sbcs	r1, r1
 8000fe6:	46ac      	mov	ip, r5
 8000fe8:	4249      	negs	r1, r1
 8000fea:	4461      	add	r1, ip
 8000fec:	4681      	mov	r9, r0
 8000fee:	3a02      	subs	r2, #2
 8000ff0:	1864      	adds	r4, r4, r1
 8000ff2:	e7c7      	b.n	8000f84 <__aeabi_ddiv+0x590>
 8000ff4:	2480      	movs	r4, #128	@ 0x80
 8000ff6:	465b      	mov	r3, fp
 8000ff8:	0324      	lsls	r4, r4, #12
 8000ffa:	431c      	orrs	r4, r3
 8000ffc:	0324      	lsls	r4, r4, #12
 8000ffe:	4690      	mov	r8, r2
 8001000:	4b04      	ldr	r3, [pc, #16]	@ (8001014 <__aeabi_ddiv+0x620>)
 8001002:	0b24      	lsrs	r4, r4, #12
 8001004:	e556      	b.n	8000ab4 <__aeabi_ddiv+0xc0>
 8001006:	4599      	cmp	r9, r3
 8001008:	d3e8      	bcc.n	8000fdc <__aeabi_ddiv+0x5e8>
 800100a:	000a      	movs	r2, r1
 800100c:	e7bd      	b.n	8000f8a <__aeabi_ddiv+0x596>
 800100e:	2300      	movs	r3, #0
 8001010:	e708      	b.n	8000e24 <__aeabi_ddiv+0x430>
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	000007ff 	.word	0x000007ff
 8001018:	0000043e 	.word	0x0000043e
 800101c:	0000041e 	.word	0x0000041e
 8001020:	000003ff 	.word	0x000003ff
 8001024:	fffffc02 	.word	0xfffffc02

08001028 <__eqdf2>:
 8001028:	b5f0      	push	{r4, r5, r6, r7, lr}
 800102a:	4657      	mov	r7, sl
 800102c:	46de      	mov	lr, fp
 800102e:	464e      	mov	r6, r9
 8001030:	4645      	mov	r5, r8
 8001032:	b5e0      	push	{r5, r6, r7, lr}
 8001034:	000d      	movs	r5, r1
 8001036:	0004      	movs	r4, r0
 8001038:	0fe8      	lsrs	r0, r5, #31
 800103a:	4683      	mov	fp, r0
 800103c:	0309      	lsls	r1, r1, #12
 800103e:	0fd8      	lsrs	r0, r3, #31
 8001040:	0b09      	lsrs	r1, r1, #12
 8001042:	4682      	mov	sl, r0
 8001044:	4819      	ldr	r0, [pc, #100]	@ (80010ac <__eqdf2+0x84>)
 8001046:	468c      	mov	ip, r1
 8001048:	031f      	lsls	r7, r3, #12
 800104a:	0069      	lsls	r1, r5, #1
 800104c:	005e      	lsls	r6, r3, #1
 800104e:	0d49      	lsrs	r1, r1, #21
 8001050:	0b3f      	lsrs	r7, r7, #12
 8001052:	0d76      	lsrs	r6, r6, #21
 8001054:	4281      	cmp	r1, r0
 8001056:	d018      	beq.n	800108a <__eqdf2+0x62>
 8001058:	4286      	cmp	r6, r0
 800105a:	d00f      	beq.n	800107c <__eqdf2+0x54>
 800105c:	2001      	movs	r0, #1
 800105e:	42b1      	cmp	r1, r6
 8001060:	d10d      	bne.n	800107e <__eqdf2+0x56>
 8001062:	45bc      	cmp	ip, r7
 8001064:	d10b      	bne.n	800107e <__eqdf2+0x56>
 8001066:	4294      	cmp	r4, r2
 8001068:	d109      	bne.n	800107e <__eqdf2+0x56>
 800106a:	45d3      	cmp	fp, sl
 800106c:	d01c      	beq.n	80010a8 <__eqdf2+0x80>
 800106e:	2900      	cmp	r1, #0
 8001070:	d105      	bne.n	800107e <__eqdf2+0x56>
 8001072:	4660      	mov	r0, ip
 8001074:	4320      	orrs	r0, r4
 8001076:	1e43      	subs	r3, r0, #1
 8001078:	4198      	sbcs	r0, r3
 800107a:	e000      	b.n	800107e <__eqdf2+0x56>
 800107c:	2001      	movs	r0, #1
 800107e:	bcf0      	pop	{r4, r5, r6, r7}
 8001080:	46bb      	mov	fp, r7
 8001082:	46b2      	mov	sl, r6
 8001084:	46a9      	mov	r9, r5
 8001086:	46a0      	mov	r8, r4
 8001088:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800108a:	2001      	movs	r0, #1
 800108c:	428e      	cmp	r6, r1
 800108e:	d1f6      	bne.n	800107e <__eqdf2+0x56>
 8001090:	4661      	mov	r1, ip
 8001092:	4339      	orrs	r1, r7
 8001094:	000f      	movs	r7, r1
 8001096:	4317      	orrs	r7, r2
 8001098:	4327      	orrs	r7, r4
 800109a:	d1f0      	bne.n	800107e <__eqdf2+0x56>
 800109c:	465b      	mov	r3, fp
 800109e:	4652      	mov	r2, sl
 80010a0:	1a98      	subs	r0, r3, r2
 80010a2:	1e43      	subs	r3, r0, #1
 80010a4:	4198      	sbcs	r0, r3
 80010a6:	e7ea      	b.n	800107e <__eqdf2+0x56>
 80010a8:	2000      	movs	r0, #0
 80010aa:	e7e8      	b.n	800107e <__eqdf2+0x56>
 80010ac:	000007ff 	.word	0x000007ff

080010b0 <__gedf2>:
 80010b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010b2:	4657      	mov	r7, sl
 80010b4:	464e      	mov	r6, r9
 80010b6:	4645      	mov	r5, r8
 80010b8:	46de      	mov	lr, fp
 80010ba:	b5e0      	push	{r5, r6, r7, lr}
 80010bc:	000d      	movs	r5, r1
 80010be:	030f      	lsls	r7, r1, #12
 80010c0:	0b39      	lsrs	r1, r7, #12
 80010c2:	b083      	sub	sp, #12
 80010c4:	0004      	movs	r4, r0
 80010c6:	4680      	mov	r8, r0
 80010c8:	9101      	str	r1, [sp, #4]
 80010ca:	0058      	lsls	r0, r3, #1
 80010cc:	0fe9      	lsrs	r1, r5, #31
 80010ce:	4f31      	ldr	r7, [pc, #196]	@ (8001194 <__gedf2+0xe4>)
 80010d0:	0d40      	lsrs	r0, r0, #21
 80010d2:	468c      	mov	ip, r1
 80010d4:	006e      	lsls	r6, r5, #1
 80010d6:	0319      	lsls	r1, r3, #12
 80010d8:	4682      	mov	sl, r0
 80010da:	4691      	mov	r9, r2
 80010dc:	0d76      	lsrs	r6, r6, #21
 80010de:	0b09      	lsrs	r1, r1, #12
 80010e0:	0fd8      	lsrs	r0, r3, #31
 80010e2:	42be      	cmp	r6, r7
 80010e4:	d01f      	beq.n	8001126 <__gedf2+0x76>
 80010e6:	45ba      	cmp	sl, r7
 80010e8:	d00f      	beq.n	800110a <__gedf2+0x5a>
 80010ea:	2e00      	cmp	r6, #0
 80010ec:	d12f      	bne.n	800114e <__gedf2+0x9e>
 80010ee:	4655      	mov	r5, sl
 80010f0:	9e01      	ldr	r6, [sp, #4]
 80010f2:	4334      	orrs	r4, r6
 80010f4:	2d00      	cmp	r5, #0
 80010f6:	d127      	bne.n	8001148 <__gedf2+0x98>
 80010f8:	430a      	orrs	r2, r1
 80010fa:	d03a      	beq.n	8001172 <__gedf2+0xc2>
 80010fc:	2c00      	cmp	r4, #0
 80010fe:	d145      	bne.n	800118c <__gedf2+0xdc>
 8001100:	2800      	cmp	r0, #0
 8001102:	d11a      	bne.n	800113a <__gedf2+0x8a>
 8001104:	2001      	movs	r0, #1
 8001106:	4240      	negs	r0, r0
 8001108:	e017      	b.n	800113a <__gedf2+0x8a>
 800110a:	4311      	orrs	r1, r2
 800110c:	d13b      	bne.n	8001186 <__gedf2+0xd6>
 800110e:	2e00      	cmp	r6, #0
 8001110:	d102      	bne.n	8001118 <__gedf2+0x68>
 8001112:	9f01      	ldr	r7, [sp, #4]
 8001114:	4327      	orrs	r7, r4
 8001116:	d0f3      	beq.n	8001100 <__gedf2+0x50>
 8001118:	4584      	cmp	ip, r0
 800111a:	d109      	bne.n	8001130 <__gedf2+0x80>
 800111c:	4663      	mov	r3, ip
 800111e:	2b00      	cmp	r3, #0
 8001120:	d0f0      	beq.n	8001104 <__gedf2+0x54>
 8001122:	4660      	mov	r0, ip
 8001124:	e009      	b.n	800113a <__gedf2+0x8a>
 8001126:	9f01      	ldr	r7, [sp, #4]
 8001128:	4327      	orrs	r7, r4
 800112a:	d12c      	bne.n	8001186 <__gedf2+0xd6>
 800112c:	45b2      	cmp	sl, r6
 800112e:	d024      	beq.n	800117a <__gedf2+0xca>
 8001130:	4663      	mov	r3, ip
 8001132:	2002      	movs	r0, #2
 8001134:	3b01      	subs	r3, #1
 8001136:	4018      	ands	r0, r3
 8001138:	3801      	subs	r0, #1
 800113a:	b003      	add	sp, #12
 800113c:	bcf0      	pop	{r4, r5, r6, r7}
 800113e:	46bb      	mov	fp, r7
 8001140:	46b2      	mov	sl, r6
 8001142:	46a9      	mov	r9, r5
 8001144:	46a0      	mov	r8, r4
 8001146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001148:	2c00      	cmp	r4, #0
 800114a:	d0d9      	beq.n	8001100 <__gedf2+0x50>
 800114c:	e7e4      	b.n	8001118 <__gedf2+0x68>
 800114e:	4654      	mov	r4, sl
 8001150:	2c00      	cmp	r4, #0
 8001152:	d0ed      	beq.n	8001130 <__gedf2+0x80>
 8001154:	4584      	cmp	ip, r0
 8001156:	d1eb      	bne.n	8001130 <__gedf2+0x80>
 8001158:	4556      	cmp	r6, sl
 800115a:	dce9      	bgt.n	8001130 <__gedf2+0x80>
 800115c:	dbde      	blt.n	800111c <__gedf2+0x6c>
 800115e:	9b01      	ldr	r3, [sp, #4]
 8001160:	428b      	cmp	r3, r1
 8001162:	d8e5      	bhi.n	8001130 <__gedf2+0x80>
 8001164:	d1da      	bne.n	800111c <__gedf2+0x6c>
 8001166:	45c8      	cmp	r8, r9
 8001168:	d8e2      	bhi.n	8001130 <__gedf2+0x80>
 800116a:	2000      	movs	r0, #0
 800116c:	45c8      	cmp	r8, r9
 800116e:	d2e4      	bcs.n	800113a <__gedf2+0x8a>
 8001170:	e7d4      	b.n	800111c <__gedf2+0x6c>
 8001172:	2000      	movs	r0, #0
 8001174:	2c00      	cmp	r4, #0
 8001176:	d0e0      	beq.n	800113a <__gedf2+0x8a>
 8001178:	e7da      	b.n	8001130 <__gedf2+0x80>
 800117a:	4311      	orrs	r1, r2
 800117c:	d103      	bne.n	8001186 <__gedf2+0xd6>
 800117e:	4584      	cmp	ip, r0
 8001180:	d1d6      	bne.n	8001130 <__gedf2+0x80>
 8001182:	2000      	movs	r0, #0
 8001184:	e7d9      	b.n	800113a <__gedf2+0x8a>
 8001186:	2002      	movs	r0, #2
 8001188:	4240      	negs	r0, r0
 800118a:	e7d6      	b.n	800113a <__gedf2+0x8a>
 800118c:	4584      	cmp	ip, r0
 800118e:	d0e6      	beq.n	800115e <__gedf2+0xae>
 8001190:	e7ce      	b.n	8001130 <__gedf2+0x80>
 8001192:	46c0      	nop			@ (mov r8, r8)
 8001194:	000007ff 	.word	0x000007ff

08001198 <__ledf2>:
 8001198:	b5f0      	push	{r4, r5, r6, r7, lr}
 800119a:	4657      	mov	r7, sl
 800119c:	464e      	mov	r6, r9
 800119e:	4645      	mov	r5, r8
 80011a0:	46de      	mov	lr, fp
 80011a2:	b5e0      	push	{r5, r6, r7, lr}
 80011a4:	000d      	movs	r5, r1
 80011a6:	030f      	lsls	r7, r1, #12
 80011a8:	0004      	movs	r4, r0
 80011aa:	4680      	mov	r8, r0
 80011ac:	0fe8      	lsrs	r0, r5, #31
 80011ae:	0b39      	lsrs	r1, r7, #12
 80011b0:	4684      	mov	ip, r0
 80011b2:	b083      	sub	sp, #12
 80011b4:	0058      	lsls	r0, r3, #1
 80011b6:	4f30      	ldr	r7, [pc, #192]	@ (8001278 <__ledf2+0xe0>)
 80011b8:	0d40      	lsrs	r0, r0, #21
 80011ba:	9101      	str	r1, [sp, #4]
 80011bc:	031e      	lsls	r6, r3, #12
 80011be:	0069      	lsls	r1, r5, #1
 80011c0:	4682      	mov	sl, r0
 80011c2:	4691      	mov	r9, r2
 80011c4:	0d49      	lsrs	r1, r1, #21
 80011c6:	0b36      	lsrs	r6, r6, #12
 80011c8:	0fd8      	lsrs	r0, r3, #31
 80011ca:	42b9      	cmp	r1, r7
 80011cc:	d020      	beq.n	8001210 <__ledf2+0x78>
 80011ce:	45ba      	cmp	sl, r7
 80011d0:	d00f      	beq.n	80011f2 <__ledf2+0x5a>
 80011d2:	2900      	cmp	r1, #0
 80011d4:	d12b      	bne.n	800122e <__ledf2+0x96>
 80011d6:	9901      	ldr	r1, [sp, #4]
 80011d8:	430c      	orrs	r4, r1
 80011da:	4651      	mov	r1, sl
 80011dc:	2900      	cmp	r1, #0
 80011de:	d137      	bne.n	8001250 <__ledf2+0xb8>
 80011e0:	4332      	orrs	r2, r6
 80011e2:	d038      	beq.n	8001256 <__ledf2+0xbe>
 80011e4:	2c00      	cmp	r4, #0
 80011e6:	d144      	bne.n	8001272 <__ledf2+0xda>
 80011e8:	2800      	cmp	r0, #0
 80011ea:	d119      	bne.n	8001220 <__ledf2+0x88>
 80011ec:	2001      	movs	r0, #1
 80011ee:	4240      	negs	r0, r0
 80011f0:	e016      	b.n	8001220 <__ledf2+0x88>
 80011f2:	4316      	orrs	r6, r2
 80011f4:	d113      	bne.n	800121e <__ledf2+0x86>
 80011f6:	2900      	cmp	r1, #0
 80011f8:	d102      	bne.n	8001200 <__ledf2+0x68>
 80011fa:	9f01      	ldr	r7, [sp, #4]
 80011fc:	4327      	orrs	r7, r4
 80011fe:	d0f3      	beq.n	80011e8 <__ledf2+0x50>
 8001200:	4584      	cmp	ip, r0
 8001202:	d020      	beq.n	8001246 <__ledf2+0xae>
 8001204:	4663      	mov	r3, ip
 8001206:	2002      	movs	r0, #2
 8001208:	3b01      	subs	r3, #1
 800120a:	4018      	ands	r0, r3
 800120c:	3801      	subs	r0, #1
 800120e:	e007      	b.n	8001220 <__ledf2+0x88>
 8001210:	9f01      	ldr	r7, [sp, #4]
 8001212:	4327      	orrs	r7, r4
 8001214:	d103      	bne.n	800121e <__ledf2+0x86>
 8001216:	458a      	cmp	sl, r1
 8001218:	d1f4      	bne.n	8001204 <__ledf2+0x6c>
 800121a:	4316      	orrs	r6, r2
 800121c:	d01f      	beq.n	800125e <__ledf2+0xc6>
 800121e:	2002      	movs	r0, #2
 8001220:	b003      	add	sp, #12
 8001222:	bcf0      	pop	{r4, r5, r6, r7}
 8001224:	46bb      	mov	fp, r7
 8001226:	46b2      	mov	sl, r6
 8001228:	46a9      	mov	r9, r5
 800122a:	46a0      	mov	r8, r4
 800122c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800122e:	4654      	mov	r4, sl
 8001230:	2c00      	cmp	r4, #0
 8001232:	d0e7      	beq.n	8001204 <__ledf2+0x6c>
 8001234:	4584      	cmp	ip, r0
 8001236:	d1e5      	bne.n	8001204 <__ledf2+0x6c>
 8001238:	4551      	cmp	r1, sl
 800123a:	dce3      	bgt.n	8001204 <__ledf2+0x6c>
 800123c:	db03      	blt.n	8001246 <__ledf2+0xae>
 800123e:	9b01      	ldr	r3, [sp, #4]
 8001240:	42b3      	cmp	r3, r6
 8001242:	d8df      	bhi.n	8001204 <__ledf2+0x6c>
 8001244:	d00f      	beq.n	8001266 <__ledf2+0xce>
 8001246:	4663      	mov	r3, ip
 8001248:	2b00      	cmp	r3, #0
 800124a:	d0cf      	beq.n	80011ec <__ledf2+0x54>
 800124c:	4660      	mov	r0, ip
 800124e:	e7e7      	b.n	8001220 <__ledf2+0x88>
 8001250:	2c00      	cmp	r4, #0
 8001252:	d0c9      	beq.n	80011e8 <__ledf2+0x50>
 8001254:	e7d4      	b.n	8001200 <__ledf2+0x68>
 8001256:	2000      	movs	r0, #0
 8001258:	2c00      	cmp	r4, #0
 800125a:	d0e1      	beq.n	8001220 <__ledf2+0x88>
 800125c:	e7d2      	b.n	8001204 <__ledf2+0x6c>
 800125e:	4584      	cmp	ip, r0
 8001260:	d1d0      	bne.n	8001204 <__ledf2+0x6c>
 8001262:	2000      	movs	r0, #0
 8001264:	e7dc      	b.n	8001220 <__ledf2+0x88>
 8001266:	45c8      	cmp	r8, r9
 8001268:	d8cc      	bhi.n	8001204 <__ledf2+0x6c>
 800126a:	2000      	movs	r0, #0
 800126c:	45c8      	cmp	r8, r9
 800126e:	d2d7      	bcs.n	8001220 <__ledf2+0x88>
 8001270:	e7e9      	b.n	8001246 <__ledf2+0xae>
 8001272:	4584      	cmp	ip, r0
 8001274:	d0e3      	beq.n	800123e <__ledf2+0xa6>
 8001276:	e7c5      	b.n	8001204 <__ledf2+0x6c>
 8001278:	000007ff 	.word	0x000007ff

0800127c <__aeabi_dmul>:
 800127c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127e:	4657      	mov	r7, sl
 8001280:	46de      	mov	lr, fp
 8001282:	464e      	mov	r6, r9
 8001284:	4645      	mov	r5, r8
 8001286:	b5e0      	push	{r5, r6, r7, lr}
 8001288:	001f      	movs	r7, r3
 800128a:	030b      	lsls	r3, r1, #12
 800128c:	0b1b      	lsrs	r3, r3, #12
 800128e:	0016      	movs	r6, r2
 8001290:	469a      	mov	sl, r3
 8001292:	0fca      	lsrs	r2, r1, #31
 8001294:	004b      	lsls	r3, r1, #1
 8001296:	0004      	movs	r4, r0
 8001298:	4693      	mov	fp, r2
 800129a:	b087      	sub	sp, #28
 800129c:	0d5b      	lsrs	r3, r3, #21
 800129e:	d100      	bne.n	80012a2 <__aeabi_dmul+0x26>
 80012a0:	e0d5      	b.n	800144e <__aeabi_dmul+0x1d2>
 80012a2:	4abb      	ldr	r2, [pc, #748]	@ (8001590 <__aeabi_dmul+0x314>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d100      	bne.n	80012aa <__aeabi_dmul+0x2e>
 80012a8:	e0f8      	b.n	800149c <__aeabi_dmul+0x220>
 80012aa:	4651      	mov	r1, sl
 80012ac:	0f42      	lsrs	r2, r0, #29
 80012ae:	00c9      	lsls	r1, r1, #3
 80012b0:	430a      	orrs	r2, r1
 80012b2:	2180      	movs	r1, #128	@ 0x80
 80012b4:	0409      	lsls	r1, r1, #16
 80012b6:	4311      	orrs	r1, r2
 80012b8:	00c2      	lsls	r2, r0, #3
 80012ba:	4691      	mov	r9, r2
 80012bc:	4ab5      	ldr	r2, [pc, #724]	@ (8001594 <__aeabi_dmul+0x318>)
 80012be:	468a      	mov	sl, r1
 80012c0:	189d      	adds	r5, r3, r2
 80012c2:	2300      	movs	r3, #0
 80012c4:	4698      	mov	r8, r3
 80012c6:	9302      	str	r3, [sp, #8]
 80012c8:	033c      	lsls	r4, r7, #12
 80012ca:	007b      	lsls	r3, r7, #1
 80012cc:	0ffa      	lsrs	r2, r7, #31
 80012ce:	0030      	movs	r0, r6
 80012d0:	0b24      	lsrs	r4, r4, #12
 80012d2:	0d5b      	lsrs	r3, r3, #21
 80012d4:	9200      	str	r2, [sp, #0]
 80012d6:	d100      	bne.n	80012da <__aeabi_dmul+0x5e>
 80012d8:	e096      	b.n	8001408 <__aeabi_dmul+0x18c>
 80012da:	4aad      	ldr	r2, [pc, #692]	@ (8001590 <__aeabi_dmul+0x314>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d031      	beq.n	8001344 <__aeabi_dmul+0xc8>
 80012e0:	0f72      	lsrs	r2, r6, #29
 80012e2:	00e4      	lsls	r4, r4, #3
 80012e4:	4322      	orrs	r2, r4
 80012e6:	2480      	movs	r4, #128	@ 0x80
 80012e8:	0424      	lsls	r4, r4, #16
 80012ea:	4314      	orrs	r4, r2
 80012ec:	4aa9      	ldr	r2, [pc, #676]	@ (8001594 <__aeabi_dmul+0x318>)
 80012ee:	00f0      	lsls	r0, r6, #3
 80012f0:	4694      	mov	ip, r2
 80012f2:	4463      	add	r3, ip
 80012f4:	195b      	adds	r3, r3, r5
 80012f6:	1c5a      	adds	r2, r3, #1
 80012f8:	9201      	str	r2, [sp, #4]
 80012fa:	4642      	mov	r2, r8
 80012fc:	2600      	movs	r6, #0
 80012fe:	2a0a      	cmp	r2, #10
 8001300:	dc42      	bgt.n	8001388 <__aeabi_dmul+0x10c>
 8001302:	465a      	mov	r2, fp
 8001304:	9900      	ldr	r1, [sp, #0]
 8001306:	404a      	eors	r2, r1
 8001308:	4693      	mov	fp, r2
 800130a:	4642      	mov	r2, r8
 800130c:	2a02      	cmp	r2, #2
 800130e:	dc32      	bgt.n	8001376 <__aeabi_dmul+0xfa>
 8001310:	3a01      	subs	r2, #1
 8001312:	2a01      	cmp	r2, #1
 8001314:	d900      	bls.n	8001318 <__aeabi_dmul+0x9c>
 8001316:	e149      	b.n	80015ac <__aeabi_dmul+0x330>
 8001318:	2e02      	cmp	r6, #2
 800131a:	d100      	bne.n	800131e <__aeabi_dmul+0xa2>
 800131c:	e0ca      	b.n	80014b4 <__aeabi_dmul+0x238>
 800131e:	2e01      	cmp	r6, #1
 8001320:	d13d      	bne.n	800139e <__aeabi_dmul+0x122>
 8001322:	2300      	movs	r3, #0
 8001324:	2400      	movs	r4, #0
 8001326:	2200      	movs	r2, #0
 8001328:	0010      	movs	r0, r2
 800132a:	465a      	mov	r2, fp
 800132c:	051b      	lsls	r3, r3, #20
 800132e:	4323      	orrs	r3, r4
 8001330:	07d2      	lsls	r2, r2, #31
 8001332:	4313      	orrs	r3, r2
 8001334:	0019      	movs	r1, r3
 8001336:	b007      	add	sp, #28
 8001338:	bcf0      	pop	{r4, r5, r6, r7}
 800133a:	46bb      	mov	fp, r7
 800133c:	46b2      	mov	sl, r6
 800133e:	46a9      	mov	r9, r5
 8001340:	46a0      	mov	r8, r4
 8001342:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001344:	4b92      	ldr	r3, [pc, #584]	@ (8001590 <__aeabi_dmul+0x314>)
 8001346:	4326      	orrs	r6, r4
 8001348:	18eb      	adds	r3, r5, r3
 800134a:	2e00      	cmp	r6, #0
 800134c:	d100      	bne.n	8001350 <__aeabi_dmul+0xd4>
 800134e:	e0bb      	b.n	80014c8 <__aeabi_dmul+0x24c>
 8001350:	2203      	movs	r2, #3
 8001352:	4641      	mov	r1, r8
 8001354:	4311      	orrs	r1, r2
 8001356:	465a      	mov	r2, fp
 8001358:	4688      	mov	r8, r1
 800135a:	9900      	ldr	r1, [sp, #0]
 800135c:	404a      	eors	r2, r1
 800135e:	2180      	movs	r1, #128	@ 0x80
 8001360:	0109      	lsls	r1, r1, #4
 8001362:	468c      	mov	ip, r1
 8001364:	0029      	movs	r1, r5
 8001366:	4461      	add	r1, ip
 8001368:	9101      	str	r1, [sp, #4]
 800136a:	4641      	mov	r1, r8
 800136c:	290a      	cmp	r1, #10
 800136e:	dd00      	ble.n	8001372 <__aeabi_dmul+0xf6>
 8001370:	e233      	b.n	80017da <__aeabi_dmul+0x55e>
 8001372:	4693      	mov	fp, r2
 8001374:	2603      	movs	r6, #3
 8001376:	4642      	mov	r2, r8
 8001378:	2701      	movs	r7, #1
 800137a:	4097      	lsls	r7, r2
 800137c:	21a6      	movs	r1, #166	@ 0xa6
 800137e:	003a      	movs	r2, r7
 8001380:	00c9      	lsls	r1, r1, #3
 8001382:	400a      	ands	r2, r1
 8001384:	420f      	tst	r7, r1
 8001386:	d031      	beq.n	80013ec <__aeabi_dmul+0x170>
 8001388:	9e02      	ldr	r6, [sp, #8]
 800138a:	2e02      	cmp	r6, #2
 800138c:	d100      	bne.n	8001390 <__aeabi_dmul+0x114>
 800138e:	e235      	b.n	80017fc <__aeabi_dmul+0x580>
 8001390:	2e03      	cmp	r6, #3
 8001392:	d100      	bne.n	8001396 <__aeabi_dmul+0x11a>
 8001394:	e1d2      	b.n	800173c <__aeabi_dmul+0x4c0>
 8001396:	4654      	mov	r4, sl
 8001398:	4648      	mov	r0, r9
 800139a:	2e01      	cmp	r6, #1
 800139c:	d0c1      	beq.n	8001322 <__aeabi_dmul+0xa6>
 800139e:	9a01      	ldr	r2, [sp, #4]
 80013a0:	4b7d      	ldr	r3, [pc, #500]	@ (8001598 <__aeabi_dmul+0x31c>)
 80013a2:	4694      	mov	ip, r2
 80013a4:	4463      	add	r3, ip
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	dc00      	bgt.n	80013ac <__aeabi_dmul+0x130>
 80013aa:	e0c0      	b.n	800152e <__aeabi_dmul+0x2b2>
 80013ac:	0742      	lsls	r2, r0, #29
 80013ae:	d009      	beq.n	80013c4 <__aeabi_dmul+0x148>
 80013b0:	220f      	movs	r2, #15
 80013b2:	4002      	ands	r2, r0
 80013b4:	2a04      	cmp	r2, #4
 80013b6:	d005      	beq.n	80013c4 <__aeabi_dmul+0x148>
 80013b8:	1d02      	adds	r2, r0, #4
 80013ba:	4282      	cmp	r2, r0
 80013bc:	4180      	sbcs	r0, r0
 80013be:	4240      	negs	r0, r0
 80013c0:	1824      	adds	r4, r4, r0
 80013c2:	0010      	movs	r0, r2
 80013c4:	01e2      	lsls	r2, r4, #7
 80013c6:	d506      	bpl.n	80013d6 <__aeabi_dmul+0x15a>
 80013c8:	4b74      	ldr	r3, [pc, #464]	@ (800159c <__aeabi_dmul+0x320>)
 80013ca:	9a01      	ldr	r2, [sp, #4]
 80013cc:	401c      	ands	r4, r3
 80013ce:	2380      	movs	r3, #128	@ 0x80
 80013d0:	4694      	mov	ip, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4463      	add	r3, ip
 80013d6:	4a72      	ldr	r2, [pc, #456]	@ (80015a0 <__aeabi_dmul+0x324>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	dc6b      	bgt.n	80014b4 <__aeabi_dmul+0x238>
 80013dc:	0762      	lsls	r2, r4, #29
 80013de:	08c0      	lsrs	r0, r0, #3
 80013e0:	0264      	lsls	r4, r4, #9
 80013e2:	055b      	lsls	r3, r3, #21
 80013e4:	4302      	orrs	r2, r0
 80013e6:	0b24      	lsrs	r4, r4, #12
 80013e8:	0d5b      	lsrs	r3, r3, #21
 80013ea:	e79d      	b.n	8001328 <__aeabi_dmul+0xac>
 80013ec:	2190      	movs	r1, #144	@ 0x90
 80013ee:	0089      	lsls	r1, r1, #2
 80013f0:	420f      	tst	r7, r1
 80013f2:	d163      	bne.n	80014bc <__aeabi_dmul+0x240>
 80013f4:	2288      	movs	r2, #136	@ 0x88
 80013f6:	423a      	tst	r2, r7
 80013f8:	d100      	bne.n	80013fc <__aeabi_dmul+0x180>
 80013fa:	e0d7      	b.n	80015ac <__aeabi_dmul+0x330>
 80013fc:	9b00      	ldr	r3, [sp, #0]
 80013fe:	46a2      	mov	sl, r4
 8001400:	469b      	mov	fp, r3
 8001402:	4681      	mov	r9, r0
 8001404:	9602      	str	r6, [sp, #8]
 8001406:	e7bf      	b.n	8001388 <__aeabi_dmul+0x10c>
 8001408:	0023      	movs	r3, r4
 800140a:	4333      	orrs	r3, r6
 800140c:	d100      	bne.n	8001410 <__aeabi_dmul+0x194>
 800140e:	e07f      	b.n	8001510 <__aeabi_dmul+0x294>
 8001410:	2c00      	cmp	r4, #0
 8001412:	d100      	bne.n	8001416 <__aeabi_dmul+0x19a>
 8001414:	e1ad      	b.n	8001772 <__aeabi_dmul+0x4f6>
 8001416:	0020      	movs	r0, r4
 8001418:	f000 feee 	bl	80021f8 <__clzsi2>
 800141c:	0002      	movs	r2, r0
 800141e:	0003      	movs	r3, r0
 8001420:	3a0b      	subs	r2, #11
 8001422:	201d      	movs	r0, #29
 8001424:	0019      	movs	r1, r3
 8001426:	1a82      	subs	r2, r0, r2
 8001428:	0030      	movs	r0, r6
 800142a:	3908      	subs	r1, #8
 800142c:	40d0      	lsrs	r0, r2
 800142e:	408c      	lsls	r4, r1
 8001430:	4304      	orrs	r4, r0
 8001432:	0030      	movs	r0, r6
 8001434:	4088      	lsls	r0, r1
 8001436:	4a5b      	ldr	r2, [pc, #364]	@ (80015a4 <__aeabi_dmul+0x328>)
 8001438:	1aeb      	subs	r3, r5, r3
 800143a:	4694      	mov	ip, r2
 800143c:	4463      	add	r3, ip
 800143e:	1c5a      	adds	r2, r3, #1
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	4642      	mov	r2, r8
 8001444:	2600      	movs	r6, #0
 8001446:	2a0a      	cmp	r2, #10
 8001448:	dc00      	bgt.n	800144c <__aeabi_dmul+0x1d0>
 800144a:	e75a      	b.n	8001302 <__aeabi_dmul+0x86>
 800144c:	e79c      	b.n	8001388 <__aeabi_dmul+0x10c>
 800144e:	4653      	mov	r3, sl
 8001450:	4303      	orrs	r3, r0
 8001452:	4699      	mov	r9, r3
 8001454:	d054      	beq.n	8001500 <__aeabi_dmul+0x284>
 8001456:	4653      	mov	r3, sl
 8001458:	2b00      	cmp	r3, #0
 800145a:	d100      	bne.n	800145e <__aeabi_dmul+0x1e2>
 800145c:	e177      	b.n	800174e <__aeabi_dmul+0x4d2>
 800145e:	4650      	mov	r0, sl
 8001460:	f000 feca 	bl	80021f8 <__clzsi2>
 8001464:	230b      	movs	r3, #11
 8001466:	425b      	negs	r3, r3
 8001468:	469c      	mov	ip, r3
 800146a:	0002      	movs	r2, r0
 800146c:	4484      	add	ip, r0
 800146e:	0011      	movs	r1, r2
 8001470:	4650      	mov	r0, sl
 8001472:	3908      	subs	r1, #8
 8001474:	4088      	lsls	r0, r1
 8001476:	231d      	movs	r3, #29
 8001478:	4680      	mov	r8, r0
 800147a:	4660      	mov	r0, ip
 800147c:	1a1b      	subs	r3, r3, r0
 800147e:	0020      	movs	r0, r4
 8001480:	40d8      	lsrs	r0, r3
 8001482:	0003      	movs	r3, r0
 8001484:	4640      	mov	r0, r8
 8001486:	4303      	orrs	r3, r0
 8001488:	469a      	mov	sl, r3
 800148a:	0023      	movs	r3, r4
 800148c:	408b      	lsls	r3, r1
 800148e:	4699      	mov	r9, r3
 8001490:	2300      	movs	r3, #0
 8001492:	4d44      	ldr	r5, [pc, #272]	@ (80015a4 <__aeabi_dmul+0x328>)
 8001494:	4698      	mov	r8, r3
 8001496:	1aad      	subs	r5, r5, r2
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	e715      	b.n	80012c8 <__aeabi_dmul+0x4c>
 800149c:	4652      	mov	r2, sl
 800149e:	4302      	orrs	r2, r0
 80014a0:	4691      	mov	r9, r2
 80014a2:	d126      	bne.n	80014f2 <__aeabi_dmul+0x276>
 80014a4:	2200      	movs	r2, #0
 80014a6:	001d      	movs	r5, r3
 80014a8:	2302      	movs	r3, #2
 80014aa:	4692      	mov	sl, r2
 80014ac:	3208      	adds	r2, #8
 80014ae:	4690      	mov	r8, r2
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	e709      	b.n	80012c8 <__aeabi_dmul+0x4c>
 80014b4:	2400      	movs	r4, #0
 80014b6:	2200      	movs	r2, #0
 80014b8:	4b35      	ldr	r3, [pc, #212]	@ (8001590 <__aeabi_dmul+0x314>)
 80014ba:	e735      	b.n	8001328 <__aeabi_dmul+0xac>
 80014bc:	2300      	movs	r3, #0
 80014be:	2480      	movs	r4, #128	@ 0x80
 80014c0:	469b      	mov	fp, r3
 80014c2:	0324      	lsls	r4, r4, #12
 80014c4:	4b32      	ldr	r3, [pc, #200]	@ (8001590 <__aeabi_dmul+0x314>)
 80014c6:	e72f      	b.n	8001328 <__aeabi_dmul+0xac>
 80014c8:	2202      	movs	r2, #2
 80014ca:	4641      	mov	r1, r8
 80014cc:	4311      	orrs	r1, r2
 80014ce:	2280      	movs	r2, #128	@ 0x80
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	4694      	mov	ip, r2
 80014d4:	002a      	movs	r2, r5
 80014d6:	4462      	add	r2, ip
 80014d8:	4688      	mov	r8, r1
 80014da:	9201      	str	r2, [sp, #4]
 80014dc:	290a      	cmp	r1, #10
 80014de:	dd00      	ble.n	80014e2 <__aeabi_dmul+0x266>
 80014e0:	e752      	b.n	8001388 <__aeabi_dmul+0x10c>
 80014e2:	465a      	mov	r2, fp
 80014e4:	2000      	movs	r0, #0
 80014e6:	9900      	ldr	r1, [sp, #0]
 80014e8:	0004      	movs	r4, r0
 80014ea:	404a      	eors	r2, r1
 80014ec:	4693      	mov	fp, r2
 80014ee:	2602      	movs	r6, #2
 80014f0:	e70b      	b.n	800130a <__aeabi_dmul+0x8e>
 80014f2:	220c      	movs	r2, #12
 80014f4:	001d      	movs	r5, r3
 80014f6:	2303      	movs	r3, #3
 80014f8:	4681      	mov	r9, r0
 80014fa:	4690      	mov	r8, r2
 80014fc:	9302      	str	r3, [sp, #8]
 80014fe:	e6e3      	b.n	80012c8 <__aeabi_dmul+0x4c>
 8001500:	2300      	movs	r3, #0
 8001502:	469a      	mov	sl, r3
 8001504:	3304      	adds	r3, #4
 8001506:	4698      	mov	r8, r3
 8001508:	3b03      	subs	r3, #3
 800150a:	2500      	movs	r5, #0
 800150c:	9302      	str	r3, [sp, #8]
 800150e:	e6db      	b.n	80012c8 <__aeabi_dmul+0x4c>
 8001510:	4642      	mov	r2, r8
 8001512:	3301      	adds	r3, #1
 8001514:	431a      	orrs	r2, r3
 8001516:	002b      	movs	r3, r5
 8001518:	4690      	mov	r8, r2
 800151a:	1c5a      	adds	r2, r3, #1
 800151c:	9201      	str	r2, [sp, #4]
 800151e:	4642      	mov	r2, r8
 8001520:	2400      	movs	r4, #0
 8001522:	2000      	movs	r0, #0
 8001524:	2601      	movs	r6, #1
 8001526:	2a0a      	cmp	r2, #10
 8001528:	dc00      	bgt.n	800152c <__aeabi_dmul+0x2b0>
 800152a:	e6ea      	b.n	8001302 <__aeabi_dmul+0x86>
 800152c:	e72c      	b.n	8001388 <__aeabi_dmul+0x10c>
 800152e:	2201      	movs	r2, #1
 8001530:	1ad2      	subs	r2, r2, r3
 8001532:	2a38      	cmp	r2, #56	@ 0x38
 8001534:	dd00      	ble.n	8001538 <__aeabi_dmul+0x2bc>
 8001536:	e6f4      	b.n	8001322 <__aeabi_dmul+0xa6>
 8001538:	2a1f      	cmp	r2, #31
 800153a:	dc00      	bgt.n	800153e <__aeabi_dmul+0x2c2>
 800153c:	e12a      	b.n	8001794 <__aeabi_dmul+0x518>
 800153e:	211f      	movs	r1, #31
 8001540:	4249      	negs	r1, r1
 8001542:	1acb      	subs	r3, r1, r3
 8001544:	0021      	movs	r1, r4
 8001546:	40d9      	lsrs	r1, r3
 8001548:	000b      	movs	r3, r1
 800154a:	2a20      	cmp	r2, #32
 800154c:	d005      	beq.n	800155a <__aeabi_dmul+0x2de>
 800154e:	4a16      	ldr	r2, [pc, #88]	@ (80015a8 <__aeabi_dmul+0x32c>)
 8001550:	9d01      	ldr	r5, [sp, #4]
 8001552:	4694      	mov	ip, r2
 8001554:	4465      	add	r5, ip
 8001556:	40ac      	lsls	r4, r5
 8001558:	4320      	orrs	r0, r4
 800155a:	1e42      	subs	r2, r0, #1
 800155c:	4190      	sbcs	r0, r2
 800155e:	4318      	orrs	r0, r3
 8001560:	2307      	movs	r3, #7
 8001562:	0019      	movs	r1, r3
 8001564:	2400      	movs	r4, #0
 8001566:	4001      	ands	r1, r0
 8001568:	4203      	tst	r3, r0
 800156a:	d00c      	beq.n	8001586 <__aeabi_dmul+0x30a>
 800156c:	230f      	movs	r3, #15
 800156e:	4003      	ands	r3, r0
 8001570:	2b04      	cmp	r3, #4
 8001572:	d100      	bne.n	8001576 <__aeabi_dmul+0x2fa>
 8001574:	e140      	b.n	80017f8 <__aeabi_dmul+0x57c>
 8001576:	1d03      	adds	r3, r0, #4
 8001578:	4283      	cmp	r3, r0
 800157a:	41a4      	sbcs	r4, r4
 800157c:	0018      	movs	r0, r3
 800157e:	4264      	negs	r4, r4
 8001580:	0761      	lsls	r1, r4, #29
 8001582:	0264      	lsls	r4, r4, #9
 8001584:	0b24      	lsrs	r4, r4, #12
 8001586:	08c2      	lsrs	r2, r0, #3
 8001588:	2300      	movs	r3, #0
 800158a:	430a      	orrs	r2, r1
 800158c:	e6cc      	b.n	8001328 <__aeabi_dmul+0xac>
 800158e:	46c0      	nop			@ (mov r8, r8)
 8001590:	000007ff 	.word	0x000007ff
 8001594:	fffffc01 	.word	0xfffffc01
 8001598:	000003ff 	.word	0x000003ff
 800159c:	feffffff 	.word	0xfeffffff
 80015a0:	000007fe 	.word	0x000007fe
 80015a4:	fffffc0d 	.word	0xfffffc0d
 80015a8:	0000043e 	.word	0x0000043e
 80015ac:	4649      	mov	r1, r9
 80015ae:	464a      	mov	r2, r9
 80015b0:	0409      	lsls	r1, r1, #16
 80015b2:	0c09      	lsrs	r1, r1, #16
 80015b4:	000d      	movs	r5, r1
 80015b6:	0c16      	lsrs	r6, r2, #16
 80015b8:	0c02      	lsrs	r2, r0, #16
 80015ba:	0400      	lsls	r0, r0, #16
 80015bc:	0c00      	lsrs	r0, r0, #16
 80015be:	4345      	muls	r5, r0
 80015c0:	46ac      	mov	ip, r5
 80015c2:	0005      	movs	r5, r0
 80015c4:	4375      	muls	r5, r6
 80015c6:	46a8      	mov	r8, r5
 80015c8:	0015      	movs	r5, r2
 80015ca:	000f      	movs	r7, r1
 80015cc:	4375      	muls	r5, r6
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	9502      	str	r5, [sp, #8]
 80015d2:	002a      	movs	r2, r5
 80015d4:	9d00      	ldr	r5, [sp, #0]
 80015d6:	436f      	muls	r7, r5
 80015d8:	4665      	mov	r5, ip
 80015da:	0c2d      	lsrs	r5, r5, #16
 80015dc:	46a9      	mov	r9, r5
 80015de:	4447      	add	r7, r8
 80015e0:	444f      	add	r7, r9
 80015e2:	45b8      	cmp	r8, r7
 80015e4:	d905      	bls.n	80015f2 <__aeabi_dmul+0x376>
 80015e6:	0015      	movs	r5, r2
 80015e8:	2280      	movs	r2, #128	@ 0x80
 80015ea:	0252      	lsls	r2, r2, #9
 80015ec:	4690      	mov	r8, r2
 80015ee:	4445      	add	r5, r8
 80015f0:	9502      	str	r5, [sp, #8]
 80015f2:	0c3d      	lsrs	r5, r7, #16
 80015f4:	9503      	str	r5, [sp, #12]
 80015f6:	4665      	mov	r5, ip
 80015f8:	042d      	lsls	r5, r5, #16
 80015fa:	043f      	lsls	r7, r7, #16
 80015fc:	0c2d      	lsrs	r5, r5, #16
 80015fe:	46ac      	mov	ip, r5
 8001600:	003d      	movs	r5, r7
 8001602:	4465      	add	r5, ip
 8001604:	9504      	str	r5, [sp, #16]
 8001606:	0c25      	lsrs	r5, r4, #16
 8001608:	0424      	lsls	r4, r4, #16
 800160a:	0c24      	lsrs	r4, r4, #16
 800160c:	46ac      	mov	ip, r5
 800160e:	0025      	movs	r5, r4
 8001610:	4375      	muls	r5, r6
 8001612:	46a8      	mov	r8, r5
 8001614:	4665      	mov	r5, ip
 8001616:	000f      	movs	r7, r1
 8001618:	4369      	muls	r1, r5
 800161a:	4441      	add	r1, r8
 800161c:	4689      	mov	r9, r1
 800161e:	4367      	muls	r7, r4
 8001620:	0c39      	lsrs	r1, r7, #16
 8001622:	4449      	add	r1, r9
 8001624:	436e      	muls	r6, r5
 8001626:	4588      	cmp	r8, r1
 8001628:	d903      	bls.n	8001632 <__aeabi_dmul+0x3b6>
 800162a:	2280      	movs	r2, #128	@ 0x80
 800162c:	0252      	lsls	r2, r2, #9
 800162e:	4690      	mov	r8, r2
 8001630:	4446      	add	r6, r8
 8001632:	0c0d      	lsrs	r5, r1, #16
 8001634:	46a8      	mov	r8, r5
 8001636:	0035      	movs	r5, r6
 8001638:	4445      	add	r5, r8
 800163a:	9505      	str	r5, [sp, #20]
 800163c:	9d03      	ldr	r5, [sp, #12]
 800163e:	043f      	lsls	r7, r7, #16
 8001640:	46a8      	mov	r8, r5
 8001642:	0c3f      	lsrs	r7, r7, #16
 8001644:	0409      	lsls	r1, r1, #16
 8001646:	19c9      	adds	r1, r1, r7
 8001648:	4488      	add	r8, r1
 800164a:	4645      	mov	r5, r8
 800164c:	9503      	str	r5, [sp, #12]
 800164e:	4655      	mov	r5, sl
 8001650:	042e      	lsls	r6, r5, #16
 8001652:	0c36      	lsrs	r6, r6, #16
 8001654:	0c2f      	lsrs	r7, r5, #16
 8001656:	0035      	movs	r5, r6
 8001658:	4345      	muls	r5, r0
 800165a:	4378      	muls	r0, r7
 800165c:	4681      	mov	r9, r0
 800165e:	0038      	movs	r0, r7
 8001660:	46a8      	mov	r8, r5
 8001662:	0c2d      	lsrs	r5, r5, #16
 8001664:	46aa      	mov	sl, r5
 8001666:	9a00      	ldr	r2, [sp, #0]
 8001668:	4350      	muls	r0, r2
 800166a:	4372      	muls	r2, r6
 800166c:	444a      	add	r2, r9
 800166e:	4452      	add	r2, sl
 8001670:	4591      	cmp	r9, r2
 8001672:	d903      	bls.n	800167c <__aeabi_dmul+0x400>
 8001674:	2580      	movs	r5, #128	@ 0x80
 8001676:	026d      	lsls	r5, r5, #9
 8001678:	46a9      	mov	r9, r5
 800167a:	4448      	add	r0, r9
 800167c:	0c15      	lsrs	r5, r2, #16
 800167e:	46a9      	mov	r9, r5
 8001680:	4645      	mov	r5, r8
 8001682:	042d      	lsls	r5, r5, #16
 8001684:	0c2d      	lsrs	r5, r5, #16
 8001686:	46a8      	mov	r8, r5
 8001688:	4665      	mov	r5, ip
 800168a:	437d      	muls	r5, r7
 800168c:	0412      	lsls	r2, r2, #16
 800168e:	4448      	add	r0, r9
 8001690:	4490      	add	r8, r2
 8001692:	46a9      	mov	r9, r5
 8001694:	0032      	movs	r2, r6
 8001696:	4665      	mov	r5, ip
 8001698:	4362      	muls	r2, r4
 800169a:	436e      	muls	r6, r5
 800169c:	437c      	muls	r4, r7
 800169e:	0c17      	lsrs	r7, r2, #16
 80016a0:	1936      	adds	r6, r6, r4
 80016a2:	19bf      	adds	r7, r7, r6
 80016a4:	42bc      	cmp	r4, r7
 80016a6:	d903      	bls.n	80016b0 <__aeabi_dmul+0x434>
 80016a8:	2480      	movs	r4, #128	@ 0x80
 80016aa:	0264      	lsls	r4, r4, #9
 80016ac:	46a4      	mov	ip, r4
 80016ae:	44e1      	add	r9, ip
 80016b0:	9c02      	ldr	r4, [sp, #8]
 80016b2:	9e03      	ldr	r6, [sp, #12]
 80016b4:	46a4      	mov	ip, r4
 80016b6:	9d05      	ldr	r5, [sp, #20]
 80016b8:	4466      	add	r6, ip
 80016ba:	428e      	cmp	r6, r1
 80016bc:	4189      	sbcs	r1, r1
 80016be:	46ac      	mov	ip, r5
 80016c0:	0412      	lsls	r2, r2, #16
 80016c2:	043c      	lsls	r4, r7, #16
 80016c4:	0c12      	lsrs	r2, r2, #16
 80016c6:	18a2      	adds	r2, r4, r2
 80016c8:	4462      	add	r2, ip
 80016ca:	4249      	negs	r1, r1
 80016cc:	1854      	adds	r4, r2, r1
 80016ce:	4446      	add	r6, r8
 80016d0:	46a4      	mov	ip, r4
 80016d2:	4546      	cmp	r6, r8
 80016d4:	41a4      	sbcs	r4, r4
 80016d6:	4682      	mov	sl, r0
 80016d8:	4264      	negs	r4, r4
 80016da:	46a0      	mov	r8, r4
 80016dc:	42aa      	cmp	r2, r5
 80016de:	4192      	sbcs	r2, r2
 80016e0:	458c      	cmp	ip, r1
 80016e2:	4189      	sbcs	r1, r1
 80016e4:	44e2      	add	sl, ip
 80016e6:	44d0      	add	r8, sl
 80016e8:	4249      	negs	r1, r1
 80016ea:	4252      	negs	r2, r2
 80016ec:	430a      	orrs	r2, r1
 80016ee:	45a0      	cmp	r8, r4
 80016f0:	41a4      	sbcs	r4, r4
 80016f2:	4582      	cmp	sl, r0
 80016f4:	4189      	sbcs	r1, r1
 80016f6:	4264      	negs	r4, r4
 80016f8:	4249      	negs	r1, r1
 80016fa:	430c      	orrs	r4, r1
 80016fc:	4641      	mov	r1, r8
 80016fe:	0c3f      	lsrs	r7, r7, #16
 8001700:	19d2      	adds	r2, r2, r7
 8001702:	1912      	adds	r2, r2, r4
 8001704:	0dcc      	lsrs	r4, r1, #23
 8001706:	9904      	ldr	r1, [sp, #16]
 8001708:	0270      	lsls	r0, r6, #9
 800170a:	4308      	orrs	r0, r1
 800170c:	1e41      	subs	r1, r0, #1
 800170e:	4188      	sbcs	r0, r1
 8001710:	4641      	mov	r1, r8
 8001712:	444a      	add	r2, r9
 8001714:	0df6      	lsrs	r6, r6, #23
 8001716:	0252      	lsls	r2, r2, #9
 8001718:	4330      	orrs	r0, r6
 800171a:	0249      	lsls	r1, r1, #9
 800171c:	4314      	orrs	r4, r2
 800171e:	4308      	orrs	r0, r1
 8001720:	01d2      	lsls	r2, r2, #7
 8001722:	d535      	bpl.n	8001790 <__aeabi_dmul+0x514>
 8001724:	2201      	movs	r2, #1
 8001726:	0843      	lsrs	r3, r0, #1
 8001728:	4002      	ands	r2, r0
 800172a:	4313      	orrs	r3, r2
 800172c:	07e0      	lsls	r0, r4, #31
 800172e:	4318      	orrs	r0, r3
 8001730:	0864      	lsrs	r4, r4, #1
 8001732:	e634      	b.n	800139e <__aeabi_dmul+0x122>
 8001734:	9b00      	ldr	r3, [sp, #0]
 8001736:	46a2      	mov	sl, r4
 8001738:	469b      	mov	fp, r3
 800173a:	4681      	mov	r9, r0
 800173c:	2480      	movs	r4, #128	@ 0x80
 800173e:	4653      	mov	r3, sl
 8001740:	0324      	lsls	r4, r4, #12
 8001742:	431c      	orrs	r4, r3
 8001744:	0324      	lsls	r4, r4, #12
 8001746:	464a      	mov	r2, r9
 8001748:	4b2e      	ldr	r3, [pc, #184]	@ (8001804 <__aeabi_dmul+0x588>)
 800174a:	0b24      	lsrs	r4, r4, #12
 800174c:	e5ec      	b.n	8001328 <__aeabi_dmul+0xac>
 800174e:	f000 fd53 	bl	80021f8 <__clzsi2>
 8001752:	2315      	movs	r3, #21
 8001754:	469c      	mov	ip, r3
 8001756:	4484      	add	ip, r0
 8001758:	0002      	movs	r2, r0
 800175a:	4663      	mov	r3, ip
 800175c:	3220      	adds	r2, #32
 800175e:	2b1c      	cmp	r3, #28
 8001760:	dc00      	bgt.n	8001764 <__aeabi_dmul+0x4e8>
 8001762:	e684      	b.n	800146e <__aeabi_dmul+0x1f2>
 8001764:	2300      	movs	r3, #0
 8001766:	4699      	mov	r9, r3
 8001768:	0023      	movs	r3, r4
 800176a:	3808      	subs	r0, #8
 800176c:	4083      	lsls	r3, r0
 800176e:	469a      	mov	sl, r3
 8001770:	e68e      	b.n	8001490 <__aeabi_dmul+0x214>
 8001772:	f000 fd41 	bl	80021f8 <__clzsi2>
 8001776:	0002      	movs	r2, r0
 8001778:	0003      	movs	r3, r0
 800177a:	3215      	adds	r2, #21
 800177c:	3320      	adds	r3, #32
 800177e:	2a1c      	cmp	r2, #28
 8001780:	dc00      	bgt.n	8001784 <__aeabi_dmul+0x508>
 8001782:	e64e      	b.n	8001422 <__aeabi_dmul+0x1a6>
 8001784:	0002      	movs	r2, r0
 8001786:	0034      	movs	r4, r6
 8001788:	3a08      	subs	r2, #8
 800178a:	2000      	movs	r0, #0
 800178c:	4094      	lsls	r4, r2
 800178e:	e652      	b.n	8001436 <__aeabi_dmul+0x1ba>
 8001790:	9301      	str	r3, [sp, #4]
 8001792:	e604      	b.n	800139e <__aeabi_dmul+0x122>
 8001794:	4b1c      	ldr	r3, [pc, #112]	@ (8001808 <__aeabi_dmul+0x58c>)
 8001796:	0021      	movs	r1, r4
 8001798:	469c      	mov	ip, r3
 800179a:	0003      	movs	r3, r0
 800179c:	9d01      	ldr	r5, [sp, #4]
 800179e:	40d3      	lsrs	r3, r2
 80017a0:	4465      	add	r5, ip
 80017a2:	40a9      	lsls	r1, r5
 80017a4:	4319      	orrs	r1, r3
 80017a6:	0003      	movs	r3, r0
 80017a8:	40ab      	lsls	r3, r5
 80017aa:	1e58      	subs	r0, r3, #1
 80017ac:	4183      	sbcs	r3, r0
 80017ae:	4319      	orrs	r1, r3
 80017b0:	0008      	movs	r0, r1
 80017b2:	40d4      	lsrs	r4, r2
 80017b4:	074b      	lsls	r3, r1, #29
 80017b6:	d009      	beq.n	80017cc <__aeabi_dmul+0x550>
 80017b8:	230f      	movs	r3, #15
 80017ba:	400b      	ands	r3, r1
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d005      	beq.n	80017cc <__aeabi_dmul+0x550>
 80017c0:	1d0b      	adds	r3, r1, #4
 80017c2:	428b      	cmp	r3, r1
 80017c4:	4180      	sbcs	r0, r0
 80017c6:	4240      	negs	r0, r0
 80017c8:	1824      	adds	r4, r4, r0
 80017ca:	0018      	movs	r0, r3
 80017cc:	0223      	lsls	r3, r4, #8
 80017ce:	d400      	bmi.n	80017d2 <__aeabi_dmul+0x556>
 80017d0:	e6d6      	b.n	8001580 <__aeabi_dmul+0x304>
 80017d2:	2301      	movs	r3, #1
 80017d4:	2400      	movs	r4, #0
 80017d6:	2200      	movs	r2, #0
 80017d8:	e5a6      	b.n	8001328 <__aeabi_dmul+0xac>
 80017da:	290f      	cmp	r1, #15
 80017dc:	d1aa      	bne.n	8001734 <__aeabi_dmul+0x4b8>
 80017de:	2380      	movs	r3, #128	@ 0x80
 80017e0:	4652      	mov	r2, sl
 80017e2:	031b      	lsls	r3, r3, #12
 80017e4:	421a      	tst	r2, r3
 80017e6:	d0a9      	beq.n	800173c <__aeabi_dmul+0x4c0>
 80017e8:	421c      	tst	r4, r3
 80017ea:	d1a7      	bne.n	800173c <__aeabi_dmul+0x4c0>
 80017ec:	431c      	orrs	r4, r3
 80017ee:	9b00      	ldr	r3, [sp, #0]
 80017f0:	0002      	movs	r2, r0
 80017f2:	469b      	mov	fp, r3
 80017f4:	4b03      	ldr	r3, [pc, #12]	@ (8001804 <__aeabi_dmul+0x588>)
 80017f6:	e597      	b.n	8001328 <__aeabi_dmul+0xac>
 80017f8:	2400      	movs	r4, #0
 80017fa:	e6c1      	b.n	8001580 <__aeabi_dmul+0x304>
 80017fc:	2400      	movs	r4, #0
 80017fe:	4b01      	ldr	r3, [pc, #4]	@ (8001804 <__aeabi_dmul+0x588>)
 8001800:	0022      	movs	r2, r4
 8001802:	e591      	b.n	8001328 <__aeabi_dmul+0xac>
 8001804:	000007ff 	.word	0x000007ff
 8001808:	0000041e 	.word	0x0000041e

0800180c <__aeabi_dsub>:
 800180c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800180e:	464e      	mov	r6, r9
 8001810:	4645      	mov	r5, r8
 8001812:	46de      	mov	lr, fp
 8001814:	4657      	mov	r7, sl
 8001816:	b5e0      	push	{r5, r6, r7, lr}
 8001818:	b085      	sub	sp, #20
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	9101      	str	r1, [sp, #4]
 800181e:	030c      	lsls	r4, r1, #12
 8001820:	004f      	lsls	r7, r1, #1
 8001822:	0fce      	lsrs	r6, r1, #31
 8001824:	0a61      	lsrs	r1, r4, #9
 8001826:	9c00      	ldr	r4, [sp, #0]
 8001828:	46b0      	mov	r8, r6
 800182a:	0f64      	lsrs	r4, r4, #29
 800182c:	430c      	orrs	r4, r1
 800182e:	9900      	ldr	r1, [sp, #0]
 8001830:	0d7f      	lsrs	r7, r7, #21
 8001832:	00c8      	lsls	r0, r1, #3
 8001834:	0011      	movs	r1, r2
 8001836:	001a      	movs	r2, r3
 8001838:	031b      	lsls	r3, r3, #12
 800183a:	469c      	mov	ip, r3
 800183c:	9100      	str	r1, [sp, #0]
 800183e:	9201      	str	r2, [sp, #4]
 8001840:	0051      	lsls	r1, r2, #1
 8001842:	0d4b      	lsrs	r3, r1, #21
 8001844:	4699      	mov	r9, r3
 8001846:	9b01      	ldr	r3, [sp, #4]
 8001848:	9d00      	ldr	r5, [sp, #0]
 800184a:	0fd9      	lsrs	r1, r3, #31
 800184c:	4663      	mov	r3, ip
 800184e:	0f6a      	lsrs	r2, r5, #29
 8001850:	0a5b      	lsrs	r3, r3, #9
 8001852:	4313      	orrs	r3, r2
 8001854:	00ea      	lsls	r2, r5, #3
 8001856:	4694      	mov	ip, r2
 8001858:	4693      	mov	fp, r2
 800185a:	4ac1      	ldr	r2, [pc, #772]	@ (8001b60 <__aeabi_dsub+0x354>)
 800185c:	9003      	str	r0, [sp, #12]
 800185e:	9302      	str	r3, [sp, #8]
 8001860:	4591      	cmp	r9, r2
 8001862:	d100      	bne.n	8001866 <__aeabi_dsub+0x5a>
 8001864:	e0cd      	b.n	8001a02 <__aeabi_dsub+0x1f6>
 8001866:	2501      	movs	r5, #1
 8001868:	4069      	eors	r1, r5
 800186a:	464d      	mov	r5, r9
 800186c:	1b7d      	subs	r5, r7, r5
 800186e:	46aa      	mov	sl, r5
 8001870:	428e      	cmp	r6, r1
 8001872:	d100      	bne.n	8001876 <__aeabi_dsub+0x6a>
 8001874:	e080      	b.n	8001978 <__aeabi_dsub+0x16c>
 8001876:	2d00      	cmp	r5, #0
 8001878:	dc00      	bgt.n	800187c <__aeabi_dsub+0x70>
 800187a:	e335      	b.n	8001ee8 <__aeabi_dsub+0x6dc>
 800187c:	4649      	mov	r1, r9
 800187e:	2900      	cmp	r1, #0
 8001880:	d100      	bne.n	8001884 <__aeabi_dsub+0x78>
 8001882:	e0df      	b.n	8001a44 <__aeabi_dsub+0x238>
 8001884:	4297      	cmp	r7, r2
 8001886:	d100      	bne.n	800188a <__aeabi_dsub+0x7e>
 8001888:	e194      	b.n	8001bb4 <__aeabi_dsub+0x3a8>
 800188a:	4652      	mov	r2, sl
 800188c:	2501      	movs	r5, #1
 800188e:	2a38      	cmp	r2, #56	@ 0x38
 8001890:	dc19      	bgt.n	80018c6 <__aeabi_dsub+0xba>
 8001892:	2280      	movs	r2, #128	@ 0x80
 8001894:	9b02      	ldr	r3, [sp, #8]
 8001896:	0412      	lsls	r2, r2, #16
 8001898:	4313      	orrs	r3, r2
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	4652      	mov	r2, sl
 800189e:	2a1f      	cmp	r2, #31
 80018a0:	dd00      	ble.n	80018a4 <__aeabi_dsub+0x98>
 80018a2:	e1e3      	b.n	8001c6c <__aeabi_dsub+0x460>
 80018a4:	4653      	mov	r3, sl
 80018a6:	2220      	movs	r2, #32
 80018a8:	4661      	mov	r1, ip
 80018aa:	9d02      	ldr	r5, [sp, #8]
 80018ac:	1ad2      	subs	r2, r2, r3
 80018ae:	4095      	lsls	r5, r2
 80018b0:	40d9      	lsrs	r1, r3
 80018b2:	430d      	orrs	r5, r1
 80018b4:	4661      	mov	r1, ip
 80018b6:	4091      	lsls	r1, r2
 80018b8:	000a      	movs	r2, r1
 80018ba:	1e51      	subs	r1, r2, #1
 80018bc:	418a      	sbcs	r2, r1
 80018be:	4315      	orrs	r5, r2
 80018c0:	9a02      	ldr	r2, [sp, #8]
 80018c2:	40da      	lsrs	r2, r3
 80018c4:	1aa4      	subs	r4, r4, r2
 80018c6:	1b45      	subs	r5, r0, r5
 80018c8:	42a8      	cmp	r0, r5
 80018ca:	4180      	sbcs	r0, r0
 80018cc:	4240      	negs	r0, r0
 80018ce:	1a24      	subs	r4, r4, r0
 80018d0:	0223      	lsls	r3, r4, #8
 80018d2:	d400      	bmi.n	80018d6 <__aeabi_dsub+0xca>
 80018d4:	e13d      	b.n	8001b52 <__aeabi_dsub+0x346>
 80018d6:	0264      	lsls	r4, r4, #9
 80018d8:	0a64      	lsrs	r4, r4, #9
 80018da:	2c00      	cmp	r4, #0
 80018dc:	d100      	bne.n	80018e0 <__aeabi_dsub+0xd4>
 80018de:	e147      	b.n	8001b70 <__aeabi_dsub+0x364>
 80018e0:	0020      	movs	r0, r4
 80018e2:	f000 fc89 	bl	80021f8 <__clzsi2>
 80018e6:	0003      	movs	r3, r0
 80018e8:	3b08      	subs	r3, #8
 80018ea:	2120      	movs	r1, #32
 80018ec:	0028      	movs	r0, r5
 80018ee:	1aca      	subs	r2, r1, r3
 80018f0:	40d0      	lsrs	r0, r2
 80018f2:	409c      	lsls	r4, r3
 80018f4:	0002      	movs	r2, r0
 80018f6:	409d      	lsls	r5, r3
 80018f8:	4322      	orrs	r2, r4
 80018fa:	429f      	cmp	r7, r3
 80018fc:	dd00      	ble.n	8001900 <__aeabi_dsub+0xf4>
 80018fe:	e177      	b.n	8001bf0 <__aeabi_dsub+0x3e4>
 8001900:	1bd8      	subs	r0, r3, r7
 8001902:	3001      	adds	r0, #1
 8001904:	1a09      	subs	r1, r1, r0
 8001906:	002c      	movs	r4, r5
 8001908:	408d      	lsls	r5, r1
 800190a:	40c4      	lsrs	r4, r0
 800190c:	1e6b      	subs	r3, r5, #1
 800190e:	419d      	sbcs	r5, r3
 8001910:	0013      	movs	r3, r2
 8001912:	40c2      	lsrs	r2, r0
 8001914:	408b      	lsls	r3, r1
 8001916:	4325      	orrs	r5, r4
 8001918:	2700      	movs	r7, #0
 800191a:	0014      	movs	r4, r2
 800191c:	431d      	orrs	r5, r3
 800191e:	076b      	lsls	r3, r5, #29
 8001920:	d009      	beq.n	8001936 <__aeabi_dsub+0x12a>
 8001922:	230f      	movs	r3, #15
 8001924:	402b      	ands	r3, r5
 8001926:	2b04      	cmp	r3, #4
 8001928:	d005      	beq.n	8001936 <__aeabi_dsub+0x12a>
 800192a:	1d2b      	adds	r3, r5, #4
 800192c:	42ab      	cmp	r3, r5
 800192e:	41ad      	sbcs	r5, r5
 8001930:	426d      	negs	r5, r5
 8001932:	1964      	adds	r4, r4, r5
 8001934:	001d      	movs	r5, r3
 8001936:	0223      	lsls	r3, r4, #8
 8001938:	d400      	bmi.n	800193c <__aeabi_dsub+0x130>
 800193a:	e140      	b.n	8001bbe <__aeabi_dsub+0x3b2>
 800193c:	4a88      	ldr	r2, [pc, #544]	@ (8001b60 <__aeabi_dsub+0x354>)
 800193e:	3701      	adds	r7, #1
 8001940:	4297      	cmp	r7, r2
 8001942:	d100      	bne.n	8001946 <__aeabi_dsub+0x13a>
 8001944:	e101      	b.n	8001b4a <__aeabi_dsub+0x33e>
 8001946:	2601      	movs	r6, #1
 8001948:	4643      	mov	r3, r8
 800194a:	4986      	ldr	r1, [pc, #536]	@ (8001b64 <__aeabi_dsub+0x358>)
 800194c:	08ed      	lsrs	r5, r5, #3
 800194e:	4021      	ands	r1, r4
 8001950:	074a      	lsls	r2, r1, #29
 8001952:	432a      	orrs	r2, r5
 8001954:	057c      	lsls	r4, r7, #21
 8001956:	024d      	lsls	r5, r1, #9
 8001958:	0b2d      	lsrs	r5, r5, #12
 800195a:	0d64      	lsrs	r4, r4, #21
 800195c:	401e      	ands	r6, r3
 800195e:	0524      	lsls	r4, r4, #20
 8001960:	432c      	orrs	r4, r5
 8001962:	07f6      	lsls	r6, r6, #31
 8001964:	4334      	orrs	r4, r6
 8001966:	0010      	movs	r0, r2
 8001968:	0021      	movs	r1, r4
 800196a:	b005      	add	sp, #20
 800196c:	bcf0      	pop	{r4, r5, r6, r7}
 800196e:	46bb      	mov	fp, r7
 8001970:	46b2      	mov	sl, r6
 8001972:	46a9      	mov	r9, r5
 8001974:	46a0      	mov	r8, r4
 8001976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001978:	2d00      	cmp	r5, #0
 800197a:	dc00      	bgt.n	800197e <__aeabi_dsub+0x172>
 800197c:	e2d0      	b.n	8001f20 <__aeabi_dsub+0x714>
 800197e:	4649      	mov	r1, r9
 8001980:	2900      	cmp	r1, #0
 8001982:	d000      	beq.n	8001986 <__aeabi_dsub+0x17a>
 8001984:	e0d4      	b.n	8001b30 <__aeabi_dsub+0x324>
 8001986:	4661      	mov	r1, ip
 8001988:	9b02      	ldr	r3, [sp, #8]
 800198a:	4319      	orrs	r1, r3
 800198c:	d100      	bne.n	8001990 <__aeabi_dsub+0x184>
 800198e:	e12b      	b.n	8001be8 <__aeabi_dsub+0x3dc>
 8001990:	1e69      	subs	r1, r5, #1
 8001992:	2d01      	cmp	r5, #1
 8001994:	d100      	bne.n	8001998 <__aeabi_dsub+0x18c>
 8001996:	e1d9      	b.n	8001d4c <__aeabi_dsub+0x540>
 8001998:	4295      	cmp	r5, r2
 800199a:	d100      	bne.n	800199e <__aeabi_dsub+0x192>
 800199c:	e10a      	b.n	8001bb4 <__aeabi_dsub+0x3a8>
 800199e:	2501      	movs	r5, #1
 80019a0:	2938      	cmp	r1, #56	@ 0x38
 80019a2:	dc17      	bgt.n	80019d4 <__aeabi_dsub+0x1c8>
 80019a4:	468a      	mov	sl, r1
 80019a6:	4653      	mov	r3, sl
 80019a8:	2b1f      	cmp	r3, #31
 80019aa:	dd00      	ble.n	80019ae <__aeabi_dsub+0x1a2>
 80019ac:	e1e7      	b.n	8001d7e <__aeabi_dsub+0x572>
 80019ae:	2220      	movs	r2, #32
 80019b0:	1ad2      	subs	r2, r2, r3
 80019b2:	9b02      	ldr	r3, [sp, #8]
 80019b4:	4661      	mov	r1, ip
 80019b6:	4093      	lsls	r3, r2
 80019b8:	001d      	movs	r5, r3
 80019ba:	4653      	mov	r3, sl
 80019bc:	40d9      	lsrs	r1, r3
 80019be:	4663      	mov	r3, ip
 80019c0:	4093      	lsls	r3, r2
 80019c2:	001a      	movs	r2, r3
 80019c4:	430d      	orrs	r5, r1
 80019c6:	1e51      	subs	r1, r2, #1
 80019c8:	418a      	sbcs	r2, r1
 80019ca:	4653      	mov	r3, sl
 80019cc:	4315      	orrs	r5, r2
 80019ce:	9a02      	ldr	r2, [sp, #8]
 80019d0:	40da      	lsrs	r2, r3
 80019d2:	18a4      	adds	r4, r4, r2
 80019d4:	182d      	adds	r5, r5, r0
 80019d6:	4285      	cmp	r5, r0
 80019d8:	4180      	sbcs	r0, r0
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d400      	bmi.n	80019e4 <__aeabi_dsub+0x1d8>
 80019e2:	e0b6      	b.n	8001b52 <__aeabi_dsub+0x346>
 80019e4:	4b5e      	ldr	r3, [pc, #376]	@ (8001b60 <__aeabi_dsub+0x354>)
 80019e6:	3701      	adds	r7, #1
 80019e8:	429f      	cmp	r7, r3
 80019ea:	d100      	bne.n	80019ee <__aeabi_dsub+0x1e2>
 80019ec:	e0ad      	b.n	8001b4a <__aeabi_dsub+0x33e>
 80019ee:	2101      	movs	r1, #1
 80019f0:	4b5c      	ldr	r3, [pc, #368]	@ (8001b64 <__aeabi_dsub+0x358>)
 80019f2:	086a      	lsrs	r2, r5, #1
 80019f4:	401c      	ands	r4, r3
 80019f6:	4029      	ands	r1, r5
 80019f8:	430a      	orrs	r2, r1
 80019fa:	07e5      	lsls	r5, r4, #31
 80019fc:	4315      	orrs	r5, r2
 80019fe:	0864      	lsrs	r4, r4, #1
 8001a00:	e78d      	b.n	800191e <__aeabi_dsub+0x112>
 8001a02:	4a59      	ldr	r2, [pc, #356]	@ (8001b68 <__aeabi_dsub+0x35c>)
 8001a04:	9b02      	ldr	r3, [sp, #8]
 8001a06:	4692      	mov	sl, r2
 8001a08:	4662      	mov	r2, ip
 8001a0a:	44ba      	add	sl, r7
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	d02c      	beq.n	8001a6a <__aeabi_dsub+0x25e>
 8001a10:	428e      	cmp	r6, r1
 8001a12:	d02e      	beq.n	8001a72 <__aeabi_dsub+0x266>
 8001a14:	4652      	mov	r2, sl
 8001a16:	2a00      	cmp	r2, #0
 8001a18:	d060      	beq.n	8001adc <__aeabi_dsub+0x2d0>
 8001a1a:	2f00      	cmp	r7, #0
 8001a1c:	d100      	bne.n	8001a20 <__aeabi_dsub+0x214>
 8001a1e:	e0db      	b.n	8001bd8 <__aeabi_dsub+0x3cc>
 8001a20:	4663      	mov	r3, ip
 8001a22:	000e      	movs	r6, r1
 8001a24:	9c02      	ldr	r4, [sp, #8]
 8001a26:	08d8      	lsrs	r0, r3, #3
 8001a28:	0762      	lsls	r2, r4, #29
 8001a2a:	4302      	orrs	r2, r0
 8001a2c:	08e4      	lsrs	r4, r4, #3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	4323      	orrs	r3, r4
 8001a32:	d100      	bne.n	8001a36 <__aeabi_dsub+0x22a>
 8001a34:	e254      	b.n	8001ee0 <__aeabi_dsub+0x6d4>
 8001a36:	2580      	movs	r5, #128	@ 0x80
 8001a38:	032d      	lsls	r5, r5, #12
 8001a3a:	4325      	orrs	r5, r4
 8001a3c:	032d      	lsls	r5, r5, #12
 8001a3e:	4c48      	ldr	r4, [pc, #288]	@ (8001b60 <__aeabi_dsub+0x354>)
 8001a40:	0b2d      	lsrs	r5, r5, #12
 8001a42:	e78c      	b.n	800195e <__aeabi_dsub+0x152>
 8001a44:	4661      	mov	r1, ip
 8001a46:	9b02      	ldr	r3, [sp, #8]
 8001a48:	4319      	orrs	r1, r3
 8001a4a:	d100      	bne.n	8001a4e <__aeabi_dsub+0x242>
 8001a4c:	e0cc      	b.n	8001be8 <__aeabi_dsub+0x3dc>
 8001a4e:	0029      	movs	r1, r5
 8001a50:	3901      	subs	r1, #1
 8001a52:	2d01      	cmp	r5, #1
 8001a54:	d100      	bne.n	8001a58 <__aeabi_dsub+0x24c>
 8001a56:	e188      	b.n	8001d6a <__aeabi_dsub+0x55e>
 8001a58:	4295      	cmp	r5, r2
 8001a5a:	d100      	bne.n	8001a5e <__aeabi_dsub+0x252>
 8001a5c:	e0aa      	b.n	8001bb4 <__aeabi_dsub+0x3a8>
 8001a5e:	2501      	movs	r5, #1
 8001a60:	2938      	cmp	r1, #56	@ 0x38
 8001a62:	dd00      	ble.n	8001a66 <__aeabi_dsub+0x25a>
 8001a64:	e72f      	b.n	80018c6 <__aeabi_dsub+0xba>
 8001a66:	468a      	mov	sl, r1
 8001a68:	e718      	b.n	800189c <__aeabi_dsub+0x90>
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	4051      	eors	r1, r2
 8001a6e:	428e      	cmp	r6, r1
 8001a70:	d1d0      	bne.n	8001a14 <__aeabi_dsub+0x208>
 8001a72:	4653      	mov	r3, sl
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dsub+0x26e>
 8001a78:	e0be      	b.n	8001bf8 <__aeabi_dsub+0x3ec>
 8001a7a:	2f00      	cmp	r7, #0
 8001a7c:	d000      	beq.n	8001a80 <__aeabi_dsub+0x274>
 8001a7e:	e138      	b.n	8001cf2 <__aeabi_dsub+0x4e6>
 8001a80:	46ca      	mov	sl, r9
 8001a82:	0022      	movs	r2, r4
 8001a84:	4302      	orrs	r2, r0
 8001a86:	d100      	bne.n	8001a8a <__aeabi_dsub+0x27e>
 8001a88:	e1e2      	b.n	8001e50 <__aeabi_dsub+0x644>
 8001a8a:	4653      	mov	r3, sl
 8001a8c:	1e59      	subs	r1, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d100      	bne.n	8001a94 <__aeabi_dsub+0x288>
 8001a92:	e20d      	b.n	8001eb0 <__aeabi_dsub+0x6a4>
 8001a94:	4a32      	ldr	r2, [pc, #200]	@ (8001b60 <__aeabi_dsub+0x354>)
 8001a96:	4592      	cmp	sl, r2
 8001a98:	d100      	bne.n	8001a9c <__aeabi_dsub+0x290>
 8001a9a:	e1d2      	b.n	8001e42 <__aeabi_dsub+0x636>
 8001a9c:	2701      	movs	r7, #1
 8001a9e:	2938      	cmp	r1, #56	@ 0x38
 8001aa0:	dc13      	bgt.n	8001aca <__aeabi_dsub+0x2be>
 8001aa2:	291f      	cmp	r1, #31
 8001aa4:	dd00      	ble.n	8001aa8 <__aeabi_dsub+0x29c>
 8001aa6:	e1ee      	b.n	8001e86 <__aeabi_dsub+0x67a>
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	9b02      	ldr	r3, [sp, #8]
 8001aac:	1a52      	subs	r2, r2, r1
 8001aae:	0025      	movs	r5, r4
 8001ab0:	0007      	movs	r7, r0
 8001ab2:	469a      	mov	sl, r3
 8001ab4:	40cc      	lsrs	r4, r1
 8001ab6:	4090      	lsls	r0, r2
 8001ab8:	4095      	lsls	r5, r2
 8001aba:	40cf      	lsrs	r7, r1
 8001abc:	44a2      	add	sl, r4
 8001abe:	1e42      	subs	r2, r0, #1
 8001ac0:	4190      	sbcs	r0, r2
 8001ac2:	4653      	mov	r3, sl
 8001ac4:	432f      	orrs	r7, r5
 8001ac6:	4307      	orrs	r7, r0
 8001ac8:	9302      	str	r3, [sp, #8]
 8001aca:	003d      	movs	r5, r7
 8001acc:	4465      	add	r5, ip
 8001ace:	4565      	cmp	r5, ip
 8001ad0:	4192      	sbcs	r2, r2
 8001ad2:	9b02      	ldr	r3, [sp, #8]
 8001ad4:	4252      	negs	r2, r2
 8001ad6:	464f      	mov	r7, r9
 8001ad8:	18d4      	adds	r4, r2, r3
 8001ada:	e780      	b.n	80019de <__aeabi_dsub+0x1d2>
 8001adc:	4a23      	ldr	r2, [pc, #140]	@ (8001b6c <__aeabi_dsub+0x360>)
 8001ade:	1c7d      	adds	r5, r7, #1
 8001ae0:	4215      	tst	r5, r2
 8001ae2:	d000      	beq.n	8001ae6 <__aeabi_dsub+0x2da>
 8001ae4:	e0aa      	b.n	8001c3c <__aeabi_dsub+0x430>
 8001ae6:	4662      	mov	r2, ip
 8001ae8:	0025      	movs	r5, r4
 8001aea:	9b02      	ldr	r3, [sp, #8]
 8001aec:	4305      	orrs	r5, r0
 8001aee:	431a      	orrs	r2, r3
 8001af0:	2f00      	cmp	r7, #0
 8001af2:	d000      	beq.n	8001af6 <__aeabi_dsub+0x2ea>
 8001af4:	e0f5      	b.n	8001ce2 <__aeabi_dsub+0x4d6>
 8001af6:	2d00      	cmp	r5, #0
 8001af8:	d100      	bne.n	8001afc <__aeabi_dsub+0x2f0>
 8001afa:	e16b      	b.n	8001dd4 <__aeabi_dsub+0x5c8>
 8001afc:	2a00      	cmp	r2, #0
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dsub+0x2f6>
 8001b00:	e152      	b.n	8001da8 <__aeabi_dsub+0x59c>
 8001b02:	4663      	mov	r3, ip
 8001b04:	1ac5      	subs	r5, r0, r3
 8001b06:	9b02      	ldr	r3, [sp, #8]
 8001b08:	1ae2      	subs	r2, r4, r3
 8001b0a:	42a8      	cmp	r0, r5
 8001b0c:	419b      	sbcs	r3, r3
 8001b0e:	425b      	negs	r3, r3
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	021a      	lsls	r2, r3, #8
 8001b14:	d400      	bmi.n	8001b18 <__aeabi_dsub+0x30c>
 8001b16:	e1d5      	b.n	8001ec4 <__aeabi_dsub+0x6b8>
 8001b18:	4663      	mov	r3, ip
 8001b1a:	1a1d      	subs	r5, r3, r0
 8001b1c:	45ac      	cmp	ip, r5
 8001b1e:	4192      	sbcs	r2, r2
 8001b20:	2601      	movs	r6, #1
 8001b22:	9b02      	ldr	r3, [sp, #8]
 8001b24:	4252      	negs	r2, r2
 8001b26:	1b1c      	subs	r4, r3, r4
 8001b28:	4688      	mov	r8, r1
 8001b2a:	1aa4      	subs	r4, r4, r2
 8001b2c:	400e      	ands	r6, r1
 8001b2e:	e6f6      	b.n	800191e <__aeabi_dsub+0x112>
 8001b30:	4297      	cmp	r7, r2
 8001b32:	d03f      	beq.n	8001bb4 <__aeabi_dsub+0x3a8>
 8001b34:	4652      	mov	r2, sl
 8001b36:	2501      	movs	r5, #1
 8001b38:	2a38      	cmp	r2, #56	@ 0x38
 8001b3a:	dd00      	ble.n	8001b3e <__aeabi_dsub+0x332>
 8001b3c:	e74a      	b.n	80019d4 <__aeabi_dsub+0x1c8>
 8001b3e:	2280      	movs	r2, #128	@ 0x80
 8001b40:	9b02      	ldr	r3, [sp, #8]
 8001b42:	0412      	lsls	r2, r2, #16
 8001b44:	4313      	orrs	r3, r2
 8001b46:	9302      	str	r3, [sp, #8]
 8001b48:	e72d      	b.n	80019a6 <__aeabi_dsub+0x19a>
 8001b4a:	003c      	movs	r4, r7
 8001b4c:	2500      	movs	r5, #0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	e705      	b.n	800195e <__aeabi_dsub+0x152>
 8001b52:	2307      	movs	r3, #7
 8001b54:	402b      	ands	r3, r5
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d000      	beq.n	8001b5c <__aeabi_dsub+0x350>
 8001b5a:	e6e2      	b.n	8001922 <__aeabi_dsub+0x116>
 8001b5c:	e06b      	b.n	8001c36 <__aeabi_dsub+0x42a>
 8001b5e:	46c0      	nop			@ (mov r8, r8)
 8001b60:	000007ff 	.word	0x000007ff
 8001b64:	ff7fffff 	.word	0xff7fffff
 8001b68:	fffff801 	.word	0xfffff801
 8001b6c:	000007fe 	.word	0x000007fe
 8001b70:	0028      	movs	r0, r5
 8001b72:	f000 fb41 	bl	80021f8 <__clzsi2>
 8001b76:	0003      	movs	r3, r0
 8001b78:	3318      	adds	r3, #24
 8001b7a:	2b1f      	cmp	r3, #31
 8001b7c:	dc00      	bgt.n	8001b80 <__aeabi_dsub+0x374>
 8001b7e:	e6b4      	b.n	80018ea <__aeabi_dsub+0xde>
 8001b80:	002a      	movs	r2, r5
 8001b82:	3808      	subs	r0, #8
 8001b84:	4082      	lsls	r2, r0
 8001b86:	429f      	cmp	r7, r3
 8001b88:	dd00      	ble.n	8001b8c <__aeabi_dsub+0x380>
 8001b8a:	e0b9      	b.n	8001d00 <__aeabi_dsub+0x4f4>
 8001b8c:	1bdb      	subs	r3, r3, r7
 8001b8e:	1c58      	adds	r0, r3, #1
 8001b90:	281f      	cmp	r0, #31
 8001b92:	dc00      	bgt.n	8001b96 <__aeabi_dsub+0x38a>
 8001b94:	e1a0      	b.n	8001ed8 <__aeabi_dsub+0x6cc>
 8001b96:	0015      	movs	r5, r2
 8001b98:	3b1f      	subs	r3, #31
 8001b9a:	40dd      	lsrs	r5, r3
 8001b9c:	2820      	cmp	r0, #32
 8001b9e:	d005      	beq.n	8001bac <__aeabi_dsub+0x3a0>
 8001ba0:	2340      	movs	r3, #64	@ 0x40
 8001ba2:	1a1b      	subs	r3, r3, r0
 8001ba4:	409a      	lsls	r2, r3
 8001ba6:	1e53      	subs	r3, r2, #1
 8001ba8:	419a      	sbcs	r2, r3
 8001baa:	4315      	orrs	r5, r2
 8001bac:	2307      	movs	r3, #7
 8001bae:	2700      	movs	r7, #0
 8001bb0:	402b      	ands	r3, r5
 8001bb2:	e7d0      	b.n	8001b56 <__aeabi_dsub+0x34a>
 8001bb4:	08c0      	lsrs	r0, r0, #3
 8001bb6:	0762      	lsls	r2, r4, #29
 8001bb8:	4302      	orrs	r2, r0
 8001bba:	08e4      	lsrs	r4, r4, #3
 8001bbc:	e737      	b.n	8001a2e <__aeabi_dsub+0x222>
 8001bbe:	08ea      	lsrs	r2, r5, #3
 8001bc0:	0763      	lsls	r3, r4, #29
 8001bc2:	431a      	orrs	r2, r3
 8001bc4:	4bd3      	ldr	r3, [pc, #844]	@ (8001f14 <__aeabi_dsub+0x708>)
 8001bc6:	08e4      	lsrs	r4, r4, #3
 8001bc8:	429f      	cmp	r7, r3
 8001bca:	d100      	bne.n	8001bce <__aeabi_dsub+0x3c2>
 8001bcc:	e72f      	b.n	8001a2e <__aeabi_dsub+0x222>
 8001bce:	0324      	lsls	r4, r4, #12
 8001bd0:	0b25      	lsrs	r5, r4, #12
 8001bd2:	057c      	lsls	r4, r7, #21
 8001bd4:	0d64      	lsrs	r4, r4, #21
 8001bd6:	e6c2      	b.n	800195e <__aeabi_dsub+0x152>
 8001bd8:	46ca      	mov	sl, r9
 8001bda:	0022      	movs	r2, r4
 8001bdc:	4302      	orrs	r2, r0
 8001bde:	d158      	bne.n	8001c92 <__aeabi_dsub+0x486>
 8001be0:	4663      	mov	r3, ip
 8001be2:	000e      	movs	r6, r1
 8001be4:	9c02      	ldr	r4, [sp, #8]
 8001be6:	9303      	str	r3, [sp, #12]
 8001be8:	9b03      	ldr	r3, [sp, #12]
 8001bea:	4657      	mov	r7, sl
 8001bec:	08da      	lsrs	r2, r3, #3
 8001bee:	e7e7      	b.n	8001bc0 <__aeabi_dsub+0x3b4>
 8001bf0:	4cc9      	ldr	r4, [pc, #804]	@ (8001f18 <__aeabi_dsub+0x70c>)
 8001bf2:	1aff      	subs	r7, r7, r3
 8001bf4:	4014      	ands	r4, r2
 8001bf6:	e692      	b.n	800191e <__aeabi_dsub+0x112>
 8001bf8:	4dc8      	ldr	r5, [pc, #800]	@ (8001f1c <__aeabi_dsub+0x710>)
 8001bfa:	1c7a      	adds	r2, r7, #1
 8001bfc:	422a      	tst	r2, r5
 8001bfe:	d000      	beq.n	8001c02 <__aeabi_dsub+0x3f6>
 8001c00:	e084      	b.n	8001d0c <__aeabi_dsub+0x500>
 8001c02:	0022      	movs	r2, r4
 8001c04:	4302      	orrs	r2, r0
 8001c06:	2f00      	cmp	r7, #0
 8001c08:	d000      	beq.n	8001c0c <__aeabi_dsub+0x400>
 8001c0a:	e0ef      	b.n	8001dec <__aeabi_dsub+0x5e0>
 8001c0c:	2a00      	cmp	r2, #0
 8001c0e:	d100      	bne.n	8001c12 <__aeabi_dsub+0x406>
 8001c10:	e0e5      	b.n	8001dde <__aeabi_dsub+0x5d2>
 8001c12:	4662      	mov	r2, ip
 8001c14:	9902      	ldr	r1, [sp, #8]
 8001c16:	430a      	orrs	r2, r1
 8001c18:	d100      	bne.n	8001c1c <__aeabi_dsub+0x410>
 8001c1a:	e0c5      	b.n	8001da8 <__aeabi_dsub+0x59c>
 8001c1c:	4663      	mov	r3, ip
 8001c1e:	18c5      	adds	r5, r0, r3
 8001c20:	468c      	mov	ip, r1
 8001c22:	4285      	cmp	r5, r0
 8001c24:	4180      	sbcs	r0, r0
 8001c26:	4464      	add	r4, ip
 8001c28:	4240      	negs	r0, r0
 8001c2a:	1824      	adds	r4, r4, r0
 8001c2c:	0223      	lsls	r3, r4, #8
 8001c2e:	d502      	bpl.n	8001c36 <__aeabi_dsub+0x42a>
 8001c30:	4bb9      	ldr	r3, [pc, #740]	@ (8001f18 <__aeabi_dsub+0x70c>)
 8001c32:	3701      	adds	r7, #1
 8001c34:	401c      	ands	r4, r3
 8001c36:	46ba      	mov	sl, r7
 8001c38:	9503      	str	r5, [sp, #12]
 8001c3a:	e7d5      	b.n	8001be8 <__aeabi_dsub+0x3dc>
 8001c3c:	4662      	mov	r2, ip
 8001c3e:	1a85      	subs	r5, r0, r2
 8001c40:	42a8      	cmp	r0, r5
 8001c42:	4192      	sbcs	r2, r2
 8001c44:	4252      	negs	r2, r2
 8001c46:	4691      	mov	r9, r2
 8001c48:	9b02      	ldr	r3, [sp, #8]
 8001c4a:	1ae3      	subs	r3, r4, r3
 8001c4c:	001a      	movs	r2, r3
 8001c4e:	464b      	mov	r3, r9
 8001c50:	1ad2      	subs	r2, r2, r3
 8001c52:	0013      	movs	r3, r2
 8001c54:	4691      	mov	r9, r2
 8001c56:	021a      	lsls	r2, r3, #8
 8001c58:	d46c      	bmi.n	8001d34 <__aeabi_dsub+0x528>
 8001c5a:	464a      	mov	r2, r9
 8001c5c:	464c      	mov	r4, r9
 8001c5e:	432a      	orrs	r2, r5
 8001c60:	d000      	beq.n	8001c64 <__aeabi_dsub+0x458>
 8001c62:	e63a      	b.n	80018da <__aeabi_dsub+0xce>
 8001c64:	2600      	movs	r6, #0
 8001c66:	2400      	movs	r4, #0
 8001c68:	2500      	movs	r5, #0
 8001c6a:	e678      	b.n	800195e <__aeabi_dsub+0x152>
 8001c6c:	9902      	ldr	r1, [sp, #8]
 8001c6e:	4653      	mov	r3, sl
 8001c70:	000d      	movs	r5, r1
 8001c72:	3a20      	subs	r2, #32
 8001c74:	40d5      	lsrs	r5, r2
 8001c76:	2b20      	cmp	r3, #32
 8001c78:	d006      	beq.n	8001c88 <__aeabi_dsub+0x47c>
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	1ad2      	subs	r2, r2, r3
 8001c7e:	000b      	movs	r3, r1
 8001c80:	4093      	lsls	r3, r2
 8001c82:	4662      	mov	r2, ip
 8001c84:	431a      	orrs	r2, r3
 8001c86:	4693      	mov	fp, r2
 8001c88:	465b      	mov	r3, fp
 8001c8a:	1e5a      	subs	r2, r3, #1
 8001c8c:	4193      	sbcs	r3, r2
 8001c8e:	431d      	orrs	r5, r3
 8001c90:	e619      	b.n	80018c6 <__aeabi_dsub+0xba>
 8001c92:	4653      	mov	r3, sl
 8001c94:	1e5a      	subs	r2, r3, #1
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d100      	bne.n	8001c9c <__aeabi_dsub+0x490>
 8001c9a:	e0c6      	b.n	8001e2a <__aeabi_dsub+0x61e>
 8001c9c:	4e9d      	ldr	r6, [pc, #628]	@ (8001f14 <__aeabi_dsub+0x708>)
 8001c9e:	45b2      	cmp	sl, r6
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0x498>
 8001ca2:	e6bd      	b.n	8001a20 <__aeabi_dsub+0x214>
 8001ca4:	4688      	mov	r8, r1
 8001ca6:	000e      	movs	r6, r1
 8001ca8:	2501      	movs	r5, #1
 8001caa:	2a38      	cmp	r2, #56	@ 0x38
 8001cac:	dc10      	bgt.n	8001cd0 <__aeabi_dsub+0x4c4>
 8001cae:	2a1f      	cmp	r2, #31
 8001cb0:	dc7f      	bgt.n	8001db2 <__aeabi_dsub+0x5a6>
 8001cb2:	2120      	movs	r1, #32
 8001cb4:	0025      	movs	r5, r4
 8001cb6:	1a89      	subs	r1, r1, r2
 8001cb8:	0007      	movs	r7, r0
 8001cba:	4088      	lsls	r0, r1
 8001cbc:	408d      	lsls	r5, r1
 8001cbe:	40d7      	lsrs	r7, r2
 8001cc0:	40d4      	lsrs	r4, r2
 8001cc2:	1e41      	subs	r1, r0, #1
 8001cc4:	4188      	sbcs	r0, r1
 8001cc6:	9b02      	ldr	r3, [sp, #8]
 8001cc8:	433d      	orrs	r5, r7
 8001cca:	1b1b      	subs	r3, r3, r4
 8001ccc:	4305      	orrs	r5, r0
 8001cce:	9302      	str	r3, [sp, #8]
 8001cd0:	4662      	mov	r2, ip
 8001cd2:	1b55      	subs	r5, r2, r5
 8001cd4:	45ac      	cmp	ip, r5
 8001cd6:	4192      	sbcs	r2, r2
 8001cd8:	9b02      	ldr	r3, [sp, #8]
 8001cda:	4252      	negs	r2, r2
 8001cdc:	464f      	mov	r7, r9
 8001cde:	1a9c      	subs	r4, r3, r2
 8001ce0:	e5f6      	b.n	80018d0 <__aeabi_dsub+0xc4>
 8001ce2:	2d00      	cmp	r5, #0
 8001ce4:	d000      	beq.n	8001ce8 <__aeabi_dsub+0x4dc>
 8001ce6:	e0b7      	b.n	8001e58 <__aeabi_dsub+0x64c>
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d100      	bne.n	8001cee <__aeabi_dsub+0x4e2>
 8001cec:	e0f0      	b.n	8001ed0 <__aeabi_dsub+0x6c4>
 8001cee:	2601      	movs	r6, #1
 8001cf0:	400e      	ands	r6, r1
 8001cf2:	4663      	mov	r3, ip
 8001cf4:	9802      	ldr	r0, [sp, #8]
 8001cf6:	08d9      	lsrs	r1, r3, #3
 8001cf8:	0742      	lsls	r2, r0, #29
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	08c4      	lsrs	r4, r0, #3
 8001cfe:	e696      	b.n	8001a2e <__aeabi_dsub+0x222>
 8001d00:	4c85      	ldr	r4, [pc, #532]	@ (8001f18 <__aeabi_dsub+0x70c>)
 8001d02:	1aff      	subs	r7, r7, r3
 8001d04:	4014      	ands	r4, r2
 8001d06:	0762      	lsls	r2, r4, #29
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	e760      	b.n	8001bce <__aeabi_dsub+0x3c2>
 8001d0c:	4981      	ldr	r1, [pc, #516]	@ (8001f14 <__aeabi_dsub+0x708>)
 8001d0e:	428a      	cmp	r2, r1
 8001d10:	d100      	bne.n	8001d14 <__aeabi_dsub+0x508>
 8001d12:	e0c9      	b.n	8001ea8 <__aeabi_dsub+0x69c>
 8001d14:	4663      	mov	r3, ip
 8001d16:	18c1      	adds	r1, r0, r3
 8001d18:	4281      	cmp	r1, r0
 8001d1a:	4180      	sbcs	r0, r0
 8001d1c:	9b02      	ldr	r3, [sp, #8]
 8001d1e:	4240      	negs	r0, r0
 8001d20:	18e3      	adds	r3, r4, r3
 8001d22:	181b      	adds	r3, r3, r0
 8001d24:	07dd      	lsls	r5, r3, #31
 8001d26:	085c      	lsrs	r4, r3, #1
 8001d28:	2307      	movs	r3, #7
 8001d2a:	0849      	lsrs	r1, r1, #1
 8001d2c:	430d      	orrs	r5, r1
 8001d2e:	0017      	movs	r7, r2
 8001d30:	402b      	ands	r3, r5
 8001d32:	e710      	b.n	8001b56 <__aeabi_dsub+0x34a>
 8001d34:	4663      	mov	r3, ip
 8001d36:	1a1d      	subs	r5, r3, r0
 8001d38:	45ac      	cmp	ip, r5
 8001d3a:	4192      	sbcs	r2, r2
 8001d3c:	2601      	movs	r6, #1
 8001d3e:	9b02      	ldr	r3, [sp, #8]
 8001d40:	4252      	negs	r2, r2
 8001d42:	1b1c      	subs	r4, r3, r4
 8001d44:	4688      	mov	r8, r1
 8001d46:	1aa4      	subs	r4, r4, r2
 8001d48:	400e      	ands	r6, r1
 8001d4a:	e5c6      	b.n	80018da <__aeabi_dsub+0xce>
 8001d4c:	4663      	mov	r3, ip
 8001d4e:	18c5      	adds	r5, r0, r3
 8001d50:	9b02      	ldr	r3, [sp, #8]
 8001d52:	4285      	cmp	r5, r0
 8001d54:	4180      	sbcs	r0, r0
 8001d56:	469c      	mov	ip, r3
 8001d58:	4240      	negs	r0, r0
 8001d5a:	4464      	add	r4, ip
 8001d5c:	1824      	adds	r4, r4, r0
 8001d5e:	2701      	movs	r7, #1
 8001d60:	0223      	lsls	r3, r4, #8
 8001d62:	d400      	bmi.n	8001d66 <__aeabi_dsub+0x55a>
 8001d64:	e6f5      	b.n	8001b52 <__aeabi_dsub+0x346>
 8001d66:	2702      	movs	r7, #2
 8001d68:	e641      	b.n	80019ee <__aeabi_dsub+0x1e2>
 8001d6a:	4663      	mov	r3, ip
 8001d6c:	1ac5      	subs	r5, r0, r3
 8001d6e:	42a8      	cmp	r0, r5
 8001d70:	4180      	sbcs	r0, r0
 8001d72:	9b02      	ldr	r3, [sp, #8]
 8001d74:	4240      	negs	r0, r0
 8001d76:	1ae4      	subs	r4, r4, r3
 8001d78:	2701      	movs	r7, #1
 8001d7a:	1a24      	subs	r4, r4, r0
 8001d7c:	e5a8      	b.n	80018d0 <__aeabi_dsub+0xc4>
 8001d7e:	9d02      	ldr	r5, [sp, #8]
 8001d80:	4652      	mov	r2, sl
 8001d82:	002b      	movs	r3, r5
 8001d84:	3a20      	subs	r2, #32
 8001d86:	40d3      	lsrs	r3, r2
 8001d88:	0019      	movs	r1, r3
 8001d8a:	4653      	mov	r3, sl
 8001d8c:	2b20      	cmp	r3, #32
 8001d8e:	d006      	beq.n	8001d9e <__aeabi_dsub+0x592>
 8001d90:	2240      	movs	r2, #64	@ 0x40
 8001d92:	1ad2      	subs	r2, r2, r3
 8001d94:	002b      	movs	r3, r5
 8001d96:	4093      	lsls	r3, r2
 8001d98:	4662      	mov	r2, ip
 8001d9a:	431a      	orrs	r2, r3
 8001d9c:	4693      	mov	fp, r2
 8001d9e:	465d      	mov	r5, fp
 8001da0:	1e6b      	subs	r3, r5, #1
 8001da2:	419d      	sbcs	r5, r3
 8001da4:	430d      	orrs	r5, r1
 8001da6:	e615      	b.n	80019d4 <__aeabi_dsub+0x1c8>
 8001da8:	0762      	lsls	r2, r4, #29
 8001daa:	08c0      	lsrs	r0, r0, #3
 8001dac:	4302      	orrs	r2, r0
 8001dae:	08e4      	lsrs	r4, r4, #3
 8001db0:	e70d      	b.n	8001bce <__aeabi_dsub+0x3c2>
 8001db2:	0011      	movs	r1, r2
 8001db4:	0027      	movs	r7, r4
 8001db6:	3920      	subs	r1, #32
 8001db8:	40cf      	lsrs	r7, r1
 8001dba:	2a20      	cmp	r2, #32
 8001dbc:	d005      	beq.n	8001dca <__aeabi_dsub+0x5be>
 8001dbe:	2140      	movs	r1, #64	@ 0x40
 8001dc0:	1a8a      	subs	r2, r1, r2
 8001dc2:	4094      	lsls	r4, r2
 8001dc4:	0025      	movs	r5, r4
 8001dc6:	4305      	orrs	r5, r0
 8001dc8:	9503      	str	r5, [sp, #12]
 8001dca:	9d03      	ldr	r5, [sp, #12]
 8001dcc:	1e6a      	subs	r2, r5, #1
 8001dce:	4195      	sbcs	r5, r2
 8001dd0:	433d      	orrs	r5, r7
 8001dd2:	e77d      	b.n	8001cd0 <__aeabi_dsub+0x4c4>
 8001dd4:	2a00      	cmp	r2, #0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x5ce>
 8001dd8:	e744      	b.n	8001c64 <__aeabi_dsub+0x458>
 8001dda:	2601      	movs	r6, #1
 8001ddc:	400e      	ands	r6, r1
 8001dde:	4663      	mov	r3, ip
 8001de0:	08d9      	lsrs	r1, r3, #3
 8001de2:	9b02      	ldr	r3, [sp, #8]
 8001de4:	075a      	lsls	r2, r3, #29
 8001de6:	430a      	orrs	r2, r1
 8001de8:	08dc      	lsrs	r4, r3, #3
 8001dea:	e6f0      	b.n	8001bce <__aeabi_dsub+0x3c2>
 8001dec:	2a00      	cmp	r2, #0
 8001dee:	d028      	beq.n	8001e42 <__aeabi_dsub+0x636>
 8001df0:	4662      	mov	r2, ip
 8001df2:	9f02      	ldr	r7, [sp, #8]
 8001df4:	08c0      	lsrs	r0, r0, #3
 8001df6:	433a      	orrs	r2, r7
 8001df8:	d100      	bne.n	8001dfc <__aeabi_dsub+0x5f0>
 8001dfa:	e6dc      	b.n	8001bb6 <__aeabi_dsub+0x3aa>
 8001dfc:	0762      	lsls	r2, r4, #29
 8001dfe:	4310      	orrs	r0, r2
 8001e00:	2280      	movs	r2, #128	@ 0x80
 8001e02:	08e4      	lsrs	r4, r4, #3
 8001e04:	0312      	lsls	r2, r2, #12
 8001e06:	4214      	tst	r4, r2
 8001e08:	d009      	beq.n	8001e1e <__aeabi_dsub+0x612>
 8001e0a:	08fd      	lsrs	r5, r7, #3
 8001e0c:	4215      	tst	r5, r2
 8001e0e:	d106      	bne.n	8001e1e <__aeabi_dsub+0x612>
 8001e10:	4663      	mov	r3, ip
 8001e12:	2601      	movs	r6, #1
 8001e14:	002c      	movs	r4, r5
 8001e16:	08d8      	lsrs	r0, r3, #3
 8001e18:	077b      	lsls	r3, r7, #29
 8001e1a:	4318      	orrs	r0, r3
 8001e1c:	400e      	ands	r6, r1
 8001e1e:	0f42      	lsrs	r2, r0, #29
 8001e20:	00c0      	lsls	r0, r0, #3
 8001e22:	08c0      	lsrs	r0, r0, #3
 8001e24:	0752      	lsls	r2, r2, #29
 8001e26:	4302      	orrs	r2, r0
 8001e28:	e601      	b.n	8001a2e <__aeabi_dsub+0x222>
 8001e2a:	4663      	mov	r3, ip
 8001e2c:	1a1d      	subs	r5, r3, r0
 8001e2e:	45ac      	cmp	ip, r5
 8001e30:	4192      	sbcs	r2, r2
 8001e32:	9b02      	ldr	r3, [sp, #8]
 8001e34:	4252      	negs	r2, r2
 8001e36:	1b1c      	subs	r4, r3, r4
 8001e38:	000e      	movs	r6, r1
 8001e3a:	4688      	mov	r8, r1
 8001e3c:	2701      	movs	r7, #1
 8001e3e:	1aa4      	subs	r4, r4, r2
 8001e40:	e546      	b.n	80018d0 <__aeabi_dsub+0xc4>
 8001e42:	4663      	mov	r3, ip
 8001e44:	08d9      	lsrs	r1, r3, #3
 8001e46:	9b02      	ldr	r3, [sp, #8]
 8001e48:	075a      	lsls	r2, r3, #29
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	08dc      	lsrs	r4, r3, #3
 8001e4e:	e5ee      	b.n	8001a2e <__aeabi_dsub+0x222>
 8001e50:	4663      	mov	r3, ip
 8001e52:	9c02      	ldr	r4, [sp, #8]
 8001e54:	9303      	str	r3, [sp, #12]
 8001e56:	e6c7      	b.n	8001be8 <__aeabi_dsub+0x3dc>
 8001e58:	08c0      	lsrs	r0, r0, #3
 8001e5a:	2a00      	cmp	r2, #0
 8001e5c:	d100      	bne.n	8001e60 <__aeabi_dsub+0x654>
 8001e5e:	e6aa      	b.n	8001bb6 <__aeabi_dsub+0x3aa>
 8001e60:	0762      	lsls	r2, r4, #29
 8001e62:	4310      	orrs	r0, r2
 8001e64:	2280      	movs	r2, #128	@ 0x80
 8001e66:	08e4      	lsrs	r4, r4, #3
 8001e68:	0312      	lsls	r2, r2, #12
 8001e6a:	4214      	tst	r4, r2
 8001e6c:	d0d7      	beq.n	8001e1e <__aeabi_dsub+0x612>
 8001e6e:	9f02      	ldr	r7, [sp, #8]
 8001e70:	08fd      	lsrs	r5, r7, #3
 8001e72:	4215      	tst	r5, r2
 8001e74:	d1d3      	bne.n	8001e1e <__aeabi_dsub+0x612>
 8001e76:	4663      	mov	r3, ip
 8001e78:	2601      	movs	r6, #1
 8001e7a:	08d8      	lsrs	r0, r3, #3
 8001e7c:	077b      	lsls	r3, r7, #29
 8001e7e:	002c      	movs	r4, r5
 8001e80:	4318      	orrs	r0, r3
 8001e82:	400e      	ands	r6, r1
 8001e84:	e7cb      	b.n	8001e1e <__aeabi_dsub+0x612>
 8001e86:	000a      	movs	r2, r1
 8001e88:	0027      	movs	r7, r4
 8001e8a:	3a20      	subs	r2, #32
 8001e8c:	40d7      	lsrs	r7, r2
 8001e8e:	2920      	cmp	r1, #32
 8001e90:	d005      	beq.n	8001e9e <__aeabi_dsub+0x692>
 8001e92:	2240      	movs	r2, #64	@ 0x40
 8001e94:	1a52      	subs	r2, r2, r1
 8001e96:	4094      	lsls	r4, r2
 8001e98:	0025      	movs	r5, r4
 8001e9a:	4305      	orrs	r5, r0
 8001e9c:	9503      	str	r5, [sp, #12]
 8001e9e:	9d03      	ldr	r5, [sp, #12]
 8001ea0:	1e6a      	subs	r2, r5, #1
 8001ea2:	4195      	sbcs	r5, r2
 8001ea4:	432f      	orrs	r7, r5
 8001ea6:	e610      	b.n	8001aca <__aeabi_dsub+0x2be>
 8001ea8:	0014      	movs	r4, r2
 8001eaa:	2500      	movs	r5, #0
 8001eac:	2200      	movs	r2, #0
 8001eae:	e556      	b.n	800195e <__aeabi_dsub+0x152>
 8001eb0:	9b02      	ldr	r3, [sp, #8]
 8001eb2:	4460      	add	r0, ip
 8001eb4:	4699      	mov	r9, r3
 8001eb6:	4560      	cmp	r0, ip
 8001eb8:	4192      	sbcs	r2, r2
 8001eba:	444c      	add	r4, r9
 8001ebc:	4252      	negs	r2, r2
 8001ebe:	0005      	movs	r5, r0
 8001ec0:	18a4      	adds	r4, r4, r2
 8001ec2:	e74c      	b.n	8001d5e <__aeabi_dsub+0x552>
 8001ec4:	001a      	movs	r2, r3
 8001ec6:	001c      	movs	r4, r3
 8001ec8:	432a      	orrs	r2, r5
 8001eca:	d000      	beq.n	8001ece <__aeabi_dsub+0x6c2>
 8001ecc:	e6b3      	b.n	8001c36 <__aeabi_dsub+0x42a>
 8001ece:	e6c9      	b.n	8001c64 <__aeabi_dsub+0x458>
 8001ed0:	2480      	movs	r4, #128	@ 0x80
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	0324      	lsls	r4, r4, #12
 8001ed6:	e5ae      	b.n	8001a36 <__aeabi_dsub+0x22a>
 8001ed8:	2120      	movs	r1, #32
 8001eda:	2500      	movs	r5, #0
 8001edc:	1a09      	subs	r1, r1, r0
 8001ede:	e517      	b.n	8001910 <__aeabi_dsub+0x104>
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	2500      	movs	r5, #0
 8001ee4:	4c0b      	ldr	r4, [pc, #44]	@ (8001f14 <__aeabi_dsub+0x708>)
 8001ee6:	e53a      	b.n	800195e <__aeabi_dsub+0x152>
 8001ee8:	2d00      	cmp	r5, #0
 8001eea:	d100      	bne.n	8001eee <__aeabi_dsub+0x6e2>
 8001eec:	e5f6      	b.n	8001adc <__aeabi_dsub+0x2d0>
 8001eee:	464b      	mov	r3, r9
 8001ef0:	1bda      	subs	r2, r3, r7
 8001ef2:	4692      	mov	sl, r2
 8001ef4:	2f00      	cmp	r7, #0
 8001ef6:	d100      	bne.n	8001efa <__aeabi_dsub+0x6ee>
 8001ef8:	e66f      	b.n	8001bda <__aeabi_dsub+0x3ce>
 8001efa:	2a38      	cmp	r2, #56	@ 0x38
 8001efc:	dc05      	bgt.n	8001f0a <__aeabi_dsub+0x6fe>
 8001efe:	2680      	movs	r6, #128	@ 0x80
 8001f00:	0436      	lsls	r6, r6, #16
 8001f02:	4334      	orrs	r4, r6
 8001f04:	4688      	mov	r8, r1
 8001f06:	000e      	movs	r6, r1
 8001f08:	e6d1      	b.n	8001cae <__aeabi_dsub+0x4a2>
 8001f0a:	4688      	mov	r8, r1
 8001f0c:	000e      	movs	r6, r1
 8001f0e:	2501      	movs	r5, #1
 8001f10:	e6de      	b.n	8001cd0 <__aeabi_dsub+0x4c4>
 8001f12:	46c0      	nop			@ (mov r8, r8)
 8001f14:	000007ff 	.word	0x000007ff
 8001f18:	ff7fffff 	.word	0xff7fffff
 8001f1c:	000007fe 	.word	0x000007fe
 8001f20:	2d00      	cmp	r5, #0
 8001f22:	d100      	bne.n	8001f26 <__aeabi_dsub+0x71a>
 8001f24:	e668      	b.n	8001bf8 <__aeabi_dsub+0x3ec>
 8001f26:	464b      	mov	r3, r9
 8001f28:	1bd9      	subs	r1, r3, r7
 8001f2a:	2f00      	cmp	r7, #0
 8001f2c:	d101      	bne.n	8001f32 <__aeabi_dsub+0x726>
 8001f2e:	468a      	mov	sl, r1
 8001f30:	e5a7      	b.n	8001a82 <__aeabi_dsub+0x276>
 8001f32:	2701      	movs	r7, #1
 8001f34:	2938      	cmp	r1, #56	@ 0x38
 8001f36:	dd00      	ble.n	8001f3a <__aeabi_dsub+0x72e>
 8001f38:	e5c7      	b.n	8001aca <__aeabi_dsub+0x2be>
 8001f3a:	2280      	movs	r2, #128	@ 0x80
 8001f3c:	0412      	lsls	r2, r2, #16
 8001f3e:	4314      	orrs	r4, r2
 8001f40:	e5af      	b.n	8001aa2 <__aeabi_dsub+0x296>
 8001f42:	46c0      	nop			@ (mov r8, r8)

08001f44 <__aeabi_d2iz>:
 8001f44:	000b      	movs	r3, r1
 8001f46:	0002      	movs	r2, r0
 8001f48:	b570      	push	{r4, r5, r6, lr}
 8001f4a:	4d16      	ldr	r5, [pc, #88]	@ (8001fa4 <__aeabi_d2iz+0x60>)
 8001f4c:	030c      	lsls	r4, r1, #12
 8001f4e:	b082      	sub	sp, #8
 8001f50:	0049      	lsls	r1, r1, #1
 8001f52:	2000      	movs	r0, #0
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	9301      	str	r3, [sp, #4]
 8001f58:	0b24      	lsrs	r4, r4, #12
 8001f5a:	0d49      	lsrs	r1, r1, #21
 8001f5c:	0fde      	lsrs	r6, r3, #31
 8001f5e:	42a9      	cmp	r1, r5
 8001f60:	dd04      	ble.n	8001f6c <__aeabi_d2iz+0x28>
 8001f62:	4811      	ldr	r0, [pc, #68]	@ (8001fa8 <__aeabi_d2iz+0x64>)
 8001f64:	4281      	cmp	r1, r0
 8001f66:	dd03      	ble.n	8001f70 <__aeabi_d2iz+0x2c>
 8001f68:	4b10      	ldr	r3, [pc, #64]	@ (8001fac <__aeabi_d2iz+0x68>)
 8001f6a:	18f0      	adds	r0, r6, r3
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	2080      	movs	r0, #128	@ 0x80
 8001f72:	0340      	lsls	r0, r0, #13
 8001f74:	4320      	orrs	r0, r4
 8001f76:	4c0e      	ldr	r4, [pc, #56]	@ (8001fb0 <__aeabi_d2iz+0x6c>)
 8001f78:	1a64      	subs	r4, r4, r1
 8001f7a:	2c1f      	cmp	r4, #31
 8001f7c:	dd08      	ble.n	8001f90 <__aeabi_d2iz+0x4c>
 8001f7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fb4 <__aeabi_d2iz+0x70>)
 8001f80:	1a5b      	subs	r3, r3, r1
 8001f82:	40d8      	lsrs	r0, r3
 8001f84:	0003      	movs	r3, r0
 8001f86:	4258      	negs	r0, r3
 8001f88:	2e00      	cmp	r6, #0
 8001f8a:	d1ef      	bne.n	8001f6c <__aeabi_d2iz+0x28>
 8001f8c:	0018      	movs	r0, r3
 8001f8e:	e7ed      	b.n	8001f6c <__aeabi_d2iz+0x28>
 8001f90:	4b09      	ldr	r3, [pc, #36]	@ (8001fb8 <__aeabi_d2iz+0x74>)
 8001f92:	9a00      	ldr	r2, [sp, #0]
 8001f94:	469c      	mov	ip, r3
 8001f96:	0003      	movs	r3, r0
 8001f98:	4461      	add	r1, ip
 8001f9a:	408b      	lsls	r3, r1
 8001f9c:	40e2      	lsrs	r2, r4
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	e7f1      	b.n	8001f86 <__aeabi_d2iz+0x42>
 8001fa2:	46c0      	nop			@ (mov r8, r8)
 8001fa4:	000003fe 	.word	0x000003fe
 8001fa8:	0000041d 	.word	0x0000041d
 8001fac:	7fffffff 	.word	0x7fffffff
 8001fb0:	00000433 	.word	0x00000433
 8001fb4:	00000413 	.word	0x00000413
 8001fb8:	fffffbed 	.word	0xfffffbed

08001fbc <__aeabi_i2d>:
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d016      	beq.n	8001ff0 <__aeabi_i2d+0x34>
 8001fc2:	17c3      	asrs	r3, r0, #31
 8001fc4:	18c5      	adds	r5, r0, r3
 8001fc6:	405d      	eors	r5, r3
 8001fc8:	0fc4      	lsrs	r4, r0, #31
 8001fca:	0028      	movs	r0, r5
 8001fcc:	f000 f914 	bl	80021f8 <__clzsi2>
 8001fd0:	4b10      	ldr	r3, [pc, #64]	@ (8002014 <__aeabi_i2d+0x58>)
 8001fd2:	1a1b      	subs	r3, r3, r0
 8001fd4:	055b      	lsls	r3, r3, #21
 8001fd6:	0d5b      	lsrs	r3, r3, #21
 8001fd8:	280a      	cmp	r0, #10
 8001fda:	dc14      	bgt.n	8002006 <__aeabi_i2d+0x4a>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	002e      	movs	r6, r5
 8001fe0:	3215      	adds	r2, #21
 8001fe2:	4096      	lsls	r6, r2
 8001fe4:	220b      	movs	r2, #11
 8001fe6:	1a12      	subs	r2, r2, r0
 8001fe8:	40d5      	lsrs	r5, r2
 8001fea:	032d      	lsls	r5, r5, #12
 8001fec:	0b2d      	lsrs	r5, r5, #12
 8001fee:	e003      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8001ff0:	2400      	movs	r4, #0
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2500      	movs	r5, #0
 8001ff6:	2600      	movs	r6, #0
 8001ff8:	051b      	lsls	r3, r3, #20
 8001ffa:	432b      	orrs	r3, r5
 8001ffc:	07e4      	lsls	r4, r4, #31
 8001ffe:	4323      	orrs	r3, r4
 8002000:	0030      	movs	r0, r6
 8002002:	0019      	movs	r1, r3
 8002004:	bd70      	pop	{r4, r5, r6, pc}
 8002006:	380b      	subs	r0, #11
 8002008:	4085      	lsls	r5, r0
 800200a:	032d      	lsls	r5, r5, #12
 800200c:	2600      	movs	r6, #0
 800200e:	0b2d      	lsrs	r5, r5, #12
 8002010:	e7f2      	b.n	8001ff8 <__aeabi_i2d+0x3c>
 8002012:	46c0      	nop			@ (mov r8, r8)
 8002014:	0000041e 	.word	0x0000041e

08002018 <__aeabi_ui2d>:
 8002018:	b510      	push	{r4, lr}
 800201a:	1e04      	subs	r4, r0, #0
 800201c:	d010      	beq.n	8002040 <__aeabi_ui2d+0x28>
 800201e:	f000 f8eb 	bl	80021f8 <__clzsi2>
 8002022:	4b0e      	ldr	r3, [pc, #56]	@ (800205c <__aeabi_ui2d+0x44>)
 8002024:	1a1b      	subs	r3, r3, r0
 8002026:	055b      	lsls	r3, r3, #21
 8002028:	0d5b      	lsrs	r3, r3, #21
 800202a:	280a      	cmp	r0, #10
 800202c:	dc0f      	bgt.n	800204e <__aeabi_ui2d+0x36>
 800202e:	220b      	movs	r2, #11
 8002030:	0021      	movs	r1, r4
 8002032:	1a12      	subs	r2, r2, r0
 8002034:	40d1      	lsrs	r1, r2
 8002036:	3015      	adds	r0, #21
 8002038:	030a      	lsls	r2, r1, #12
 800203a:	4084      	lsls	r4, r0
 800203c:	0b12      	lsrs	r2, r2, #12
 800203e:	e001      	b.n	8002044 <__aeabi_ui2d+0x2c>
 8002040:	2300      	movs	r3, #0
 8002042:	2200      	movs	r2, #0
 8002044:	051b      	lsls	r3, r3, #20
 8002046:	4313      	orrs	r3, r2
 8002048:	0020      	movs	r0, r4
 800204a:	0019      	movs	r1, r3
 800204c:	bd10      	pop	{r4, pc}
 800204e:	0022      	movs	r2, r4
 8002050:	380b      	subs	r0, #11
 8002052:	4082      	lsls	r2, r0
 8002054:	0312      	lsls	r2, r2, #12
 8002056:	2400      	movs	r4, #0
 8002058:	0b12      	lsrs	r2, r2, #12
 800205a:	e7f3      	b.n	8002044 <__aeabi_ui2d+0x2c>
 800205c:	0000041e 	.word	0x0000041e

08002060 <__aeabi_f2d>:
 8002060:	b570      	push	{r4, r5, r6, lr}
 8002062:	0242      	lsls	r2, r0, #9
 8002064:	0043      	lsls	r3, r0, #1
 8002066:	0fc4      	lsrs	r4, r0, #31
 8002068:	20fe      	movs	r0, #254	@ 0xfe
 800206a:	0e1b      	lsrs	r3, r3, #24
 800206c:	1c59      	adds	r1, r3, #1
 800206e:	0a55      	lsrs	r5, r2, #9
 8002070:	4208      	tst	r0, r1
 8002072:	d00c      	beq.n	800208e <__aeabi_f2d+0x2e>
 8002074:	21e0      	movs	r1, #224	@ 0xe0
 8002076:	0089      	lsls	r1, r1, #2
 8002078:	468c      	mov	ip, r1
 800207a:	076d      	lsls	r5, r5, #29
 800207c:	0b12      	lsrs	r2, r2, #12
 800207e:	4463      	add	r3, ip
 8002080:	051b      	lsls	r3, r3, #20
 8002082:	4313      	orrs	r3, r2
 8002084:	07e4      	lsls	r4, r4, #31
 8002086:	4323      	orrs	r3, r4
 8002088:	0028      	movs	r0, r5
 800208a:	0019      	movs	r1, r3
 800208c:	bd70      	pop	{r4, r5, r6, pc}
 800208e:	2b00      	cmp	r3, #0
 8002090:	d114      	bne.n	80020bc <__aeabi_f2d+0x5c>
 8002092:	2d00      	cmp	r5, #0
 8002094:	d01b      	beq.n	80020ce <__aeabi_f2d+0x6e>
 8002096:	0028      	movs	r0, r5
 8002098:	f000 f8ae 	bl	80021f8 <__clzsi2>
 800209c:	280a      	cmp	r0, #10
 800209e:	dc1c      	bgt.n	80020da <__aeabi_f2d+0x7a>
 80020a0:	230b      	movs	r3, #11
 80020a2:	002a      	movs	r2, r5
 80020a4:	1a1b      	subs	r3, r3, r0
 80020a6:	40da      	lsrs	r2, r3
 80020a8:	0003      	movs	r3, r0
 80020aa:	3315      	adds	r3, #21
 80020ac:	409d      	lsls	r5, r3
 80020ae:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <__aeabi_f2d+0x88>)
 80020b0:	0312      	lsls	r2, r2, #12
 80020b2:	1a1b      	subs	r3, r3, r0
 80020b4:	055b      	lsls	r3, r3, #21
 80020b6:	0b12      	lsrs	r2, r2, #12
 80020b8:	0d5b      	lsrs	r3, r3, #21
 80020ba:	e7e1      	b.n	8002080 <__aeabi_f2d+0x20>
 80020bc:	2d00      	cmp	r5, #0
 80020be:	d009      	beq.n	80020d4 <__aeabi_f2d+0x74>
 80020c0:	0b13      	lsrs	r3, r2, #12
 80020c2:	2280      	movs	r2, #128	@ 0x80
 80020c4:	0312      	lsls	r2, r2, #12
 80020c6:	431a      	orrs	r2, r3
 80020c8:	076d      	lsls	r5, r5, #29
 80020ca:	4b08      	ldr	r3, [pc, #32]	@ (80020ec <__aeabi_f2d+0x8c>)
 80020cc:	e7d8      	b.n	8002080 <__aeabi_f2d+0x20>
 80020ce:	2300      	movs	r3, #0
 80020d0:	2200      	movs	r2, #0
 80020d2:	e7d5      	b.n	8002080 <__aeabi_f2d+0x20>
 80020d4:	2200      	movs	r2, #0
 80020d6:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <__aeabi_f2d+0x8c>)
 80020d8:	e7d2      	b.n	8002080 <__aeabi_f2d+0x20>
 80020da:	0003      	movs	r3, r0
 80020dc:	002a      	movs	r2, r5
 80020de:	3b0b      	subs	r3, #11
 80020e0:	409a      	lsls	r2, r3
 80020e2:	2500      	movs	r5, #0
 80020e4:	e7e3      	b.n	80020ae <__aeabi_f2d+0x4e>
 80020e6:	46c0      	nop			@ (mov r8, r8)
 80020e8:	00000389 	.word	0x00000389
 80020ec:	000007ff 	.word	0x000007ff

080020f0 <__aeabi_d2f>:
 80020f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020f2:	004b      	lsls	r3, r1, #1
 80020f4:	030f      	lsls	r7, r1, #12
 80020f6:	0d5b      	lsrs	r3, r3, #21
 80020f8:	4c3b      	ldr	r4, [pc, #236]	@ (80021e8 <__aeabi_d2f+0xf8>)
 80020fa:	0f45      	lsrs	r5, r0, #29
 80020fc:	b083      	sub	sp, #12
 80020fe:	0a7f      	lsrs	r7, r7, #9
 8002100:	1c5e      	adds	r6, r3, #1
 8002102:	432f      	orrs	r7, r5
 8002104:	9000      	str	r0, [sp, #0]
 8002106:	9101      	str	r1, [sp, #4]
 8002108:	0fca      	lsrs	r2, r1, #31
 800210a:	00c5      	lsls	r5, r0, #3
 800210c:	4226      	tst	r6, r4
 800210e:	d00b      	beq.n	8002128 <__aeabi_d2f+0x38>
 8002110:	4936      	ldr	r1, [pc, #216]	@ (80021ec <__aeabi_d2f+0xfc>)
 8002112:	185c      	adds	r4, r3, r1
 8002114:	2cfe      	cmp	r4, #254	@ 0xfe
 8002116:	dd13      	ble.n	8002140 <__aeabi_d2f+0x50>
 8002118:	20ff      	movs	r0, #255	@ 0xff
 800211a:	2300      	movs	r3, #0
 800211c:	05c0      	lsls	r0, r0, #23
 800211e:	4318      	orrs	r0, r3
 8002120:	07d2      	lsls	r2, r2, #31
 8002122:	4310      	orrs	r0, r2
 8002124:	b003      	add	sp, #12
 8002126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <__aeabi_d2f+0x42>
 800212c:	2000      	movs	r0, #0
 800212e:	2300      	movs	r3, #0
 8002130:	e7f4      	b.n	800211c <__aeabi_d2f+0x2c>
 8002132:	433d      	orrs	r5, r7
 8002134:	d0f0      	beq.n	8002118 <__aeabi_d2f+0x28>
 8002136:	2380      	movs	r3, #128	@ 0x80
 8002138:	03db      	lsls	r3, r3, #15
 800213a:	20ff      	movs	r0, #255	@ 0xff
 800213c:	433b      	orrs	r3, r7
 800213e:	e7ed      	b.n	800211c <__aeabi_d2f+0x2c>
 8002140:	2c00      	cmp	r4, #0
 8002142:	dd14      	ble.n	800216e <__aeabi_d2f+0x7e>
 8002144:	9b00      	ldr	r3, [sp, #0]
 8002146:	00ff      	lsls	r7, r7, #3
 8002148:	019b      	lsls	r3, r3, #6
 800214a:	1e58      	subs	r0, r3, #1
 800214c:	4183      	sbcs	r3, r0
 800214e:	0f69      	lsrs	r1, r5, #29
 8002150:	433b      	orrs	r3, r7
 8002152:	430b      	orrs	r3, r1
 8002154:	0759      	lsls	r1, r3, #29
 8002156:	d041      	beq.n	80021dc <__aeabi_d2f+0xec>
 8002158:	210f      	movs	r1, #15
 800215a:	4019      	ands	r1, r3
 800215c:	2904      	cmp	r1, #4
 800215e:	d028      	beq.n	80021b2 <__aeabi_d2f+0xc2>
 8002160:	3304      	adds	r3, #4
 8002162:	0159      	lsls	r1, r3, #5
 8002164:	d525      	bpl.n	80021b2 <__aeabi_d2f+0xc2>
 8002166:	3401      	adds	r4, #1
 8002168:	2300      	movs	r3, #0
 800216a:	b2e0      	uxtb	r0, r4
 800216c:	e7d6      	b.n	800211c <__aeabi_d2f+0x2c>
 800216e:	0021      	movs	r1, r4
 8002170:	3117      	adds	r1, #23
 8002172:	dbdb      	blt.n	800212c <__aeabi_d2f+0x3c>
 8002174:	2180      	movs	r1, #128	@ 0x80
 8002176:	201e      	movs	r0, #30
 8002178:	0409      	lsls	r1, r1, #16
 800217a:	4339      	orrs	r1, r7
 800217c:	1b00      	subs	r0, r0, r4
 800217e:	281f      	cmp	r0, #31
 8002180:	dd1b      	ble.n	80021ba <__aeabi_d2f+0xca>
 8002182:	2602      	movs	r6, #2
 8002184:	4276      	negs	r6, r6
 8002186:	1b34      	subs	r4, r6, r4
 8002188:	000e      	movs	r6, r1
 800218a:	40e6      	lsrs	r6, r4
 800218c:	0034      	movs	r4, r6
 800218e:	2820      	cmp	r0, #32
 8002190:	d004      	beq.n	800219c <__aeabi_d2f+0xac>
 8002192:	4817      	ldr	r0, [pc, #92]	@ (80021f0 <__aeabi_d2f+0x100>)
 8002194:	4684      	mov	ip, r0
 8002196:	4463      	add	r3, ip
 8002198:	4099      	lsls	r1, r3
 800219a:	430d      	orrs	r5, r1
 800219c:	002b      	movs	r3, r5
 800219e:	1e59      	subs	r1, r3, #1
 80021a0:	418b      	sbcs	r3, r1
 80021a2:	4323      	orrs	r3, r4
 80021a4:	0759      	lsls	r1, r3, #29
 80021a6:	d015      	beq.n	80021d4 <__aeabi_d2f+0xe4>
 80021a8:	210f      	movs	r1, #15
 80021aa:	2400      	movs	r4, #0
 80021ac:	4019      	ands	r1, r3
 80021ae:	2904      	cmp	r1, #4
 80021b0:	d117      	bne.n	80021e2 <__aeabi_d2f+0xf2>
 80021b2:	019b      	lsls	r3, r3, #6
 80021b4:	0a5b      	lsrs	r3, r3, #9
 80021b6:	b2e0      	uxtb	r0, r4
 80021b8:	e7b0      	b.n	800211c <__aeabi_d2f+0x2c>
 80021ba:	4c0e      	ldr	r4, [pc, #56]	@ (80021f4 <__aeabi_d2f+0x104>)
 80021bc:	191c      	adds	r4, r3, r4
 80021be:	002b      	movs	r3, r5
 80021c0:	40a5      	lsls	r5, r4
 80021c2:	40c3      	lsrs	r3, r0
 80021c4:	40a1      	lsls	r1, r4
 80021c6:	1e68      	subs	r0, r5, #1
 80021c8:	4185      	sbcs	r5, r0
 80021ca:	4329      	orrs	r1, r5
 80021cc:	430b      	orrs	r3, r1
 80021ce:	2400      	movs	r4, #0
 80021d0:	0759      	lsls	r1, r3, #29
 80021d2:	d1c1      	bne.n	8002158 <__aeabi_d2f+0x68>
 80021d4:	019b      	lsls	r3, r3, #6
 80021d6:	2000      	movs	r0, #0
 80021d8:	0a5b      	lsrs	r3, r3, #9
 80021da:	e79f      	b.n	800211c <__aeabi_d2f+0x2c>
 80021dc:	08db      	lsrs	r3, r3, #3
 80021de:	b2e0      	uxtb	r0, r4
 80021e0:	e79c      	b.n	800211c <__aeabi_d2f+0x2c>
 80021e2:	3304      	adds	r3, #4
 80021e4:	e7e5      	b.n	80021b2 <__aeabi_d2f+0xc2>
 80021e6:	46c0      	nop			@ (mov r8, r8)
 80021e8:	000007fe 	.word	0x000007fe
 80021ec:	fffffc80 	.word	0xfffffc80
 80021f0:	fffffca2 	.word	0xfffffca2
 80021f4:	fffffc82 	.word	0xfffffc82

080021f8 <__clzsi2>:
 80021f8:	211c      	movs	r1, #28
 80021fa:	2301      	movs	r3, #1
 80021fc:	041b      	lsls	r3, r3, #16
 80021fe:	4298      	cmp	r0, r3
 8002200:	d301      	bcc.n	8002206 <__clzsi2+0xe>
 8002202:	0c00      	lsrs	r0, r0, #16
 8002204:	3910      	subs	r1, #16
 8002206:	0a1b      	lsrs	r3, r3, #8
 8002208:	4298      	cmp	r0, r3
 800220a:	d301      	bcc.n	8002210 <__clzsi2+0x18>
 800220c:	0a00      	lsrs	r0, r0, #8
 800220e:	3908      	subs	r1, #8
 8002210:	091b      	lsrs	r3, r3, #4
 8002212:	4298      	cmp	r0, r3
 8002214:	d301      	bcc.n	800221a <__clzsi2+0x22>
 8002216:	0900      	lsrs	r0, r0, #4
 8002218:	3904      	subs	r1, #4
 800221a:	a202      	add	r2, pc, #8	@ (adr r2, 8002224 <__clzsi2+0x2c>)
 800221c:	5c10      	ldrb	r0, [r2, r0]
 800221e:	1840      	adds	r0, r0, r1
 8002220:	4770      	bx	lr
 8002222:	46c0      	nop			@ (mov r8, r8)
 8002224:	02020304 	.word	0x02020304
 8002228:	01010101 	.word	0x01010101
	...

08002234 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8002234:	b580      	push	{r7, lr}
 8002236:	b082      	sub	sp, #8
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	085b      	lsrs	r3, r3, #1
 8002242:	1c18      	adds	r0, r3, #0
 8002244:	46bd      	mov	sp, r7
 8002246:	b002      	add	sp, #8
 8002248:	bd80      	pop	{r7, pc}
	...

0800224c <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDef23AP33772_PDRequestObject>:
	this->srcPDOCount = 0;
	this->temp.value = 0;
//	this->desiredPDO = defaultPDO;
}

AP33772Driver::AP33772Driver(I2C_HandleTypeDef *hi2c, AP33772_PDRequestObject desiredPDO)
 800224c:	b082      	sub	sp, #8
 800224e:	b590      	push	{r4, r7, lr}
 8002250:	b083      	sub	sp, #12
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
 8002256:	6039      	str	r1, [r7, #0]
 8002258:	2418      	movs	r4, #24
 800225a:	1939      	adds	r1, r7, r4
 800225c:	600a      	str	r2, [r1, #0]
 800225e:	604b      	str	r3, [r1, #4]
 8002260:	4a1c      	ldr	r2, [pc, #112]	@ (80022d4 <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDef23AP33772_PDRequestObject+0x88>)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2231      	movs	r2, #49	@ 0x31
 800226a:	2100      	movs	r1, #0
 800226c:	5499      	strb	r1, [r3, r2]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2244      	movs	r2, #68	@ 0x44
 8002272:	2100      	movs	r1, #0
 8002274:	5499      	strb	r1, [r3, r2]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	2245      	movs	r2, #69	@ 0x45
 800227a:	2100      	movs	r1, #0
 800227c:	5499      	strb	r1, [r3, r2]
{
	this->hi2c = hi2c;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	605a      	str	r2, [r3, #4]
	this->address = AP33772_ADDRESS << 1;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	22a2      	movs	r2, #162	@ 0xa2
 8002288:	721a      	strb	r2, [r3, #8]
	this->buffer = new uint8_t[AP33772_BUFFER_SIZE];
 800228a:	2024      	movs	r0, #36	@ 0x24
 800228c:	f00c faa2 	bl	800e7d4 <_Znaj>
 8002290:	0003      	movs	r3, r0
 8002292:	001a      	movs	r2, r3
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	60da      	str	r2, [r3, #12]
	this->srcPDOList = new AP33772_PDObject[AP33772_PDO_LIST_SIZE];
 8002298:	2070      	movs	r0, #112	@ 0x70
 800229a:	f00c fa9b 	bl	800e7d4 <_Znaj>
 800229e:	0003      	movs	r3, r0
 80022a0:	001a      	movs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	62da      	str	r2, [r3, #44]	@ 0x2c
	this->srcPDOCount = 0;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2230      	movs	r2, #48	@ 0x30
 80022aa:	2100      	movs	r1, #0
 80022ac:	5499      	strb	r1, [r3, r2]
	this->desiredPDO = desiredPDO;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	193a      	adds	r2, r7, r4
 80022b2:	3334      	adds	r3, #52	@ 0x34
 80022b4:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022b6:	c313      	stmia	r3!, {r0, r1, r4}
 80022b8:	6812      	ldr	r2, [r2, #0]
 80022ba:	601a      	str	r2, [r3, #0]
	this->temp.value = 0;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2200      	movs	r2, #0
 80022c0:	649a      	str	r2, [r3, #72]	@ 0x48
}
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b003      	add	sp, #12
 80022ca:	bc90      	pop	{r4, r7}
 80022cc:	bc08      	pop	{r3}
 80022ce:	b002      	add	sp, #8
 80022d0:	4718      	bx	r3
 80022d2:	46c0      	nop			@ (mov r8, r8)
 80022d4:	0800ec04 	.word	0x0800ec04

080022d8 <_ZN13AP33772DriverD1Ev>:

AP33772Driver::~AP33772Driver()
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002314 <_ZN13AP33772DriverD1Ev+0x3c>)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	601a      	str	r2, [r3, #0]
{
	delete[] this->buffer;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	68db      	ldr	r3, [r3, #12]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <_ZN13AP33772DriverD1Ev+0x20>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f00c fa6a 	bl	800e7cc <_ZdaPv>
	delete[] this->srcPDOList;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d004      	beq.n	800230a <_ZN13AP33772DriverD1Ev+0x32>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002304:	0018      	movs	r0, r3
 8002306:	f00c fa61 	bl	800e7cc <_ZdaPv>
}
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	0018      	movs	r0, r3
 800230e:	46bd      	mov	sp, r7
 8002310:	b002      	add	sp, #8
 8002312:	bd80      	pop	{r7, pc}
 8002314:	0800ec04 	.word	0x0800ec04

08002318 <_ZN13AP33772DriverD0Ev>:
AP33772Driver::~AP33772Driver()
 8002318:	b580      	push	{r7, lr}
 800231a:	b082      	sub	sp, #8
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
}
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	0018      	movs	r0, r3
 8002324:	f7ff ffd8 	bl	80022d8 <_ZN13AP33772DriverD1Ev>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	214c      	movs	r1, #76	@ 0x4c
 800232c:	0018      	movs	r0, r3
 800232e:	f00c fa49 	bl	800e7c4 <_ZdlPvj>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	0018      	movs	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	b002      	add	sp, #8
 800233a:	bd80      	pop	{r7, pc}

0800233c <_ZN13AP33772Driver4InitEv>:

HAL_StatusTypeDef AP33772Driver::Init()
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b082      	sub	sp, #8
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
	// Read PDOs from the chip.
	if (this->ReadSourcePDOs() != HAL_OK) {
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0018      	movs	r0, r3
 8002348:	f000 f865 	bl	8002416 <_ZN13AP33772Driver14ReadSourcePDOsEv>
 800234c:	0003      	movs	r3, r0
 800234e:	1e5a      	subs	r2, r3, #1
 8002350:	4193      	sbcs	r3, r2
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <_ZN13AP33772Driver4InitEv+0x20>
		return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e004      	b.n	8002366 <_ZN13AP33772Driver4InitEv+0x2a>
	}
	this->FindNearestPDO();
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	0018      	movs	r0, r3
 8002360:	f000 f996 	bl	8002690 <_ZN13AP33772Driver14FindNearestPDOEv>
	return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	0018      	movs	r0, r3
 8002368:	46bd      	mov	sp, r7
 800236a:	b002      	add	sp, #8
 800236c:	bd80      	pop	{r7, pc}

0800236e <_ZN13AP33772Driver15HandleInterruptEv>:

void AP33772Driver::HandleInterrupt()
{
 800236e:	b580      	push	{r7, lr}
 8002370:	b082      	sub	sp, #8
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
	if (this->GetStatus() != HAL_OK) {
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	0018      	movs	r0, r3
 800237a:	f000 f803 	bl	8002384 <_ZN13AP33772Driver9GetStatusEv>
		return;
	}

	// handle the different types of status flags...
}
 800237e:	46bd      	mov	sp, r7
 8002380:	b002      	add	sp, #8
 8002382:	bd80      	pop	{r7, pc}

08002384 <_ZN13AP33772Driver9GetStatusEv>:

HAL_StatusTypeDef AP33772Driver::GetStatus()
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	if (this->ReadRegister(AP33772_STATUS, 1) != HAL_OK) {
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	211d      	movs	r1, #29
 8002392:	0018      	movs	r0, r3
 8002394:	f000 f894 	bl	80024c0 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 8002398:	0003      	movs	r3, r0
 800239a:	1e5a      	subs	r2, r3, #1
 800239c:	4193      	sbcs	r3, r2
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d001      	beq.n	80023a8 <_ZN13AP33772Driver9GetStatusEv+0x24>
		return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e00c      	b.n	80023c2 <_ZN13AP33772Driver9GetStatusEv+0x3e>
	}
	if ((this->buffer[0] & 1) == 1) {
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	001a      	movs	r2, r3
 80023b0:	2301      	movs	r3, #1
 80023b2:	4013      	ands	r3, r2
 80023b4:	d004      	beq.n	80023c0 <_ZN13AP33772Driver9GetStatusEv+0x3c>
		this->status.value = this->buffer[0];
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	781a      	ldrb	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	771a      	strb	r2, [r3, #28]
	}
	return HAL_OK;
 80023c0:	2300      	movs	r3, #0
}
 80023c2:	0018      	movs	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	b002      	add	sp, #8
 80023c8:	bd80      	pop	{r7, pc}

080023ca <_ZN13AP33772Driver7GetTempEv>:
	this->measured.current = this->buffer[0] * 0.024;
	return HAL_OK;
}

HAL_StatusTypeDef AP33772Driver::GetTemp()
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
 80023d0:	6078      	str	r0, [r7, #4]
	if (this->ReadRegister(AP33772_TEMP, 1) != HAL_OK) {
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2201      	movs	r2, #1
 80023d6:	2122      	movs	r1, #34	@ 0x22
 80023d8:	0018      	movs	r0, r3
 80023da:	f000 f871 	bl	80024c0 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 80023de:	0003      	movs	r3, r0
 80023e0:	1e5a      	subs	r2, r3, #1
 80023e2:	4193      	sbcs	r3, r2
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d001      	beq.n	80023ee <_ZN13AP33772Driver7GetTempEv+0x24>
		return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e005      	b.n	80023fa <_ZN13AP33772Driver7GetTempEv+0x30>
	}
	this->measured.temp = this->buffer[0];
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	781a      	ldrb	r2, [r3, #0]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	761a      	strb	r2, [r3, #24]
	return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	0018      	movs	r0, r3
 80023fc:	46bd      	mov	sp, r7
 80023fe:	b002      	add	sp, #8
 8002400:	bd80      	pop	{r7, pc}

08002402 <_ZN13AP33772Driver17GetMeasuredValuesEv>:

AP33772_MeasuredValues* AP33772Driver::GetMeasuredValues()
{
 8002402:	b580      	push	{r7, lr}
 8002404:	b082      	sub	sp, #8
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
	return &this->measured;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3310      	adds	r3, #16
}
 800240e:	0018      	movs	r0, r3
 8002410:	46bd      	mov	sp, r7
 8002412:	b002      	add	sp, #8
 8002414:	bd80      	pop	{r7, pc}

08002416 <_ZN13AP33772Driver14ReadSourcePDOsEv>:

HAL_StatusTypeDef AP33772Driver::ReadSourcePDOs()
{
 8002416:	b590      	push	{r4, r7, lr}
 8002418:	b089      	sub	sp, #36	@ 0x24
 800241a:	af00      	add	r7, sp, #0
 800241c:	6178      	str	r0, [r7, #20]
	if (this->ReadRegister(AP33772_PDONUM, 1) != HAL_OK) {
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	2201      	movs	r2, #1
 8002422:	211c      	movs	r1, #28
 8002424:	0018      	movs	r0, r3
 8002426:	f000 f84b 	bl	80024c0 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 800242a:	0003      	movs	r3, r0
 800242c:	1e5a      	subs	r2, r3, #1
 800242e:	4193      	sbcs	r3, r2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <_ZN13AP33772Driver14ReadSourcePDOsEv+0x24>
		return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e03e      	b.n	80024b8 <_ZN13AP33772Driver14ReadSourcePDOsEv+0xa2>
	}
	this->srcPDOCount = this->buffer[0];
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	68db      	ldr	r3, [r3, #12]
 800243e:	7819      	ldrb	r1, [r3, #0]
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	2230      	movs	r2, #48	@ 0x30
 8002444:	5499      	strb	r1, [r3, r2]

	if (this->srcPDOCount > 7) return HAL_ERROR;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2230      	movs	r2, #48	@ 0x30
 800244a:	5c9b      	ldrb	r3, [r3, r2]
 800244c:	2b07      	cmp	r3, #7
 800244e:	d901      	bls.n	8002454 <_ZN13AP33772Driver14ReadSourcePDOsEv+0x3e>
 8002450:	2301      	movs	r3, #1
 8002452:	e031      	b.n	80024b8 <_ZN13AP33772Driver14ReadSourcePDOsEv+0xa2>

	if (this->ReadRegister(AP33772_SRCPDO, 28) != HAL_OK) {
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	221c      	movs	r2, #28
 8002458:	2100      	movs	r1, #0
 800245a:	0018      	movs	r0, r3
 800245c:	f000 f830 	bl	80024c0 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>
 8002460:	0003      	movs	r3, r0
 8002462:	1e5a      	subs	r2, r3, #1
 8002464:	4193      	sbcs	r3, r2
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b00      	cmp	r3, #0
 800246a:	d001      	beq.n	8002470 <_ZN13AP33772Driver14ReadSourcePDOsEv+0x5a>
		return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e023      	b.n	80024b8 <_ZN13AP33772Driver14ReadSourcePDOsEv+0xa2>
	}

	for (int i = 0; i < this->srcPDOCount; ++i) {
 8002470:	2300      	movs	r3, #0
 8002472:	61fb      	str	r3, [r7, #28]
 8002474:	e018      	b.n	80024a8 <_ZN13AP33772Driver14ReadSourcePDOsEv+0x92>
		this->srcPDOList[i] = this->ParsePDO(this->buffer + (4 * i));
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	68db      	ldr	r3, [r3, #12]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	0092      	lsls	r2, r2, #2
 800247e:	1898      	adds	r0, r3, r2
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	011b      	lsls	r3, r3, #4
 8002488:	18d4      	adds	r4, r2, r3
 800248a:	003b      	movs	r3, r7
 800248c:	6979      	ldr	r1, [r7, #20]
 800248e:	0002      	movs	r2, r0
 8002490:	0018      	movs	r0, r3
 8002492:	f000 f857 	bl	8002544 <_ZN13AP33772Driver8ParsePDOEPh>
 8002496:	003a      	movs	r2, r7
 8002498:	0023      	movs	r3, r4
 800249a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800249c:	c313      	stmia	r3!, {r0, r1, r4}
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < this->srcPDOCount; ++i) {
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3301      	adds	r3, #1
 80024a6:	61fb      	str	r3, [r7, #28]
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	2230      	movs	r2, #48	@ 0x30
 80024ac:	5c9b      	ldrb	r3, [r3, r2]
 80024ae:	001a      	movs	r2, r3
 80024b0:	69fb      	ldr	r3, [r7, #28]
 80024b2:	4293      	cmp	r3, r2
 80024b4:	dbdf      	blt.n	8002476 <_ZN13AP33772Driver14ReadSourcePDOsEv+0x60>
	}

	return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	0018      	movs	r0, r3
 80024ba:	46bd      	mov	sp, r7
 80024bc:	b009      	add	sp, #36	@ 0x24
 80024be:	bd90      	pop	{r4, r7, pc}

080024c0 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh>:

HAL_StatusTypeDef AP33772Driver::ReadRegister(AP33772_Register cmd, uint8_t len)
{
 80024c0:	b590      	push	{r4, r7, lr}
 80024c2:	b085      	sub	sp, #20
 80024c4:	af02      	add	r7, sp, #8
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	0008      	movs	r0, r1
 80024ca:	0011      	movs	r1, r2
 80024cc:	1cfb      	adds	r3, r7, #3
 80024ce:	1c02      	adds	r2, r0, #0
 80024d0:	701a      	strb	r2, [r3, #0]
 80024d2:	1cbb      	adds	r3, r7, #2
 80024d4:	1c0a      	adds	r2, r1, #0
 80024d6:	701a      	strb	r2, [r3, #0]
	this->buffer[0] = cmd;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	1cfa      	adds	r2, r7, #3
 80024de:	7812      	ldrb	r2, [r2, #0]
 80024e0:	701a      	strb	r2, [r3, #0]
	if (HAL_I2C_Master_Transmit(this->hi2c, this->address, this->buffer, 1, 100) != HAL_OK) {
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6858      	ldr	r0, [r3, #4]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	7a1b      	ldrb	r3, [r3, #8]
 80024ea:	0019      	movs	r1, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68da      	ldr	r2, [r3, #12]
 80024f0:	2364      	movs	r3, #100	@ 0x64
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	2301      	movs	r3, #1
 80024f6:	f002 fea3 	bl	8005240 <HAL_I2C_Master_Transmit>
 80024fa:	0003      	movs	r3, r0
 80024fc:	1e5a      	subs	r2, r3, #1
 80024fe:	4193      	sbcs	r3, r2
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d001      	beq.n	800250a <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x4a>
		return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e017      	b.n	800253a <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x7a>
	}
	if (HAL_I2C_Master_Receive(this->hi2c, this->address, this->buffer, len, 100) != HAL_OK) {
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6858      	ldr	r0, [r3, #4]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	7a1b      	ldrb	r3, [r3, #8]
 8002512:	001c      	movs	r4, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	1cbb      	adds	r3, r7, #2
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	b29b      	uxth	r3, r3
 800251e:	2164      	movs	r1, #100	@ 0x64
 8002520:	9100      	str	r1, [sp, #0]
 8002522:	0021      	movs	r1, r4
 8002524:	f002 ff94 	bl	8005450 <HAL_I2C_Master_Receive>
 8002528:	0003      	movs	r3, r0
 800252a:	1e5a      	subs	r2, r3, #1
 800252c:	4193      	sbcs	r3, r2
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x78>
		return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e000      	b.n	800253a <_ZN13AP33772Driver12ReadRegisterE16AP33772_Registerh+0x7a>
	}
	return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	0018      	movs	r0, r3
 800253c:	46bd      	mov	sp, r7
 800253e:	b003      	add	sp, #12
 8002540:	bd90      	pop	{r4, r7, pc}
	...

08002544 <_ZN13AP33772Driver8ParsePDOEPh>:

AP33772_PDObject AP33772Driver::ParsePDO(uint8_t *buf)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
	AP33772_PDObject output = {};
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	0018      	movs	r0, r3
 8002554:	2310      	movs	r3, #16
 8002556:	001a      	movs	r2, r3
 8002558:	2100      	movs	r1, #0
 800255a:	f00c fa29 	bl	800e9b0 <memset>
	this->temp.data[0] = buf[0];
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	7819      	ldrb	r1, [r3, #0]
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2248      	movs	r2, #72	@ 0x48
 8002566:	5499      	strb	r1, [r3, r2]
	this->temp.data[1] = buf[1];
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	7859      	ldrb	r1, [r3, #1]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2249      	movs	r2, #73	@ 0x49
 8002570:	5499      	strb	r1, [r3, r2]
	this->temp.data[2] = buf[2];
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	7899      	ldrb	r1, [r3, #2]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	224a      	movs	r2, #74	@ 0x4a
 800257a:	5499      	strb	r1, [r3, r2]
	this->temp.data[3] = buf[3];
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	78d9      	ldrb	r1, [r3, #3]
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	224b      	movs	r2, #75	@ 0x4b
 8002584:	5499      	strb	r1, [r3, r2]

	output.pdoType = (AP33772_PDOType)(this->temp.data[3] >> 6);
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	224b      	movs	r2, #75	@ 0x4b
 800258a:	5c9b      	ldrb	r3, [r3, r2]
 800258c:	099b      	lsrs	r3, r3, #6
 800258e:	b2da      	uxtb	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	731a      	strb	r2, [r3, #12]

	if (output.pdoType == AP33772_FIXED_PDO) {
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	7b1b      	ldrb	r3, [r3, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d12c      	bne.n	80025f6 <_ZN13AP33772Driver8ParsePDOEPh+0xb2>
		output.current = (this->temp.value & 0x3FF) * 0.01;
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025a0:	059b      	lsls	r3, r3, #22
 80025a2:	0d9b      	lsrs	r3, r3, #22
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff fd37 	bl	8002018 <__aeabi_ui2d>
 80025aa:	4a34      	ldr	r2, [pc, #208]	@ (800267c <_ZN13AP33772Driver8ParsePDOEPh+0x138>)
 80025ac:	4b34      	ldr	r3, [pc, #208]	@ (8002680 <_ZN13AP33772Driver8ParsePDOEPh+0x13c>)
 80025ae:	f7fe fe65 	bl	800127c <__aeabi_dmul>
 80025b2:	0002      	movs	r2, r0
 80025b4:	000b      	movs	r3, r1
 80025b6:	0010      	movs	r0, r2
 80025b8:	0019      	movs	r1, r3
 80025ba:	f7ff fd99 	bl	80020f0 <__aeabi_d2f>
 80025be:	1c02      	adds	r2, r0, #0
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	601a      	str	r2, [r3, #0]
		output.minVoltage = ((this->temp.value >> 10) & 0x3FF) * 0.05;
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025c8:	0a9b      	lsrs	r3, r3, #10
 80025ca:	059b      	lsls	r3, r3, #22
 80025cc:	0d9b      	lsrs	r3, r3, #22
 80025ce:	0018      	movs	r0, r3
 80025d0:	f7ff fd22 	bl	8002018 <__aeabi_ui2d>
 80025d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002684 <_ZN13AP33772Driver8ParsePDOEPh+0x140>)
 80025d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <_ZN13AP33772Driver8ParsePDOEPh+0x144>)
 80025d8:	f7fe fe50 	bl	800127c <__aeabi_dmul>
 80025dc:	0002      	movs	r2, r0
 80025de:	000b      	movs	r3, r1
 80025e0:	0010      	movs	r0, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	f7ff fd84 	bl	80020f0 <__aeabi_d2f>
 80025e8:	1c02      	adds	r2, r0, #0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	605a      	str	r2, [r3, #4]
		output.maxVoltage = 0;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	609a      	str	r2, [r3, #8]
	} else {
		output.current = (this->temp.value & 0x3F) * 0.05;
		output.minVoltage = ((this->temp.value >> 8) & 0x3F) * 0.1;
		output.maxVoltage = ((this->temp.value >> 17) & 0x3F) * 0.1;
	}
	return output;
 80025f4:	e03d      	b.n	8002672 <_ZN13AP33772Driver8ParsePDOEPh+0x12e>
		output.current = (this->temp.value & 0x3F) * 0.05;
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80025fa:	223f      	movs	r2, #63	@ 0x3f
 80025fc:	4013      	ands	r3, r2
 80025fe:	0018      	movs	r0, r3
 8002600:	f7ff fd0a 	bl	8002018 <__aeabi_ui2d>
 8002604:	4a1f      	ldr	r2, [pc, #124]	@ (8002684 <_ZN13AP33772Driver8ParsePDOEPh+0x140>)
 8002606:	4b20      	ldr	r3, [pc, #128]	@ (8002688 <_ZN13AP33772Driver8ParsePDOEPh+0x144>)
 8002608:	f7fe fe38 	bl	800127c <__aeabi_dmul>
 800260c:	0002      	movs	r2, r0
 800260e:	000b      	movs	r3, r1
 8002610:	0010      	movs	r0, r2
 8002612:	0019      	movs	r1, r3
 8002614:	f7ff fd6c 	bl	80020f0 <__aeabi_d2f>
 8002618:	1c02      	adds	r2, r0, #0
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]
		output.minVoltage = ((this->temp.value >> 8) & 0x3F) * 0.1;
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	223f      	movs	r2, #63	@ 0x3f
 8002626:	4013      	ands	r3, r2
 8002628:	0018      	movs	r0, r3
 800262a:	f7ff fcf5 	bl	8002018 <__aeabi_ui2d>
 800262e:	4a15      	ldr	r2, [pc, #84]	@ (8002684 <_ZN13AP33772Driver8ParsePDOEPh+0x140>)
 8002630:	4b16      	ldr	r3, [pc, #88]	@ (800268c <_ZN13AP33772Driver8ParsePDOEPh+0x148>)
 8002632:	f7fe fe23 	bl	800127c <__aeabi_dmul>
 8002636:	0002      	movs	r2, r0
 8002638:	000b      	movs	r3, r1
 800263a:	0010      	movs	r0, r2
 800263c:	0019      	movs	r1, r3
 800263e:	f7ff fd57 	bl	80020f0 <__aeabi_d2f>
 8002642:	1c02      	adds	r2, r0, #0
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	605a      	str	r2, [r3, #4]
		output.maxVoltage = ((this->temp.value >> 17) & 0x3F) * 0.1;
 8002648:	68bb      	ldr	r3, [r7, #8]
 800264a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800264c:	0c5b      	lsrs	r3, r3, #17
 800264e:	223f      	movs	r2, #63	@ 0x3f
 8002650:	4013      	ands	r3, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f7ff fce0 	bl	8002018 <__aeabi_ui2d>
 8002658:	4a0a      	ldr	r2, [pc, #40]	@ (8002684 <_ZN13AP33772Driver8ParsePDOEPh+0x140>)
 800265a:	4b0c      	ldr	r3, [pc, #48]	@ (800268c <_ZN13AP33772Driver8ParsePDOEPh+0x148>)
 800265c:	f7fe fe0e 	bl	800127c <__aeabi_dmul>
 8002660:	0002      	movs	r2, r0
 8002662:	000b      	movs	r3, r1
 8002664:	0010      	movs	r0, r2
 8002666:	0019      	movs	r1, r3
 8002668:	f7ff fd42 	bl	80020f0 <__aeabi_d2f>
 800266c:	1c02      	adds	r2, r0, #0
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	609a      	str	r2, [r3, #8]
	return output;
 8002672:	46c0      	nop			@ (mov r8, r8)
}
 8002674:	68f8      	ldr	r0, [r7, #12]
 8002676:	46bd      	mov	sp, r7
 8002678:	b004      	add	sp, #16
 800267a:	bd80      	pop	{r7, pc}
 800267c:	47ae147b 	.word	0x47ae147b
 8002680:	3f847ae1 	.word	0x3f847ae1
 8002684:	9999999a 	.word	0x9999999a
 8002688:	3fa99999 	.word	0x3fa99999
 800268c:	3fb99999 	.word	0x3fb99999

08002690 <_ZN13AP33772Driver14FindNearestPDOEv>:

void AP33772Driver::FindNearestPDO()
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
	if (this->desiredPDO.voltage == 0) {
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800269c:	2100      	movs	r1, #0
 800269e:	1c18      	adds	r0, r3, #0
 80026a0:	f7fd fef2 	bl	8000488 <__aeabi_fcmpeq>
 80026a4:	1e03      	subs	r3, r0, #0
 80026a6:	d008      	beq.n	80026ba <_ZN13AP33772Driver14FindNearestPDOEv+0x2a>
		this->foundPDO = false;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2244      	movs	r2, #68	@ 0x44
 80026ac:	2100      	movs	r1, #0
 80026ae:	5499      	strb	r1, [r3, r2]
		this->voltageMismatch = false;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2245      	movs	r2, #69	@ 0x45
 80026b4:	2100      	movs	r1, #0
 80026b6:	5499      	strb	r1, [r3, r2]
		return;
 80026b8:	e0e5      	b.n	8002886 <_ZN13AP33772Driver14FindNearestPDOEv+0x1f6>
	}
	int i = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	617b      	str	r3, [r7, #20]

	// Search for a matching fixed voltage PDO
	for (i = 0; i < this->srcPDOCount; ++i) {
 80026be:	2300      	movs	r3, #0
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	e034      	b.n	800272e <_ZN13AP33772Driver14FindNearestPDOEv+0x9e>
		if (this->srcPDOList[i].pdoType == AP33772_FIXED_PDO) {
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026c8:	697b      	ldr	r3, [r7, #20]
 80026ca:	011b      	lsls	r3, r3, #4
 80026cc:	18d3      	adds	r3, r2, r3
 80026ce:	7b1b      	ldrb	r3, [r3, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d129      	bne.n	8002728 <_ZN13AP33772Driver14FindNearestPDOEv+0x98>
			if (this->srcPDOList[i].current >= this->desiredPDO.maxCurrent) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	011b      	lsls	r3, r3, #4
 80026dc:	18d3      	adds	r3, r2, r3
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026e4:	1c19      	adds	r1, r3, #0
 80026e6:	1c10      	adds	r0, r2, #0
 80026e8:	f7fd fef2 	bl	80004d0 <__aeabi_fcmpge>
 80026ec:	1e03      	subs	r3, r0, #0
 80026ee:	d01b      	beq.n	8002728 <_ZN13AP33772Driver14FindNearestPDOEv+0x98>
				if (this->srcPDOList[i].minVoltage == this->desiredPDO.voltage) {
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	011b      	lsls	r3, r3, #4
 80026f8:	18d3      	adds	r3, r2, r3
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002700:	1c19      	adds	r1, r3, #0
 8002702:	1c10      	adds	r0, r2, #0
 8002704:	f7fd fec0 	bl	8000488 <__aeabi_fcmpeq>
 8002708:	1e03      	subs	r3, r0, #0
 800270a:	d00d      	beq.n	8002728 <_ZN13AP33772Driver14FindNearestPDOEv+0x98>
					this->selectedPDOIndex = i;
 800270c:	697b      	ldr	r3, [r7, #20]
 800270e:	b2d9      	uxtb	r1, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2231      	movs	r2, #49	@ 0x31
 8002714:	5499      	strb	r1, [r3, r2]
					this->foundPDO = true;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2244      	movs	r2, #68	@ 0x44
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
					this->voltageMismatch = false;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2245      	movs	r2, #69	@ 0x45
 8002722:	2100      	movs	r1, #0
 8002724:	5499      	strb	r1, [r3, r2]
					return;
 8002726:	e0ae      	b.n	8002886 <_ZN13AP33772Driver14FindNearestPDOEv+0x1f6>
	for (i = 0; i < this->srcPDOCount; ++i) {
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	3301      	adds	r3, #1
 800272c:	617b      	str	r3, [r7, #20]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2230      	movs	r2, #48	@ 0x30
 8002732:	5c9b      	ldrb	r3, [r3, r2]
 8002734:	001a      	movs	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	4293      	cmp	r3, r2
 800273a:	dbc3      	blt.n	80026c4 <_ZN13AP33772Driver14FindNearestPDOEv+0x34>
			}
		}
	}

	// If a fixed PDO cant be found, find a adjustable PDO that has the required voltage range.
	for (i = 0; i < this->srcPDOCount; ++i) {
 800273c:	2300      	movs	r3, #0
 800273e:	617b      	str	r3, [r7, #20]
 8002740:	e042      	b.n	80027c8 <_ZN13AP33772Driver14FindNearestPDOEv+0x138>
		if (this->srcPDOList[i].pdoType == AP33772_ADJ_PDO) {
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	011b      	lsls	r3, r3, #4
 800274a:	18d3      	adds	r3, r2, r3
 800274c:	7b1b      	ldrb	r3, [r3, #12]
 800274e:	2b03      	cmp	r3, #3
 8002750:	d137      	bne.n	80027c2 <_ZN13AP33772Driver14FindNearestPDOEv+0x132>
			if (this->srcPDOList[i].current >= this->desiredPDO.maxCurrent) {
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	011b      	lsls	r3, r3, #4
 800275a:	18d3      	adds	r3, r2, r3
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002762:	1c19      	adds	r1, r3, #0
 8002764:	1c10      	adds	r0, r2, #0
 8002766:	f7fd feb3 	bl	80004d0 <__aeabi_fcmpge>
 800276a:	1e03      	subs	r3, r0, #0
 800276c:	d029      	beq.n	80027c2 <_ZN13AP33772Driver14FindNearestPDOEv+0x132>
				if (this->srcPDOList[i].minVoltage <= this->desiredPDO.voltage && this->srcPDOList[i].maxVoltage >= this->desiredPDO.voltage) {
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	011b      	lsls	r3, r3, #4
 8002776:	18d3      	adds	r3, r2, r3
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800277e:	1c19      	adds	r1, r3, #0
 8002780:	1c10      	adds	r0, r2, #0
 8002782:	f7fd fe91 	bl	80004a8 <__aeabi_fcmple>
 8002786:	1e03      	subs	r3, r0, #0
 8002788:	d01b      	beq.n	80027c2 <_ZN13AP33772Driver14FindNearestPDOEv+0x132>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	011b      	lsls	r3, r3, #4
 8002792:	18d3      	adds	r3, r2, r3
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800279a:	1c19      	adds	r1, r3, #0
 800279c:	1c10      	adds	r0, r2, #0
 800279e:	f7fd fe97 	bl	80004d0 <__aeabi_fcmpge>
 80027a2:	1e03      	subs	r3, r0, #0
 80027a4:	d00d      	beq.n	80027c2 <_ZN13AP33772Driver14FindNearestPDOEv+0x132>
					this->selectedPDOIndex = i;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	b2d9      	uxtb	r1, r3
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2231      	movs	r2, #49	@ 0x31
 80027ae:	5499      	strb	r1, [r3, r2]
					this->foundPDO = true;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2244      	movs	r2, #68	@ 0x44
 80027b4:	2101      	movs	r1, #1
 80027b6:	5499      	strb	r1, [r3, r2]
					this->voltageMismatch = false;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2245      	movs	r2, #69	@ 0x45
 80027bc:	2100      	movs	r1, #0
 80027be:	5499      	strb	r1, [r3, r2]
					return;
 80027c0:	e061      	b.n	8002886 <_ZN13AP33772Driver14FindNearestPDOEv+0x1f6>
	for (i = 0; i < this->srcPDOCount; ++i) {
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2230      	movs	r2, #48	@ 0x30
 80027cc:	5c9b      	ldrb	r3, [r3, r2]
 80027ce:	001a      	movs	r2, r3
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	4293      	cmp	r3, r2
 80027d4:	dbb5      	blt.n	8002742 <_ZN13AP33772Driver14FindNearestPDOEv+0xb2>
			}
		}
	}

	// If there are no matching or programmable PDOs, find the closest fixed match.
	int8_t closestPDOindex = -1;
 80027d6:	2313      	movs	r3, #19
 80027d8:	18fb      	adds	r3, r7, r3
 80027da:	22ff      	movs	r2, #255	@ 0xff
 80027dc:	701a      	strb	r2, [r3, #0]
	float closestDiff = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
	float temp = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < this->srcPDOCount; ++i) {
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e02e      	b.n	800284a <_ZN13AP33772Driver14FindNearestPDOEv+0x1ba>
		if (this->desiredPDO.current > this->srcPDOList[i].current) {
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	18d3      	adds	r3, r2, r3
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	1c19      	adds	r1, r3, #0
 80027fe:	f7fd fe5d 	bl	80004bc <__aeabi_fcmpgt>
 8002802:	1e03      	subs	r3, r0, #0
 8002804:	d11d      	bne.n	8002842 <_ZN13AP33772Driver14FindNearestPDOEv+0x1b2>
			continue;
		}
		temp = std::abs(this->desiredPDO.voltage - this->srcPDOList[i].minVoltage);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800280e:	697b      	ldr	r3, [r7, #20]
 8002810:	011b      	lsls	r3, r3, #4
 8002812:	18d3      	adds	r3, r2, r3
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	1c19      	adds	r1, r3, #0
 8002818:	f7fd ff48 	bl	80006ac <__aeabi_fsub>
 800281c:	1c03      	adds	r3, r0, #0
 800281e:	1c18      	adds	r0, r3, #0
 8002820:	f7ff fd08 	bl	8002234 <_ZSt3absf>
 8002824:	1c03      	adds	r3, r0, #0
 8002826:	60bb      	str	r3, [r7, #8]
		if (temp < closestDiff) {
 8002828:	68f9      	ldr	r1, [r7, #12]
 800282a:	68b8      	ldr	r0, [r7, #8]
 800282c:	f7fd fe32 	bl	8000494 <__aeabi_fcmplt>
 8002830:	1e03      	subs	r3, r0, #0
 8002832:	d007      	beq.n	8002844 <_ZN13AP33772Driver14FindNearestPDOEv+0x1b4>
			closestDiff = temp;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	60fb      	str	r3, [r7, #12]
			closestPDOindex = i;
 8002838:	2313      	movs	r3, #19
 800283a:	18fb      	adds	r3, r7, r3
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e000      	b.n	8002844 <_ZN13AP33772Driver14FindNearestPDOEv+0x1b4>
			continue;
 8002842:	46c0      	nop			@ (mov r8, r8)
	for (i = 0; i < this->srcPDOCount; ++i) {
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	3301      	adds	r3, #1
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2230      	movs	r2, #48	@ 0x30
 800284e:	5c9b      	ldrb	r3, [r3, r2]
 8002850:	001a      	movs	r2, r3
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	4293      	cmp	r3, r2
 8002856:	dbc9      	blt.n	80027ec <_ZN13AP33772Driver14FindNearestPDOEv+0x15c>
		}
	}
	if (closestPDOindex > -1) {
 8002858:	2213      	movs	r2, #19
 800285a:	18bb      	adds	r3, r7, r2
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	2b7f      	cmp	r3, #127	@ 0x7f
 8002860:	d80d      	bhi.n	800287e <_ZN13AP33772Driver14FindNearestPDOEv+0x1ee>
		this->selectedPDOIndex = closestPDOindex;
 8002862:	18bb      	adds	r3, r7, r2
 8002864:	7819      	ldrb	r1, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2231      	movs	r2, #49	@ 0x31
 800286a:	5499      	strb	r1, [r3, r2]
		this->foundPDO = true;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2244      	movs	r2, #68	@ 0x44
 8002870:	2101      	movs	r1, #1
 8002872:	5499      	strb	r1, [r3, r2]
		this->voltageMismatch = true;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2245      	movs	r2, #69	@ 0x45
 8002878:	2101      	movs	r1, #1
 800287a:	5499      	strb	r1, [r3, r2]
		return;
 800287c:	e003      	b.n	8002886 <_ZN13AP33772Driver14FindNearestPDOEv+0x1f6>
	}

	this->foundPDO = false;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2244      	movs	r2, #68	@ 0x44
 8002882:	2100      	movs	r1, #0
 8002884:	5499      	strb	r1, [r3, r2]
}
 8002886:	46bd      	mov	sp, r7
 8002888:	b006      	add	sp, #24
 800288a:	bd80      	pop	{r7, pc}

0800288c <_ZN13AP33772Driver16SendRequestedPDOEv>:

HAL_StatusTypeDef AP33772Driver::SendRequestedPDO()
{
 800288c:	b590      	push	{r4, r7, lr}
 800288e:	b085      	sub	sp, #20
 8002890:	af02      	add	r7, sp, #8
 8002892:	6078      	str	r0, [r7, #4]
	if (this->foundPDO) {
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2244      	movs	r2, #68	@ 0x44
 8002898:	5c9b      	ldrb	r3, [r3, r2]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d100      	bne.n	80028a0 <_ZN13AP33772Driver16SendRequestedPDOEv+0x14>
 800289e:	e0aa      	b.n	80029f6 <_ZN13AP33772Driver16SendRequestedPDOEv+0x16a>
		this->temp.value = ((this->selectedPDOIndex + 1) << 28);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2231      	movs	r2, #49	@ 0x31
 80028a4:	5c9b      	ldrb	r3, [r3, r2]
 80028a6:	3301      	adds	r3, #1
 80028a8:	071b      	lsls	r3, r3, #28
 80028aa:	001a      	movs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	649a      	str	r2, [r3, #72]	@ 0x48
		if (this->srcPDOList[this->selectedPDOIndex].pdoType == AP33772_FIXED_PDO) {
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2131      	movs	r1, #49	@ 0x31
 80028b8:	5c5b      	ldrb	r3, [r3, r1]
 80028ba:	011b      	lsls	r3, r3, #4
 80028bc:	18d3      	adds	r3, r2, r3
 80028be:	7b1b      	ldrb	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d131      	bne.n	8002928 <_ZN13AP33772Driver16SendRequestedPDOEv+0x9c>

			this->temp.value |= ((uint32_t)(this->desiredPDO.maxCurrent / 0.01) & 0x3FF);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028cc:	1c18      	adds	r0, r3, #0
 80028ce:	f7ff fbc7 	bl	8002060 <__aeabi_f2d>
 80028d2:	4a4b      	ldr	r2, [pc, #300]	@ (8002a00 <_ZN13AP33772Driver16SendRequestedPDOEv+0x174>)
 80028d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002a04 <_ZN13AP33772Driver16SendRequestedPDOEv+0x178>)
 80028d6:	f7fe f88d 	bl	80009f4 <__aeabi_ddiv>
 80028da:	0002      	movs	r2, r0
 80028dc:	000b      	movs	r3, r1
 80028de:	0010      	movs	r0, r2
 80028e0:	0019      	movs	r1, r3
 80028e2:	f7fd fdff 	bl	80004e4 <__aeabi_d2uiz>
 80028e6:	0003      	movs	r3, r0
 80028e8:	059b      	lsls	r3, r3, #22
 80028ea:	0d9b      	lsrs	r3, r3, #22
 80028ec:	0022      	movs	r2, r4
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	649a      	str	r2, [r3, #72]	@ 0x48
			this->temp.value |= (((uint32_t)(this->desiredPDO.current / 0.01) & 0x3FF) << 10);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fc:	1c18      	adds	r0, r3, #0
 80028fe:	f7ff fbaf 	bl	8002060 <__aeabi_f2d>
 8002902:	4a3f      	ldr	r2, [pc, #252]	@ (8002a00 <_ZN13AP33772Driver16SendRequestedPDOEv+0x174>)
 8002904:	4b3f      	ldr	r3, [pc, #252]	@ (8002a04 <_ZN13AP33772Driver16SendRequestedPDOEv+0x178>)
 8002906:	f7fe f875 	bl	80009f4 <__aeabi_ddiv>
 800290a:	0002      	movs	r2, r0
 800290c:	000b      	movs	r3, r1
 800290e:	0010      	movs	r0, r2
 8002910:	0019      	movs	r1, r3
 8002912:	f7fd fde7 	bl	80004e4 <__aeabi_d2uiz>
 8002916:	0003      	movs	r3, r0
 8002918:	029b      	lsls	r3, r3, #10
 800291a:	4a3b      	ldr	r2, [pc, #236]	@ (8002a08 <_ZN13AP33772Driver16SendRequestedPDOEv+0x17c>)
 800291c:	4013      	ands	r3, r2
 800291e:	0022      	movs	r2, r4
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	649a      	str	r2, [r3, #72]	@ 0x48
 8002926:	e030      	b.n	800298a <_ZN13AP33772Driver16SendRequestedPDOEv+0xfe>
		} else {
			this->temp.value |= ((uint32_t)(this->desiredPDO.current / 0.05) & 0x3F);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002930:	1c18      	adds	r0, r3, #0
 8002932:	f7ff fb95 	bl	8002060 <__aeabi_f2d>
 8002936:	4a35      	ldr	r2, [pc, #212]	@ (8002a0c <_ZN13AP33772Driver16SendRequestedPDOEv+0x180>)
 8002938:	4b35      	ldr	r3, [pc, #212]	@ (8002a10 <_ZN13AP33772Driver16SendRequestedPDOEv+0x184>)
 800293a:	f7fe f85b 	bl	80009f4 <__aeabi_ddiv>
 800293e:	0002      	movs	r2, r0
 8002940:	000b      	movs	r3, r1
 8002942:	0010      	movs	r0, r2
 8002944:	0019      	movs	r1, r3
 8002946:	f7fd fdcd 	bl	80004e4 <__aeabi_d2uiz>
 800294a:	0003      	movs	r3, r0
 800294c:	223f      	movs	r2, #63	@ 0x3f
 800294e:	4013      	ands	r3, r2
 8002950:	0022      	movs	r2, r4
 8002952:	431a      	orrs	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	649a      	str	r2, [r3, #72]	@ 0x48
			this->temp.value |= (((uint32_t)(this->desiredPDO.voltage / 0.02) & 0x3FF) << 9);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002960:	1c18      	adds	r0, r3, #0
 8002962:	f7ff fb7d 	bl	8002060 <__aeabi_f2d>
 8002966:	4a26      	ldr	r2, [pc, #152]	@ (8002a00 <_ZN13AP33772Driver16SendRequestedPDOEv+0x174>)
 8002968:	4b2a      	ldr	r3, [pc, #168]	@ (8002a14 <_ZN13AP33772Driver16SendRequestedPDOEv+0x188>)
 800296a:	f7fe f843 	bl	80009f4 <__aeabi_ddiv>
 800296e:	0002      	movs	r2, r0
 8002970:	000b      	movs	r3, r1
 8002972:	0010      	movs	r0, r2
 8002974:	0019      	movs	r1, r3
 8002976:	f7fd fdb5 	bl	80004e4 <__aeabi_d2uiz>
 800297a:	0003      	movs	r3, r0
 800297c:	025b      	lsls	r3, r3, #9
 800297e:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <_ZN13AP33772Driver16SendRequestedPDOEv+0x18c>)
 8002980:	4013      	ands	r3, r2
 8002982:	0022      	movs	r2, r4
 8002984:	431a      	orrs	r2, r3
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		this->buffer[0] = AP33772_RDO;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	2230      	movs	r2, #48	@ 0x30
 8002990:	701a      	strb	r2, [r3, #0]
		this->buffer[1] = this->temp.data[0];
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	3301      	adds	r3, #1
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	2148      	movs	r1, #72	@ 0x48
 800299c:	5c52      	ldrb	r2, [r2, r1]
 800299e:	701a      	strb	r2, [r3, #0]
		this->buffer[2] = this->temp.data[1];
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	3302      	adds	r3, #2
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	2149      	movs	r1, #73	@ 0x49
 80029aa:	5c52      	ldrb	r2, [r2, r1]
 80029ac:	701a      	strb	r2, [r3, #0]
		this->buffer[3] = this->temp.data[2];
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	3303      	adds	r3, #3
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	214a      	movs	r1, #74	@ 0x4a
 80029b8:	5c52      	ldrb	r2, [r2, r1]
 80029ba:	701a      	strb	r2, [r3, #0]
		this->buffer[4] = this->temp.data[3];
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	3304      	adds	r3, #4
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	214b      	movs	r1, #75	@ 0x4b
 80029c6:	5c52      	ldrb	r2, [r2, r1]
 80029c8:	701a      	strb	r2, [r3, #0]

		if (HAL_I2C_Master_Transmit(this->hi2c, this->address, this->buffer, 5, 200) != HAL_OK) {
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6858      	ldr	r0, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	7a1b      	ldrb	r3, [r3, #8]
 80029d2:	0019      	movs	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	23c8      	movs	r3, #200	@ 0xc8
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2305      	movs	r3, #5
 80029de:	f002 fc2f 	bl	8005240 <HAL_I2C_Master_Transmit>
 80029e2:	0003      	movs	r3, r0
 80029e4:	1e5a      	subs	r2, r3, #1
 80029e6:	4193      	sbcs	r3, r2
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <_ZN13AP33772Driver16SendRequestedPDOEv+0x166>
			return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e002      	b.n	80029f8 <_ZN13AP33772Driver16SendRequestedPDOEv+0x16c>
		}

		return HAL_OK;
 80029f2:	2300      	movs	r3, #0
 80029f4:	e000      	b.n	80029f8 <_ZN13AP33772Driver16SendRequestedPDOEv+0x16c>
	}
	return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
}
 80029f8:	0018      	movs	r0, r3
 80029fa:	46bd      	mov	sp, r7
 80029fc:	b003      	add	sp, #12
 80029fe:	bd90      	pop	{r4, r7, pc}
 8002a00:	47ae147b 	.word	0x47ae147b
 8002a04:	3f847ae1 	.word	0x3f847ae1
 8002a08:	000ffc00 	.word	0x000ffc00
 8002a0c:	9999999a 	.word	0x9999999a
 8002a10:	3fa99999 	.word	0x3fa99999
 8002a14:	3f947ae1 	.word	0x3f947ae1
 8002a18:	0007fe00 	.word	0x0007fe00

08002a1c <_ZN13AP33772Driver11SetOverTempEh>:
	}
	return HAL_OK;
}

HAL_StatusTypeDef AP33772Driver::SetOverTemp(uint8_t temp)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af02      	add	r7, sp, #8
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	000a      	movs	r2, r1
 8002a26:	1cfb      	adds	r3, r7, #3
 8002a28:	701a      	strb	r2, [r3, #0]
	this->buffer[0] = AP33772_OTPTHR;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68db      	ldr	r3, [r3, #12]
 8002a2e:	2224      	movs	r2, #36	@ 0x24
 8002a30:	701a      	strb	r2, [r3, #0]
	this->buffer[1] = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	3301      	adds	r3, #1
 8002a38:	1cfa      	adds	r2, r7, #3
 8002a3a:	7812      	ldrb	r2, [r2, #0]
 8002a3c:	701a      	strb	r2, [r3, #0]
	return HAL_I2C_Master_Transmit(this->hi2c, this->address, this->buffer, 2, 200);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6858      	ldr	r0, [r3, #4]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	7a1b      	ldrb	r3, [r3, #8]
 8002a46:	0019      	movs	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68da      	ldr	r2, [r3, #12]
 8002a4c:	23c8      	movs	r3, #200	@ 0xc8
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2302      	movs	r3, #2
 8002a52:	f002 fbf5 	bl	8005240 <HAL_I2C_Master_Transmit>
 8002a56:	0003      	movs	r3, r0
}
 8002a58:	0018      	movs	r0, r3
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	b002      	add	sp, #8
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <_Z6SetPWMht>:
LightingState state;
uint8_t i = 0;
double tempp = 0;

void SetPWM(uint8_t i, uint16_t pwm)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	0002      	movs	r2, r0
 8002a68:	1dfb      	adds	r3, r7, #7
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	1d3b      	adds	r3, r7, #4
 8002a6e:	1c0a      	adds	r2, r1, #0
 8002a70:	801a      	strh	r2, [r3, #0]
//		__HAL_TIM_SET_COMPARE(state.pins[i].handle, state.pins[i].ch, (uint32_t)(tempp * UINT32_MAXF));
//	}
//	else {
//		__HAL_TIM_SET_COMPARE(state.pins[i].handle, state.pins[i].ch, pwm);
//	}
	__HAL_TIM_SET_COMPARE(state.pins[i].handle, state.pins[i].ch, pwm);
 8002a72:	4b31      	ldr	r3, [pc, #196]	@ (8002b38 <_Z6SetPWMht+0xd8>)
 8002a74:	6819      	ldr	r1, [r3, #0]
 8002a76:	1dfb      	adds	r3, r7, #7
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	18cb      	adds	r3, r1, r3
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10e      	bne.n	8002aa8 <_Z6SetPWMht+0x48>
 8002a8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002b38 <_Z6SetPWMht+0xd8>)
 8002a8c:	6819      	ldr	r1, [r3, #0]
 8002a8e:	1dfb      	adds	r3, r7, #7
 8002a90:	781a      	ldrb	r2, [r3, #0]
 8002a92:	0013      	movs	r3, r2
 8002a94:	005b      	lsls	r3, r3, #1
 8002a96:	189b      	adds	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	18cb      	adds	r3, r1, r3
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	1d3a      	adds	r2, r7, #4
 8002aa2:	8812      	ldrh	r2, [r2, #0]
 8002aa4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8002aa6:	e043      	b.n	8002b30 <_Z6SetPWMht+0xd0>
	__HAL_TIM_SET_COMPARE(state.pins[i].handle, state.pins[i].ch, pwm);
 8002aa8:	4b23      	ldr	r3, [pc, #140]	@ (8002b38 <_Z6SetPWMht+0xd8>)
 8002aaa:	6819      	ldr	r1, [r3, #0]
 8002aac:	1dfb      	adds	r3, r7, #7
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	0013      	movs	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	189b      	adds	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	18cb      	adds	r3, r1, r3
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b04      	cmp	r3, #4
 8002abe:	d10e      	bne.n	8002ade <_Z6SetPWMht+0x7e>
 8002ac0:	4b1d      	ldr	r3, [pc, #116]	@ (8002b38 <_Z6SetPWMht+0xd8>)
 8002ac2:	6819      	ldr	r1, [r3, #0]
 8002ac4:	1dfb      	adds	r3, r7, #7
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	0013      	movs	r3, r2
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	189b      	adds	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	18cb      	adds	r3, r1, r3
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	1d3a      	adds	r2, r7, #4
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8002adc:	e028      	b.n	8002b30 <_Z6SetPWMht+0xd0>
	__HAL_TIM_SET_COMPARE(state.pins[i].handle, state.pins[i].ch, pwm);
 8002ade:	4b16      	ldr	r3, [pc, #88]	@ (8002b38 <_Z6SetPWMht+0xd8>)
 8002ae0:	6819      	ldr	r1, [r3, #0]
 8002ae2:	1dfb      	adds	r3, r7, #7
 8002ae4:	781a      	ldrb	r2, [r3, #0]
 8002ae6:	0013      	movs	r3, r2
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	189b      	adds	r3, r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	18cb      	adds	r3, r1, r3
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d10e      	bne.n	8002b14 <_Z6SetPWMht+0xb4>
 8002af6:	4b10      	ldr	r3, [pc, #64]	@ (8002b38 <_Z6SetPWMht+0xd8>)
 8002af8:	6819      	ldr	r1, [r3, #0]
 8002afa:	1dfb      	adds	r3, r7, #7
 8002afc:	781a      	ldrb	r2, [r3, #0]
 8002afe:	0013      	movs	r3, r2
 8002b00:	005b      	lsls	r3, r3, #1
 8002b02:	189b      	adds	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	18cb      	adds	r3, r1, r3
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	1d3a      	adds	r2, r7, #4
 8002b0e:	8812      	ldrh	r2, [r2, #0]
 8002b10:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8002b12:	e00d      	b.n	8002b30 <_Z6SetPWMht+0xd0>
	__HAL_TIM_SET_COMPARE(state.pins[i].handle, state.pins[i].ch, pwm);
 8002b14:	4b08      	ldr	r3, [pc, #32]	@ (8002b38 <_Z6SetPWMht+0xd8>)
 8002b16:	6819      	ldr	r1, [r3, #0]
 8002b18:	1dfb      	adds	r3, r7, #7
 8002b1a:	781a      	ldrb	r2, [r3, #0]
 8002b1c:	0013      	movs	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	189b      	adds	r3, r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	18cb      	adds	r3, r1, r3
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	1d3a      	adds	r2, r7, #4
 8002b2c:	8812      	ldrh	r2, [r2, #0]
 8002b2e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8002b30:	46c0      	nop			@ (mov r8, r8)
 8002b32:	46bd      	mov	sp, r7
 8002b34:	b002      	add	sp, #8
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	200001fc 	.word	0x200001fc

08002b3c <_Z12InitLightingP6PWMPin>:

HAL_StatusTypeDef InitLighting(PWMPin *pins)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
	state.pins = pins;
 8002b44:	4b1c      	ldr	r3, [pc, #112]	@ (8002bb8 <_Z12InitLightingP6PWMPin+0x7c>)
 8002b46:	687a      	ldr	r2, [r7, #4]
 8002b48:	601a      	str	r2, [r3, #0]
	for (i = 0; i < LED_COUNT; ++i) {
 8002b4a:	4b1c      	ldr	r3, [pc, #112]	@ (8002bbc <_Z12InitLightingP6PWMPin+0x80>)
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	e026      	b.n	8002ba0 <_Z12InitLightingP6PWMPin+0x64>
		if (HAL_TIM_PWM_Start(state.pins[i].handle, state.pins[i].ch) != HAL_OK) {
 8002b52:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <_Z12InitLightingP6PWMPin+0x7c>)
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	4b19      	ldr	r3, [pc, #100]	@ (8002bbc <_Z12InitLightingP6PWMPin+0x80>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	0019      	movs	r1, r3
 8002b5c:	000b      	movs	r3, r1
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	185b      	adds	r3, r3, r1
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	18d3      	adds	r3, r2, r3
 8002b66:	6858      	ldr	r0, [r3, #4]
 8002b68:	4b13      	ldr	r3, [pc, #76]	@ (8002bb8 <_Z12InitLightingP6PWMPin+0x7c>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	4b13      	ldr	r3, [pc, #76]	@ (8002bbc <_Z12InitLightingP6PWMPin+0x80>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	0019      	movs	r1, r3
 8002b72:	000b      	movs	r3, r1
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	185b      	adds	r3, r3, r1
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	18d3      	adds	r3, r2, r3
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	0019      	movs	r1, r3
 8002b80:	f006 fbac 	bl	80092dc <HAL_TIM_PWM_Start>
 8002b84:	0003      	movs	r3, r0
 8002b86:	1e5a      	subs	r2, r3, #1
 8002b88:	4193      	sbcs	r3, r2
 8002b8a:	b2db      	uxtb	r3, r3
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d001      	beq.n	8002b94 <_Z12InitLightingP6PWMPin+0x58>
			return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e00c      	b.n	8002bae <_Z12InitLightingP6PWMPin+0x72>
	for (i = 0; i < LED_COUNT; ++i) {
 8002b94:	4b09      	ldr	r3, [pc, #36]	@ (8002bbc <_Z12InitLightingP6PWMPin+0x80>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	4b07      	ldr	r3, [pc, #28]	@ (8002bbc <_Z12InitLightingP6PWMPin+0x80>)
 8002b9e:	701a      	strb	r2, [r3, #0]
 8002ba0:	4b06      	ldr	r3, [pc, #24]	@ (8002bbc <_Z12InitLightingP6PWMPin+0x80>)
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b07      	cmp	r3, #7
 8002ba6:	d9d4      	bls.n	8002b52 <_Z12InitLightingP6PWMPin+0x16>
		}
	}
	LightsOff();
 8002ba8:	f000 f80a 	bl	8002bc0 <_Z9LightsOffv>
	return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b002      	add	sp, #8
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			@ (mov r8, r8)
 8002bb8:	200001fc 	.word	0x200001fc
 8002bbc:	20000200 	.word	0x20000200

08002bc0 <_Z9LightsOffv>:
	}
	state.pins = NULL;
}

void LightsOff()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
	SetAllLights(0);
 8002bc4:	2000      	movs	r0, #0
 8002bc6:	f000 f803 	bl	8002bd0 <_Z12SetAllLightst>
}
 8002bca:	46c0      	nop			@ (mov r8, r8)
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <_Z12SetAllLightst>:
	assert_param(index < LED_COUNT);
	SetPWM(index, pwm);
}

void SetAllLights(uint16_t pwm)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	0002      	movs	r2, r0
 8002bd8:	1dbb      	adds	r3, r7, #6
 8002bda:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < LED_COUNT; ++i) {
 8002bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8002c14 <_Z12SetAllLightst+0x44>)
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
 8002be2:	e00d      	b.n	8002c00 <_Z12SetAllLightst+0x30>
		SetPWM(i, pwm);
 8002be4:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <_Z12SetAllLightst+0x44>)
 8002be6:	781a      	ldrb	r2, [r3, #0]
 8002be8:	1dbb      	adds	r3, r7, #6
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	0019      	movs	r1, r3
 8002bee:	0010      	movs	r0, r2
 8002bf0:	f7ff ff36 	bl	8002a60 <_Z6SetPWMht>
	for (i = 0; i < LED_COUNT; ++i) {
 8002bf4:	4b07      	ldr	r3, [pc, #28]	@ (8002c14 <_Z12SetAllLightst+0x44>)
 8002bf6:	781b      	ldrb	r3, [r3, #0]
 8002bf8:	3301      	adds	r3, #1
 8002bfa:	b2da      	uxtb	r2, r3
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <_Z12SetAllLightst+0x44>)
 8002bfe:	701a      	strb	r2, [r3, #0]
 8002c00:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <_Z12SetAllLightst+0x44>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b07      	cmp	r3, #7
 8002c06:	d9ed      	bls.n	8002be4 <_Z12SetAllLightst+0x14>
	}
}
 8002c08:	46c0      	nop			@ (mov r8, r8)
 8002c0a:	46c0      	nop			@ (mov r8, r8)
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	b002      	add	sp, #8
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	46c0      	nop			@ (mov r8, r8)
 8002c14:	20000200 	.word	0x20000200

08002c18 <_Z16SetMaxBrightnessv>:

void SetMaxBrightness()
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
	SetAllLights(UINT16_MAX);
 8002c1c:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <_Z16SetMaxBrightnessv+0x14>)
 8002c1e:	0018      	movs	r0, r3
 8002c20:	f7ff ffd6 	bl	8002bd0 <_Z12SetAllLightst>
}
 8002c24:	46c0      	nop			@ (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	0000ffff 	.word	0x0000ffff

08002c30 <_ZN3PinC1EP12GPIO_TypeDeft>:
struct Pin
{
	// Defaults to output pin
	Pin() {};
	// Defaults to output pin
	Pin(GPIO_TypeDef* port, uint16_t pin)
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	1dbb      	adds	r3, r7, #6
 8002c3c:	801a      	strh	r2, [r3, #0]
	{
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	2201      	movs	r2, #1
 8002c42:	721a      	strb	r2, [r3, #8]
		this->port = port;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	1dba      	adds	r2, r7, #6
 8002c4e:	8812      	ldrh	r2, [r2, #0]
 8002c50:	809a      	strh	r2, [r3, #4]
		this->defaultState = ACTIVE_HIGH;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2200      	movs	r2, #0
 8002c56:	719a      	strb	r2, [r3, #6]
	};
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	0018      	movs	r0, r3
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>:
		this->port = port;
		this->pin = pin;
		this->defaultState = defaultState;
		this->isOutput = true;
	};
	Pin(GPIO_TypeDef* port, uint16_t pin, GPIO_Default_State defaultState, bool isOutput)
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b084      	sub	sp, #16
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	60f8      	str	r0, [r7, #12]
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	0019      	movs	r1, r3
 8002c6e:	1dbb      	adds	r3, r7, #6
 8002c70:	801a      	strh	r2, [r3, #0]
 8002c72:	1d7b      	adds	r3, r7, #5
 8002c74:	1c0a      	adds	r2, r1, #0
 8002c76:	701a      	strb	r2, [r3, #0]
	{
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	721a      	strb	r2, [r3, #8]
		this->port = port;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	68ba      	ldr	r2, [r7, #8]
 8002c82:	601a      	str	r2, [r3, #0]
		this->pin = pin;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1dba      	adds	r2, r7, #6
 8002c88:	8812      	ldrh	r2, [r2, #0]
 8002c8a:	809a      	strh	r2, [r3, #4]
		this->defaultState = defaultState;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	1d7a      	adds	r2, r7, #5
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	719a      	strb	r2, [r3, #6]
		this->isOutput = isOutput;
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	2318      	movs	r3, #24
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	7213      	strb	r3, [r2, #8]
	};
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0018      	movs	r0, r3
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	b004      	add	sp, #16
 8002ca6:	bd80      	pop	{r7, pc}

08002ca8 <_ZN3Pin5WriteE13GPIO_PinState>:

	void Write(GPIO_PinState state) {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	000a      	movs	r2, r1
 8002cb2:	1cfb      	adds	r3, r7, #3
 8002cb4:	701a      	strb	r2, [r3, #0]
		if (this->isOutput)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	7a1b      	ldrb	r3, [r3, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d010      	beq.n	8002ce0 <_ZN3Pin5WriteE13GPIO_PinState+0x38>
		{
			this->state = state;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	1cfa      	adds	r2, r7, #3
 8002cc2:	7812      	ldrb	r2, [r2, #0]
 8002cc4:	71da      	strb	r2, [r3, #7]
			HAL_GPIO_WritePin(this->port, this->pin, (GPIO_PinState)(state ^ this->defaultState));
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	8899      	ldrh	r1, [r3, #4]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	799a      	ldrb	r2, [r3, #6]
 8002cd2:	1cfb      	adds	r3, r7, #3
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	4053      	eors	r3, r2
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	001a      	movs	r2, r3
 8002cdc:	f002 f9e1 	bl	80050a2 <HAL_GPIO_WritePin>
		}
	};
 8002ce0:	46c0      	nop			@ (mov r8, r8)
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	b002      	add	sp, #8
 8002ce6:	bd80      	pop	{r7, pc}

08002ce8 <_ZN3Pin5WriteEb>:
	void Write(bool state) {
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	000a      	movs	r2, r1
 8002cf2:	1cfb      	adds	r3, r7, #3
 8002cf4:	701a      	strb	r2, [r3, #0]
		this->Write((GPIO_PinState)state);
 8002cf6:	1cfb      	adds	r3, r7, #3
 8002cf8:	781a      	ldrb	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	0011      	movs	r1, r2
 8002cfe:	0018      	movs	r0, r3
 8002d00:	f7ff ffd2 	bl	8002ca8 <_ZN3Pin5WriteE13GPIO_PinState>
	};
 8002d04:	46c0      	nop			@ (mov r8, r8)
 8002d06:	46bd      	mov	sp, r7
 8002d08:	b002      	add	sp, #8
 8002d0a:	bd80      	pop	{r7, pc}

08002d0c <_ZN3Pin4ReadEv>:
	GPIO_PinState Read() {
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
		if (!this->isOutput)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	7a1b      	ldrb	r3, [r3, #8]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	4053      	eors	r3, r2
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00f      	beq.n	8002d42 <_ZN3Pin4ReadEv+0x36>
		{
			this->state = (GPIO_PinState)(HAL_GPIO_ReadPin(this->port, this->pin) ^ this->defaultState);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	889b      	ldrh	r3, [r3, #4]
 8002d2a:	0019      	movs	r1, r3
 8002d2c:	0010      	movs	r0, r2
 8002d2e:	f002 f99b 	bl	8005068 <HAL_GPIO_ReadPin>
 8002d32:	0003      	movs	r3, r0
 8002d34:	001a      	movs	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	799b      	ldrb	r3, [r3, #6]
 8002d3a:	4053      	eors	r3, r2
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	71da      	strb	r2, [r3, #7]
		}
		return this->state;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	79db      	ldrb	r3, [r3, #7]
	};
 8002d46:	0018      	movs	r0, r3
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <_ZN3Pin4ReadEOi>:
	bool Read(int &&_)
 8002d4e:	b580      	push	{r7, lr}
 8002d50:	b082      	sub	sp, #8
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
	{
		if (!this->isOutput)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	7a1b      	ldrb	r3, [r3, #8]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	4053      	eors	r3, r2
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d008      	beq.n	8002d78 <_ZN3Pin4ReadEOi+0x2a>
		{
			return (bool)(this->Read());
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	0018      	movs	r0, r3
 8002d6a:	f7ff ffcf 	bl	8002d0c <_ZN3Pin4ReadEv>
 8002d6e:	0003      	movs	r3, r0
 8002d70:	1e5a      	subs	r2, r3, #1
 8002d72:	4193      	sbcs	r3, r2
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	e004      	b.n	8002d82 <_ZN3Pin4ReadEOi+0x34>
		}
		return this->state;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	79db      	ldrb	r3, [r3, #7]
 8002d7c:	1e5a      	subs	r2, r3, #1
 8002d7e:	4193      	sbcs	r3, r2
 8002d80:	b2db      	uxtb	r3, r3
	};
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b002      	add	sp, #8
 8002d88:	bd80      	pop	{r7, pc}
	...

08002d8c <_ZN13AP33772DriverC1Ev>:
 *
 */
class AP33772Driver
{
public:
	AP33772Driver() { };
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	4a09      	ldr	r2, [pc, #36]	@ (8002dbc <_ZN13AP33772DriverC1Ev+0x30>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2231      	movs	r2, #49	@ 0x31
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2244      	movs	r2, #68	@ 0x44
 8002da6:	2100      	movs	r1, #0
 8002da8:	5499      	strb	r1, [r3, r2]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2245      	movs	r2, #69	@ 0x45
 8002dae:	2100      	movs	r1, #0
 8002db0:	5499      	strb	r1, [r3, r2]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	0018      	movs	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	b002      	add	sp, #8
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	0800ec04 	.word	0x0800ec04

08002dc0 <_ZN13AP33772Driver18GetVoltageMismatchEv>:

	HAL_StatusTypeDef SendRequestedPDO();
	HAL_StatusTypeDef SetInterrupts(AP33772_Status enabledInts);
	HAL_StatusTypeDef SetOverTemp(uint8_t temp);

	bool GetVoltageMismatch() { return this->voltageMismatch; };
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2245      	movs	r2, #69	@ 0x45
 8002dcc:	5c9b      	ldrb	r3, [r3, r2]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	b002      	add	sp, #8
 8002dd4:	bd80      	pop	{r7, pc}
	...

08002dd8 <_Z13OverTempCheckv>:
		.voltage = 12,
		.pdoType = AP33772_FIXED_PDO,
};

void OverTempCheck()
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	af00      	add	r7, sp, #0
	pcbTemp = pwrDriver.GetMeasuredValues()->temp;
 8002ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e50 <_Z13OverTempCheckv+0x78>)
 8002dde:	0018      	movs	r0, r3
 8002de0:	f7ff fb0f 	bl	8002402 <_ZN13AP33772Driver17GetMeasuredValuesEv>
 8002de4:	0003      	movs	r3, r0
 8002de6:	7a1a      	ldrb	r2, [r3, #8]
 8002de8:	4b1a      	ldr	r3, [pc, #104]	@ (8002e54 <_Z13OverTempCheckv+0x7c>)
 8002dea:	701a      	strb	r2, [r3, #0]
	if (!lightsEnable) return;
 8002dec:	4b1a      	ldr	r3, [pc, #104]	@ (8002e58 <_Z13OverTempCheckv+0x80>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4053      	eors	r3, r2
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d126      	bne.n	8002e48 <_Z13OverTempCheckv+0x70>
	if (pcbTemp > normTempValue) {
 8002dfa:	4b16      	ldr	r3, [pc, #88]	@ (8002e54 <_Z13OverTempCheckv+0x7c>)
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	4b17      	ldr	r3, [pc, #92]	@ (8002e5c <_Z13OverTempCheckv+0x84>)
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d903      	bls.n	8002e0e <_Z13OverTempCheckv+0x36>
		derateTemp = true;
 8002e06:	4b16      	ldr	r3, [pc, #88]	@ (8002e60 <_Z13OverTempCheckv+0x88>)
 8002e08:	2201      	movs	r2, #1
 8002e0a:	701a      	strb	r2, [r3, #0]
 8002e0c:	e002      	b.n	8002e14 <_Z13OverTempCheckv+0x3c>
	} else {
		derateTemp = false;
 8002e0e:	4b14      	ldr	r3, [pc, #80]	@ (8002e60 <_Z13OverTempCheckv+0x88>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	701a      	strb	r2, [r3, #0]
	}
	if (pcbTemp > overTempValue) {
 8002e14:	4b0f      	ldr	r3, [pc, #60]	@ (8002e54 <_Z13OverTempCheckv+0x7c>)
 8002e16:	781a      	ldrb	r2, [r3, #0]
 8002e18:	4b12      	ldr	r3, [pc, #72]	@ (8002e64 <_Z13OverTempCheckv+0x8c>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d905      	bls.n	8002e2c <_Z13OverTempCheckv+0x54>
		overTemp = true;
 8002e20:	4b11      	ldr	r3, [pc, #68]	@ (8002e68 <_Z13OverTempCheckv+0x90>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	701a      	strb	r2, [r3, #0]
		derateTemp = false;
 8002e26:	4b0e      	ldr	r3, [pc, #56]	@ (8002e60 <_Z13OverTempCheckv+0x88>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
	}
	if (overTemp && pcbTemp < normTempValue) {
 8002e2c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e68 <_Z13OverTempCheckv+0x90>)
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d00a      	beq.n	8002e4a <_Z13OverTempCheckv+0x72>
 8002e34:	4b07      	ldr	r3, [pc, #28]	@ (8002e54 <_Z13OverTempCheckv+0x7c>)
 8002e36:	781a      	ldrb	r2, [r3, #0]
 8002e38:	4b08      	ldr	r3, [pc, #32]	@ (8002e5c <_Z13OverTempCheckv+0x84>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d204      	bcs.n	8002e4a <_Z13OverTempCheckv+0x72>
		overTemp = false;
 8002e40:	4b09      	ldr	r3, [pc, #36]	@ (8002e68 <_Z13OverTempCheckv+0x90>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e000      	b.n	8002e4a <_Z13OverTempCheckv+0x72>
	if (!lightsEnable) return;
 8002e48:	46c0      	nop			@ (mov r8, r8)
	}
}
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	46c0      	nop			@ (mov r8, r8)
 8002e50:	2000027c 	.word	0x2000027c
 8002e54:	200002ca 	.word	0x200002ca
 8002e58:	200002fc 	.word	0x200002fc
 8002e5c:	20000001 	.word	0x20000001
 8002e60:	20000301 	.word	0x20000301
 8002e64:	20000000 	.word	0x20000000
 8002e68:	20000300 	.word	0x20000300

08002e6c <_Z18CalcOverTempDeratev>:
	HAL_TIM_Base_Start_IT(h_tim_debounce);
}

// Not sure how well this will work.
void CalcOverTempDerate()
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b082      	sub	sp, #8
 8002e70:	af00      	add	r7, sp, #0
	double tempOffset = (pcbTemp - normTempValue) / overTempValue;
 8002e72:	4b25      	ldr	r3, [pc, #148]	@ (8002f08 <_Z18CalcOverTempDeratev+0x9c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	001a      	movs	r2, r3
 8002e78:	4b24      	ldr	r3, [pc, #144]	@ (8002f0c <_Z18CalcOverTempDeratev+0xa0>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	1ad2      	subs	r2, r2, r3
 8002e7e:	4b24      	ldr	r3, [pc, #144]	@ (8002f10 <_Z18CalcOverTempDeratev+0xa4>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	0019      	movs	r1, r3
 8002e84:	0010      	movs	r0, r2
 8002e86:	f7fd f9c9 	bl	800021c <__divsi3>
 8002e8a:	0003      	movs	r3, r0
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f7ff f895 	bl	8001fbc <__aeabi_i2d>
 8002e92:	0002      	movs	r2, r0
 8002e94:	000b      	movs	r3, r1
 8002e96:	603a      	str	r2, [r7, #0]
 8002e98:	607b      	str	r3, [r7, #4]
	if (tempOffset < 0) return;
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	6838      	ldr	r0, [r7, #0]
 8002ea0:	6879      	ldr	r1, [r7, #4]
 8002ea2:	f7fd fabd 	bl	8000420 <__aeabi_dcmplt>
 8002ea6:	1e03      	subs	r3, r0, #0
 8002ea8:	d129      	bne.n	8002efe <_Z18CalcOverTempDeratev+0x92>
	temp -= tempOffset;
 8002eaa:	4b1a      	ldr	r3, [pc, #104]	@ (8002f14 <_Z18CalcOverTempDeratev+0xa8>)
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	6859      	ldr	r1, [r3, #4]
 8002eb0:	683a      	ldr	r2, [r7, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f7fe fcaa 	bl	800180c <__aeabi_dsub>
 8002eb8:	0002      	movs	r2, r0
 8002eba:	000b      	movs	r3, r1
 8002ebc:	4915      	ldr	r1, [pc, #84]	@ (8002f14 <_Z18CalcOverTempDeratev+0xa8>)
 8002ebe:	600a      	str	r2, [r1, #0]
 8002ec0:	604b      	str	r3, [r1, #4]
	if (temp < 0) temp = 0;
 8002ec2:	4b14      	ldr	r3, [pc, #80]	@ (8002f14 <_Z18CalcOverTempDeratev+0xa8>)
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2300      	movs	r3, #0
 8002ecc:	f7fd faa8 	bl	8000420 <__aeabi_dcmplt>
 8002ed0:	1e03      	subs	r3, r0, #0
 8002ed2:	d005      	beq.n	8002ee0 <_Z18CalcOverTempDeratev+0x74>
 8002ed4:	490f      	ldr	r1, [pc, #60]	@ (8002f14 <_Z18CalcOverTempDeratev+0xa8>)
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2300      	movs	r3, #0
 8002eda:	600a      	str	r2, [r1, #0]
 8002edc:	604b      	str	r3, [r1, #4]
 8002ede:	e00f      	b.n	8002f00 <_Z18CalcOverTempDeratev+0x94>
	else if (temp > 1) temp = 1;
 8002ee0:	4b0c      	ldr	r3, [pc, #48]	@ (8002f14 <_Z18CalcOverTempDeratev+0xa8>)
 8002ee2:	6818      	ldr	r0, [r3, #0]
 8002ee4:	6859      	ldr	r1, [r3, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8002f18 <_Z18CalcOverTempDeratev+0xac>)
 8002eea:	f7fd faad 	bl	8000448 <__aeabi_dcmpgt>
 8002eee:	1e03      	subs	r3, r0, #0
 8002ef0:	d006      	beq.n	8002f00 <_Z18CalcOverTempDeratev+0x94>
 8002ef2:	4908      	ldr	r1, [pc, #32]	@ (8002f14 <_Z18CalcOverTempDeratev+0xa8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	4b08      	ldr	r3, [pc, #32]	@ (8002f18 <_Z18CalcOverTempDeratev+0xac>)
 8002ef8:	600a      	str	r2, [r1, #0]
 8002efa:	604b      	str	r3, [r1, #4]
 8002efc:	e000      	b.n	8002f00 <_Z18CalcOverTempDeratev+0x94>
	if (tempOffset < 0) return;
 8002efe:	46c0      	nop			@ (mov r8, r8)
}
 8002f00:	46bd      	mov	sp, r7
 8002f02:	b002      	add	sp, #8
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	46c0      	nop			@ (mov r8, r8)
 8002f08:	200002ca 	.word	0x200002ca
 8002f0c:	20000001 	.word	0x20000001
 8002f10:	20000000 	.word	0x20000000
 8002f14:	20000308 	.word	0x20000308
 8002f18:	3ff00000 	.word	0x3ff00000

08002f1c <_Z15ControlLightingv>:

void ControlLighting()
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	if (!lightsEnable) {
 8002f20:	4b25      	ldr	r3, [pc, #148]	@ (8002fb8 <_Z15ControlLightingv+0x9c>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2201      	movs	r2, #1
 8002f26:	4053      	eors	r3, r2
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <_Z15ControlLightingv+0x1a>
		SetAllLights(0);
 8002f2e:	2000      	movs	r0, #0
 8002f30:	f7ff fe4e 	bl	8002bd0 <_Z12SetAllLightst>
		return;
 8002f34:	e03d      	b.n	8002fb2 <_Z15ControlLightingv+0x96>
	}

	if (maxBrightEnable) {
 8002f36:	4b21      	ldr	r3, [pc, #132]	@ (8002fbc <_Z15ControlLightingv+0xa0>)
 8002f38:	781b      	ldrb	r3, [r3, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d002      	beq.n	8002f44 <_Z15ControlLightingv+0x28>
		SetMaxBrightness();
 8002f3e:	f7ff fe6b 	bl	8002c18 <_Z16SetMaxBrightnessv>
		return;
 8002f42:	e036      	b.n	8002fb2 <_Z15ControlLightingv+0x96>
	}

	temp = (double)potPosition / UINT12_MAXF;
 8002f44:	4b1e      	ldr	r3, [pc, #120]	@ (8002fc0 <_Z15ControlLightingv+0xa4>)
 8002f46:	881b      	ldrh	r3, [r3, #0]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f7ff f865 	bl	8002018 <__aeabi_ui2d>
 8002f4e:	2200      	movs	r2, #0
 8002f50:	4b1c      	ldr	r3, [pc, #112]	@ (8002fc4 <_Z15ControlLightingv+0xa8>)
 8002f52:	f7fd fd4f 	bl	80009f4 <__aeabi_ddiv>
 8002f56:	0002      	movs	r2, r0
 8002f58:	000b      	movs	r3, r1
 8002f5a:	491b      	ldr	r1, [pc, #108]	@ (8002fc8 <_Z15ControlLightingv+0xac>)
 8002f5c:	600a      	str	r2, [r1, #0]
 8002f5e:	604b      	str	r3, [r1, #4]
	if (overTemp) {
 8002f60:	4b1a      	ldr	r3, [pc, #104]	@ (8002fcc <_Z15ControlLightingv+0xb0>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00c      	beq.n	8002f82 <_Z15ControlLightingv+0x66>
		temp = temp / 0.8;
 8002f68:	4b17      	ldr	r3, [pc, #92]	@ (8002fc8 <_Z15ControlLightingv+0xac>)
 8002f6a:	6818      	ldr	r0, [r3, #0]
 8002f6c:	6859      	ldr	r1, [r3, #4]
 8002f6e:	4a18      	ldr	r2, [pc, #96]	@ (8002fd0 <_Z15ControlLightingv+0xb4>)
 8002f70:	4b18      	ldr	r3, [pc, #96]	@ (8002fd4 <_Z15ControlLightingv+0xb8>)
 8002f72:	f7fd fd3f 	bl	80009f4 <__aeabi_ddiv>
 8002f76:	0002      	movs	r2, r0
 8002f78:	000b      	movs	r3, r1
 8002f7a:	4913      	ldr	r1, [pc, #76]	@ (8002fc8 <_Z15ControlLightingv+0xac>)
 8002f7c:	600a      	str	r2, [r1, #0]
 8002f7e:	604b      	str	r3, [r1, #4]
 8002f80:	e005      	b.n	8002f8e <_Z15ControlLightingv+0x72>
	} else if (derateTemp) {
 8002f82:	4b15      	ldr	r3, [pc, #84]	@ (8002fd8 <_Z15ControlLightingv+0xbc>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d001      	beq.n	8002f8e <_Z15ControlLightingv+0x72>
		CalcOverTempDerate();
 8002f8a:	f7ff ff6f 	bl	8002e6c <_Z18CalcOverTempDeratev>
	}
	SetAllLights((uint16_t)(temp * UINT16_MAX));
 8002f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8002fc8 <_Z15ControlLightingv+0xac>)
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	6859      	ldr	r1, [r3, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	4b11      	ldr	r3, [pc, #68]	@ (8002fdc <_Z15ControlLightingv+0xc0>)
 8002f98:	f7fe f970 	bl	800127c <__aeabi_dmul>
 8002f9c:	0002      	movs	r2, r0
 8002f9e:	000b      	movs	r3, r1
 8002fa0:	0010      	movs	r0, r2
 8002fa2:	0019      	movs	r1, r3
 8002fa4:	f7fd fa9e 	bl	80004e4 <__aeabi_d2uiz>
 8002fa8:	0003      	movs	r3, r0
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	0018      	movs	r0, r3
 8002fae:	f7ff fe0f 	bl	8002bd0 <_Z12SetAllLightst>

}
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	46c0      	nop			@ (mov r8, r8)
 8002fb8:	200002fc 	.word	0x200002fc
 8002fbc:	200002fd 	.word	0x200002fd
 8002fc0:	200002c8 	.word	0x200002c8
 8002fc4:	40affe00 	.word	0x40affe00
 8002fc8:	20000308 	.word	0x20000308
 8002fcc:	20000300 	.word	0x20000300
 8002fd0:	9999999a 	.word	0x9999999a
 8002fd4:	3fe99999 	.word	0x3fe99999
 8002fd8:	20000301 	.word	0x20000301
 8002fdc:	40efffe0 	.word	0x40efffe0

08002fe0 <ExtInterruptCallback>:
{
	potPosition = (uint16_t)HAL_ADC_GetValue(h_adc);
}

void ExtInterruptCallback(uint16_t pin)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	0002      	movs	r2, r0
 8002fe8:	1dbb      	adds	r3, r7, #6
 8002fea:	801a      	strh	r2, [r3, #0]
	switch (pin) {
 8002fec:	1dbb      	adds	r3, r7, #6
 8002fee:	881b      	ldrh	r3, [r3, #0]
 8002ff0:	2280      	movs	r2, #128	@ 0x80
 8002ff2:	0152      	lsls	r2, r2, #5
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d013      	beq.n	8003020 <ExtInterruptCallback+0x40>
 8002ff8:	2280      	movs	r2, #128	@ 0x80
 8002ffa:	0152      	lsls	r2, r2, #5
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	dc17      	bgt.n	8003030 <ExtInterruptCallback+0x50>
 8003000:	2280      	movs	r2, #128	@ 0x80
 8003002:	0092      	lsls	r2, r2, #2
 8003004:	4293      	cmp	r3, r2
 8003006:	d00f      	beq.n	8003028 <ExtInterruptCallback+0x48>
 8003008:	2280      	movs	r2, #128	@ 0x80
 800300a:	0112      	lsls	r2, r2, #4
 800300c:	4293      	cmp	r3, r2
 800300e:	d10f      	bne.n	8003030 <ExtInterruptCallback+0x50>
		case ENABLE_Pin:
			lightsEnable = !lightsEnable;
 8003010:	4b0a      	ldr	r3, [pc, #40]	@ (800303c <ExtInterruptCallback+0x5c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2201      	movs	r2, #1
 8003016:	4053      	eors	r3, r2
 8003018:	b2da      	uxtb	r2, r3
 800301a:	4b08      	ldr	r3, [pc, #32]	@ (800303c <ExtInterruptCallback+0x5c>)
 800301c:	701a      	strb	r2, [r3, #0]
//			if (!debounce) {
//				lightsEnable = !lightsEnable;
//				StartDebounce();
//			}
			break;
 800301e:	e008      	b.n	8003032 <ExtInterruptCallback+0x52>
		case I2C_INT_Pin:
			pwrDriver.HandleInterrupt();
 8003020:	4b07      	ldr	r3, [pc, #28]	@ (8003040 <ExtInterruptCallback+0x60>)
 8003022:	0018      	movs	r0, r3
 8003024:	f7ff f9a3 	bl	800236e <_ZN13AP33772Driver15HandleInterruptEv>
		case USB_OVER_VOLT_Pin:
			lightsEnable = false;
 8003028:	4b04      	ldr	r3, [pc, #16]	@ (800303c <ExtInterruptCallback+0x5c>)
 800302a:	2200      	movs	r2, #0
 800302c:	701a      	strb	r2, [r3, #0]
			break;
 800302e:	e000      	b.n	8003032 <ExtInterruptCallback+0x52>
		default:
			break;
 8003030:	46c0      	nop			@ (mov r8, r8)
	}
}
 8003032:	46c0      	nop			@ (mov r8, r8)
 8003034:	46bd      	mov	sp, r7
 8003036:	b002      	add	sp, #8
 8003038:	bd80      	pop	{r7, pc}
 800303a:	46c0      	nop			@ (mov r8, r8)
 800303c:	200002fc 	.word	0x200002fc
 8003040:	2000027c 	.word	0x2000027c

08003044 <TimerElapsedCallback>:

void TimerElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
	if (htim == h_tim_debounce) {
 800304c:	4b0a      	ldr	r3, [pc, #40]	@ (8003078 <TimerElapsedCallback+0x34>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d103      	bne.n	800305e <TimerElapsedCallback+0x1a>
		debounce = false;
 8003056:	4b09      	ldr	r3, [pc, #36]	@ (800307c <TimerElapsedCallback+0x38>)
 8003058:	2200      	movs	r2, #0
 800305a:	701a      	strb	r2, [r3, #0]
	}
	else if (htim == h_tim_temp) {
		checkTemp = true;
	}
}
 800305c:	e007      	b.n	800306e <TimerElapsedCallback+0x2a>
	else if (htim == h_tim_temp) {
 800305e:	4b08      	ldr	r3, [pc, #32]	@ (8003080 <TimerElapsedCallback+0x3c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	687a      	ldr	r2, [r7, #4]
 8003064:	429a      	cmp	r2, r3
 8003066:	d102      	bne.n	800306e <TimerElapsedCallback+0x2a>
		checkTemp = true;
 8003068:	4b06      	ldr	r3, [pc, #24]	@ (8003084 <TimerElapsedCallback+0x40>)
 800306a:	2201      	movs	r2, #1
 800306c:	701a      	strb	r2, [r3, #0]
}
 800306e:	46c0      	nop			@ (mov r8, r8)
 8003070:	46bd      	mov	sp, r7
 8003072:	b002      	add	sp, #8
 8003074:	bd80      	pop	{r7, pc}
 8003076:	46c0      	nop			@ (mov r8, r8)
 8003078:	20000210 	.word	0x20000210
 800307c:	200002fe 	.word	0x200002fe
 8003080:	20000214 	.word	0x20000214
 8003084:	200002ff 	.word	0x200002ff

08003088 <_ZN13AP33772DriveraSERKS_>:
class AP33772Driver
 8003088:	b590      	push	{r4, r7, lr}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
 8003090:	6039      	str	r1, [r7, #0]
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	605a      	str	r2, [r3, #4]
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	7a1a      	ldrb	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	721a      	strb	r2, [r3, #8]
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	60da      	str	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	3310      	adds	r3, #16
 80030b0:	3210      	adds	r2, #16
 80030b2:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030b4:	c313      	stmia	r3!, {r0, r1, r4}
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	683a      	ldr	r2, [r7, #0]
 80030ba:	331c      	adds	r3, #28
 80030bc:	321c      	adds	r2, #28
 80030be:	ca03      	ldmia	r2!, {r0, r1}
 80030c0:	c303      	stmia	r3!, {r0, r1}
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	3324      	adds	r3, #36	@ 0x24
 80030c8:	3224      	adds	r2, #36	@ 0x24
 80030ca:	ca03      	ldmia	r2!, {r0, r1}
 80030cc:	c303      	stmia	r3!, {r0, r1}
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	2230      	movs	r2, #48	@ 0x30
 80030da:	5c99      	ldrb	r1, [r3, r2]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2230      	movs	r2, #48	@ 0x30
 80030e0:	5499      	strb	r1, [r3, r2]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2231      	movs	r2, #49	@ 0x31
 80030e6:	5c99      	ldrb	r1, [r3, r2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2231      	movs	r2, #49	@ 0x31
 80030ec:	5499      	strb	r1, [r3, r2]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	3334      	adds	r3, #52	@ 0x34
 80030f4:	3234      	adds	r2, #52	@ 0x34
 80030f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80030f8:	c313      	stmia	r3!, {r0, r1, r4}
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	601a      	str	r2, [r3, #0]
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	2244      	movs	r2, #68	@ 0x44
 8003102:	5c99      	ldrb	r1, [r3, r2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2244      	movs	r2, #68	@ 0x44
 8003108:	5499      	strb	r1, [r3, r2]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	2245      	movs	r2, #69	@ 0x45
 800310e:	5c99      	ldrb	r1, [r3, r2]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2245      	movs	r2, #69	@ 0x45
 8003114:	5499      	strb	r1, [r3, r2]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	683a      	ldr	r2, [r7, #0]
 800311a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800311c:	649a      	str	r2, [r3, #72]	@ 0x48
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	0018      	movs	r0, r3
 8003122:	46bd      	mov	sp, r7
 8003124:	b003      	add	sp, #12
 8003126:	bd90      	pop	{r4, r7, pc}

08003128 <Init>:
		TIM_HandleTypeDef *htim3,
		TIM_HandleTypeDef *htim7,
		TIM_HandleTypeDef *htim14,
		I2C_HandleTypeDef *hi2c2
	)
{
 8003128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800312a:	b0b3      	sub	sp, #204	@ 0xcc
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
	h_adc          = hadc;
 8003136:	4b94      	ldr	r3, [pc, #592]	@ (8003388 <Init+0x260>)
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	601a      	str	r2, [r3, #0]
	h_tim2         = htim2;
 800313c:	4b93      	ldr	r3, [pc, #588]	@ (800338c <Init+0x264>)
 800313e:	68ba      	ldr	r2, [r7, #8]
 8003140:	601a      	str	r2, [r3, #0]
	h_tim3         = htim3;
 8003142:	4b93      	ldr	r3, [pc, #588]	@ (8003390 <Init+0x268>)
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	601a      	str	r2, [r3, #0]
	h_tim_debounce = htim7;
 8003148:	4b92      	ldr	r3, [pc, #584]	@ (8003394 <Init+0x26c>)
 800314a:	683a      	ldr	r2, [r7, #0]
 800314c:	601a      	str	r2, [r3, #0]
	h_tim_temp     = htim14;
 800314e:	4b92      	ldr	r3, [pc, #584]	@ (8003398 <Init+0x270>)
 8003150:	22d8      	movs	r2, #216	@ 0xd8
 8003152:	18ba      	adds	r2, r7, r2
 8003154:	6812      	ldr	r2, [r2, #0]
 8003156:	601a      	str	r2, [r3, #0]
	h_i2c          = hi2c2;
 8003158:	4b90      	ldr	r3, [pc, #576]	@ (800339c <Init+0x274>)
 800315a:	22dc      	movs	r2, #220	@ 0xdc
 800315c:	18ba      	adds	r2, r7, r2
 800315e:	6812      	ldr	r2, [r2, #0]
 8003160:	601a      	str	r2, [r3, #0]

	pwrDriver = AP33772Driver(h_i2c, desiredPDO);
 8003162:	4b8e      	ldr	r3, [pc, #568]	@ (800339c <Init+0x274>)
 8003164:	681c      	ldr	r4, [r3, #0]
 8003166:	4b8e      	ldr	r3, [pc, #568]	@ (80033a0 <Init+0x278>)
 8003168:	2274      	movs	r2, #116	@ 0x74
 800316a:	18b8      	adds	r0, r7, r2
 800316c:	466a      	mov	r2, sp
 800316e:	0011      	movs	r1, r2
 8003170:	001a      	movs	r2, r3
 8003172:	3208      	adds	r2, #8
 8003174:	ca60      	ldmia	r2!, {r5, r6}
 8003176:	c160      	stmia	r1!, {r5, r6}
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0021      	movs	r1, r4
 800317e:	f7ff f865 	bl	800224c <_ZN13AP33772DriverC1EP19__I2C_HandleTypeDef23AP33772_PDRequestObject>
 8003182:	2474      	movs	r4, #116	@ 0x74
 8003184:	193a      	adds	r2, r7, r4
 8003186:	4b87      	ldr	r3, [pc, #540]	@ (80033a4 <Init+0x27c>)
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f7ff ff7c 	bl	8003088 <_ZN13AP33772DriveraSERKS_>
 8003190:	193b      	adds	r3, r7, r4
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff f8a0 	bl	80022d8 <_ZN13AP33772DriverD1Ev>

	if (pwrDriver.Init() != HAL_OK) {
 8003198:	4b82      	ldr	r3, [pc, #520]	@ (80033a4 <Init+0x27c>)
 800319a:	0018      	movs	r0, r3
 800319c:	f7ff f8ce 	bl	800233c <_ZN13AP33772Driver4InitEv>
 80031a0:	0003      	movs	r3, r0
 80031a2:	1e5a      	subs	r2, r3, #1
 80031a4:	4193      	sbcs	r3, r2
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d001      	beq.n	80031b0 <Init+0x88>
		return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e0e6      	b.n	800337e <Init+0x256>
	}

	HAL_Delay(100);
 80031b0:	2064      	movs	r0, #100	@ 0x64
 80031b2:	f001 f8c3 	bl	800433c <HAL_Delay>

	if (pwrDriver.SendRequestedPDO() != HAL_OK) {
 80031b6:	4b7b      	ldr	r3, [pc, #492]	@ (80033a4 <Init+0x27c>)
 80031b8:	0018      	movs	r0, r3
 80031ba:	f7ff fb67 	bl	800288c <_ZN13AP33772Driver16SendRequestedPDOEv>
 80031be:	0003      	movs	r3, r0
 80031c0:	1e5a      	subs	r2, r3, #1
 80031c2:	4193      	sbcs	r3, r2
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <Init+0xa6>
		return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e0d7      	b.n	800337e <Init+0x256>
	}

	if (pwrDriver.SetOverTemp(overTempValue) != HAL_OK) {
 80031ce:	4b76      	ldr	r3, [pc, #472]	@ (80033a8 <Init+0x280>)
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	4b74      	ldr	r3, [pc, #464]	@ (80033a4 <Init+0x27c>)
 80031d4:	0011      	movs	r1, r2
 80031d6:	0018      	movs	r0, r3
 80031d8:	f7ff fc20 	bl	8002a1c <_ZN13AP33772Driver11SetOverTempEh>
 80031dc:	0003      	movs	r3, r0
 80031de:	1e5a      	subs	r2, r3, #1
 80031e0:	4193      	sbcs	r3, r2
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <Init+0xc4>
		return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0c8      	b.n	800337e <Init+0x256>
	}

	underPwrPin.Write(pwrDriver.GetVoltageMismatch());
 80031ec:	4b6d      	ldr	r3, [pc, #436]	@ (80033a4 <Init+0x27c>)
 80031ee:	0018      	movs	r0, r3
 80031f0:	f7ff fde6 	bl	8002dc0 <_ZN13AP33772Driver18GetVoltageMismatchEv>
 80031f4:	0003      	movs	r3, r0
 80031f6:	001a      	movs	r2, r3
 80031f8:	4b6c      	ldr	r3, [pc, #432]	@ (80033ac <Init+0x284>)
 80031fa:	0011      	movs	r1, r2
 80031fc:	0018      	movs	r0, r3
 80031fe:	f7ff fd73 	bl	8002ce8 <_ZN3Pin5WriteEb>

	PWMPin ch1 = { .ch = TIM_CHANNEL_4, .handle = h_tim2 };
 8003202:	2468      	movs	r4, #104	@ 0x68
 8003204:	193b      	adds	r3, r7, r4
 8003206:	0018      	movs	r0, r3
 8003208:	230c      	movs	r3, #12
 800320a:	001a      	movs	r2, r3
 800320c:	2100      	movs	r1, #0
 800320e:	f00b fbcf 	bl	800e9b0 <memset>
 8003212:	193b      	adds	r3, r7, r4
 8003214:	220c      	movs	r2, #12
 8003216:	701a      	strb	r2, [r3, #0]
 8003218:	4b5c      	ldr	r3, [pc, #368]	@ (800338c <Init+0x264>)
 800321a:	681a      	ldr	r2, [r3, #0]
 800321c:	193b      	adds	r3, r7, r4
 800321e:	605a      	str	r2, [r3, #4]
	PWMPin ch2 = { .ch = TIM_CHANNEL_1, .handle = h_tim3 };
 8003220:	255c      	movs	r5, #92	@ 0x5c
 8003222:	197b      	adds	r3, r7, r5
 8003224:	0018      	movs	r0, r3
 8003226:	230c      	movs	r3, #12
 8003228:	001a      	movs	r2, r3
 800322a:	2100      	movs	r1, #0
 800322c:	f00b fbc0 	bl	800e9b0 <memset>
 8003230:	4b57      	ldr	r3, [pc, #348]	@ (8003390 <Init+0x268>)
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	197b      	adds	r3, r7, r5
 8003236:	605a      	str	r2, [r3, #4]
	PWMPin ch3 = { .ch = TIM_CHANNEL_2, .handle = h_tim3 };
 8003238:	2550      	movs	r5, #80	@ 0x50
 800323a:	197b      	adds	r3, r7, r5
 800323c:	0018      	movs	r0, r3
 800323e:	230c      	movs	r3, #12
 8003240:	001a      	movs	r2, r3
 8003242:	2100      	movs	r1, #0
 8003244:	f00b fbb4 	bl	800e9b0 <memset>
 8003248:	197b      	adds	r3, r7, r5
 800324a:	2204      	movs	r2, #4
 800324c:	701a      	strb	r2, [r3, #0]
 800324e:	4b50      	ldr	r3, [pc, #320]	@ (8003390 <Init+0x268>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	197b      	adds	r3, r7, r5
 8003254:	605a      	str	r2, [r3, #4]
	PWMPin ch4 = { .ch = TIM_CHANNEL_3, .handle = h_tim3 };
 8003256:	2644      	movs	r6, #68	@ 0x44
 8003258:	19bb      	adds	r3, r7, r6
 800325a:	0018      	movs	r0, r3
 800325c:	230c      	movs	r3, #12
 800325e:	001a      	movs	r2, r3
 8003260:	2100      	movs	r1, #0
 8003262:	f00b fba5 	bl	800e9b0 <memset>
 8003266:	19bb      	adds	r3, r7, r6
 8003268:	2208      	movs	r2, #8
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	4b48      	ldr	r3, [pc, #288]	@ (8003390 <Init+0x268>)
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	19bb      	adds	r3, r7, r6
 8003272:	605a      	str	r2, [r3, #4]
	PWMPin ch5 = { .ch = TIM_CHANNEL_4, .handle = h_tim3 };
 8003274:	2138      	movs	r1, #56	@ 0x38
 8003276:	187b      	adds	r3, r7, r1
 8003278:	0018      	movs	r0, r3
 800327a:	230c      	movs	r3, #12
 800327c:	001a      	movs	r2, r3
 800327e:	2100      	movs	r1, #0
 8003280:	f00b fb96 	bl	800e9b0 <memset>
 8003284:	2138      	movs	r1, #56	@ 0x38
 8003286:	187b      	adds	r3, r7, r1
 8003288:	220c      	movs	r2, #12
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	4b40      	ldr	r3, [pc, #256]	@ (8003390 <Init+0x268>)
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	187b      	adds	r3, r7, r1
 8003292:	605a      	str	r2, [r3, #4]
	PWMPin ch6 = { .ch = TIM_CHANNEL_1, .handle = h_tim2 };
 8003294:	232c      	movs	r3, #44	@ 0x2c
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	0018      	movs	r0, r3
 800329a:	230c      	movs	r3, #12
 800329c:	001a      	movs	r2, r3
 800329e:	2100      	movs	r1, #0
 80032a0:	f00b fb86 	bl	800e9b0 <memset>
 80032a4:	4b39      	ldr	r3, [pc, #228]	@ (800338c <Init+0x264>)
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	232c      	movs	r3, #44	@ 0x2c
 80032aa:	18fb      	adds	r3, r7, r3
 80032ac:	605a      	str	r2, [r3, #4]
	PWMPin ch7 = { .ch = TIM_CHANNEL_2, .handle = h_tim2 };
 80032ae:	2020      	movs	r0, #32
 80032b0:	183b      	adds	r3, r7, r0
 80032b2:	0018      	movs	r0, r3
 80032b4:	230c      	movs	r3, #12
 80032b6:	001a      	movs	r2, r3
 80032b8:	2100      	movs	r1, #0
 80032ba:	f00b fb79 	bl	800e9b0 <memset>
 80032be:	2020      	movs	r0, #32
 80032c0:	183b      	adds	r3, r7, r0
 80032c2:	2204      	movs	r2, #4
 80032c4:	701a      	strb	r2, [r3, #0]
 80032c6:	4b31      	ldr	r3, [pc, #196]	@ (800338c <Init+0x264>)
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	183b      	adds	r3, r7, r0
 80032cc:	605a      	str	r2, [r3, #4]
	PWMPin ch8 = { .ch = TIM_CHANNEL_3, .handle = h_tim2 };
 80032ce:	2314      	movs	r3, #20
 80032d0:	18fb      	adds	r3, r7, r3
 80032d2:	0018      	movs	r0, r3
 80032d4:	230c      	movs	r3, #12
 80032d6:	001a      	movs	r2, r3
 80032d8:	2100      	movs	r1, #0
 80032da:	f00b fb69 	bl	800e9b0 <memset>
 80032de:	2314      	movs	r3, #20
 80032e0:	0019      	movs	r1, r3
 80032e2:	18fb      	adds	r3, r7, r3
 80032e4:	2208      	movs	r2, #8
 80032e6:	701a      	strb	r2, [r3, #0]
 80032e8:	4b28      	ldr	r3, [pc, #160]	@ (800338c <Init+0x264>)
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	000b      	movs	r3, r1
 80032ee:	18fb      	adds	r3, r7, r3
 80032f0:	605a      	str	r2, [r3, #4]

	pins[0] = ch1;
 80032f2:	4b2f      	ldr	r3, [pc, #188]	@ (80033b0 <Init+0x288>)
 80032f4:	193a      	adds	r2, r7, r4
 80032f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80032f8:	c313      	stmia	r3!, {r0, r1, r4}
	pins[1] = ch2;
 80032fa:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <Init+0x288>)
 80032fc:	225c      	movs	r2, #92	@ 0x5c
 80032fe:	18ba      	adds	r2, r7, r2
 8003300:	330c      	adds	r3, #12
 8003302:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003304:	c313      	stmia	r3!, {r0, r1, r4}
	pins[2] = ch3;
 8003306:	4b2a      	ldr	r3, [pc, #168]	@ (80033b0 <Init+0x288>)
 8003308:	197a      	adds	r2, r7, r5
 800330a:	3318      	adds	r3, #24
 800330c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800330e:	c313      	stmia	r3!, {r0, r1, r4}
	pins[3] = ch4;
 8003310:	4b27      	ldr	r3, [pc, #156]	@ (80033b0 <Init+0x288>)
 8003312:	19ba      	adds	r2, r7, r6
 8003314:	3324      	adds	r3, #36	@ 0x24
 8003316:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003318:	c313      	stmia	r3!, {r0, r1, r4}
	pins[4] = ch5;
 800331a:	4b25      	ldr	r3, [pc, #148]	@ (80033b0 <Init+0x288>)
 800331c:	2138      	movs	r1, #56	@ 0x38
 800331e:	187a      	adds	r2, r7, r1
 8003320:	3330      	adds	r3, #48	@ 0x30
 8003322:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003324:	c313      	stmia	r3!, {r0, r1, r4}
	pins[5] = ch6;
 8003326:	4b22      	ldr	r3, [pc, #136]	@ (80033b0 <Init+0x288>)
 8003328:	222c      	movs	r2, #44	@ 0x2c
 800332a:	18ba      	adds	r2, r7, r2
 800332c:	333c      	adds	r3, #60	@ 0x3c
 800332e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003330:	c313      	stmia	r3!, {r0, r1, r4}
	pins[6] = ch7;
 8003332:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <Init+0x288>)
 8003334:	2020      	movs	r0, #32
 8003336:	183a      	adds	r2, r7, r0
 8003338:	3348      	adds	r3, #72	@ 0x48
 800333a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800333c:	c313      	stmia	r3!, {r0, r1, r4}
	pins[7] = ch8;
 800333e:	4b1c      	ldr	r3, [pc, #112]	@ (80033b0 <Init+0x288>)
 8003340:	2114      	movs	r1, #20
 8003342:	187a      	adds	r2, r7, r1
 8003344:	3354      	adds	r3, #84	@ 0x54
 8003346:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003348:	c313      	stmia	r3!, {r0, r1, r4}

	if (InitLighting(pins) != HAL_OK) {
 800334a:	4b19      	ldr	r3, [pc, #100]	@ (80033b0 <Init+0x288>)
 800334c:	0018      	movs	r0, r3
 800334e:	f7ff fbf5 	bl	8002b3c <_Z12InitLightingP6PWMPin>
 8003352:	0003      	movs	r3, r0
 8003354:	1e5a      	subs	r2, r3, #1
 8003356:	4193      	sbcs	r3, r2
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d001      	beq.n	8003362 <Init+0x23a>
		return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e00d      	b.n	800337e <Init+0x256>
	}

	if (HAL_TIM_Base_Start_IT(h_tim_temp) != HAL_OK) {
 8003362:	4b0d      	ldr	r3, [pc, #52]	@ (8003398 <Init+0x270>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	0018      	movs	r0, r3
 8003368:	f005 ff0e 	bl	8009188 <HAL_TIM_Base_Start_IT>
 800336c:	0003      	movs	r3, r0
 800336e:	1e5a      	subs	r2, r3, #1
 8003370:	4193      	sbcs	r3, r2
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <Init+0x254>
		return HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	e000      	b.n	800337e <Init+0x256>
	}

	return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	0018      	movs	r0, r3
 8003380:	46bd      	mov	sp, r7
 8003382:	b031      	add	sp, #196	@ 0xc4
 8003384:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003386:	46c0      	nop			@ (mov r8, r8)
 8003388:	20000204 	.word	0x20000204
 800338c:	20000208 	.word	0x20000208
 8003390:	2000020c 	.word	0x2000020c
 8003394:	20000210 	.word	0x20000210
 8003398:	20000214 	.word	0x20000214
 800339c:	20000218 	.word	0x20000218
 80033a0:	20000004 	.word	0x20000004
 80033a4:	2000027c 	.word	0x2000027c
 80033a8:	20000000 	.word	0x20000000
 80033ac:	200002f0 	.word	0x200002f0
 80033b0:	2000021c 	.word	0x2000021c

080033b4 <Main>:

void Main()
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
	if (maxBrightPin.Read(0)) {
 80033ba:	2300      	movs	r3, #0
 80033bc:	607b      	str	r3, [r7, #4]
 80033be:	1d3a      	adds	r2, r7, #4
 80033c0:	4b25      	ldr	r3, [pc, #148]	@ (8003458 <Main+0xa4>)
 80033c2:	0011      	movs	r1, r2
 80033c4:	0018      	movs	r0, r3
 80033c6:	f7ff fcc2 	bl	8002d4e <_ZN3Pin4ReadEOi>
 80033ca:	1e03      	subs	r3, r0, #0
 80033cc:	d006      	beq.n	80033dc <Main+0x28>
		maxBrightEnable = !maxBrightEnable;
 80033ce:	4b23      	ldr	r3, [pc, #140]	@ (800345c <Main+0xa8>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2201      	movs	r2, #1
 80033d4:	4053      	eors	r3, r2
 80033d6:	b2da      	uxtb	r2, r3
 80033d8:	4b20      	ldr	r3, [pc, #128]	@ (800345c <Main+0xa8>)
 80033da:	701a      	strb	r2, [r3, #0]
//			maxBrightEnable = !maxBrightEnable;
//			StartDebounce();
//		}
	}

	if (HAL_ADC_Start(h_adc) == HAL_OK) {
 80033dc:	4b20      	ldr	r3, [pc, #128]	@ (8003460 <Main+0xac>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0018      	movs	r0, r3
 80033e2:	f001 f90f 	bl	8004604 <HAL_ADC_Start>
 80033e6:	0003      	movs	r3, r0
 80033e8:	425a      	negs	r2, r3
 80033ea:	4153      	adcs	r3, r2
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00e      	beq.n	8003410 <Main+0x5c>
		HAL_ADC_PollForConversion(h_adc, 100);
 80033f2:	4b1b      	ldr	r3, [pc, #108]	@ (8003460 <Main+0xac>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	2164      	movs	r1, #100	@ 0x64
 80033f8:	0018      	movs	r0, r3
 80033fa:	f001 f957 	bl	80046ac <HAL_ADC_PollForConversion>
		potPosition = (uint16_t)HAL_ADC_GetValue(h_adc);
 80033fe:	4b18      	ldr	r3, [pc, #96]	@ (8003460 <Main+0xac>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	0018      	movs	r0, r3
 8003404:	f001 f9ea 	bl	80047dc <HAL_ADC_GetValue>
 8003408:	0003      	movs	r3, r0
 800340a:	b29a      	uxth	r2, r3
 800340c:	4b15      	ldr	r3, [pc, #84]	@ (8003464 <Main+0xb0>)
 800340e:	801a      	strh	r2, [r3, #0]
	}

	ControlLighting();
 8003410:	f7ff fd84 	bl	8002f1c <_Z15ControlLightingv>

	maxBrightIndPin.Write(maxBrightEnable);
 8003414:	4b11      	ldr	r3, [pc, #68]	@ (800345c <Main+0xa8>)
 8003416:	781a      	ldrb	r2, [r3, #0]
 8003418:	4b13      	ldr	r3, [pc, #76]	@ (8003468 <Main+0xb4>)
 800341a:	0011      	movs	r1, r2
 800341c:	0018      	movs	r0, r3
 800341e:	f7ff fc63 	bl	8002ce8 <_ZN3Pin5WriteEb>
	statusIndPin.Write(lightsEnable);
 8003422:	4b12      	ldr	r3, [pc, #72]	@ (800346c <Main+0xb8>)
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	4b12      	ldr	r3, [pc, #72]	@ (8003470 <Main+0xbc>)
 8003428:	0011      	movs	r1, r2
 800342a:	0018      	movs	r0, r3
 800342c:	f7ff fc5c 	bl	8002ce8 <_ZN3Pin5WriteEb>

	if (checkTemp) {
 8003430:	4b10      	ldr	r3, [pc, #64]	@ (8003474 <Main+0xc0>)
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d008      	beq.n	800344a <Main+0x96>
		pwrDriver.GetTemp();
 8003438:	4b0f      	ldr	r3, [pc, #60]	@ (8003478 <Main+0xc4>)
 800343a:	0018      	movs	r0, r3
 800343c:	f7fe ffc5 	bl	80023ca <_ZN13AP33772Driver7GetTempEv>
		checkTemp = false;
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <Main+0xc0>)
 8003442:	2200      	movs	r2, #0
 8003444:	701a      	strb	r2, [r3, #0]
		OverTempCheck();
 8003446:	f7ff fcc7 	bl	8002dd8 <_Z13OverTempCheckv>
	}

	HAL_Delay(1);
 800344a:	2001      	movs	r0, #1
 800344c:	f000 ff76 	bl	800433c <HAL_Delay>
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	46bd      	mov	sp, r7
 8003454:	b002      	add	sp, #8
 8003456:	bd80      	pop	{r7, pc}
 8003458:	200002cc 	.word	0x200002cc
 800345c:	200002fd 	.word	0x200002fd
 8003460:	20000204 	.word	0x20000204
 8003464:	200002c8 	.word	0x200002c8
 8003468:	200002d8 	.word	0x200002d8
 800346c:	200002fc 	.word	0x200002fc
 8003470:	200002e4 	.word	0x200002e4
 8003474:	200002ff 	.word	0x200002ff
 8003478:	2000027c 	.word	0x2000027c

0800347c <_Z41__static_initialization_and_destruction_0ii>:
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af02      	add	r7, sp, #8
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b01      	cmp	r3, #1
 800348a:	d125      	bne.n	80034d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	4a1a      	ldr	r2, [pc, #104]	@ (80034f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d121      	bne.n	80034d8 <_Z41__static_initialization_and_destruction_0ii+0x5c>
AP33772Driver pwrDriver;
 8003494:	4b19      	ldr	r3, [pc, #100]	@ (80034fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8003496:	0018      	movs	r0, r3
 8003498:	f7ff fc78 	bl	8002d8c <_ZN13AP33772DriverC1Ev>
Pin maxBrightPin = Pin(MAX_BRIGHT_GPIO_Port, MAX_BRIGHT_Pin, ACTIVE_LOW, false);
 800349c:	2380      	movs	r3, #128	@ 0x80
 800349e:	009a      	lsls	r2, r3, #2
 80034a0:	2390      	movs	r3, #144	@ 0x90
 80034a2:	05d9      	lsls	r1, r3, #23
 80034a4:	4816      	ldr	r0, [pc, #88]	@ (8003500 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 80034a6:	2300      	movs	r3, #0
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	2301      	movs	r3, #1
 80034ac:	f7ff fbd9 	bl	8002c62 <_ZN3PinC1EP12GPIO_TypeDeft18GPIO_Default_Stateb>
Pin maxBrightIndPin = Pin(MAX_BRIGHT_IND_GPIO_Port, MAX_BRIGHT_IND_Pin);
 80034b0:	2390      	movs	r3, #144	@ 0x90
 80034b2:	05d9      	lsls	r1, r3, #23
 80034b4:	4b13      	ldr	r3, [pc, #76]	@ (8003504 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 80034b6:	2210      	movs	r2, #16
 80034b8:	0018      	movs	r0, r3
 80034ba:	f7ff fbb9 	bl	8002c30 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin statusIndPin = Pin(STATUS_IND_GPIO_Port, STATUS_IND_Pin);
 80034be:	4912      	ldr	r1, [pc, #72]	@ (8003508 <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 80034c0:	4b12      	ldr	r3, [pc, #72]	@ (800350c <_Z41__static_initialization_and_destruction_0ii+0x90>)
 80034c2:	2204      	movs	r2, #4
 80034c4:	0018      	movs	r0, r3
 80034c6:	f7ff fbb3 	bl	8002c30 <_ZN3PinC1EP12GPIO_TypeDeft>
Pin underPwrPin = Pin(UNDER_PWR_IND_GPIO_Port, UNDER_PWR_IND_Pin);
 80034ca:	2390      	movs	r3, #144	@ 0x90
 80034cc:	05d9      	lsls	r1, r3, #23
 80034ce:	4b10      	ldr	r3, [pc, #64]	@ (8003510 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 80034d0:	2220      	movs	r2, #32
 80034d2:	0018      	movs	r0, r3
 80034d4:	f7ff fbac 	bl	8002c30 <_ZN3PinC1EP12GPIO_TypeDeft>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d107      	bne.n	80034ee <_Z41__static_initialization_and_destruction_0ii+0x72>
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	4a05      	ldr	r2, [pc, #20]	@ (80034f8 <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d103      	bne.n	80034ee <_Z41__static_initialization_and_destruction_0ii+0x72>
AP33772Driver pwrDriver;
 80034e6:	4b05      	ldr	r3, [pc, #20]	@ (80034fc <_Z41__static_initialization_and_destruction_0ii+0x80>)
 80034e8:	0018      	movs	r0, r3
 80034ea:	f7fe fef5 	bl	80022d8 <_ZN13AP33772DriverD1Ev>
}
 80034ee:	46c0      	nop			@ (mov r8, r8)
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b002      	add	sp, #8
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			@ (mov r8, r8)
 80034f8:	0000ffff 	.word	0x0000ffff
 80034fc:	2000027c 	.word	0x2000027c
 8003500:	200002cc 	.word	0x200002cc
 8003504:	200002d8 	.word	0x200002d8
 8003508:	48000400 	.word	0x48000400
 800350c:	200002e4 	.word	0x200002e4
 8003510:	200002f0 	.word	0x200002f0

08003514 <_GLOBAL__sub_I_h_adc>:
 8003514:	b580      	push	{r7, lr}
 8003516:	af00      	add	r7, sp, #0
 8003518:	4b03      	ldr	r3, [pc, #12]	@ (8003528 <_GLOBAL__sub_I_h_adc+0x14>)
 800351a:	0019      	movs	r1, r3
 800351c:	2001      	movs	r0, #1
 800351e:	f7ff ffad 	bl	800347c <_Z41__static_initialization_and_destruction_0ii>
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}
 8003526:	46c0      	nop			@ (mov r8, r8)
 8003528:	0000ffff 	.word	0x0000ffff

0800352c <_GLOBAL__sub_D_h_adc>:
 800352c:	b580      	push	{r7, lr}
 800352e:	af00      	add	r7, sp, #0
 8003530:	4b03      	ldr	r3, [pc, #12]	@ (8003540 <_GLOBAL__sub_D_h_adc+0x14>)
 8003532:	0019      	movs	r1, r3
 8003534:	2000      	movs	r0, #0
 8003536:	f7ff ffa1 	bl	800347c <_Z41__static_initialization_and_destruction_0ii>
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	46c0      	nop			@ (mov r8, r8)
 8003540:	0000ffff 	.word	0x0000ffff

08003544 <HAL_GPIO_EXTI_Callback>:
{
	ADCConvCallback();
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	0002      	movs	r2, r0
 800354c:	1dbb      	adds	r3, r7, #6
 800354e:	801a      	strh	r2, [r3, #0]
	ExtInterruptCallback(GPIO_Pin);
 8003550:	1dbb      	adds	r3, r7, #6
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	0018      	movs	r0, r3
 8003556:	f7ff fd43 	bl	8002fe0 <ExtInterruptCallback>
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
	TimerElapsedCallback(htim);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	0018      	movs	r0, r3
 800356e:	f7ff fd69 	bl	8003044 <TimerElapsedCallback>
}
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	46bd      	mov	sp, r7
 8003576:	b002      	add	sp, #8
 8003578:	bd80      	pop	{r7, pc}
	...

0800357c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800357c:	b590      	push	{r4, r7, lr}
 800357e:	b083      	sub	sp, #12
 8003580:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003582:	f000 fe77 	bl	8004274 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003586:	f000 f833 	bl	80035f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800358a:	f000 fadb 	bl	8003b44 <MX_GPIO_Init>
  MX_I2C2_Init();
 800358e:	f000 f8f1 	bl	8003774 <MX_I2C2_Init>
  MX_TIM2_Init();
 8003592:	f000 f92f 	bl	80037f4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8003596:	f000 f9cb 	bl	8003930 <MX_TIM3_Init>
  MX_ADC_Init();
 800359a:	f000 f891 	bl	80036c0 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 800359e:	f00a fc01 	bl	800dda4 <MX_USB_DEVICE_Init>
  MX_TIM7_Init();
 80035a2:	f000 fa63 	bl	8003a6c <MX_TIM7_Init>
  MX_TIM14_Init();
 80035a6:	f000 faa5 	bl	8003af4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  if (Init(&hadc, &htim2, &htim3, &htim7, &htim14, &hi2c2) != HAL_OK) {
 80035aa:	4c0b      	ldr	r4, [pc, #44]	@ (80035d8 <main+0x5c>)
 80035ac:	4a0b      	ldr	r2, [pc, #44]	@ (80035dc <main+0x60>)
 80035ae:	490c      	ldr	r1, [pc, #48]	@ (80035e0 <main+0x64>)
 80035b0:	480c      	ldr	r0, [pc, #48]	@ (80035e4 <main+0x68>)
 80035b2:	4b0d      	ldr	r3, [pc, #52]	@ (80035e8 <main+0x6c>)
 80035b4:	9301      	str	r3, [sp, #4]
 80035b6:	4b0d      	ldr	r3, [pc, #52]	@ (80035ec <main+0x70>)
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	0023      	movs	r3, r4
 80035bc:	f7ff fdb4 	bl	8003128 <Init>
 80035c0:	1e03      	subs	r3, r0, #0
 80035c2:	d001      	beq.n	80035c8 <main+0x4c>
	return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e002      	b.n	80035ce <main+0x52>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Main();
 80035c8:	f7ff fef4 	bl	80033b4 <Main>
 80035cc:	e7fc      	b.n	80035c8 <main+0x4c>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80035ce:	0018      	movs	r0, r3
 80035d0:	46bd      	mov	sp, r7
 80035d2:	b001      	add	sp, #4
 80035d4:	bd90      	pop	{r4, r7, pc}
 80035d6:	46c0      	nop			@ (mov r8, r8)
 80035d8:	20000434 	.word	0x20000434
 80035dc:	200003ec 	.word	0x200003ec
 80035e0:	200003a4 	.word	0x200003a4
 80035e4:	20000310 	.word	0x20000310
 80035e8:	20000350 	.word	0x20000350
 80035ec:	2000047c 	.word	0x2000047c

080035f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80035f0:	b590      	push	{r4, r7, lr}
 80035f2:	b099      	sub	sp, #100	@ 0x64
 80035f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80035f6:	242c      	movs	r4, #44	@ 0x2c
 80035f8:	193b      	adds	r3, r7, r4
 80035fa:	0018      	movs	r0, r3
 80035fc:	2334      	movs	r3, #52	@ 0x34
 80035fe:	001a      	movs	r2, r3
 8003600:	2100      	movs	r1, #0
 8003602:	f00b f9d5 	bl	800e9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003606:	231c      	movs	r3, #28
 8003608:	18fb      	adds	r3, r7, r3
 800360a:	0018      	movs	r0, r3
 800360c:	2310      	movs	r3, #16
 800360e:	001a      	movs	r2, r3
 8003610:	2100      	movs	r1, #0
 8003612:	f00b f9cd 	bl	800e9b0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003616:	003b      	movs	r3, r7
 8003618:	0018      	movs	r0, r3
 800361a:	231c      	movs	r3, #28
 800361c:	001a      	movs	r2, r3
 800361e:	2100      	movs	r1, #0
 8003620:	f00b f9c6 	bl	800e9b0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSI48
 8003624:	0021      	movs	r1, r4
 8003626:	187b      	adds	r3, r7, r1
 8003628:	2231      	movs	r2, #49	@ 0x31
 800362a:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800362c:	187b      	adds	r3, r7, r1
 800362e:	2201      	movs	r2, #1
 8003630:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003632:	187b      	adds	r3, r7, r1
 8003634:	2201      	movs	r2, #1
 8003636:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8003638:	187b      	adds	r3, r7, r1
 800363a:	2201      	movs	r2, #1
 800363c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800363e:	187b      	adds	r3, r7, r1
 8003640:	2210      	movs	r2, #16
 8003642:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003644:	187b      	adds	r3, r7, r1
 8003646:	2202      	movs	r2, #2
 8003648:	625a      	str	r2, [r3, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800364a:	187b      	adds	r3, r7, r1
 800364c:	2280      	movs	r2, #128	@ 0x80
 800364e:	0252      	lsls	r2, r2, #9
 8003650:	629a      	str	r2, [r3, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2200      	movs	r2, #0
 8003656:	62da      	str	r2, [r3, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2200      	movs	r2, #0
 800365c:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800365e:	187b      	adds	r3, r7, r1
 8003660:	0018      	movs	r0, r3
 8003662:	f004 ff6f 	bl	8008544 <HAL_RCC_OscConfig>
 8003666:	1e03      	subs	r3, r0, #0
 8003668:	d001      	beq.n	800366e <SystemClock_Config+0x7e>
  {
    Error_Handler();
 800366a:	f000 fb27 	bl	8003cbc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800366e:	211c      	movs	r1, #28
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2207      	movs	r2, #7
 8003674:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003676:	187b      	adds	r3, r7, r1
 8003678:	2202      	movs	r2, #2
 800367a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800367c:	187b      	adds	r3, r7, r1
 800367e:	2200      	movs	r2, #0
 8003680:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003682:	187b      	adds	r3, r7, r1
 8003684:	2200      	movs	r2, #0
 8003686:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8003688:	187b      	adds	r3, r7, r1
 800368a:	2101      	movs	r1, #1
 800368c:	0018      	movs	r0, r3
 800368e:	f005 fadf 	bl	8008c50 <HAL_RCC_ClockConfig>
 8003692:	1e03      	subs	r3, r0, #0
 8003694:	d001      	beq.n	800369a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8003696:	f000 fb11 	bl	8003cbc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800369a:	003b      	movs	r3, r7
 800369c:	2280      	movs	r2, #128	@ 0x80
 800369e:	0292      	lsls	r2, r2, #10
 80036a0:	601a      	str	r2, [r3, #0]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 80036a2:	003b      	movs	r3, r7
 80036a4:	2200      	movs	r2, #0
 80036a6:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80036a8:	003b      	movs	r3, r7
 80036aa:	0018      	movs	r0, r3
 80036ac:	f005 fc1e 	bl	8008eec <HAL_RCCEx_PeriphCLKConfig>
 80036b0:	1e03      	subs	r3, r0, #0
 80036b2:	d001      	beq.n	80036b8 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 80036b4:	f000 fb02 	bl	8003cbc <Error_Handler>
  }
}
 80036b8:	46c0      	nop			@ (mov r8, r8)
 80036ba:	46bd      	mov	sp, r7
 80036bc:	b019      	add	sp, #100	@ 0x64
 80036be:	bd90      	pop	{r4, r7, pc}

080036c0 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80036c6:	1d3b      	adds	r3, r7, #4
 80036c8:	0018      	movs	r0, r3
 80036ca:	230c      	movs	r3, #12
 80036cc:	001a      	movs	r2, r3
 80036ce:	2100      	movs	r1, #0
 80036d0:	f00b f96e 	bl	800e9b0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80036d4:	4b25      	ldr	r3, [pc, #148]	@ (800376c <MX_ADC_Init+0xac>)
 80036d6:	4a26      	ldr	r2, [pc, #152]	@ (8003770 <MX_ADC_Init+0xb0>)
 80036d8:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80036da:	4b24      	ldr	r3, [pc, #144]	@ (800376c <MX_ADC_Init+0xac>)
 80036dc:	2200      	movs	r2, #0
 80036de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80036e0:	4b22      	ldr	r3, [pc, #136]	@ (800376c <MX_ADC_Init+0xac>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80036e6:	4b21      	ldr	r3, [pc, #132]	@ (800376c <MX_ADC_Init+0xac>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80036ec:	4b1f      	ldr	r3, [pc, #124]	@ (800376c <MX_ADC_Init+0xac>)
 80036ee:	2201      	movs	r2, #1
 80036f0:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80036f2:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <MX_ADC_Init+0xac>)
 80036f4:	2204      	movs	r2, #4
 80036f6:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80036f8:	4b1c      	ldr	r3, [pc, #112]	@ (800376c <MX_ADC_Init+0xac>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <MX_ADC_Init+0xac>)
 8003700:	2200      	movs	r2, #0
 8003702:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8003704:	4b19      	ldr	r3, [pc, #100]	@ (800376c <MX_ADC_Init+0xac>)
 8003706:	2200      	movs	r2, #0
 8003708:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800370a:	4b18      	ldr	r3, [pc, #96]	@ (800376c <MX_ADC_Init+0xac>)
 800370c:	2200      	movs	r2, #0
 800370e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003710:	4b16      	ldr	r3, [pc, #88]	@ (800376c <MX_ADC_Init+0xac>)
 8003712:	22c2      	movs	r2, #194	@ 0xc2
 8003714:	32ff      	adds	r2, #255	@ 0xff
 8003716:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003718:	4b14      	ldr	r3, [pc, #80]	@ (800376c <MX_ADC_Init+0xac>)
 800371a:	2200      	movs	r2, #0
 800371c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800371e:	4b13      	ldr	r3, [pc, #76]	@ (800376c <MX_ADC_Init+0xac>)
 8003720:	2224      	movs	r2, #36	@ 0x24
 8003722:	2100      	movs	r1, #0
 8003724:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003726:	4b11      	ldr	r3, [pc, #68]	@ (800376c <MX_ADC_Init+0xac>)
 8003728:	2201      	movs	r2, #1
 800372a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800372c:	4b0f      	ldr	r3, [pc, #60]	@ (800376c <MX_ADC_Init+0xac>)
 800372e:	0018      	movs	r0, r3
 8003730:	f000 fe28 	bl	8004384 <HAL_ADC_Init>
 8003734:	1e03      	subs	r3, r0, #0
 8003736:	d001      	beq.n	800373c <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8003738:	f000 fac0 	bl	8003cbc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800373c:	1d3b      	adds	r3, r7, #4
 800373e:	2202      	movs	r2, #2
 8003740:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8003742:	1d3b      	adds	r3, r7, #4
 8003744:	2280      	movs	r2, #128	@ 0x80
 8003746:	0152      	lsls	r2, r2, #5
 8003748:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_55CYCLES_5;
 800374a:	1d3b      	adds	r3, r7, #4
 800374c:	2205      	movs	r2, #5
 800374e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8003750:	1d3a      	adds	r2, r7, #4
 8003752:	4b06      	ldr	r3, [pc, #24]	@ (800376c <MX_ADC_Init+0xac>)
 8003754:	0011      	movs	r1, r2
 8003756:	0018      	movs	r0, r3
 8003758:	f001 f84c 	bl	80047f4 <HAL_ADC_ConfigChannel>
 800375c:	1e03      	subs	r3, r0, #0
 800375e:	d001      	beq.n	8003764 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8003760:	f000 faac 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8003764:	46c0      	nop			@ (mov r8, r8)
 8003766:	46bd      	mov	sp, r7
 8003768:	b004      	add	sp, #16
 800376a:	bd80      	pop	{r7, pc}
 800376c:	20000310 	.word	0x20000310
 8003770:	40012400 	.word	0x40012400

08003774 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8003778:	4b1b      	ldr	r3, [pc, #108]	@ (80037e8 <MX_I2C2_Init+0x74>)
 800377a:	4a1c      	ldr	r2, [pc, #112]	@ (80037ec <MX_I2C2_Init+0x78>)
 800377c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 800377e:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <MX_I2C2_Init+0x74>)
 8003780:	4a1b      	ldr	r2, [pc, #108]	@ (80037f0 <MX_I2C2_Init+0x7c>)
 8003782:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8003784:	4b18      	ldr	r3, [pc, #96]	@ (80037e8 <MX_I2C2_Init+0x74>)
 8003786:	2200      	movs	r2, #0
 8003788:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800378a:	4b17      	ldr	r3, [pc, #92]	@ (80037e8 <MX_I2C2_Init+0x74>)
 800378c:	2201      	movs	r2, #1
 800378e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003790:	4b15      	ldr	r3, [pc, #84]	@ (80037e8 <MX_I2C2_Init+0x74>)
 8003792:	2200      	movs	r2, #0
 8003794:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8003796:	4b14      	ldr	r3, [pc, #80]	@ (80037e8 <MX_I2C2_Init+0x74>)
 8003798:	2200      	movs	r2, #0
 800379a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800379c:	4b12      	ldr	r3, [pc, #72]	@ (80037e8 <MX_I2C2_Init+0x74>)
 800379e:	2200      	movs	r2, #0
 80037a0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80037a2:	4b11      	ldr	r3, [pc, #68]	@ (80037e8 <MX_I2C2_Init+0x74>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80037a8:	4b0f      	ldr	r3, [pc, #60]	@ (80037e8 <MX_I2C2_Init+0x74>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80037ae:	4b0e      	ldr	r3, [pc, #56]	@ (80037e8 <MX_I2C2_Init+0x74>)
 80037b0:	0018      	movs	r0, r3
 80037b2:	f001 fcaf 	bl	8005114 <HAL_I2C_Init>
 80037b6:	1e03      	subs	r3, r0, #0
 80037b8:	d001      	beq.n	80037be <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80037ba:	f000 fa7f 	bl	8003cbc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80037be:	4b0a      	ldr	r3, [pc, #40]	@ (80037e8 <MX_I2C2_Init+0x74>)
 80037c0:	2100      	movs	r1, #0
 80037c2:	0018      	movs	r0, r3
 80037c4:	f002 ffd4 	bl	8006770 <HAL_I2CEx_ConfigAnalogFilter>
 80037c8:	1e03      	subs	r3, r0, #0
 80037ca:	d001      	beq.n	80037d0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80037cc:	f000 fa76 	bl	8003cbc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <MX_I2C2_Init+0x74>)
 80037d2:	2100      	movs	r1, #0
 80037d4:	0018      	movs	r0, r3
 80037d6:	f003 f817 	bl	8006808 <HAL_I2CEx_ConfigDigitalFilter>
 80037da:	1e03      	subs	r3, r0, #0
 80037dc:	d001      	beq.n	80037e2 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80037de:	f000 fa6d 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80037e2:	46c0      	nop			@ (mov r8, r8)
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000350 	.word	0x20000350
 80037ec:	40005800 	.word	0x40005800
 80037f0:	00707cbb 	.word	0x00707cbb

080037f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b08e      	sub	sp, #56	@ 0x38
 80037f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80037fa:	2328      	movs	r3, #40	@ 0x28
 80037fc:	18fb      	adds	r3, r7, r3
 80037fe:	0018      	movs	r0, r3
 8003800:	2310      	movs	r3, #16
 8003802:	001a      	movs	r2, r3
 8003804:	2100      	movs	r1, #0
 8003806:	f00b f8d3 	bl	800e9b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800380a:	2320      	movs	r3, #32
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	0018      	movs	r0, r3
 8003810:	2308      	movs	r3, #8
 8003812:	001a      	movs	r2, r3
 8003814:	2100      	movs	r1, #0
 8003816:	f00b f8cb 	bl	800e9b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800381a:	1d3b      	adds	r3, r7, #4
 800381c:	0018      	movs	r0, r3
 800381e:	231c      	movs	r3, #28
 8003820:	001a      	movs	r2, r3
 8003822:	2100      	movs	r1, #0
 8003824:	f00b f8c4 	bl	800e9b0 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003828:	4b3f      	ldr	r3, [pc, #252]	@ (8003928 <MX_TIM2_Init+0x134>)
 800382a:	2280      	movs	r2, #128	@ 0x80
 800382c:	05d2      	lsls	r2, r2, #23
 800382e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003830:	4b3d      	ldr	r3, [pc, #244]	@ (8003928 <MX_TIM2_Init+0x134>)
 8003832:	2200      	movs	r2, #0
 8003834:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003836:	4b3c      	ldr	r3, [pc, #240]	@ (8003928 <MX_TIM2_Init+0x134>)
 8003838:	2200      	movs	r2, #0
 800383a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800383c:	4b3a      	ldr	r3, [pc, #232]	@ (8003928 <MX_TIM2_Init+0x134>)
 800383e:	4a3b      	ldr	r2, [pc, #236]	@ (800392c <MX_TIM2_Init+0x138>)
 8003840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003842:	4b39      	ldr	r3, [pc, #228]	@ (8003928 <MX_TIM2_Init+0x134>)
 8003844:	2200      	movs	r2, #0
 8003846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003848:	4b37      	ldr	r3, [pc, #220]	@ (8003928 <MX_TIM2_Init+0x134>)
 800384a:	2280      	movs	r2, #128	@ 0x80
 800384c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800384e:	4b36      	ldr	r3, [pc, #216]	@ (8003928 <MX_TIM2_Init+0x134>)
 8003850:	0018      	movs	r0, r3
 8003852:	f005 fc49 	bl	80090e8 <HAL_TIM_Base_Init>
 8003856:	1e03      	subs	r3, r0, #0
 8003858:	d001      	beq.n	800385e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800385a:	f000 fa2f 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800385e:	2128      	movs	r1, #40	@ 0x28
 8003860:	187b      	adds	r3, r7, r1
 8003862:	2280      	movs	r2, #128	@ 0x80
 8003864:	0152      	lsls	r2, r2, #5
 8003866:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003868:	187a      	adds	r2, r7, r1
 800386a:	4b2f      	ldr	r3, [pc, #188]	@ (8003928 <MX_TIM2_Init+0x134>)
 800386c:	0011      	movs	r1, r2
 800386e:	0018      	movs	r0, r3
 8003870:	f006 f822 	bl	80098b8 <HAL_TIM_ConfigClockSource>
 8003874:	1e03      	subs	r3, r0, #0
 8003876:	d001      	beq.n	800387c <MX_TIM2_Init+0x88>
  {
    Error_Handler();
 8003878:	f000 fa20 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800387c:	4b2a      	ldr	r3, [pc, #168]	@ (8003928 <MX_TIM2_Init+0x134>)
 800387e:	0018      	movs	r0, r3
 8003880:	f005 fcd4 	bl	800922c <HAL_TIM_PWM_Init>
 8003884:	1e03      	subs	r3, r0, #0
 8003886:	d001      	beq.n	800388c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003888:	f000 fa18 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800388c:	2120      	movs	r1, #32
 800388e:	187b      	adds	r3, r7, r1
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003894:	187b      	adds	r3, r7, r1
 8003896:	2200      	movs	r2, #0
 8003898:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800389a:	187a      	adds	r2, r7, r1
 800389c:	4b22      	ldr	r3, [pc, #136]	@ (8003928 <MX_TIM2_Init+0x134>)
 800389e:	0011      	movs	r1, r2
 80038a0:	0018      	movs	r0, r3
 80038a2:	f006 fc37 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 80038a6:	1e03      	subs	r3, r0, #0
 80038a8:	d001      	beq.n	80038ae <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80038aa:	f000 fa07 	bl	8003cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038ae:	1d3b      	adds	r3, r7, #4
 80038b0:	2260      	movs	r2, #96	@ 0x60
 80038b2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80038b4:	1d3b      	adds	r3, r7, #4
 80038b6:	2200      	movs	r2, #0
 80038b8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ba:	1d3b      	adds	r3, r7, #4
 80038bc:	2200      	movs	r2, #0
 80038be:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038c0:	1d3b      	adds	r3, r7, #4
 80038c2:	2200      	movs	r2, #0
 80038c4:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038c6:	1d39      	adds	r1, r7, #4
 80038c8:	4b17      	ldr	r3, [pc, #92]	@ (8003928 <MX_TIM2_Init+0x134>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	0018      	movs	r0, r3
 80038ce:	f005 ff2d 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 80038d2:	1e03      	subs	r3, r0, #0
 80038d4:	d001      	beq.n	80038da <MX_TIM2_Init+0xe6>
  {
    Error_Handler();
 80038d6:	f000 f9f1 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038da:	1d39      	adds	r1, r7, #4
 80038dc:	4b12      	ldr	r3, [pc, #72]	@ (8003928 <MX_TIM2_Init+0x134>)
 80038de:	2204      	movs	r2, #4
 80038e0:	0018      	movs	r0, r3
 80038e2:	f005 ff23 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 80038e6:	1e03      	subs	r3, r0, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM2_Init+0xfa>
  {
    Error_Handler();
 80038ea:	f000 f9e7 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80038ee:	1d39      	adds	r1, r7, #4
 80038f0:	4b0d      	ldr	r3, [pc, #52]	@ (8003928 <MX_TIM2_Init+0x134>)
 80038f2:	2208      	movs	r2, #8
 80038f4:	0018      	movs	r0, r3
 80038f6:	f005 ff19 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 80038fa:	1e03      	subs	r3, r0, #0
 80038fc:	d001      	beq.n	8003902 <MX_TIM2_Init+0x10e>
  {
    Error_Handler();
 80038fe:	f000 f9dd 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003902:	1d39      	adds	r1, r7, #4
 8003904:	4b08      	ldr	r3, [pc, #32]	@ (8003928 <MX_TIM2_Init+0x134>)
 8003906:	220c      	movs	r2, #12
 8003908:	0018      	movs	r0, r3
 800390a:	f005 ff0f 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 800390e:	1e03      	subs	r3, r0, #0
 8003910:	d001      	beq.n	8003916 <MX_TIM2_Init+0x122>
  {
    Error_Handler();
 8003912:	f000 f9d3 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003916:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <MX_TIM2_Init+0x134>)
 8003918:	0018      	movs	r0, r3
 800391a:	f000 faff 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b00e      	add	sp, #56	@ 0x38
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	200003a4 	.word	0x200003a4
 800392c:	0000ffff 	.word	0x0000ffff

08003930 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b08e      	sub	sp, #56	@ 0x38
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003936:	2328      	movs	r3, #40	@ 0x28
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	0018      	movs	r0, r3
 800393c:	2310      	movs	r3, #16
 800393e:	001a      	movs	r2, r3
 8003940:	2100      	movs	r1, #0
 8003942:	f00b f835 	bl	800e9b0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003946:	2320      	movs	r3, #32
 8003948:	18fb      	adds	r3, r7, r3
 800394a:	0018      	movs	r0, r3
 800394c:	2308      	movs	r3, #8
 800394e:	001a      	movs	r2, r3
 8003950:	2100      	movs	r1, #0
 8003952:	f00b f82d 	bl	800e9b0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003956:	1d3b      	adds	r3, r7, #4
 8003958:	0018      	movs	r0, r3
 800395a:	231c      	movs	r3, #28
 800395c:	001a      	movs	r2, r3
 800395e:	2100      	movs	r1, #0
 8003960:	f00b f826 	bl	800e9b0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003964:	4b3e      	ldr	r3, [pc, #248]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003966:	4a3f      	ldr	r2, [pc, #252]	@ (8003a64 <MX_TIM3_Init+0x134>)
 8003968:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800396a:	4b3d      	ldr	r3, [pc, #244]	@ (8003a60 <MX_TIM3_Init+0x130>)
 800396c:	2200      	movs	r2, #0
 800396e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003970:	4b3b      	ldr	r3, [pc, #236]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003972:	2200      	movs	r2, #0
 8003974:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8003976:	4b3a      	ldr	r3, [pc, #232]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003978:	4a3b      	ldr	r2, [pc, #236]	@ (8003a68 <MX_TIM3_Init+0x138>)
 800397a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800397c:	4b38      	ldr	r3, [pc, #224]	@ (8003a60 <MX_TIM3_Init+0x130>)
 800397e:	2200      	movs	r2, #0
 8003980:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003982:	4b37      	ldr	r3, [pc, #220]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003984:	2280      	movs	r2, #128	@ 0x80
 8003986:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003988:	4b35      	ldr	r3, [pc, #212]	@ (8003a60 <MX_TIM3_Init+0x130>)
 800398a:	0018      	movs	r0, r3
 800398c:	f005 fbac 	bl	80090e8 <HAL_TIM_Base_Init>
 8003990:	1e03      	subs	r3, r0, #0
 8003992:	d001      	beq.n	8003998 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8003994:	f000 f992 	bl	8003cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003998:	2128      	movs	r1, #40	@ 0x28
 800399a:	187b      	adds	r3, r7, r1
 800399c:	2280      	movs	r2, #128	@ 0x80
 800399e:	0152      	lsls	r2, r2, #5
 80039a0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80039a2:	187a      	adds	r2, r7, r1
 80039a4:	4b2e      	ldr	r3, [pc, #184]	@ (8003a60 <MX_TIM3_Init+0x130>)
 80039a6:	0011      	movs	r1, r2
 80039a8:	0018      	movs	r0, r3
 80039aa:	f005 ff85 	bl	80098b8 <HAL_TIM_ConfigClockSource>
 80039ae:	1e03      	subs	r3, r0, #0
 80039b0:	d001      	beq.n	80039b6 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 80039b2:	f000 f983 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <MX_TIM3_Init+0x130>)
 80039b8:	0018      	movs	r0, r3
 80039ba:	f005 fc37 	bl	800922c <HAL_TIM_PWM_Init>
 80039be:	1e03      	subs	r3, r0, #0
 80039c0:	d001      	beq.n	80039c6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80039c2:	f000 f97b 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039c6:	2120      	movs	r1, #32
 80039c8:	187b      	adds	r3, r7, r1
 80039ca:	2200      	movs	r2, #0
 80039cc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039ce:	187b      	adds	r3, r7, r1
 80039d0:	2200      	movs	r2, #0
 80039d2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80039d4:	187a      	adds	r2, r7, r1
 80039d6:	4b22      	ldr	r3, [pc, #136]	@ (8003a60 <MX_TIM3_Init+0x130>)
 80039d8:	0011      	movs	r1, r2
 80039da:	0018      	movs	r0, r3
 80039dc:	f006 fb9a 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 80039e0:	1e03      	subs	r3, r0, #0
 80039e2:	d001      	beq.n	80039e8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80039e4:	f000 f96a 	bl	8003cbc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039e8:	1d3b      	adds	r3, r7, #4
 80039ea:	2260      	movs	r2, #96	@ 0x60
 80039ec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80039ee:	1d3b      	adds	r3, r7, #4
 80039f0:	2200      	movs	r2, #0
 80039f2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039f4:	1d3b      	adds	r3, r7, #4
 80039f6:	2200      	movs	r2, #0
 80039f8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039fa:	1d3b      	adds	r3, r7, #4
 80039fc:	2200      	movs	r2, #0
 80039fe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a00:	1d39      	adds	r1, r7, #4
 8003a02:	4b17      	ldr	r3, [pc, #92]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	0018      	movs	r0, r3
 8003a08:	f005 fe90 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8003a0c:	1e03      	subs	r3, r0, #0
 8003a0e:	d001      	beq.n	8003a14 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8003a10:	f000 f954 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003a14:	1d39      	adds	r1, r7, #4
 8003a16:	4b12      	ldr	r3, [pc, #72]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003a18:	2204      	movs	r2, #4
 8003a1a:	0018      	movs	r0, r3
 8003a1c:	f005 fe86 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8003a20:	1e03      	subs	r3, r0, #0
 8003a22:	d001      	beq.n	8003a28 <MX_TIM3_Init+0xf8>
  {
    Error_Handler();
 8003a24:	f000 f94a 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003a28:	1d39      	adds	r1, r7, #4
 8003a2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003a2c:	2208      	movs	r2, #8
 8003a2e:	0018      	movs	r0, r3
 8003a30:	f005 fe7c 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8003a34:	1e03      	subs	r3, r0, #0
 8003a36:	d001      	beq.n	8003a3c <MX_TIM3_Init+0x10c>
  {
    Error_Handler();
 8003a38:	f000 f940 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003a3c:	1d39      	adds	r1, r7, #4
 8003a3e:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003a40:	220c      	movs	r2, #12
 8003a42:	0018      	movs	r0, r3
 8003a44:	f005 fe72 	bl	800972c <HAL_TIM_PWM_ConfigChannel>
 8003a48:	1e03      	subs	r3, r0, #0
 8003a4a:	d001      	beq.n	8003a50 <MX_TIM3_Init+0x120>
  {
    Error_Handler();
 8003a4c:	f000 f936 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a50:	4b03      	ldr	r3, [pc, #12]	@ (8003a60 <MX_TIM3_Init+0x130>)
 8003a52:	0018      	movs	r0, r3
 8003a54:	f000 fa62 	bl	8003f1c <HAL_TIM_MspPostInit>

}
 8003a58:	46c0      	nop			@ (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b00e      	add	sp, #56	@ 0x38
 8003a5e:	bd80      	pop	{r7, pc}
 8003a60:	200003ec 	.word	0x200003ec
 8003a64:	40000400 	.word	0x40000400
 8003a68:	0000ffff 	.word	0x0000ffff

08003a6c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a72:	003b      	movs	r3, r7
 8003a74:	0018      	movs	r0, r3
 8003a76:	2308      	movs	r3, #8
 8003a78:	001a      	movs	r2, r3
 8003a7a:	2100      	movs	r1, #0
 8003a7c:	f00a ff98 	bl	800e9b0 <memset>

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003a80:	4b19      	ldr	r3, [pc, #100]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003a82:	4a1a      	ldr	r2, [pc, #104]	@ (8003aec <MX_TIM7_Init+0x80>)
 8003a84:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 220;
 8003a86:	4b18      	ldr	r3, [pc, #96]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003a88:	22dc      	movs	r2, #220	@ 0xdc
 8003a8a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 43439;
 8003a92:	4b15      	ldr	r3, [pc, #84]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003a94:	4a16      	ldr	r2, [pc, #88]	@ (8003af0 <MX_TIM7_Init+0x84>)
 8003a96:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a98:	4b13      	ldr	r3, [pc, #76]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f005 fb21 	bl	80090e8 <HAL_TIM_Base_Init>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM7_Init+0x42>
  {
    Error_Handler();
 8003aaa:	f000 f907 	bl	8003cbc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim7, TIM_OPMODE_SINGLE) != HAL_OK)
 8003aae:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003ab0:	2108      	movs	r1, #8
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f005 fcca 	bl	800944c <HAL_TIM_OnePulse_Init>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d001      	beq.n	8003ac0 <MX_TIM7_Init+0x54>
  {
    Error_Handler();
 8003abc:	f000 f8fe 	bl	8003cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ac0:	003b      	movs	r3, r7
 8003ac2:	2220      	movs	r2, #32
 8003ac4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ac6:	003b      	movs	r3, r7
 8003ac8:	2200      	movs	r2, #0
 8003aca:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003acc:	003a      	movs	r2, r7
 8003ace:	4b06      	ldr	r3, [pc, #24]	@ (8003ae8 <MX_TIM7_Init+0x7c>)
 8003ad0:	0011      	movs	r1, r2
 8003ad2:	0018      	movs	r0, r3
 8003ad4:	f006 fb1e 	bl	800a114 <HAL_TIMEx_MasterConfigSynchronization>
 8003ad8:	1e03      	subs	r3, r0, #0
 8003ada:	d001      	beq.n	8003ae0 <MX_TIM7_Init+0x74>
  {
    Error_Handler();
 8003adc:	f000 f8ee 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003ae0:	46c0      	nop			@ (mov r8, r8)
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	b002      	add	sp, #8
 8003ae6:	bd80      	pop	{r7, pc}
 8003ae8:	20000434 	.word	0x20000434
 8003aec:	40001400 	.word	0x40001400
 8003af0:	0000a9af 	.word	0x0000a9af

08003af4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8003af8:	4b0e      	ldr	r3, [pc, #56]	@ (8003b34 <MX_TIM14_Init+0x40>)
 8003afa:	4a0f      	ldr	r2, [pc, #60]	@ (8003b38 <MX_TIM14_Init+0x44>)
 8003afc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 14649;
 8003afe:	4b0d      	ldr	r3, [pc, #52]	@ (8003b34 <MX_TIM14_Init+0x40>)
 8003b00:	4a0e      	ldr	r2, [pc, #56]	@ (8003b3c <MX_TIM14_Init+0x48>)
 8003b02:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b04:	4b0b      	ldr	r3, [pc, #44]	@ (8003b34 <MX_TIM14_Init+0x40>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 43656;
 8003b0a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b34 <MX_TIM14_Init+0x40>)
 8003b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8003b40 <MX_TIM14_Init+0x4c>)
 8003b0e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003b10:	4b08      	ldr	r3, [pc, #32]	@ (8003b34 <MX_TIM14_Init+0x40>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b16:	4b07      	ldr	r3, [pc, #28]	@ (8003b34 <MX_TIM14_Init+0x40>)
 8003b18:	2280      	movs	r2, #128	@ 0x80
 8003b1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003b1c:	4b05      	ldr	r3, [pc, #20]	@ (8003b34 <MX_TIM14_Init+0x40>)
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f005 fae2 	bl	80090e8 <HAL_TIM_Base_Init>
 8003b24:	1e03      	subs	r3, r0, #0
 8003b26:	d001      	beq.n	8003b2c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8003b28:	f000 f8c8 	bl	8003cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8003b2c:	46c0      	nop			@ (mov r8, r8)
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	46c0      	nop			@ (mov r8, r8)
 8003b34:	2000047c 	.word	0x2000047c
 8003b38:	40002000 	.word	0x40002000
 8003b3c:	00003939 	.word	0x00003939
 8003b40:	0000aa88 	.word	0x0000aa88

08003b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b089      	sub	sp, #36	@ 0x24
 8003b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b4a:	240c      	movs	r4, #12
 8003b4c:	193b      	adds	r3, r7, r4
 8003b4e:	0018      	movs	r0, r3
 8003b50:	2314      	movs	r3, #20
 8003b52:	001a      	movs	r2, r3
 8003b54:	2100      	movs	r1, #0
 8003b56:	f00a ff2b 	bl	800e9b0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b5a:	4b56      	ldr	r3, [pc, #344]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b5c:	695a      	ldr	r2, [r3, #20]
 8003b5e:	4b55      	ldr	r3, [pc, #340]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b60:	2180      	movs	r1, #128	@ 0x80
 8003b62:	03c9      	lsls	r1, r1, #15
 8003b64:	430a      	orrs	r2, r1
 8003b66:	615a      	str	r2, [r3, #20]
 8003b68:	4b52      	ldr	r3, [pc, #328]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b6a:	695a      	ldr	r2, [r3, #20]
 8003b6c:	2380      	movs	r3, #128	@ 0x80
 8003b6e:	03db      	lsls	r3, r3, #15
 8003b70:	4013      	ands	r3, r2
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b76:	4b4f      	ldr	r3, [pc, #316]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b78:	695a      	ldr	r2, [r3, #20]
 8003b7a:	4b4e      	ldr	r3, [pc, #312]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b7c:	2180      	movs	r1, #128	@ 0x80
 8003b7e:	0289      	lsls	r1, r1, #10
 8003b80:	430a      	orrs	r2, r1
 8003b82:	615a      	str	r2, [r3, #20]
 8003b84:	4b4b      	ldr	r3, [pc, #300]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	2380      	movs	r3, #128	@ 0x80
 8003b8a:	029b      	lsls	r3, r3, #10
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b92:	4b48      	ldr	r3, [pc, #288]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b94:	695a      	ldr	r2, [r3, #20]
 8003b96:	4b47      	ldr	r3, [pc, #284]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003b98:	2180      	movs	r1, #128	@ 0x80
 8003b9a:	02c9      	lsls	r1, r1, #11
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	615a      	str	r2, [r3, #20]
 8003ba0:	4b44      	ldr	r3, [pc, #272]	@ (8003cb4 <MX_GPIO_Init+0x170>)
 8003ba2:	695a      	ldr	r2, [r3, #20]
 8003ba4:	2380      	movs	r3, #128	@ 0x80
 8003ba6:	02db      	lsls	r3, r3, #11
 8003ba8:	4013      	ands	r3, r2
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MAX_BRIGHT_IND_Pin|UNDER_PWR_IND_Pin, GPIO_PIN_RESET);
 8003bae:	2390      	movs	r3, #144	@ 0x90
 8003bb0:	05db      	lsls	r3, r3, #23
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2130      	movs	r1, #48	@ 0x30
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	f001 fa73 	bl	80050a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_IND_GPIO_Port, STATUS_IND_Pin, GPIO_PIN_RESET);
 8003bbc:	4b3e      	ldr	r3, [pc, #248]	@ (8003cb8 <MX_GPIO_Init+0x174>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	2104      	movs	r1, #4
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	f001 fa6d 	bl	80050a2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MAX_BRIGHT_IND_Pin UNDER_PWR_IND_Pin */
  GPIO_InitStruct.Pin = MAX_BRIGHT_IND_Pin|UNDER_PWR_IND_Pin;
 8003bc8:	193b      	adds	r3, r7, r4
 8003bca:	2230      	movs	r2, #48	@ 0x30
 8003bcc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bce:	193b      	adds	r3, r7, r4
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bd4:	193b      	adds	r3, r7, r4
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	2200      	movs	r2, #0
 8003bde:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003be0:	193a      	adds	r2, r7, r4
 8003be2:	2390      	movs	r3, #144	@ 0x90
 8003be4:	05db      	lsls	r3, r3, #23
 8003be6:	0011      	movs	r1, r2
 8003be8:	0018      	movs	r0, r3
 8003bea:	f001 f8c5 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : STATUS_IND_Pin */
  GPIO_InitStruct.Pin = STATUS_IND_Pin;
 8003bee:	193b      	adds	r3, r7, r4
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bf4:	193b      	adds	r3, r7, r4
 8003bf6:	2201      	movs	r2, #1
 8003bf8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bfa:	193b      	adds	r3, r7, r4
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c00:	193b      	adds	r3, r7, r4
 8003c02:	2200      	movs	r2, #0
 8003c04:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_IND_GPIO_Port, &GPIO_InitStruct);
 8003c06:	193b      	adds	r3, r7, r4
 8003c08:	4a2b      	ldr	r2, [pc, #172]	@ (8003cb8 <MX_GPIO_Init+0x174>)
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	0010      	movs	r0, r2
 8003c0e:	f001 f8b3 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENABLE_Pin USB_FAULT_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin|USB_FAULT_Pin;
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	2288      	movs	r2, #136	@ 0x88
 8003c16:	0212      	lsls	r2, r2, #8
 8003c18:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	2288      	movs	r2, #136	@ 0x88
 8003c1e:	0352      	lsls	r2, r2, #13
 8003c20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c22:	193b      	adds	r3, r7, r4
 8003c24:	2200      	movs	r2, #0
 8003c26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c28:	193b      	adds	r3, r7, r4
 8003c2a:	4a23      	ldr	r2, [pc, #140]	@ (8003cb8 <MX_GPIO_Init+0x174>)
 8003c2c:	0019      	movs	r1, r3
 8003c2e:	0010      	movs	r0, r2
 8003c30:	f001 f8a2 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C_INT_Pin */
  GPIO_InitStruct.Pin = I2C_INT_Pin;
 8003c34:	193b      	adds	r3, r7, r4
 8003c36:	2280      	movs	r2, #128	@ 0x80
 8003c38:	0152      	lsls	r2, r2, #5
 8003c3a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003c3c:	193b      	adds	r3, r7, r4
 8003c3e:	2284      	movs	r2, #132	@ 0x84
 8003c40:	0392      	lsls	r2, r2, #14
 8003c42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c44:	193b      	adds	r3, r7, r4
 8003c46:	2200      	movs	r2, #0
 8003c48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(I2C_INT_GPIO_Port, &GPIO_InitStruct);
 8003c4a:	193b      	adds	r3, r7, r4
 8003c4c:	4a1a      	ldr	r2, [pc, #104]	@ (8003cb8 <MX_GPIO_Init+0x174>)
 8003c4e:	0019      	movs	r1, r3
 8003c50:	0010      	movs	r0, r2
 8003c52:	f001 f891 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX_BRIGHT_Pin */
  GPIO_InitStruct.Pin = MAX_BRIGHT_Pin;
 8003c56:	193b      	adds	r3, r7, r4
 8003c58:	2280      	movs	r2, #128	@ 0x80
 8003c5a:	0092      	lsls	r2, r2, #2
 8003c5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c5e:	193b      	adds	r3, r7, r4
 8003c60:	2288      	movs	r2, #136	@ 0x88
 8003c62:	0352      	lsls	r2, r2, #13
 8003c64:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c66:	193b      	adds	r3, r7, r4
 8003c68:	2200      	movs	r2, #0
 8003c6a:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MAX_BRIGHT_GPIO_Port, &GPIO_InitStruct);
 8003c6c:	193a      	adds	r2, r7, r4
 8003c6e:	2390      	movs	r3, #144	@ 0x90
 8003c70:	05db      	lsls	r3, r3, #23
 8003c72:	0011      	movs	r1, r2
 8003c74:	0018      	movs	r0, r3
 8003c76:	f001 f87f 	bl	8004d78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OVER_VOLT_Pin */
  GPIO_InitStruct.Pin = USB_OVER_VOLT_Pin;
 8003c7a:	0021      	movs	r1, r4
 8003c7c:	187b      	adds	r3, r7, r1
 8003c7e:	2280      	movs	r2, #128	@ 0x80
 8003c80:	0092      	lsls	r2, r2, #2
 8003c82:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c84:	187b      	adds	r3, r7, r1
 8003c86:	2200      	movs	r2, #0
 8003c88:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8a:	187b      	adds	r3, r7, r1
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(USB_OVER_VOLT_GPIO_Port, &GPIO_InitStruct);
 8003c90:	187b      	adds	r3, r7, r1
 8003c92:	4a09      	ldr	r2, [pc, #36]	@ (8003cb8 <MX_GPIO_Init+0x174>)
 8003c94:	0019      	movs	r1, r3
 8003c96:	0010      	movs	r0, r2
 8003c98:	f001 f86e 	bl	8004d78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	2100      	movs	r1, #0
 8003ca0:	2007      	movs	r0, #7
 8003ca2:	f000 ffe5 	bl	8004c70 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003ca6:	2007      	movs	r0, #7
 8003ca8:	f000 fff7 	bl	8004c9a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003cac:	46c0      	nop			@ (mov r8, r8)
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	b009      	add	sp, #36	@ 0x24
 8003cb2:	bd90      	pop	{r4, r7, pc}
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	48000400 	.word	0x48000400

08003cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cc0:	b672      	cpsid	i
}
 8003cc2:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cc4:	46c0      	nop			@ (mov r8, r8)
 8003cc6:	e7fd      	b.n	8003cc4 <Error_Handler+0x8>

08003cc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cce:	4b0f      	ldr	r3, [pc, #60]	@ (8003d0c <HAL_MspInit+0x44>)
 8003cd0:	699a      	ldr	r2, [r3, #24]
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <HAL_MspInit+0x44>)
 8003cd4:	2101      	movs	r1, #1
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	619a      	str	r2, [r3, #24]
 8003cda:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <HAL_MspInit+0x44>)
 8003cdc:	699b      	ldr	r3, [r3, #24]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	607b      	str	r3, [r7, #4]
 8003ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce6:	4b09      	ldr	r3, [pc, #36]	@ (8003d0c <HAL_MspInit+0x44>)
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	4b08      	ldr	r3, [pc, #32]	@ (8003d0c <HAL_MspInit+0x44>)
 8003cec:	2180      	movs	r1, #128	@ 0x80
 8003cee:	0549      	lsls	r1, r1, #21
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	61da      	str	r2, [r3, #28]
 8003cf4:	4b05      	ldr	r3, [pc, #20]	@ (8003d0c <HAL_MspInit+0x44>)
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	2380      	movs	r3, #128	@ 0x80
 8003cfa:	055b      	lsls	r3, r3, #21
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	603b      	str	r3, [r7, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	46bd      	mov	sp, r7
 8003d06:	b002      	add	sp, #8
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	46c0      	nop			@ (mov r8, r8)
 8003d0c:	40021000 	.word	0x40021000

08003d10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d10:	b590      	push	{r4, r7, lr}
 8003d12:	b08b      	sub	sp, #44	@ 0x2c
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d18:	2414      	movs	r4, #20
 8003d1a:	193b      	adds	r3, r7, r4
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	2314      	movs	r3, #20
 8003d20:	001a      	movs	r2, r3
 8003d22:	2100      	movs	r1, #0
 8003d24:	f00a fe44 	bl	800e9b0 <memset>
  if(hadc->Instance==ADC1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a19      	ldr	r2, [pc, #100]	@ (8003d94 <HAL_ADC_MspInit+0x84>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d12b      	bne.n	8003d8a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d32:	4b19      	ldr	r3, [pc, #100]	@ (8003d98 <HAL_ADC_MspInit+0x88>)
 8003d34:	699a      	ldr	r2, [r3, #24]
 8003d36:	4b18      	ldr	r3, [pc, #96]	@ (8003d98 <HAL_ADC_MspInit+0x88>)
 8003d38:	2180      	movs	r1, #128	@ 0x80
 8003d3a:	0089      	lsls	r1, r1, #2
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	619a      	str	r2, [r3, #24]
 8003d40:	4b15      	ldr	r3, [pc, #84]	@ (8003d98 <HAL_ADC_MspInit+0x88>)
 8003d42:	699a      	ldr	r2, [r3, #24]
 8003d44:	2380      	movs	r3, #128	@ 0x80
 8003d46:	009b      	lsls	r3, r3, #2
 8003d48:	4013      	ands	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
 8003d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <HAL_ADC_MspInit+0x88>)
 8003d50:	695a      	ldr	r2, [r3, #20]
 8003d52:	4b11      	ldr	r3, [pc, #68]	@ (8003d98 <HAL_ADC_MspInit+0x88>)
 8003d54:	2180      	movs	r1, #128	@ 0x80
 8003d56:	0289      	lsls	r1, r1, #10
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	615a      	str	r2, [r3, #20]
 8003d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8003d98 <HAL_ADC_MspInit+0x88>)
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	2380      	movs	r3, #128	@ 0x80
 8003d62:	029b      	lsls	r3, r3, #10
 8003d64:	4013      	ands	r3, r2
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = BRIGHTNESS_Pin;
 8003d6a:	193b      	adds	r3, r7, r4
 8003d6c:	2204      	movs	r2, #4
 8003d6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d70:	193b      	adds	r3, r7, r4
 8003d72:	2203      	movs	r2, #3
 8003d74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	2200      	movs	r2, #0
 8003d7a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(BRIGHTNESS_GPIO_Port, &GPIO_InitStruct);
 8003d7c:	193a      	adds	r2, r7, r4
 8003d7e:	2390      	movs	r3, #144	@ 0x90
 8003d80:	05db      	lsls	r3, r3, #23
 8003d82:	0011      	movs	r1, r2
 8003d84:	0018      	movs	r0, r3
 8003d86:	f000 fff7 	bl	8004d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003d8a:	46c0      	nop			@ (mov r8, r8)
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	b00b      	add	sp, #44	@ 0x2c
 8003d90:	bd90      	pop	{r4, r7, pc}
 8003d92:	46c0      	nop			@ (mov r8, r8)
 8003d94:	40012400 	.word	0x40012400
 8003d98:	40021000 	.word	0x40021000

08003d9c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d9c:	b590      	push	{r4, r7, lr}
 8003d9e:	b08b      	sub	sp, #44	@ 0x2c
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003da4:	2414      	movs	r4, #20
 8003da6:	193b      	adds	r3, r7, r4
 8003da8:	0018      	movs	r0, r3
 8003daa:	2314      	movs	r3, #20
 8003dac:	001a      	movs	r2, r3
 8003dae:	2100      	movs	r1, #0
 8003db0:	f00a fdfe 	bl	800e9b0 <memset>
  if(hi2c->Instance==I2C2)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a20      	ldr	r2, [pc, #128]	@ (8003e3c <HAL_I2C_MspInit+0xa0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d13a      	bne.n	8003e34 <HAL_I2C_MspInit+0x98>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dbe:	4b20      	ldr	r3, [pc, #128]	@ (8003e40 <HAL_I2C_MspInit+0xa4>)
 8003dc0:	695a      	ldr	r2, [r3, #20]
 8003dc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003e40 <HAL_I2C_MspInit+0xa4>)
 8003dc4:	2180      	movs	r1, #128	@ 0x80
 8003dc6:	02c9      	lsls	r1, r1, #11
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	615a      	str	r2, [r3, #20]
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003e40 <HAL_I2C_MspInit+0xa4>)
 8003dce:	695a      	ldr	r2, [r3, #20]
 8003dd0:	2380      	movs	r3, #128	@ 0x80
 8003dd2:	02db      	lsls	r3, r3, #11
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
 8003dd8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB13     ------> I2C2_SCL
    PB14     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8003dda:	193b      	adds	r3, r7, r4
 8003ddc:	22c0      	movs	r2, #192	@ 0xc0
 8003dde:	01d2      	lsls	r2, r2, #7
 8003de0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003de2:	0021      	movs	r1, r4
 8003de4:	187b      	adds	r3, r7, r1
 8003de6:	2212      	movs	r2, #18
 8003de8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dea:	187b      	adds	r3, r7, r1
 8003dec:	2200      	movs	r2, #0
 8003dee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003df0:	187b      	adds	r3, r7, r1
 8003df2:	2203      	movs	r2, #3
 8003df4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_I2C2;
 8003df6:	187b      	adds	r3, r7, r1
 8003df8:	2205      	movs	r2, #5
 8003dfa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dfc:	187b      	adds	r3, r7, r1
 8003dfe:	4a11      	ldr	r2, [pc, #68]	@ (8003e44 <HAL_I2C_MspInit+0xa8>)
 8003e00:	0019      	movs	r1, r3
 8003e02:	0010      	movs	r0, r2
 8003e04:	f000 ffb8 	bl	8004d78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003e08:	4b0d      	ldr	r3, [pc, #52]	@ (8003e40 <HAL_I2C_MspInit+0xa4>)
 8003e0a:	69da      	ldr	r2, [r3, #28]
 8003e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e40 <HAL_I2C_MspInit+0xa4>)
 8003e0e:	2180      	movs	r1, #128	@ 0x80
 8003e10:	03c9      	lsls	r1, r1, #15
 8003e12:	430a      	orrs	r2, r1
 8003e14:	61da      	str	r2, [r3, #28]
 8003e16:	4b0a      	ldr	r3, [pc, #40]	@ (8003e40 <HAL_I2C_MspInit+0xa4>)
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	2380      	movs	r3, #128	@ 0x80
 8003e1c:	03db      	lsls	r3, r3, #15
 8003e1e:	4013      	ands	r3, r2
 8003e20:	60fb      	str	r3, [r7, #12]
 8003e22:	68fb      	ldr	r3, [r7, #12]
    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8003e24:	2200      	movs	r2, #0
 8003e26:	2100      	movs	r1, #0
 8003e28:	2018      	movs	r0, #24
 8003e2a:	f000 ff21 	bl	8004c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8003e2e:	2018      	movs	r0, #24
 8003e30:	f000 ff33 	bl	8004c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003e34:	46c0      	nop			@ (mov r8, r8)
 8003e36:	46bd      	mov	sp, r7
 8003e38:	b00b      	add	sp, #44	@ 0x2c
 8003e3a:	bd90      	pop	{r4, r7, pc}
 8003e3c:	40005800 	.word	0x40005800
 8003e40:	40021000 	.word	0x40021000
 8003e44:	48000400 	.word	0x48000400

08003e48 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	2380      	movs	r3, #128	@ 0x80
 8003e56:	05db      	lsls	r3, r3, #23
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d10c      	bne.n	8003e76 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003e5c:	4b2b      	ldr	r3, [pc, #172]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003e5e:	69da      	ldr	r2, [r3, #28]
 8003e60:	4b2a      	ldr	r3, [pc, #168]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003e62:	2101      	movs	r1, #1
 8003e64:	430a      	orrs	r2, r1
 8003e66:	61da      	str	r2, [r3, #28]
 8003e68:	4b28      	ldr	r3, [pc, #160]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003e6a:	69db      	ldr	r3, [r3, #28]
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	4013      	ands	r3, r2
 8003e70:	617b      	str	r3, [r7, #20]
 8003e72:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8003e74:	e046      	b.n	8003f04 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM3)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a25      	ldr	r2, [pc, #148]	@ (8003f10 <HAL_TIM_Base_MspInit+0xc8>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d10c      	bne.n	8003e9a <HAL_TIM_Base_MspInit+0x52>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003e80:	4b22      	ldr	r3, [pc, #136]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	4b21      	ldr	r3, [pc, #132]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003e86:	2102      	movs	r1, #2
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	61da      	str	r2, [r3, #28]
 8003e8c:	4b1f      	ldr	r3, [pc, #124]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003e8e:	69db      	ldr	r3, [r3, #28]
 8003e90:	2202      	movs	r2, #2
 8003e92:	4013      	ands	r3, r2
 8003e94:	613b      	str	r3, [r7, #16]
 8003e96:	693b      	ldr	r3, [r7, #16]
}
 8003e98:	e034      	b.n	8003f04 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM7)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8003f14 <HAL_TIM_Base_MspInit+0xcc>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d114      	bne.n	8003ece <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ea4:	4b19      	ldr	r3, [pc, #100]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003ea6:	69da      	ldr	r2, [r3, #28]
 8003ea8:	4b18      	ldr	r3, [pc, #96]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003eaa:	2120      	movs	r1, #32
 8003eac:	430a      	orrs	r2, r1
 8003eae:	61da      	str	r2, [r3, #28]
 8003eb0:	4b16      	ldr	r3, [pc, #88]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003eb2:	69db      	ldr	r3, [r3, #28]
 8003eb4:	2220      	movs	r2, #32
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2100      	movs	r1, #0
 8003ec0:	2012      	movs	r0, #18
 8003ec2:	f000 fed5 	bl	8004c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003ec6:	2012      	movs	r0, #18
 8003ec8:	f000 fee7 	bl	8004c9a <HAL_NVIC_EnableIRQ>
}
 8003ecc:	e01a      	b.n	8003f04 <HAL_TIM_Base_MspInit+0xbc>
  else if(htim_base->Instance==TIM14)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a11      	ldr	r2, [pc, #68]	@ (8003f18 <HAL_TIM_Base_MspInit+0xd0>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d115      	bne.n	8003f04 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	4b0b      	ldr	r3, [pc, #44]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003ede:	2180      	movs	r1, #128	@ 0x80
 8003ee0:	0049      	lsls	r1, r1, #1
 8003ee2:	430a      	orrs	r2, r1
 8003ee4:	61da      	str	r2, [r3, #28]
 8003ee6:	4b09      	ldr	r3, [pc, #36]	@ (8003f0c <HAL_TIM_Base_MspInit+0xc4>)
 8003ee8:	69da      	ldr	r2, [r3, #28]
 8003eea:	2380      	movs	r3, #128	@ 0x80
 8003eec:	005b      	lsls	r3, r3, #1
 8003eee:	4013      	ands	r3, r2
 8003ef0:	60bb      	str	r3, [r7, #8]
 8003ef2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	2013      	movs	r0, #19
 8003efa:	f000 feb9 	bl	8004c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8003efe:	2013      	movs	r0, #19
 8003f00:	f000 fecb 	bl	8004c9a <HAL_NVIC_EnableIRQ>
}
 8003f04:	46c0      	nop			@ (mov r8, r8)
 8003f06:	46bd      	mov	sp, r7
 8003f08:	b006      	add	sp, #24
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40021000 	.word	0x40021000
 8003f10:	40000400 	.word	0x40000400
 8003f14:	40001400 	.word	0x40001400
 8003f18:	40002000 	.word	0x40002000

08003f1c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003f1c:	b590      	push	{r4, r7, lr}
 8003f1e:	b08d      	sub	sp, #52	@ 0x34
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	241c      	movs	r4, #28
 8003f26:	193b      	adds	r3, r7, r4
 8003f28:	0018      	movs	r0, r3
 8003f2a:	2314      	movs	r3, #20
 8003f2c:	001a      	movs	r2, r3
 8003f2e:	2100      	movs	r1, #0
 8003f30:	f00a fd3e 	bl	800e9b0 <memset>
  if(htim->Instance==TIM2)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	2380      	movs	r3, #128	@ 0x80
 8003f3a:	05db      	lsls	r3, r3, #23
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d149      	bne.n	8003fd4 <HAL_TIM_MspPostInit+0xb8>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f40:	4b4d      	ldr	r3, [pc, #308]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003f42:	695a      	ldr	r2, [r3, #20]
 8003f44:	4b4c      	ldr	r3, [pc, #304]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003f46:	2180      	movs	r1, #128	@ 0x80
 8003f48:	0289      	lsls	r1, r1, #10
 8003f4a:	430a      	orrs	r2, r1
 8003f4c:	615a      	str	r2, [r3, #20]
 8003f4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003f50:	695a      	ldr	r2, [r3, #20]
 8003f52:	2380      	movs	r3, #128	@ 0x80
 8003f54:	029b      	lsls	r3, r3, #10
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
 8003f5a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f5c:	4b46      	ldr	r3, [pc, #280]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	4b45      	ldr	r3, [pc, #276]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003f62:	2180      	movs	r1, #128	@ 0x80
 8003f64:	02c9      	lsls	r1, r1, #11
 8003f66:	430a      	orrs	r2, r1
 8003f68:	615a      	str	r2, [r3, #20]
 8003f6a:	4b43      	ldr	r3, [pc, #268]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003f6c:	695a      	ldr	r2, [r3, #20]
 8003f6e:	2380      	movs	r3, #128	@ 0x80
 8003f70:	02db      	lsls	r3, r3, #11
 8003f72:	4013      	ands	r3, r2
 8003f74:	617b      	str	r3, [r7, #20]
 8003f76:	697b      	ldr	r3, [r7, #20]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = LED6_Pin|LED7_Pin|LED1_Pin;
 8003f78:	193b      	adds	r3, r7, r4
 8003f7a:	220b      	movs	r2, #11
 8003f7c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f7e:	193b      	adds	r3, r7, r4
 8003f80:	2202      	movs	r2, #2
 8003f82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f84:	193b      	adds	r3, r7, r4
 8003f86:	2200      	movs	r2, #0
 8003f88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f8a:	193b      	adds	r3, r7, r4
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003f90:	193b      	adds	r3, r7, r4
 8003f92:	2202      	movs	r2, #2
 8003f94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f96:	193a      	adds	r2, r7, r4
 8003f98:	2390      	movs	r3, #144	@ 0x90
 8003f9a:	05db      	lsls	r3, r3, #23
 8003f9c:	0011      	movs	r1, r2
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f000 feea 	bl	8004d78 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED8_Pin;
 8003fa4:	0021      	movs	r1, r4
 8003fa6:	187b      	adds	r3, r7, r1
 8003fa8:	2280      	movs	r2, #128	@ 0x80
 8003faa:	00d2      	lsls	r2, r2, #3
 8003fac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fae:	187b      	adds	r3, r7, r1
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb4:	187b      	adds	r3, r7, r1
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fba:	187b      	adds	r3, r7, r1
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(LED8_GPIO_Port, &GPIO_InitStruct);
 8003fc6:	187b      	adds	r3, r7, r1
 8003fc8:	4a2c      	ldr	r2, [pc, #176]	@ (800407c <HAL_TIM_MspPostInit+0x160>)
 8003fca:	0019      	movs	r1, r3
 8003fcc:	0010      	movs	r0, r2
 8003fce:	f000 fed3 	bl	8004d78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003fd2:	e04d      	b.n	8004070 <HAL_TIM_MspPostInit+0x154>
  else if(htim->Instance==TIM3)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a29      	ldr	r2, [pc, #164]	@ (8004080 <HAL_TIM_MspPostInit+0x164>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d148      	bne.n	8004070 <HAL_TIM_MspPostInit+0x154>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fde:	4b26      	ldr	r3, [pc, #152]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003fe0:	695a      	ldr	r2, [r3, #20]
 8003fe2:	4b25      	ldr	r3, [pc, #148]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003fe4:	2180      	movs	r1, #128	@ 0x80
 8003fe6:	0289      	lsls	r1, r1, #10
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	615a      	str	r2, [r3, #20]
 8003fec:	4b22      	ldr	r3, [pc, #136]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003fee:	695a      	ldr	r2, [r3, #20]
 8003ff0:	2380      	movs	r3, #128	@ 0x80
 8003ff2:	029b      	lsls	r3, r3, #10
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	613b      	str	r3, [r7, #16]
 8003ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8003ffc:	695a      	ldr	r2, [r3, #20]
 8003ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 8004000:	2180      	movs	r1, #128	@ 0x80
 8004002:	02c9      	lsls	r1, r1, #11
 8004004:	430a      	orrs	r2, r1
 8004006:	615a      	str	r2, [r3, #20]
 8004008:	4b1b      	ldr	r3, [pc, #108]	@ (8004078 <HAL_TIM_MspPostInit+0x15c>)
 800400a:	695a      	ldr	r2, [r3, #20]
 800400c:	2380      	movs	r3, #128	@ 0x80
 800400e:	02db      	lsls	r3, r3, #11
 8004010:	4013      	ands	r3, r2
 8004012:	60fb      	str	r3, [r7, #12]
 8004014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8004016:	241c      	movs	r4, #28
 8004018:	193b      	adds	r3, r7, r4
 800401a:	22c0      	movs	r2, #192	@ 0xc0
 800401c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800401e:	193b      	adds	r3, r7, r4
 8004020:	2202      	movs	r2, #2
 8004022:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004024:	193b      	adds	r3, r7, r4
 8004026:	2200      	movs	r2, #0
 8004028:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402a:	193b      	adds	r3, r7, r4
 800402c:	2200      	movs	r2, #0
 800402e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8004030:	193b      	adds	r3, r7, r4
 8004032:	2201      	movs	r2, #1
 8004034:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004036:	193a      	adds	r2, r7, r4
 8004038:	2390      	movs	r3, #144	@ 0x90
 800403a:	05db      	lsls	r3, r3, #23
 800403c:	0011      	movs	r1, r2
 800403e:	0018      	movs	r0, r3
 8004040:	f000 fe9a 	bl	8004d78 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED4_Pin|LED5_Pin;
 8004044:	0021      	movs	r1, r4
 8004046:	187b      	adds	r3, r7, r1
 8004048:	2203      	movs	r2, #3
 800404a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	187b      	adds	r3, r7, r1
 800404e:	2202      	movs	r2, #2
 8004050:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	187b      	adds	r3, r7, r1
 8004054:	2200      	movs	r2, #0
 8004056:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004058:	187b      	adds	r3, r7, r1
 800405a:	2200      	movs	r2, #0
 800405c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800405e:	187b      	adds	r3, r7, r1
 8004060:	2201      	movs	r2, #1
 8004062:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004064:	187b      	adds	r3, r7, r1
 8004066:	4a05      	ldr	r2, [pc, #20]	@ (800407c <HAL_TIM_MspPostInit+0x160>)
 8004068:	0019      	movs	r1, r3
 800406a:	0010      	movs	r0, r2
 800406c:	f000 fe84 	bl	8004d78 <HAL_GPIO_Init>
}
 8004070:	46c0      	nop			@ (mov r8, r8)
 8004072:	46bd      	mov	sp, r7
 8004074:	b00d      	add	sp, #52	@ 0x34
 8004076:	bd90      	pop	{r4, r7, pc}
 8004078:	40021000 	.word	0x40021000
 800407c:	48000400 	.word	0x48000400
 8004080:	40000400 	.word	0x40000400

08004084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004088:	46c0      	nop			@ (mov r8, r8)
 800408a:	e7fd      	b.n	8004088 <NMI_Handler+0x4>

0800408c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004090:	46c0      	nop			@ (mov r8, r8)
 8004092:	e7fd      	b.n	8004090 <HardFault_Handler+0x4>

08004094 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004098:	46c0      	nop			@ (mov r8, r8)
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040a2:	46c0      	nop			@ (mov r8, r8)
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040ac:	f000 f92a 	bl	8004304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040b0:	46c0      	nop			@ (mov r8, r8)
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MAX_BRIGHT_Pin);
 80040ba:	2380      	movs	r3, #128	@ 0x80
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	0018      	movs	r0, r3
 80040c0:	f001 f80c 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENABLE_Pin);
 80040c4:	2380      	movs	r3, #128	@ 0x80
 80040c6:	011b      	lsls	r3, r3, #4
 80040c8:	0018      	movs	r0, r3
 80040ca:	f001 f807 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(I2C_INT_Pin);
 80040ce:	2380      	movs	r3, #128	@ 0x80
 80040d0:	015b      	lsls	r3, r3, #5
 80040d2:	0018      	movs	r0, r3
 80040d4:	f001 f802 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(USB_FAULT_Pin);
 80040d8:	2380      	movs	r3, #128	@ 0x80
 80040da:	021b      	lsls	r3, r3, #8
 80040dc:	0018      	movs	r0, r3
 80040de:	f000 fffd 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80040e2:	46c0      	nop			@ (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}

080040e8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80040ec:	4b03      	ldr	r3, [pc, #12]	@ (80040fc <TIM7_IRQHandler+0x14>)
 80040ee:	0018      	movs	r0, r3
 80040f0:	f005 fa05 	bl	80094fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80040f4:	46c0      	nop			@ (mov r8, r8)
 80040f6:	46bd      	mov	sp, r7
 80040f8:	bd80      	pop	{r7, pc}
 80040fa:	46c0      	nop			@ (mov r8, r8)
 80040fc:	20000434 	.word	0x20000434

08004100 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8004104:	4b03      	ldr	r3, [pc, #12]	@ (8004114 <TIM14_IRQHandler+0x14>)
 8004106:	0018      	movs	r0, r3
 8004108:	f005 f9f9 	bl	80094fe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 800410c:	46c0      	nop			@ (mov r8, r8)
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	46c0      	nop			@ (mov r8, r8)
 8004114:	2000047c 	.word	0x2000047c

08004118 <I2C2_IRQHandler>:

/**
  * @brief This function handles I2C2 global interrupt.
  */
void I2C2_IRQHandler(void)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_IRQn 0 */

  /* USER CODE END I2C2_IRQn 0 */
  if (hi2c2.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800411c:	4b09      	ldr	r3, [pc, #36]	@ (8004144 <I2C2_IRQHandler+0x2c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699a      	ldr	r2, [r3, #24]
 8004122:	23e0      	movs	r3, #224	@ 0xe0
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4013      	ands	r3, r2
 8004128:	d004      	beq.n	8004134 <I2C2_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c2);
 800412a:	4b06      	ldr	r3, [pc, #24]	@ (8004144 <I2C2_IRQHandler+0x2c>)
 800412c:	0018      	movs	r0, r3
 800412e:	f001 fab1 	bl	8005694 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c2);
  }
  /* USER CODE BEGIN I2C2_IRQn 1 */

  /* USER CODE END I2C2_IRQn 1 */
}
 8004132:	e003      	b.n	800413c <I2C2_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c2);
 8004134:	4b03      	ldr	r3, [pc, #12]	@ (8004144 <I2C2_IRQHandler+0x2c>)
 8004136:	0018      	movs	r0, r3
 8004138:	f001 fa92 	bl	8005660 <HAL_I2C_EV_IRQHandler>
}
 800413c:	46c0      	nop			@ (mov r8, r8)
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	46c0      	nop			@ (mov r8, r8)
 8004144:	20000350 	.word	0x20000350

08004148 <USB_IRQHandler>:

/**
  * @brief This function handles USB global interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800414c:	4b03      	ldr	r3, [pc, #12]	@ (800415c <USB_IRQHandler+0x14>)
 800414e:	0018      	movs	r0, r3
 8004150:	f002 fccc 	bl	8006aec <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8004154:	46c0      	nop			@ (mov r8, r8)
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	46c0      	nop			@ (mov r8, r8)
 800415c:	20001194 	.word	0x20001194

08004160 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  return 1;
 8004164:	2301      	movs	r3, #1
}
 8004166:	0018      	movs	r0, r3
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <_kill>:

int _kill(int pid, int sig)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004176:	f00a fc7f 	bl	800ea78 <__errno>
 800417a:	0003      	movs	r3, r0
 800417c:	2216      	movs	r2, #22
 800417e:	601a      	str	r2, [r3, #0]
  return -1;
 8004180:	2301      	movs	r3, #1
 8004182:	425b      	negs	r3, r3
}
 8004184:	0018      	movs	r0, r3
 8004186:	46bd      	mov	sp, r7
 8004188:	b002      	add	sp, #8
 800418a:	bd80      	pop	{r7, pc}

0800418c <_exit>:

void _exit (int status)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004194:	2301      	movs	r3, #1
 8004196:	425a      	negs	r2, r3
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	0011      	movs	r1, r2
 800419c:	0018      	movs	r0, r3
 800419e:	f7ff ffe5 	bl	800416c <_kill>
  while (1) {}    /* Make sure we hang here */
 80041a2:	46c0      	nop			@ (mov r8, r8)
 80041a4:	e7fd      	b.n	80041a2 <_exit+0x16>
	...

080041a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b086      	sub	sp, #24
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80041b0:	4a14      	ldr	r2, [pc, #80]	@ (8004204 <_sbrk+0x5c>)
 80041b2:	4b15      	ldr	r3, [pc, #84]	@ (8004208 <_sbrk+0x60>)
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80041bc:	4b13      	ldr	r3, [pc, #76]	@ (800420c <_sbrk+0x64>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d102      	bne.n	80041ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80041c4:	4b11      	ldr	r3, [pc, #68]	@ (800420c <_sbrk+0x64>)
 80041c6:	4a12      	ldr	r2, [pc, #72]	@ (8004210 <_sbrk+0x68>)
 80041c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80041ca:	4b10      	ldr	r3, [pc, #64]	@ (800420c <_sbrk+0x64>)
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	18d3      	adds	r3, r2, r3
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d207      	bcs.n	80041e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80041d8:	f00a fc4e 	bl	800ea78 <__errno>
 80041dc:	0003      	movs	r3, r0
 80041de:	220c      	movs	r2, #12
 80041e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80041e2:	2301      	movs	r3, #1
 80041e4:	425b      	negs	r3, r3
 80041e6:	e009      	b.n	80041fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80041e8:	4b08      	ldr	r3, [pc, #32]	@ (800420c <_sbrk+0x64>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80041ee:	4b07      	ldr	r3, [pc, #28]	@ (800420c <_sbrk+0x64>)
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	18d2      	adds	r2, r2, r3
 80041f6:	4b05      	ldr	r3, [pc, #20]	@ (800420c <_sbrk+0x64>)
 80041f8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80041fa:	68fb      	ldr	r3, [r7, #12]
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b006      	add	sp, #24
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20004000 	.word	0x20004000
 8004208:	00000400 	.word	0x00000400
 800420c:	200004c4 	.word	0x200004c4
 8004210:	200017f8 	.word	0x200017f8

08004214 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004218:	46c0      	nop			@ (mov r8, r8)
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004220:	480d      	ldr	r0, [pc, #52]	@ (8004258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004222:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 8004224:	f7ff fff6 	bl	8004214 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004228:	480c      	ldr	r0, [pc, #48]	@ (800425c <LoopForever+0x6>)
  ldr r1, =_edata
 800422a:	490d      	ldr	r1, [pc, #52]	@ (8004260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800422c:	4a0d      	ldr	r2, [pc, #52]	@ (8004264 <LoopForever+0xe>)
  movs r3, #0
 800422e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004230:	e002      	b.n	8004238 <LoopCopyDataInit>

08004232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004236:	3304      	adds	r3, #4

08004238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800423a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800423c:	d3f9      	bcc.n	8004232 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800423e:	4a0a      	ldr	r2, [pc, #40]	@ (8004268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004240:	4c0a      	ldr	r4, [pc, #40]	@ (800426c <LoopForever+0x16>)
  movs r3, #0
 8004242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004244:	e001      	b.n	800424a <LoopFillZerobss>

08004246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004248:	3204      	adds	r2, #4

0800424a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800424a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800424c:	d3fb      	bcc.n	8004246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800424e:	f00a fc19 	bl	800ea84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004252:	f7ff f993 	bl	800357c <main>

08004256 <LoopForever>:

LoopForever:
    b LoopForever
 8004256:	e7fe      	b.n	8004256 <LoopForever>
  ldr   r0, =_estack
 8004258:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800425c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004260:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8004264:	0800ed3c 	.word	0x0800ed3c
  ldr r2, =_sbss
 8004268:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800426c:	200017f4 	.word	0x200017f4

08004270 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004270:	e7fe      	b.n	8004270 <ADC1_COMP_IRQHandler>
	...

08004274 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004278:	4b07      	ldr	r3, [pc, #28]	@ (8004298 <HAL_Init+0x24>)
 800427a:	681a      	ldr	r2, [r3, #0]
 800427c:	4b06      	ldr	r3, [pc, #24]	@ (8004298 <HAL_Init+0x24>)
 800427e:	2110      	movs	r1, #16
 8004280:	430a      	orrs	r2, r1
 8004282:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004284:	2003      	movs	r0, #3
 8004286:	f000 f809 	bl	800429c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800428a:	f7ff fd1d 	bl	8003cc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	0018      	movs	r0, r3
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	46c0      	nop			@ (mov r8, r8)
 8004298:	40022000 	.word	0x40022000

0800429c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800429c:	b590      	push	{r4, r7, lr}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80042a4:	4b14      	ldr	r3, [pc, #80]	@ (80042f8 <HAL_InitTick+0x5c>)
 80042a6:	681c      	ldr	r4, [r3, #0]
 80042a8:	4b14      	ldr	r3, [pc, #80]	@ (80042fc <HAL_InitTick+0x60>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	0019      	movs	r1, r3
 80042ae:	23fa      	movs	r3, #250	@ 0xfa
 80042b0:	0098      	lsls	r0, r3, #2
 80042b2:	f7fb ff29 	bl	8000108 <__udivsi3>
 80042b6:	0003      	movs	r3, r0
 80042b8:	0019      	movs	r1, r3
 80042ba:	0020      	movs	r0, r4
 80042bc:	f7fb ff24 	bl	8000108 <__udivsi3>
 80042c0:	0003      	movs	r3, r0
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 fcf9 	bl	8004cba <HAL_SYSTICK_Config>
 80042c8:	1e03      	subs	r3, r0, #0
 80042ca:	d001      	beq.n	80042d0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e00f      	b.n	80042f0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b03      	cmp	r3, #3
 80042d4:	d80b      	bhi.n	80042ee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	2301      	movs	r3, #1
 80042da:	425b      	negs	r3, r3
 80042dc:	2200      	movs	r2, #0
 80042de:	0018      	movs	r0, r3
 80042e0:	f000 fcc6 	bl	8004c70 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80042e4:	4b06      	ldr	r3, [pc, #24]	@ (8004300 <HAL_InitTick+0x64>)
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80042ea:	2300      	movs	r3, #0
 80042ec:	e000      	b.n	80042f0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
}
 80042f0:	0018      	movs	r0, r3
 80042f2:	46bd      	mov	sp, r7
 80042f4:	b003      	add	sp, #12
 80042f6:	bd90      	pop	{r4, r7, pc}
 80042f8:	20000014 	.word	0x20000014
 80042fc:	2000001c 	.word	0x2000001c
 8004300:	20000018 	.word	0x20000018

08004304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004308:	4b05      	ldr	r3, [pc, #20]	@ (8004320 <HAL_IncTick+0x1c>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	001a      	movs	r2, r3
 800430e:	4b05      	ldr	r3, [pc, #20]	@ (8004324 <HAL_IncTick+0x20>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	18d2      	adds	r2, r2, r3
 8004314:	4b03      	ldr	r3, [pc, #12]	@ (8004324 <HAL_IncTick+0x20>)
 8004316:	601a      	str	r2, [r3, #0]
}
 8004318:	46c0      	nop			@ (mov r8, r8)
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	46c0      	nop			@ (mov r8, r8)
 8004320:	2000001c 	.word	0x2000001c
 8004324:	200004c8 	.word	0x200004c8

08004328 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	af00      	add	r7, sp, #0
  return uwTick;
 800432c:	4b02      	ldr	r3, [pc, #8]	@ (8004338 <HAL_GetTick+0x10>)
 800432e:	681b      	ldr	r3, [r3, #0]
}
 8004330:	0018      	movs	r0, r3
 8004332:	46bd      	mov	sp, r7
 8004334:	bd80      	pop	{r7, pc}
 8004336:	46c0      	nop			@ (mov r8, r8)
 8004338:	200004c8 	.word	0x200004c8

0800433c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004344:	f7ff fff0 	bl	8004328 <HAL_GetTick>
 8004348:	0003      	movs	r3, r0
 800434a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3301      	adds	r3, #1
 8004354:	d005      	beq.n	8004362 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004356:	4b0a      	ldr	r3, [pc, #40]	@ (8004380 <HAL_Delay+0x44>)
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	001a      	movs	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	189b      	adds	r3, r3, r2
 8004360:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004362:	46c0      	nop			@ (mov r8, r8)
 8004364:	f7ff ffe0 	bl	8004328 <HAL_GetTick>
 8004368:	0002      	movs	r2, r0
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	429a      	cmp	r2, r3
 8004372:	d8f7      	bhi.n	8004364 <HAL_Delay+0x28>
  {
  }
}
 8004374:	46c0      	nop			@ (mov r8, r8)
 8004376:	46c0      	nop			@ (mov r8, r8)
 8004378:	46bd      	mov	sp, r7
 800437a:	b004      	add	sp, #16
 800437c:	bd80      	pop	{r7, pc}
 800437e:	46c0      	nop			@ (mov r8, r8)
 8004380:	2000001c 	.word	0x2000001c

08004384 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004384:	b580      	push	{r7, lr}
 8004386:	b084      	sub	sp, #16
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800438c:	230f      	movs	r3, #15
 800438e:	18fb      	adds	r3, r7, r3
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e125      	b.n	80045ee <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10a      	bne.n	80043c0 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2234      	movs	r2, #52	@ 0x34
 80043b4:	2100      	movs	r1, #0
 80043b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	0018      	movs	r0, r3
 80043bc:	f7ff fca8 	bl	8003d10 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c4:	2210      	movs	r2, #16
 80043c6:	4013      	ands	r3, r2
 80043c8:	d000      	beq.n	80043cc <HAL_ADC_Init+0x48>
 80043ca:	e103      	b.n	80045d4 <HAL_ADC_Init+0x250>
 80043cc:	230f      	movs	r3, #15
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d000      	beq.n	80043d8 <HAL_ADC_Init+0x54>
 80043d6:	e0fd      	b.n	80045d4 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	2204      	movs	r2, #4
 80043e0:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80043e2:	d000      	beq.n	80043e6 <HAL_ADC_Init+0x62>
 80043e4:	e0f6      	b.n	80045d4 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ea:	4a83      	ldr	r2, [pc, #524]	@ (80045f8 <HAL_ADC_Init+0x274>)
 80043ec:	4013      	ands	r3, r2
 80043ee:	2202      	movs	r2, #2
 80043f0:	431a      	orrs	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	639a      	str	r2, [r3, #56]	@ 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2203      	movs	r2, #3
 80043fe:	4013      	ands	r3, r2
 8004400:	2b01      	cmp	r3, #1
 8004402:	d112      	bne.n	800442a <HAL_ADC_Init+0xa6>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	2201      	movs	r2, #1
 800440c:	4013      	ands	r3, r2
 800440e:	2b01      	cmp	r3, #1
 8004410:	d009      	beq.n	8004426 <HAL_ADC_Init+0xa2>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	2380      	movs	r3, #128	@ 0x80
 800441a:	021b      	lsls	r3, r3, #8
 800441c:	401a      	ands	r2, r3
 800441e:	2380      	movs	r3, #128	@ 0x80
 8004420:	021b      	lsls	r3, r3, #8
 8004422:	429a      	cmp	r2, r3
 8004424:	d101      	bne.n	800442a <HAL_ADC_Init+0xa6>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <HAL_ADC_Init+0xa8>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d116      	bne.n	800445e <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	2218      	movs	r2, #24
 8004438:	4393      	bics	r3, r2
 800443a:	0019      	movs	r1, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689a      	ldr	r2, [r3, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	430a      	orrs	r2, r1
 8004446:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	0899      	lsrs	r1, r3, #2
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	685a      	ldr	r2, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	430a      	orrs	r2, r1
 800445c:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68da      	ldr	r2, [r3, #12]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4964      	ldr	r1, [pc, #400]	@ (80045fc <HAL_ADC_Init+0x278>)
 800446a:	400a      	ands	r2, r1
 800446c:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7e1b      	ldrb	r3, [r3, #24]
 8004472:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	7e5b      	ldrb	r3, [r3, #25]
 8004478:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800447a:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	7e9b      	ldrb	r3, [r3, #26]
 8004480:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8004482:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004488:	2b01      	cmp	r3, #1
 800448a:	d002      	beq.n	8004492 <HAL_ADC_Init+0x10e>
 800448c:	2380      	movs	r3, #128	@ 0x80
 800448e:	015b      	lsls	r3, r3, #5
 8004490:	e000      	b.n	8004494 <HAL_ADC_Init+0x110>
 8004492:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8004494:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800449a:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d101      	bne.n	80044a8 <HAL_ADC_Init+0x124>
 80044a4:	2304      	movs	r3, #4
 80044a6:	e000      	b.n	80044aa <HAL_ADC_Init+0x126>
 80044a8:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80044aa:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2124      	movs	r1, #36	@ 0x24
 80044b0:	5c5b      	ldrb	r3, [r3, r1]
 80044b2:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80044b4:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80044b6:	68ba      	ldr	r2, [r7, #8]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	7edb      	ldrb	r3, [r3, #27]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d115      	bne.n	80044f0 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	7e9b      	ldrb	r3, [r3, #26]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d105      	bne.n	80044d8 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2280      	movs	r2, #128	@ 0x80
 80044d0:	0252      	lsls	r2, r2, #9
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60bb      	str	r3, [r7, #8]
 80044d6:	e00b      	b.n	80044f0 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044dc:	2220      	movs	r2, #32
 80044de:	431a      	orrs	r2, r3
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044e8:	2201      	movs	r2, #1
 80044ea:	431a      	orrs	r2, r3
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	69da      	ldr	r2, [r3, #28]
 80044f4:	23c2      	movs	r3, #194	@ 0xc2
 80044f6:	33ff      	adds	r3, #255	@ 0xff
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d007      	beq.n	800450c <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8004504:	4313      	orrs	r3, r2
 8004506:	68ba      	ldr	r2, [r7, #8]
 8004508:	4313      	orrs	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68d9      	ldr	r1, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	68ba      	ldr	r2, [r7, #8]
 8004518:	430a      	orrs	r2, r1
 800451a:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004520:	2380      	movs	r3, #128	@ 0x80
 8004522:	055b      	lsls	r3, r3, #21
 8004524:	429a      	cmp	r2, r3
 8004526:	d01b      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d017      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004534:	2b02      	cmp	r3, #2
 8004536:	d013      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	2b03      	cmp	r3, #3
 800453e:	d00f      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004544:	2b04      	cmp	r3, #4
 8004546:	d00b      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	2b05      	cmp	r3, #5
 800454e:	d007      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	2b06      	cmp	r3, #6
 8004556:	d003      	beq.n	8004560 <HAL_ADC_Init+0x1dc>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455c:	2b07      	cmp	r3, #7
 800455e:	d112      	bne.n	8004586 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	695a      	ldr	r2, [r3, #20]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	2107      	movs	r1, #7
 800456c:	438a      	bics	r2, r1
 800456e:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6959      	ldr	r1, [r3, #20]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800457a:	2207      	movs	r2, #7
 800457c:	401a      	ands	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	4a1c      	ldr	r2, [pc, #112]	@ (8004600 <HAL_ADC_Init+0x27c>)
 800458e:	4013      	ands	r3, r2
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d10b      	bne.n	80045ae <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045a0:	2203      	movs	r2, #3
 80045a2:	4393      	bics	r3, r2
 80045a4:	2201      	movs	r2, #1
 80045a6:	431a      	orrs	r2, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045ac:	e01c      	b.n	80045e8 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045b2:	2212      	movs	r2, #18
 80045b4:	4393      	bics	r3, r2
 80045b6:	2210      	movs	r2, #16
 80045b8:	431a      	orrs	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045c2:	2201      	movs	r2, #1
 80045c4:	431a      	orrs	r2, r3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80045ca:	230f      	movs	r3, #15
 80045cc:	18fb      	adds	r3, r7, r3
 80045ce:	2201      	movs	r2, #1
 80045d0:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80045d2:	e009      	b.n	80045e8 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045d8:	2210      	movs	r2, #16
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	639a      	str	r2, [r3, #56]	@ 0x38
        
    tmp_hal_status = HAL_ERROR;
 80045e0:	230f      	movs	r3, #15
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80045e8:	230f      	movs	r3, #15
 80045ea:	18fb      	adds	r3, r7, r3
 80045ec:	781b      	ldrb	r3, [r3, #0]
}
 80045ee:	0018      	movs	r0, r3
 80045f0:	46bd      	mov	sp, r7
 80045f2:	b004      	add	sp, #16
 80045f4:	bd80      	pop	{r7, pc}
 80045f6:	46c0      	nop			@ (mov r8, r8)
 80045f8:	fffffefd 	.word	0xfffffefd
 80045fc:	fffe0219 	.word	0xfffe0219
 8004600:	833fffe7 	.word	0x833fffe7

08004604 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004604:	b590      	push	{r4, r7, lr}
 8004606:	b085      	sub	sp, #20
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800460c:	230f      	movs	r3, #15
 800460e:	18fb      	adds	r3, r7, r3
 8004610:	2200      	movs	r2, #0
 8004612:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	2204      	movs	r2, #4
 800461c:	4013      	ands	r3, r2
 800461e:	d138      	bne.n	8004692 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2234      	movs	r2, #52	@ 0x34
 8004624:	5c9b      	ldrb	r3, [r3, r2]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_ADC_Start+0x2a>
 800462a:	2302      	movs	r3, #2
 800462c:	e038      	b.n	80046a0 <HAL_ADC_Start+0x9c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2234      	movs	r2, #52	@ 0x34
 8004632:	2101      	movs	r1, #1
 8004634:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	7e5b      	ldrb	r3, [r3, #25]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d007      	beq.n	800464e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800463e:	230f      	movs	r3, #15
 8004640:	18fc      	adds	r4, r7, r3
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	0018      	movs	r0, r3
 8004646:	f000 f9e3 	bl	8004a10 <ADC_Enable>
 800464a:	0003      	movs	r3, r0
 800464c:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800464e:	230f      	movs	r3, #15
 8004650:	18fb      	adds	r3, r7, r3
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d120      	bne.n	800469a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800465c:	4a12      	ldr	r2, [pc, #72]	@ (80046a8 <HAL_ADC_Start+0xa4>)
 800465e:	4013      	ands	r3, r2
 8004660:	2280      	movs	r2, #128	@ 0x80
 8004662:	0052      	lsls	r2, r2, #1
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	639a      	str	r2, [r3, #56]	@ 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2234      	movs	r2, #52	@ 0x34
 8004674:	2100      	movs	r1, #0
 8004676:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	221c      	movs	r2, #28
 800467e:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	689a      	ldr	r2, [r3, #8]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2104      	movs	r1, #4
 800468c:	430a      	orrs	r2, r1
 800468e:	609a      	str	r2, [r3, #8]
 8004690:	e003      	b.n	800469a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004692:	230f      	movs	r3, #15
 8004694:	18fb      	adds	r3, r7, r3
 8004696:	2202      	movs	r2, #2
 8004698:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800469a:	230f      	movs	r3, #15
 800469c:	18fb      	adds	r3, r7, r3
 800469e:	781b      	ldrb	r3, [r3, #0]
}
 80046a0:	0018      	movs	r0, r3
 80046a2:	46bd      	mov	sp, r7
 80046a4:	b005      	add	sp, #20
 80046a6:	bd90      	pop	{r4, r7, pc}
 80046a8:	fffff0fe 	.word	0xfffff0fe

080046ac <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	2b08      	cmp	r3, #8
 80046bc:	d102      	bne.n	80046c4 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 80046be:	2308      	movs	r3, #8
 80046c0:	60fb      	str	r3, [r7, #12]
 80046c2:	e014      	b.n	80046ee <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	68db      	ldr	r3, [r3, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	4013      	ands	r3, r2
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10b      	bne.n	80046ea <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046d6:	2220      	movs	r2, #32
 80046d8:	431a      	orrs	r2, r3
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2234      	movs	r2, #52	@ 0x34
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e071      	b.n	80047ce <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80046ea:	230c      	movs	r3, #12
 80046ec:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80046ee:	f7ff fe1b 	bl	8004328 <HAL_GetTick>
 80046f2:	0003      	movs	r3, r0
 80046f4:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80046f6:	e01f      	b.n	8004738 <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	3301      	adds	r3, #1
 80046fc:	d01c      	beq.n	8004738 <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <HAL_ADC_PollForConversion+0x68>
 8004704:	f7ff fe10 	bl	8004328 <HAL_GetTick>
 8004708:	0002      	movs	r2, r0
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	1ad3      	subs	r3, r2, r3
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d211      	bcs.n	8004738 <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	4013      	ands	r3, r2
 800471e:	d10b      	bne.n	8004738 <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004724:	2204      	movs	r2, #4
 8004726:	431a      	orrs	r2, r3
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2234      	movs	r2, #52	@ 0x34
 8004730:	2100      	movs	r1, #0
 8004732:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e04a      	b.n	80047ce <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4013      	ands	r3, r2
 8004742:	d0d9      	beq.n	80046f8 <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004748:	2280      	movs	r2, #128	@ 0x80
 800474a:	0092      	lsls	r2, r2, #2
 800474c:	431a      	orrs	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	639a      	str	r2, [r3, #56]	@ 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68da      	ldr	r2, [r3, #12]
 8004758:	23c0      	movs	r3, #192	@ 0xc0
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	4013      	ands	r3, r2
 800475e:	d12d      	bne.n	80047bc <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8004764:	2b00      	cmp	r3, #0
 8004766:	d129      	bne.n	80047bc <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	2208      	movs	r2, #8
 8004770:	4013      	ands	r3, r2
 8004772:	2b08      	cmp	r3, #8
 8004774:	d122      	bne.n	80047bc <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	2204      	movs	r2, #4
 800477e:	4013      	ands	r3, r2
 8004780:	d110      	bne.n	80047a4 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	685a      	ldr	r2, [r3, #4]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	210c      	movs	r1, #12
 800478e:	438a      	bics	r2, r1
 8004790:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004796:	4a10      	ldr	r2, [pc, #64]	@ (80047d8 <HAL_ADC_PollForConversion+0x12c>)
 8004798:	4013      	ands	r3, r2
 800479a:	2201      	movs	r2, #1
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80047a2:	e00b      	b.n	80047bc <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a8:	2220      	movs	r2, #32
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	639a      	str	r2, [r3, #56]	@ 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b4:	2201      	movs	r2, #1
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	7e1b      	ldrb	r3, [r3, #24]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d103      	bne.n	80047cc <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	220c      	movs	r2, #12
 80047ca:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80047cc:	2300      	movs	r3, #0
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b004      	add	sp, #16
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	fffffefe 	.word	0xfffffefe

080047dc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b082      	sub	sp, #8
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80047ea:	0018      	movs	r0, r3
 80047ec:	46bd      	mov	sp, r7
 80047ee:	b002      	add	sp, #8
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047fe:	230f      	movs	r3, #15
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	2200      	movs	r2, #0
 8004804:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8004806:	2300      	movs	r3, #0
 8004808:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800480e:	2380      	movs	r3, #128	@ 0x80
 8004810:	055b      	lsls	r3, r3, #21
 8004812:	429a      	cmp	r2, r3
 8004814:	d011      	beq.n	800483a <HAL_ADC_ConfigChannel+0x46>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800481a:	2b01      	cmp	r3, #1
 800481c:	d00d      	beq.n	800483a <HAL_ADC_ConfigChannel+0x46>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	2b02      	cmp	r3, #2
 8004824:	d009      	beq.n	800483a <HAL_ADC_ConfigChannel+0x46>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482a:	2b03      	cmp	r3, #3
 800482c:	d005      	beq.n	800483a <HAL_ADC_ConfigChannel+0x46>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004832:	2b04      	cmp	r3, #4
 8004834:	d001      	beq.n	800483a <HAL_ADC_ConfigChannel+0x46>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2234      	movs	r2, #52	@ 0x34
 800483e:	5c9b      	ldrb	r3, [r3, r2]
 8004840:	2b01      	cmp	r3, #1
 8004842:	d101      	bne.n	8004848 <HAL_ADC_ConfigChannel+0x54>
 8004844:	2302      	movs	r3, #2
 8004846:	e0d0      	b.n	80049ea <HAL_ADC_ConfigChannel+0x1f6>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2234      	movs	r2, #52	@ 0x34
 800484c:	2101      	movs	r1, #1
 800484e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	2204      	movs	r2, #4
 8004858:	4013      	ands	r3, r2
 800485a:	d000      	beq.n	800485e <HAL_ADC_ConfigChannel+0x6a>
 800485c:	e0b4      	b.n	80049c8 <HAL_ADC_ConfigChannel+0x1d4>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	4a64      	ldr	r2, [pc, #400]	@ (80049f4 <HAL_ADC_ConfigChannel+0x200>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d100      	bne.n	800486a <HAL_ADC_ConfigChannel+0x76>
 8004868:	e082      	b.n	8004970 <HAL_ADC_ConfigChannel+0x17c>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	2201      	movs	r2, #1
 8004876:	409a      	lsls	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	430a      	orrs	r2, r1
 800487e:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004884:	2380      	movs	r3, #128	@ 0x80
 8004886:	055b      	lsls	r3, r3, #21
 8004888:	429a      	cmp	r2, r3
 800488a:	d037      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004890:	2b01      	cmp	r3, #1
 8004892:	d033      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004898:	2b02      	cmp	r3, #2
 800489a:	d02f      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a0:	2b03      	cmp	r3, #3
 80048a2:	d02b      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a8:	2b04      	cmp	r3, #4
 80048aa:	d027      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d023      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b8:	2b06      	cmp	r3, #6
 80048ba:	d01f      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c0:	2b07      	cmp	r3, #7
 80048c2:	d01b      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	689a      	ldr	r2, [r3, #8]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	2107      	movs	r1, #7
 80048d0:	400b      	ands	r3, r1
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d012      	beq.n	80048fc <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2107      	movs	r1, #7
 80048e2:	438a      	bics	r2, r1
 80048e4:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6959      	ldr	r1, [r3, #20]
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	2207      	movs	r2, #7
 80048f2:	401a      	ands	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	430a      	orrs	r2, r1
 80048fa:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	2b10      	cmp	r3, #16
 8004902:	d007      	beq.n	8004914 <HAL_ADC_ConfigChannel+0x120>
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b11      	cmp	r3, #17
 800490a:	d003      	beq.n	8004914 <HAL_ADC_ConfigChannel+0x120>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2b12      	cmp	r3, #18
 8004912:	d163      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8004914:	4b38      	ldr	r3, [pc, #224]	@ (80049f8 <HAL_ADC_ConfigChannel+0x204>)
 8004916:	6819      	ldr	r1, [r3, #0]
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b10      	cmp	r3, #16
 800491e:	d009      	beq.n	8004934 <HAL_ADC_ConfigChannel+0x140>
 8004920:	683b      	ldr	r3, [r7, #0]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b11      	cmp	r3, #17
 8004926:	d102      	bne.n	800492e <HAL_ADC_ConfigChannel+0x13a>
 8004928:	2380      	movs	r3, #128	@ 0x80
 800492a:	03db      	lsls	r3, r3, #15
 800492c:	e004      	b.n	8004938 <HAL_ADC_ConfigChannel+0x144>
 800492e:	2380      	movs	r3, #128	@ 0x80
 8004930:	045b      	lsls	r3, r3, #17
 8004932:	e001      	b.n	8004938 <HAL_ADC_ConfigChannel+0x144>
 8004934:	2380      	movs	r3, #128	@ 0x80
 8004936:	041b      	lsls	r3, r3, #16
 8004938:	4a2f      	ldr	r2, [pc, #188]	@ (80049f8 <HAL_ADC_ConfigChannel+0x204>)
 800493a:	430b      	orrs	r3, r1
 800493c:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b10      	cmp	r3, #16
 8004944:	d14a      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x1e8>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004946:	4b2d      	ldr	r3, [pc, #180]	@ (80049fc <HAL_ADC_ConfigChannel+0x208>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	492d      	ldr	r1, [pc, #180]	@ (8004a00 <HAL_ADC_ConfigChannel+0x20c>)
 800494c:	0018      	movs	r0, r3
 800494e:	f7fb fbdb 	bl	8000108 <__udivsi3>
 8004952:	0003      	movs	r3, r0
 8004954:	001a      	movs	r2, r3
 8004956:	0013      	movs	r3, r2
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	189b      	adds	r3, r3, r2
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004960:	e002      	b.n	8004968 <HAL_ADC_ConfigChannel+0x174>
          {
            wait_loop_index--;
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	3b01      	subs	r3, #1
 8004966:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f9      	bne.n	8004962 <HAL_ADC_ConfigChannel+0x16e>
 800496e:	e035      	b.n	80049dc <HAL_ADC_ConfigChannel+0x1e8>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2101      	movs	r1, #1
 800497c:	4099      	lsls	r1, r3
 800497e:	000b      	movs	r3, r1
 8004980:	43d9      	mvns	r1, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	400a      	ands	r2, r1
 8004988:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b10      	cmp	r3, #16
 8004990:	d007      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0x1ae>
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	2b11      	cmp	r3, #17
 8004998:	d003      	beq.n	80049a2 <HAL_ADC_ConfigChannel+0x1ae>
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b12      	cmp	r3, #18
 80049a0:	d11c      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x1e8>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80049a2:	4b15      	ldr	r3, [pc, #84]	@ (80049f8 <HAL_ADC_ConfigChannel+0x204>)
 80049a4:	6819      	ldr	r1, [r3, #0]
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b10      	cmp	r3, #16
 80049ac:	d007      	beq.n	80049be <HAL_ADC_ConfigChannel+0x1ca>
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	2b11      	cmp	r3, #17
 80049b4:	d101      	bne.n	80049ba <HAL_ADC_ConfigChannel+0x1c6>
 80049b6:	4b13      	ldr	r3, [pc, #76]	@ (8004a04 <HAL_ADC_ConfigChannel+0x210>)
 80049b8:	e002      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x1cc>
 80049ba:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <HAL_ADC_ConfigChannel+0x214>)
 80049bc:	e000      	b.n	80049c0 <HAL_ADC_ConfigChannel+0x1cc>
 80049be:	4b13      	ldr	r3, [pc, #76]	@ (8004a0c <HAL_ADC_ConfigChannel+0x218>)
 80049c0:	4a0d      	ldr	r2, [pc, #52]	@ (80049f8 <HAL_ADC_ConfigChannel+0x204>)
 80049c2:	400b      	ands	r3, r1
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	e009      	b.n	80049dc <HAL_ADC_ConfigChannel+0x1e8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049cc:	2220      	movs	r2, #32
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	639a      	str	r2, [r3, #56]	@ 0x38
    
    tmp_hal_status = HAL_ERROR;
 80049d4:	230f      	movs	r3, #15
 80049d6:	18fb      	adds	r3, r7, r3
 80049d8:	2201      	movs	r2, #1
 80049da:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2234      	movs	r2, #52	@ 0x34
 80049e0:	2100      	movs	r1, #0
 80049e2:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80049e4:	230f      	movs	r3, #15
 80049e6:	18fb      	adds	r3, r7, r3
 80049e8:	781b      	ldrb	r3, [r3, #0]
}
 80049ea:	0018      	movs	r0, r3
 80049ec:	46bd      	mov	sp, r7
 80049ee:	b004      	add	sp, #16
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	46c0      	nop			@ (mov r8, r8)
 80049f4:	00001001 	.word	0x00001001
 80049f8:	40012708 	.word	0x40012708
 80049fc:	20000014 	.word	0x20000014
 8004a00:	000f4240 	.word	0x000f4240
 8004a04:	ffbfffff 	.word	0xffbfffff
 8004a08:	feffffff 	.word	0xfeffffff
 8004a0c:	ff7fffff 	.word	0xff7fffff

08004a10 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004a18:	2300      	movs	r3, #0
 8004a1a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	2203      	movs	r2, #3
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d112      	bne.n	8004a54 <ADC_Enable+0x44>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2201      	movs	r2, #1
 8004a36:	4013      	ands	r3, r2
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d009      	beq.n	8004a50 <ADC_Enable+0x40>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	68da      	ldr	r2, [r3, #12]
 8004a42:	2380      	movs	r3, #128	@ 0x80
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	401a      	ands	r2, r3
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d101      	bne.n	8004a54 <ADC_Enable+0x44>
 8004a50:	2301      	movs	r3, #1
 8004a52:	e000      	b.n	8004a56 <ADC_Enable+0x46>
 8004a54:	2300      	movs	r3, #0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d152      	bne.n	8004b00 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a2a      	ldr	r2, [pc, #168]	@ (8004b0c <ADC_Enable+0xfc>)
 8004a62:	4013      	ands	r3, r2
 8004a64:	d00d      	beq.n	8004a82 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	431a      	orrs	r2, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	639a      	str	r2, [r3, #56]	@ 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a76:	2201      	movs	r2, #1
 8004a78:	431a      	orrs	r2, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	63da      	str	r2, [r3, #60]	@ 0x3c
      
      return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e03f      	b.n	8004b02 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	689a      	ldr	r2, [r3, #8]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2101      	movs	r1, #1
 8004a8e:	430a      	orrs	r2, r1
 8004a90:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8004a92:	4b1f      	ldr	r3, [pc, #124]	@ (8004b10 <ADC_Enable+0x100>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	491f      	ldr	r1, [pc, #124]	@ (8004b14 <ADC_Enable+0x104>)
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f7fb fb35 	bl	8000108 <__udivsi3>
 8004a9e:	0003      	movs	r3, r0
 8004aa0:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004aa2:	e002      	b.n	8004aaa <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d1f9      	bne.n	8004aa4 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8004ab0:	f7ff fc3a 	bl	8004328 <HAL_GetTick>
 8004ab4:	0003      	movs	r3, r0
 8004ab6:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ab8:	e01b      	b.n	8004af2 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004aba:	f7ff fc35 	bl	8004328 <HAL_GetTick>
 8004abe:	0002      	movs	r2, r0
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d914      	bls.n	8004af2 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	4013      	ands	r3, r2
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d00d      	beq.n	8004af2 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ada:	2210      	movs	r2, #16
 8004adc:	431a      	orrs	r2, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	431a      	orrs	r2, r3
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	63da      	str	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	e007      	b.n	8004b02 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2201      	movs	r2, #1
 8004afa:	4013      	ands	r3, r2
 8004afc:	2b01      	cmp	r3, #1
 8004afe:	d1dc      	bne.n	8004aba <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	0018      	movs	r0, r3
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b004      	add	sp, #16
 8004b08:	bd80      	pop	{r7, pc}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	80000017 	.word	0x80000017
 8004b10:	20000014 	.word	0x20000014
 8004b14:	000f4240 	.word	0x000f4240

08004b18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	0002      	movs	r2, r0
 8004b20:	1dfb      	adds	r3, r7, #7
 8004b22:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b24:	1dfb      	adds	r3, r7, #7
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b2a:	d809      	bhi.n	8004b40 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b2c:	1dfb      	adds	r3, r7, #7
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	001a      	movs	r2, r3
 8004b32:	231f      	movs	r3, #31
 8004b34:	401a      	ands	r2, r3
 8004b36:	4b04      	ldr	r3, [pc, #16]	@ (8004b48 <__NVIC_EnableIRQ+0x30>)
 8004b38:	2101      	movs	r1, #1
 8004b3a:	4091      	lsls	r1, r2
 8004b3c:	000a      	movs	r2, r1
 8004b3e:	601a      	str	r2, [r3, #0]
  }
}
 8004b40:	46c0      	nop			@ (mov r8, r8)
 8004b42:	46bd      	mov	sp, r7
 8004b44:	b002      	add	sp, #8
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000e100 	.word	0xe000e100

08004b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b4c:	b590      	push	{r4, r7, lr}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	0002      	movs	r2, r0
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	1dfb      	adds	r3, r7, #7
 8004b58:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b5a:	1dfb      	adds	r3, r7, #7
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b60:	d828      	bhi.n	8004bb4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b62:	4a2f      	ldr	r2, [pc, #188]	@ (8004c20 <__NVIC_SetPriority+0xd4>)
 8004b64:	1dfb      	adds	r3, r7, #7
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	b25b      	sxtb	r3, r3
 8004b6a:	089b      	lsrs	r3, r3, #2
 8004b6c:	33c0      	adds	r3, #192	@ 0xc0
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	589b      	ldr	r3, [r3, r2]
 8004b72:	1dfa      	adds	r2, r7, #7
 8004b74:	7812      	ldrb	r2, [r2, #0]
 8004b76:	0011      	movs	r1, r2
 8004b78:	2203      	movs	r2, #3
 8004b7a:	400a      	ands	r2, r1
 8004b7c:	00d2      	lsls	r2, r2, #3
 8004b7e:	21ff      	movs	r1, #255	@ 0xff
 8004b80:	4091      	lsls	r1, r2
 8004b82:	000a      	movs	r2, r1
 8004b84:	43d2      	mvns	r2, r2
 8004b86:	401a      	ands	r2, r3
 8004b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	019b      	lsls	r3, r3, #6
 8004b8e:	22ff      	movs	r2, #255	@ 0xff
 8004b90:	401a      	ands	r2, r3
 8004b92:	1dfb      	adds	r3, r7, #7
 8004b94:	781b      	ldrb	r3, [r3, #0]
 8004b96:	0018      	movs	r0, r3
 8004b98:	2303      	movs	r3, #3
 8004b9a:	4003      	ands	r3, r0
 8004b9c:	00db      	lsls	r3, r3, #3
 8004b9e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ba0:	481f      	ldr	r0, [pc, #124]	@ (8004c20 <__NVIC_SetPriority+0xd4>)
 8004ba2:	1dfb      	adds	r3, r7, #7
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	b25b      	sxtb	r3, r3
 8004ba8:	089b      	lsrs	r3, r3, #2
 8004baa:	430a      	orrs	r2, r1
 8004bac:	33c0      	adds	r3, #192	@ 0xc0
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004bb2:	e031      	b.n	8004c18 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bb4:	4a1b      	ldr	r2, [pc, #108]	@ (8004c24 <__NVIC_SetPriority+0xd8>)
 8004bb6:	1dfb      	adds	r3, r7, #7
 8004bb8:	781b      	ldrb	r3, [r3, #0]
 8004bba:	0019      	movs	r1, r3
 8004bbc:	230f      	movs	r3, #15
 8004bbe:	400b      	ands	r3, r1
 8004bc0:	3b08      	subs	r3, #8
 8004bc2:	089b      	lsrs	r3, r3, #2
 8004bc4:	3306      	adds	r3, #6
 8004bc6:	009b      	lsls	r3, r3, #2
 8004bc8:	18d3      	adds	r3, r2, r3
 8004bca:	3304      	adds	r3, #4
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	1dfa      	adds	r2, r7, #7
 8004bd0:	7812      	ldrb	r2, [r2, #0]
 8004bd2:	0011      	movs	r1, r2
 8004bd4:	2203      	movs	r2, #3
 8004bd6:	400a      	ands	r2, r1
 8004bd8:	00d2      	lsls	r2, r2, #3
 8004bda:	21ff      	movs	r1, #255	@ 0xff
 8004bdc:	4091      	lsls	r1, r2
 8004bde:	000a      	movs	r2, r1
 8004be0:	43d2      	mvns	r2, r2
 8004be2:	401a      	ands	r2, r3
 8004be4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	019b      	lsls	r3, r3, #6
 8004bea:	22ff      	movs	r2, #255	@ 0xff
 8004bec:	401a      	ands	r2, r3
 8004bee:	1dfb      	adds	r3, r7, #7
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	2303      	movs	r3, #3
 8004bf6:	4003      	ands	r3, r0
 8004bf8:	00db      	lsls	r3, r3, #3
 8004bfa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bfc:	4809      	ldr	r0, [pc, #36]	@ (8004c24 <__NVIC_SetPriority+0xd8>)
 8004bfe:	1dfb      	adds	r3, r7, #7
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	001c      	movs	r4, r3
 8004c04:	230f      	movs	r3, #15
 8004c06:	4023      	ands	r3, r4
 8004c08:	3b08      	subs	r3, #8
 8004c0a:	089b      	lsrs	r3, r3, #2
 8004c0c:	430a      	orrs	r2, r1
 8004c0e:	3306      	adds	r3, #6
 8004c10:	009b      	lsls	r3, r3, #2
 8004c12:	18c3      	adds	r3, r0, r3
 8004c14:	3304      	adds	r3, #4
 8004c16:	601a      	str	r2, [r3, #0]
}
 8004c18:	46c0      	nop			@ (mov r8, r8)
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	b003      	add	sp, #12
 8004c1e:	bd90      	pop	{r4, r7, pc}
 8004c20:	e000e100 	.word	0xe000e100
 8004c24:	e000ed00 	.word	0xe000ed00

08004c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	1e5a      	subs	r2, r3, #1
 8004c34:	2380      	movs	r3, #128	@ 0x80
 8004c36:	045b      	lsls	r3, r3, #17
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	d301      	bcc.n	8004c40 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	e010      	b.n	8004c62 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c40:	4b0a      	ldr	r3, [pc, #40]	@ (8004c6c <SysTick_Config+0x44>)
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	3a01      	subs	r2, #1
 8004c46:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c48:	2301      	movs	r3, #1
 8004c4a:	425b      	negs	r3, r3
 8004c4c:	2103      	movs	r1, #3
 8004c4e:	0018      	movs	r0, r3
 8004c50:	f7ff ff7c 	bl	8004b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c54:	4b05      	ldr	r3, [pc, #20]	@ (8004c6c <SysTick_Config+0x44>)
 8004c56:	2200      	movs	r2, #0
 8004c58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c5a:	4b04      	ldr	r3, [pc, #16]	@ (8004c6c <SysTick_Config+0x44>)
 8004c5c:	2207      	movs	r2, #7
 8004c5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	0018      	movs	r0, r3
 8004c64:	46bd      	mov	sp, r7
 8004c66:	b002      	add	sp, #8
 8004c68:	bd80      	pop	{r7, pc}
 8004c6a:	46c0      	nop			@ (mov r8, r8)
 8004c6c:	e000e010 	.word	0xe000e010

08004c70 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	60b9      	str	r1, [r7, #8]
 8004c78:	607a      	str	r2, [r7, #4]
 8004c7a:	210f      	movs	r1, #15
 8004c7c:	187b      	adds	r3, r7, r1
 8004c7e:	1c02      	adds	r2, r0, #0
 8004c80:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	187b      	adds	r3, r7, r1
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	b25b      	sxtb	r3, r3
 8004c8a:	0011      	movs	r1, r2
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	f7ff ff5d 	bl	8004b4c <__NVIC_SetPriority>
}
 8004c92:	46c0      	nop			@ (mov r8, r8)
 8004c94:	46bd      	mov	sp, r7
 8004c96:	b004      	add	sp, #16
 8004c98:	bd80      	pop	{r7, pc}

08004c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c9a:	b580      	push	{r7, lr}
 8004c9c:	b082      	sub	sp, #8
 8004c9e:	af00      	add	r7, sp, #0
 8004ca0:	0002      	movs	r2, r0
 8004ca2:	1dfb      	adds	r3, r7, #7
 8004ca4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ca6:	1dfb      	adds	r3, r7, #7
 8004ca8:	781b      	ldrb	r3, [r3, #0]
 8004caa:	b25b      	sxtb	r3, r3
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff ff33 	bl	8004b18 <__NVIC_EnableIRQ>
}
 8004cb2:	46c0      	nop			@ (mov r8, r8)
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b082      	sub	sp, #8
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	0018      	movs	r0, r3
 8004cc6:	f7ff ffaf 	bl	8004c28 <SysTick_Config>
 8004cca:	0003      	movs	r3, r0
}
 8004ccc:	0018      	movs	r0, r3
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	b002      	add	sp, #8
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cdc:	210f      	movs	r1, #15
 8004cde:	187b      	adds	r3, r7, r1
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2221      	movs	r2, #33	@ 0x21
 8004ce8:	5c9b      	ldrb	r3, [r3, r2]
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d006      	beq.n	8004cfe <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2204      	movs	r2, #4
 8004cf4:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 8004cf6:	187b      	adds	r3, r7, r1
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	e028      	b.n	8004d50 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	681a      	ldr	r2, [r3, #0]
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	210e      	movs	r1, #14
 8004d0a:	438a      	bics	r2, r1
 8004d0c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2101      	movs	r1, #1
 8004d1a:	438a      	bics	r2, r1
 8004d1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d26:	2101      	movs	r1, #1
 8004d28:	4091      	lsls	r1, r2
 8004d2a:	000a      	movs	r2, r1
 8004d2c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2221      	movs	r2, #33	@ 0x21
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2220      	movs	r2, #32
 8004d3a:	2100      	movs	r1, #0
 8004d3c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	0010      	movs	r0, r2
 8004d4e:	4798      	blx	r3
    }
  }
  return status;
 8004d50:	230f      	movs	r3, #15
 8004d52:	18fb      	adds	r3, r7, r3
 8004d54:	781b      	ldrb	r3, [r3, #0]
}
 8004d56:	0018      	movs	r0, r3
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	b004      	add	sp, #16
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b082      	sub	sp, #8
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2221      	movs	r2, #33	@ 0x21
 8004d6a:	5c9b      	ldrb	r3, [r3, r2]
 8004d6c:	b2db      	uxtb	r3, r3
}
 8004d6e:	0018      	movs	r0, r3
 8004d70:	46bd      	mov	sp, r7
 8004d72:	b002      	add	sp, #8
 8004d74:	bd80      	pop	{r7, pc}
	...

08004d78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d82:	2300      	movs	r3, #0
 8004d84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d86:	e155      	b.n	8005034 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2101      	movs	r1, #1
 8004d8e:	697a      	ldr	r2, [r7, #20]
 8004d90:	4091      	lsls	r1, r2
 8004d92:	000a      	movs	r2, r1
 8004d94:	4013      	ands	r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d100      	bne.n	8004da0 <HAL_GPIO_Init+0x28>
 8004d9e:	e146      	b.n	800502e <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	2203      	movs	r2, #3
 8004da6:	4013      	ands	r3, r2
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d005      	beq.n	8004db8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2203      	movs	r2, #3
 8004db2:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d130      	bne.n	8004e1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	689b      	ldr	r3, [r3, #8]
 8004dbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	005b      	lsls	r3, r3, #1
 8004dc2:	2203      	movs	r2, #3
 8004dc4:	409a      	lsls	r2, r3
 8004dc6:	0013      	movs	r3, r2
 8004dc8:	43da      	mvns	r2, r3
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68da      	ldr	r2, [r3, #12]
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	409a      	lsls	r2, r3
 8004dda:	0013      	movs	r3, r2
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dee:	2201      	movs	r2, #1
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	409a      	lsls	r2, r3
 8004df4:	0013      	movs	r3, r2
 8004df6:	43da      	mvns	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	2201      	movs	r2, #1
 8004e06:	401a      	ands	r2, r3
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	409a      	lsls	r2, r3
 8004e0c:	0013      	movs	r3, r2
 8004e0e:	693a      	ldr	r2, [r7, #16]
 8004e10:	4313      	orrs	r3, r2
 8004e12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2203      	movs	r2, #3
 8004e20:	4013      	ands	r3, r2
 8004e22:	2b03      	cmp	r3, #3
 8004e24:	d017      	beq.n	8004e56 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	005b      	lsls	r3, r3, #1
 8004e30:	2203      	movs	r2, #3
 8004e32:	409a      	lsls	r2, r3
 8004e34:	0013      	movs	r3, r2
 8004e36:	43da      	mvns	r2, r3
 8004e38:	693b      	ldr	r3, [r7, #16]
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	689a      	ldr	r2, [r3, #8]
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	409a      	lsls	r2, r3
 8004e48:	0013      	movs	r3, r2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b02      	cmp	r3, #2
 8004e60:	d123      	bne.n	8004eaa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	08da      	lsrs	r2, r3, #3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	3208      	adds	r2, #8
 8004e6a:	0092      	lsls	r2, r2, #2
 8004e6c:	58d3      	ldr	r3, [r2, r3]
 8004e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e70:	697b      	ldr	r3, [r7, #20]
 8004e72:	2207      	movs	r2, #7
 8004e74:	4013      	ands	r3, r2
 8004e76:	009b      	lsls	r3, r3, #2
 8004e78:	220f      	movs	r2, #15
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	0013      	movs	r3, r2
 8004e7e:	43da      	mvns	r2, r3
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	4013      	ands	r3, r2
 8004e84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	691a      	ldr	r2, [r3, #16]
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	2107      	movs	r1, #7
 8004e8e:	400b      	ands	r3, r1
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	409a      	lsls	r2, r3
 8004e94:	0013      	movs	r3, r2
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	08da      	lsrs	r2, r3, #3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3208      	adds	r2, #8
 8004ea4:	0092      	lsls	r2, r2, #2
 8004ea6:	6939      	ldr	r1, [r7, #16]
 8004ea8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	005b      	lsls	r3, r3, #1
 8004eb4:	2203      	movs	r2, #3
 8004eb6:	409a      	lsls	r2, r3
 8004eb8:	0013      	movs	r3, r2
 8004eba:	43da      	mvns	r2, r3
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4013      	ands	r3, r2
 8004ec0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2203      	movs	r2, #3
 8004ec8:	401a      	ands	r2, r3
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	409a      	lsls	r2, r3
 8004ed0:	0013      	movs	r3, r2
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	693a      	ldr	r2, [r7, #16]
 8004edc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	685a      	ldr	r2, [r3, #4]
 8004ee2:	23c0      	movs	r3, #192	@ 0xc0
 8004ee4:	029b      	lsls	r3, r3, #10
 8004ee6:	4013      	ands	r3, r2
 8004ee8:	d100      	bne.n	8004eec <HAL_GPIO_Init+0x174>
 8004eea:	e0a0      	b.n	800502e <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eec:	4b57      	ldr	r3, [pc, #348]	@ (800504c <HAL_GPIO_Init+0x2d4>)
 8004eee:	699a      	ldr	r2, [r3, #24]
 8004ef0:	4b56      	ldr	r3, [pc, #344]	@ (800504c <HAL_GPIO_Init+0x2d4>)
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	619a      	str	r2, [r3, #24]
 8004ef8:	4b54      	ldr	r3, [pc, #336]	@ (800504c <HAL_GPIO_Init+0x2d4>)
 8004efa:	699b      	ldr	r3, [r3, #24]
 8004efc:	2201      	movs	r2, #1
 8004efe:	4013      	ands	r3, r2
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004f04:	4a52      	ldr	r2, [pc, #328]	@ (8005050 <HAL_GPIO_Init+0x2d8>)
 8004f06:	697b      	ldr	r3, [r7, #20]
 8004f08:	089b      	lsrs	r3, r3, #2
 8004f0a:	3302      	adds	r3, #2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	589b      	ldr	r3, [r3, r2]
 8004f10:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	2203      	movs	r2, #3
 8004f16:	4013      	ands	r3, r2
 8004f18:	009b      	lsls	r3, r3, #2
 8004f1a:	220f      	movs	r2, #15
 8004f1c:	409a      	lsls	r2, r3
 8004f1e:	0013      	movs	r3, r2
 8004f20:	43da      	mvns	r2, r3
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	4013      	ands	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	2390      	movs	r3, #144	@ 0x90
 8004f2c:	05db      	lsls	r3, r3, #23
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d019      	beq.n	8004f66 <HAL_GPIO_Init+0x1ee>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a47      	ldr	r2, [pc, #284]	@ (8005054 <HAL_GPIO_Init+0x2dc>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d013      	beq.n	8004f62 <HAL_GPIO_Init+0x1ea>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a46      	ldr	r2, [pc, #280]	@ (8005058 <HAL_GPIO_Init+0x2e0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00d      	beq.n	8004f5e <HAL_GPIO_Init+0x1e6>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a45      	ldr	r2, [pc, #276]	@ (800505c <HAL_GPIO_Init+0x2e4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d007      	beq.n	8004f5a <HAL_GPIO_Init+0x1e2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a44      	ldr	r2, [pc, #272]	@ (8005060 <HAL_GPIO_Init+0x2e8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d101      	bne.n	8004f56 <HAL_GPIO_Init+0x1de>
 8004f52:	2304      	movs	r3, #4
 8004f54:	e008      	b.n	8004f68 <HAL_GPIO_Init+0x1f0>
 8004f56:	2305      	movs	r3, #5
 8004f58:	e006      	b.n	8004f68 <HAL_GPIO_Init+0x1f0>
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e004      	b.n	8004f68 <HAL_GPIO_Init+0x1f0>
 8004f5e:	2302      	movs	r3, #2
 8004f60:	e002      	b.n	8004f68 <HAL_GPIO_Init+0x1f0>
 8004f62:	2301      	movs	r3, #1
 8004f64:	e000      	b.n	8004f68 <HAL_GPIO_Init+0x1f0>
 8004f66:	2300      	movs	r3, #0
 8004f68:	697a      	ldr	r2, [r7, #20]
 8004f6a:	2103      	movs	r1, #3
 8004f6c:	400a      	ands	r2, r1
 8004f6e:	0092      	lsls	r2, r2, #2
 8004f70:	4093      	lsls	r3, r2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004f78:	4935      	ldr	r1, [pc, #212]	@ (8005050 <HAL_GPIO_Init+0x2d8>)
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	089b      	lsrs	r3, r3, #2
 8004f7e:	3302      	adds	r3, #2
 8004f80:	009b      	lsls	r3, r3, #2
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f86:	4b37      	ldr	r3, [pc, #220]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	43da      	mvns	r2, r3
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	4013      	ands	r3, r2
 8004f94:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	2380      	movs	r3, #128	@ 0x80
 8004f9c:	035b      	lsls	r3, r3, #13
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	d003      	beq.n	8004faa <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8004fa2:	693a      	ldr	r2, [r7, #16]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004faa:	4b2e      	ldr	r3, [pc, #184]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8004fac:	693a      	ldr	r2, [r7, #16]
 8004fae:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	43da      	mvns	r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	039b      	lsls	r3, r3, #14
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d003      	beq.n	8004fd4 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004fd4:	4b23      	ldr	r3, [pc, #140]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8004fda:	4b22      	ldr	r3, [pc, #136]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	43da      	mvns	r2, r3
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4013      	ands	r3, r2
 8004fe8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	2380      	movs	r3, #128	@ 0x80
 8004ff0:	029b      	lsls	r3, r3, #10
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004ffe:	4b19      	ldr	r3, [pc, #100]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8005004:	4b17      	ldr	r3, [pc, #92]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	43da      	mvns	r2, r3
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	4013      	ands	r3, r2
 8005012:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	2380      	movs	r3, #128	@ 0x80
 800501a:	025b      	lsls	r3, r3, #9
 800501c:	4013      	ands	r3, r2
 800501e:	d003      	beq.n	8005028 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005020:	693a      	ldr	r2, [r7, #16]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	4313      	orrs	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8005028:	4b0e      	ldr	r3, [pc, #56]	@ (8005064 <HAL_GPIO_Init+0x2ec>)
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3301      	adds	r3, #1
 8005032:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	40da      	lsrs	r2, r3
 800503c:	1e13      	subs	r3, r2, #0
 800503e:	d000      	beq.n	8005042 <HAL_GPIO_Init+0x2ca>
 8005040:	e6a2      	b.n	8004d88 <HAL_GPIO_Init+0x10>
  } 
}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	46c0      	nop			@ (mov r8, r8)
 8005046:	46bd      	mov	sp, r7
 8005048:	b006      	add	sp, #24
 800504a:	bd80      	pop	{r7, pc}
 800504c:	40021000 	.word	0x40021000
 8005050:	40010000 	.word	0x40010000
 8005054:	48000400 	.word	0x48000400
 8005058:	48000800 	.word	0x48000800
 800505c:	48000c00 	.word	0x48000c00
 8005060:	48001000 	.word	0x48001000
 8005064:	40010400 	.word	0x40010400

08005068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	000a      	movs	r2, r1
 8005072:	1cbb      	adds	r3, r7, #2
 8005074:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	1cba      	adds	r2, r7, #2
 800507c:	8812      	ldrh	r2, [r2, #0]
 800507e:	4013      	ands	r3, r2
 8005080:	d004      	beq.n	800508c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8005082:	230f      	movs	r3, #15
 8005084:	18fb      	adds	r3, r7, r3
 8005086:	2201      	movs	r2, #1
 8005088:	701a      	strb	r2, [r3, #0]
 800508a:	e003      	b.n	8005094 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800508c:	230f      	movs	r3, #15
 800508e:	18fb      	adds	r3, r7, r3
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8005094:	230f      	movs	r3, #15
 8005096:	18fb      	adds	r3, r7, r3
 8005098:	781b      	ldrb	r3, [r3, #0]
  }
 800509a:	0018      	movs	r0, r3
 800509c:	46bd      	mov	sp, r7
 800509e:	b004      	add	sp, #16
 80050a0:	bd80      	pop	{r7, pc}

080050a2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b082      	sub	sp, #8
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	0008      	movs	r0, r1
 80050ac:	0011      	movs	r1, r2
 80050ae:	1cbb      	adds	r3, r7, #2
 80050b0:	1c02      	adds	r2, r0, #0
 80050b2:	801a      	strh	r2, [r3, #0]
 80050b4:	1c7b      	adds	r3, r7, #1
 80050b6:	1c0a      	adds	r2, r1, #0
 80050b8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050ba:	1c7b      	adds	r3, r7, #1
 80050bc:	781b      	ldrb	r3, [r3, #0]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d004      	beq.n	80050cc <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050c2:	1cbb      	adds	r3, r7, #2
 80050c4:	881a      	ldrh	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050ca:	e003      	b.n	80050d4 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050cc:	1cbb      	adds	r3, r7, #2
 80050ce:	881a      	ldrh	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050d4:	46c0      	nop			@ (mov r8, r8)
 80050d6:	46bd      	mov	sp, r7
 80050d8:	b002      	add	sp, #8
 80050da:	bd80      	pop	{r7, pc}

080050dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	0002      	movs	r2, r0
 80050e4:	1dbb      	adds	r3, r7, #6
 80050e6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050e8:	4b09      	ldr	r3, [pc, #36]	@ (8005110 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	1dba      	adds	r2, r7, #6
 80050ee:	8812      	ldrh	r2, [r2, #0]
 80050f0:	4013      	ands	r3, r2
 80050f2:	d008      	beq.n	8005106 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050f4:	4b06      	ldr	r3, [pc, #24]	@ (8005110 <HAL_GPIO_EXTI_IRQHandler+0x34>)
 80050f6:	1dba      	adds	r2, r7, #6
 80050f8:	8812      	ldrh	r2, [r2, #0]
 80050fa:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050fc:	1dbb      	adds	r3, r7, #6
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	0018      	movs	r0, r3
 8005102:	f7fe fa1f 	bl	8003544 <HAL_GPIO_EXTI_Callback>
  }
}
 8005106:	46c0      	nop			@ (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b002      	add	sp, #8
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			@ (mov r8, r8)
 8005110:	40010400 	.word	0x40010400

08005114 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b082      	sub	sp, #8
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d101      	bne.n	8005126 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e082      	b.n	800522c <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2241      	movs	r2, #65	@ 0x41
 800512a:	5c9b      	ldrb	r3, [r3, r2]
 800512c:	b2db      	uxtb	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d107      	bne.n	8005142 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2240      	movs	r2, #64	@ 0x40
 8005136:	2100      	movs	r1, #0
 8005138:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	0018      	movs	r0, r3
 800513e:	f7fe fe2d 	bl	8003d9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2241      	movs	r2, #65	@ 0x41
 8005146:	2124      	movs	r1, #36	@ 0x24
 8005148:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2101      	movs	r1, #1
 8005156:	438a      	bics	r2, r1
 8005158:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4934      	ldr	r1, [pc, #208]	@ (8005234 <HAL_I2C_Init+0x120>)
 8005164:	400a      	ands	r2, r1
 8005166:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	689a      	ldr	r2, [r3, #8]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4931      	ldr	r1, [pc, #196]	@ (8005238 <HAL_I2C_Init+0x124>)
 8005174:	400a      	ands	r2, r1
 8005176:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d108      	bne.n	8005192 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2180      	movs	r1, #128	@ 0x80
 800518a:	0209      	lsls	r1, r1, #8
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]
 8005190:	e007      	b.n	80051a2 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689a      	ldr	r2, [r3, #8]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2184      	movs	r1, #132	@ 0x84
 800519c:	0209      	lsls	r1, r1, #8
 800519e:	430a      	orrs	r2, r1
 80051a0:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	2b02      	cmp	r3, #2
 80051a8:	d104      	bne.n	80051b4 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2280      	movs	r2, #128	@ 0x80
 80051b0:	0112      	lsls	r2, r2, #4
 80051b2:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	685a      	ldr	r2, [r3, #4]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	491f      	ldr	r1, [pc, #124]	@ (800523c <HAL_I2C_Init+0x128>)
 80051c0:	430a      	orrs	r2, r1
 80051c2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68da      	ldr	r2, [r3, #12]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	491a      	ldr	r1, [pc, #104]	@ (8005238 <HAL_I2C_Init+0x124>)
 80051d0:	400a      	ands	r2, r1
 80051d2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691a      	ldr	r2, [r3, #16]
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	695b      	ldr	r3, [r3, #20]
 80051dc:	431a      	orrs	r2, r3
 80051de:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	69d9      	ldr	r1, [r3, #28]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1a      	ldr	r2, [r3, #32]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2101      	movs	r1, #1
 800520a:	430a      	orrs	r2, r1
 800520c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2241      	movs	r2, #65	@ 0x41
 8005218:	2120      	movs	r1, #32
 800521a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2242      	movs	r2, #66	@ 0x42
 8005226:	2100      	movs	r1, #0
 8005228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800522a:	2300      	movs	r3, #0
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	b002      	add	sp, #8
 8005232:	bd80      	pop	{r7, pc}
 8005234:	f0ffffff 	.word	0xf0ffffff
 8005238:	ffff7fff 	.word	0xffff7fff
 800523c:	02008000 	.word	0x02008000

08005240 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b089      	sub	sp, #36	@ 0x24
 8005244:	af02      	add	r7, sp, #8
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	0008      	movs	r0, r1
 800524a:	607a      	str	r2, [r7, #4]
 800524c:	0019      	movs	r1, r3
 800524e:	230a      	movs	r3, #10
 8005250:	18fb      	adds	r3, r7, r3
 8005252:	1c02      	adds	r2, r0, #0
 8005254:	801a      	strh	r2, [r3, #0]
 8005256:	2308      	movs	r3, #8
 8005258:	18fb      	adds	r3, r7, r3
 800525a:	1c0a      	adds	r2, r1, #0
 800525c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2241      	movs	r2, #65	@ 0x41
 8005262:	5c9b      	ldrb	r3, [r3, r2]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2b20      	cmp	r3, #32
 8005268:	d000      	beq.n	800526c <HAL_I2C_Master_Transmit+0x2c>
 800526a:	e0e7      	b.n	800543c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	2240      	movs	r2, #64	@ 0x40
 8005270:	5c9b      	ldrb	r3, [r3, r2]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_I2C_Master_Transmit+0x3a>
 8005276:	2302      	movs	r3, #2
 8005278:	e0e1      	b.n	800543e <HAL_I2C_Master_Transmit+0x1fe>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2240      	movs	r2, #64	@ 0x40
 800527e:	2101      	movs	r1, #1
 8005280:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005282:	f7ff f851 	bl	8004328 <HAL_GetTick>
 8005286:	0003      	movs	r3, r0
 8005288:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800528a:	2380      	movs	r3, #128	@ 0x80
 800528c:	0219      	lsls	r1, r3, #8
 800528e:	68f8      	ldr	r0, [r7, #12]
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	9300      	str	r3, [sp, #0]
 8005294:	2319      	movs	r3, #25
 8005296:	2201      	movs	r2, #1
 8005298:	f000 ff7a 	bl	8006190 <I2C_WaitOnFlagUntilTimeout>
 800529c:	1e03      	subs	r3, r0, #0
 800529e:	d001      	beq.n	80052a4 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e0cc      	b.n	800543e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2241      	movs	r2, #65	@ 0x41
 80052a8:	2121      	movs	r1, #33	@ 0x21
 80052aa:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	2242      	movs	r2, #66	@ 0x42
 80052b0:	2110      	movs	r1, #16
 80052b2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2200      	movs	r2, #0
 80052b8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	2208      	movs	r2, #8
 80052c4:	18ba      	adds	r2, r7, r2
 80052c6:	8812      	ldrh	r2, [r2, #0]
 80052c8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	2200      	movs	r2, #0
 80052ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052d4:	b29b      	uxth	r3, r3
 80052d6:	2bff      	cmp	r3, #255	@ 0xff
 80052d8:	d911      	bls.n	80052fe <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	22ff      	movs	r2, #255	@ 0xff
 80052de:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	2380      	movs	r3, #128	@ 0x80
 80052e8:	045c      	lsls	r4, r3, #17
 80052ea:	230a      	movs	r3, #10
 80052ec:	18fb      	adds	r3, r7, r3
 80052ee:	8819      	ldrh	r1, [r3, #0]
 80052f0:	68f8      	ldr	r0, [r7, #12]
 80052f2:	4b55      	ldr	r3, [pc, #340]	@ (8005448 <HAL_I2C_Master_Transmit+0x208>)
 80052f4:	9300      	str	r3, [sp, #0]
 80052f6:	0023      	movs	r3, r4
 80052f8:	f001 f99c 	bl	8006634 <I2C_TransferConfig>
 80052fc:	e075      	b.n	80053ea <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005302:	b29a      	uxth	r2, r3
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530c:	b2da      	uxtb	r2, r3
 800530e:	2380      	movs	r3, #128	@ 0x80
 8005310:	049c      	lsls	r4, r3, #18
 8005312:	230a      	movs	r3, #10
 8005314:	18fb      	adds	r3, r7, r3
 8005316:	8819      	ldrh	r1, [r3, #0]
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	4b4b      	ldr	r3, [pc, #300]	@ (8005448 <HAL_I2C_Master_Transmit+0x208>)
 800531c:	9300      	str	r3, [sp, #0]
 800531e:	0023      	movs	r3, r4
 8005320:	f001 f988 	bl	8006634 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005324:	e061      	b.n	80053ea <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	0018      	movs	r0, r3
 800532e:	f000 ff7d 	bl	800622c <I2C_WaitOnTXISFlagUntilTimeout>
 8005332:	1e03      	subs	r3, r0, #0
 8005334:	d001      	beq.n	800533a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005336:	2301      	movs	r3, #1
 8005338:	e081      	b.n	800543e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800533e:	781a      	ldrb	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800534a:	1c5a      	adds	r2, r3, #1
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005354:	b29b      	uxth	r3, r3
 8005356:	3b01      	subs	r3, #1
 8005358:	b29a      	uxth	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005362:	3b01      	subs	r3, #1
 8005364:	b29a      	uxth	r2, r3
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d03a      	beq.n	80053ea <HAL_I2C_Master_Transmit+0x1aa>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005378:	2b00      	cmp	r3, #0
 800537a:	d136      	bne.n	80053ea <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800537c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	9300      	str	r3, [sp, #0]
 8005384:	0013      	movs	r3, r2
 8005386:	2200      	movs	r2, #0
 8005388:	2180      	movs	r1, #128	@ 0x80
 800538a:	f000 ff01 	bl	8006190 <I2C_WaitOnFlagUntilTimeout>
 800538e:	1e03      	subs	r3, r0, #0
 8005390:	d001      	beq.n	8005396 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e053      	b.n	800543e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800539a:	b29b      	uxth	r3, r3
 800539c:	2bff      	cmp	r3, #255	@ 0xff
 800539e:	d911      	bls.n	80053c4 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	22ff      	movs	r2, #255	@ 0xff
 80053a4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053aa:	b2da      	uxtb	r2, r3
 80053ac:	2380      	movs	r3, #128	@ 0x80
 80053ae:	045c      	lsls	r4, r3, #17
 80053b0:	230a      	movs	r3, #10
 80053b2:	18fb      	adds	r3, r7, r3
 80053b4:	8819      	ldrh	r1, [r3, #0]
 80053b6:	68f8      	ldr	r0, [r7, #12]
 80053b8:	2300      	movs	r3, #0
 80053ba:	9300      	str	r3, [sp, #0]
 80053bc:	0023      	movs	r3, r4
 80053be:	f001 f939 	bl	8006634 <I2C_TransferConfig>
 80053c2:	e012      	b.n	80053ea <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053c8:	b29a      	uxth	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053d2:	b2da      	uxtb	r2, r3
 80053d4:	2380      	movs	r3, #128	@ 0x80
 80053d6:	049c      	lsls	r4, r3, #18
 80053d8:	230a      	movs	r3, #10
 80053da:	18fb      	adds	r3, r7, r3
 80053dc:	8819      	ldrh	r1, [r3, #0]
 80053de:	68f8      	ldr	r0, [r7, #12]
 80053e0:	2300      	movs	r3, #0
 80053e2:	9300      	str	r3, [sp, #0]
 80053e4:	0023      	movs	r3, r4
 80053e6:	f001 f925 	bl	8006634 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053ee:	b29b      	uxth	r3, r3
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d198      	bne.n	8005326 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80053f4:	697a      	ldr	r2, [r7, #20]
 80053f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 ff5c 	bl	80062b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005400:	1e03      	subs	r3, r0, #0
 8005402:	d001      	beq.n	8005408 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e01a      	b.n	800543e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	2220      	movs	r2, #32
 800540e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	685a      	ldr	r2, [r3, #4]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	490c      	ldr	r1, [pc, #48]	@ (800544c <HAL_I2C_Master_Transmit+0x20c>)
 800541c:	400a      	ands	r2, r1
 800541e:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2241      	movs	r2, #65	@ 0x41
 8005424:	2120      	movs	r1, #32
 8005426:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2242      	movs	r2, #66	@ 0x42
 800542c:	2100      	movs	r1, #0
 800542e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2240      	movs	r2, #64	@ 0x40
 8005434:	2100      	movs	r1, #0
 8005436:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	0018      	movs	r0, r3
 8005440:	46bd      	mov	sp, r7
 8005442:	b007      	add	sp, #28
 8005444:	bd90      	pop	{r4, r7, pc}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	80002000 	.word	0x80002000
 800544c:	fe00e800 	.word	0xfe00e800

08005450 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b089      	sub	sp, #36	@ 0x24
 8005454:	af02      	add	r7, sp, #8
 8005456:	60f8      	str	r0, [r7, #12]
 8005458:	0008      	movs	r0, r1
 800545a:	607a      	str	r2, [r7, #4]
 800545c:	0019      	movs	r1, r3
 800545e:	230a      	movs	r3, #10
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	1c02      	adds	r2, r0, #0
 8005464:	801a      	strh	r2, [r3, #0]
 8005466:	2308      	movs	r3, #8
 8005468:	18fb      	adds	r3, r7, r3
 800546a:	1c0a      	adds	r2, r1, #0
 800546c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2241      	movs	r2, #65	@ 0x41
 8005472:	5c9b      	ldrb	r3, [r3, r2]
 8005474:	b2db      	uxtb	r3, r3
 8005476:	2b20      	cmp	r3, #32
 8005478:	d000      	beq.n	800547c <HAL_I2C_Master_Receive+0x2c>
 800547a:	e0e8      	b.n	800564e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2240      	movs	r2, #64	@ 0x40
 8005480:	5c9b      	ldrb	r3, [r3, r2]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_I2C_Master_Receive+0x3a>
 8005486:	2302      	movs	r3, #2
 8005488:	e0e2      	b.n	8005650 <HAL_I2C_Master_Receive+0x200>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2240      	movs	r2, #64	@ 0x40
 800548e:	2101      	movs	r1, #1
 8005490:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005492:	f7fe ff49 	bl	8004328 <HAL_GetTick>
 8005496:	0003      	movs	r3, r0
 8005498:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800549a:	2380      	movs	r3, #128	@ 0x80
 800549c:	0219      	lsls	r1, r3, #8
 800549e:	68f8      	ldr	r0, [r7, #12]
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	2319      	movs	r3, #25
 80054a6:	2201      	movs	r2, #1
 80054a8:	f000 fe72 	bl	8006190 <I2C_WaitOnFlagUntilTimeout>
 80054ac:	1e03      	subs	r3, r0, #0
 80054ae:	d001      	beq.n	80054b4 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 80054b0:	2301      	movs	r3, #1
 80054b2:	e0cd      	b.n	8005650 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2241      	movs	r2, #65	@ 0x41
 80054b8:	2122      	movs	r1, #34	@ 0x22
 80054ba:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	2242      	movs	r2, #66	@ 0x42
 80054c0:	2110      	movs	r1, #16
 80054c2:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	2200      	movs	r2, #0
 80054c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	687a      	ldr	r2, [r7, #4]
 80054ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2208      	movs	r2, #8
 80054d4:	18ba      	adds	r2, r7, r2
 80054d6:	8812      	ldrh	r2, [r2, #0]
 80054d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e4:	b29b      	uxth	r3, r3
 80054e6:	2bff      	cmp	r3, #255	@ 0xff
 80054e8:	d911      	bls.n	800550e <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	22ff      	movs	r2, #255	@ 0xff
 80054ee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	2380      	movs	r3, #128	@ 0x80
 80054f8:	045c      	lsls	r4, r3, #17
 80054fa:	230a      	movs	r3, #10
 80054fc:	18fb      	adds	r3, r7, r3
 80054fe:	8819      	ldrh	r1, [r3, #0]
 8005500:	68f8      	ldr	r0, [r7, #12]
 8005502:	4b55      	ldr	r3, [pc, #340]	@ (8005658 <HAL_I2C_Master_Receive+0x208>)
 8005504:	9300      	str	r3, [sp, #0]
 8005506:	0023      	movs	r3, r4
 8005508:	f001 f894 	bl	8006634 <I2C_TransferConfig>
 800550c:	e076      	b.n	80055fc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005512:	b29a      	uxth	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800551c:	b2da      	uxtb	r2, r3
 800551e:	2380      	movs	r3, #128	@ 0x80
 8005520:	049c      	lsls	r4, r3, #18
 8005522:	230a      	movs	r3, #10
 8005524:	18fb      	adds	r3, r7, r3
 8005526:	8819      	ldrh	r1, [r3, #0]
 8005528:	68f8      	ldr	r0, [r7, #12]
 800552a:	4b4b      	ldr	r3, [pc, #300]	@ (8005658 <HAL_I2C_Master_Receive+0x208>)
 800552c:	9300      	str	r3, [sp, #0]
 800552e:	0023      	movs	r3, r4
 8005530:	f001 f880 	bl	8006634 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005534:	e062      	b.n	80055fc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	0018      	movs	r0, r3
 800553e:	f000 feff 	bl	8006340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005542:	1e03      	subs	r3, r0, #0
 8005544:	d001      	beq.n	800554a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e082      	b.n	8005650 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005580:	b29b      	uxth	r3, r3
 8005582:	2b00      	cmp	r3, #0
 8005584:	d03a      	beq.n	80055fc <HAL_I2C_Master_Receive+0x1ac>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800558a:	2b00      	cmp	r3, #0
 800558c:	d136      	bne.n	80055fc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800558e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005590:	68f8      	ldr	r0, [r7, #12]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	0013      	movs	r3, r2
 8005598:	2200      	movs	r2, #0
 800559a:	2180      	movs	r1, #128	@ 0x80
 800559c:	f000 fdf8 	bl	8006190 <I2C_WaitOnFlagUntilTimeout>
 80055a0:	1e03      	subs	r3, r0, #0
 80055a2:	d001      	beq.n	80055a8 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e053      	b.n	8005650 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	2bff      	cmp	r3, #255	@ 0xff
 80055b0:	d911      	bls.n	80055d6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	22ff      	movs	r2, #255	@ 0xff
 80055b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055bc:	b2da      	uxtb	r2, r3
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	045c      	lsls	r4, r3, #17
 80055c2:	230a      	movs	r3, #10
 80055c4:	18fb      	adds	r3, r7, r3
 80055c6:	8819      	ldrh	r1, [r3, #0]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	2300      	movs	r3, #0
 80055cc:	9300      	str	r3, [sp, #0]
 80055ce:	0023      	movs	r3, r4
 80055d0:	f001 f830 	bl	8006634 <I2C_TransferConfig>
 80055d4:	e012      	b.n	80055fc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055da:	b29a      	uxth	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e4:	b2da      	uxtb	r2, r3
 80055e6:	2380      	movs	r3, #128	@ 0x80
 80055e8:	049c      	lsls	r4, r3, #18
 80055ea:	230a      	movs	r3, #10
 80055ec:	18fb      	adds	r3, r7, r3
 80055ee:	8819      	ldrh	r1, [r3, #0]
 80055f0:	68f8      	ldr	r0, [r7, #12]
 80055f2:	2300      	movs	r3, #0
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	0023      	movs	r3, r4
 80055f8:	f001 f81c 	bl	8006634 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005600:	b29b      	uxth	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d197      	bne.n	8005536 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005606:	697a      	ldr	r2, [r7, #20]
 8005608:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	0018      	movs	r0, r3
 800560e:	f000 fe53 	bl	80062b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005612:	1e03      	subs	r3, r0, #0
 8005614:	d001      	beq.n	800561a <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e01a      	b.n	8005650 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	2220      	movs	r2, #32
 8005620:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	685a      	ldr	r2, [r3, #4]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	490b      	ldr	r1, [pc, #44]	@ (800565c <HAL_I2C_Master_Receive+0x20c>)
 800562e:	400a      	ands	r2, r1
 8005630:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2241      	movs	r2, #65	@ 0x41
 8005636:	2120      	movs	r1, #32
 8005638:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2242      	movs	r2, #66	@ 0x42
 800563e:	2100      	movs	r1, #0
 8005640:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2240      	movs	r2, #64	@ 0x40
 8005646:	2100      	movs	r1, #0
 8005648:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	e000      	b.n	8005650 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800564e:	2302      	movs	r3, #2
  }
}
 8005650:	0018      	movs	r0, r3
 8005652:	46bd      	mov	sp, r7
 8005654:	b007      	add	sp, #28
 8005656:	bd90      	pop	{r4, r7, pc}
 8005658:	80002400 	.word	0x80002400
 800565c:	fe00e800 	.word	0xfe00e800

08005660 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800567c:	2b00      	cmp	r3, #0
 800567e:	d005      	beq.n	800568c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	68f9      	ldr	r1, [r7, #12]
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	4798      	blx	r3
  }
}
 800568c:	46c0      	nop			@ (mov r8, r8)
 800568e:	46bd      	mov	sp, r7
 8005690:	b004      	add	sp, #16
 8005692:	bd80      	pop	{r7, pc}

08005694 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	699b      	ldr	r3, [r3, #24]
 80056a2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056ac:	697a      	ldr	r2, [r7, #20]
 80056ae:	2380      	movs	r3, #128	@ 0x80
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	4013      	ands	r3, r2
 80056b4:	d00e      	beq.n	80056d4 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2280      	movs	r2, #128	@ 0x80
 80056ba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80056bc:	d00a      	beq.n	80056d4 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056c2:	2201      	movs	r2, #1
 80056c4:	431a      	orrs	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2280      	movs	r2, #128	@ 0x80
 80056d0:	0052      	lsls	r2, r2, #1
 80056d2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	2380      	movs	r3, #128	@ 0x80
 80056d8:	00db      	lsls	r3, r3, #3
 80056da:	4013      	ands	r3, r2
 80056dc:	d00e      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80056de:	693b      	ldr	r3, [r7, #16]
 80056e0:	2280      	movs	r2, #128	@ 0x80
 80056e2:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80056e4:	d00a      	beq.n	80056fc <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ea:	2208      	movs	r2, #8
 80056ec:	431a      	orrs	r2, r3
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2280      	movs	r2, #128	@ 0x80
 80056f8:	00d2      	lsls	r2, r2, #3
 80056fa:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	2380      	movs	r3, #128	@ 0x80
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4013      	ands	r3, r2
 8005704:	d00e      	beq.n	8005724 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	2280      	movs	r2, #128	@ 0x80
 800570a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800570c:	d00a      	beq.n	8005724 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005712:	2202      	movs	r2, #2
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	2280      	movs	r2, #128	@ 0x80
 8005720:	0092      	lsls	r2, r2, #2
 8005722:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005728:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	220b      	movs	r2, #11
 800572e:	4013      	ands	r3, r2
 8005730:	d005      	beq.n	800573e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	0011      	movs	r1, r2
 8005738:	0018      	movs	r0, r3
 800573a:	f000 fbbd 	bl	8005eb8 <I2C_ITError>
  }
}
 800573e:	46c0      	nop			@ (mov r8, r8)
 8005740:	46bd      	mov	sp, r7
 8005742:	b006      	add	sp, #24
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800574e:	46c0      	nop			@ (mov r8, r8)
 8005750:	46bd      	mov	sp, r7
 8005752:	b002      	add	sp, #8
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b082      	sub	sp, #8
 800575a:	af00      	add	r7, sp, #0
 800575c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800575e:	46c0      	nop			@ (mov r8, r8)
 8005760:	46bd      	mov	sp, r7
 8005762:	b002      	add	sp, #8
 8005764:	bd80      	pop	{r7, pc}

08005766 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005766:	b580      	push	{r7, lr}
 8005768:	b082      	sub	sp, #8
 800576a:	af00      	add	r7, sp, #0
 800576c:	6078      	str	r0, [r7, #4]
 800576e:	0008      	movs	r0, r1
 8005770:	0011      	movs	r1, r2
 8005772:	1cfb      	adds	r3, r7, #3
 8005774:	1c02      	adds	r2, r0, #0
 8005776:	701a      	strb	r2, [r3, #0]
 8005778:	003b      	movs	r3, r7
 800577a:	1c0a      	adds	r2, r1, #0
 800577c:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	46bd      	mov	sp, r7
 8005782:	b002      	add	sp, #8
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800578e:	46c0      	nop			@ (mov r8, r8)
 8005790:	46bd      	mov	sp, r7
 8005792:	b002      	add	sp, #8
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800579e:	46c0      	nop			@ (mov r8, r8)
 80057a0:	46bd      	mov	sp, r7
 80057a2:	b002      	add	sp, #8
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80057ae:	46c0      	nop			@ (mov r8, r8)
 80057b0:	46bd      	mov	sp, r7
 80057b2:	b002      	add	sp, #8
 80057b4:	bd80      	pop	{r7, pc}
	...

080057b8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	60f8      	str	r0, [r7, #12]
 80057c0:	60b9      	str	r1, [r7, #8]
 80057c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2240      	movs	r2, #64	@ 0x40
 80057d2:	5c9b      	ldrb	r3, [r3, r2]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d101      	bne.n	80057dc <I2C_Slave_ISR_IT+0x24>
 80057d8:	2302      	movs	r3, #2
 80057da:	e0e6      	b.n	80059aa <I2C_Slave_ISR_IT+0x1f2>
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	2240      	movs	r2, #64	@ 0x40
 80057e0:	2101      	movs	r1, #1
 80057e2:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	2220      	movs	r2, #32
 80057e8:	4013      	ands	r3, r2
 80057ea:	d009      	beq.n	8005800 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2220      	movs	r2, #32
 80057f0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80057f2:	d005      	beq.n	8005800 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80057f4:	693a      	ldr	r2, [r7, #16]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	0011      	movs	r1, r2
 80057fa:	0018      	movs	r0, r3
 80057fc:	f000 f9e4 	bl	8005bc8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	2210      	movs	r2, #16
 8005804:	4013      	ands	r3, r2
 8005806:	d052      	beq.n	80058ae <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2210      	movs	r2, #16
 800580c:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800580e:	d04e      	beq.n	80058ae <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005814:	b29b      	uxth	r3, r3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d12d      	bne.n	8005876 <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2241      	movs	r2, #65	@ 0x41
 800581e:	5c9b      	ldrb	r3, [r3, r2]
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b28      	cmp	r3, #40	@ 0x28
 8005824:	d10b      	bne.n	800583e <I2C_Slave_ISR_IT+0x86>
 8005826:	697a      	ldr	r2, [r7, #20]
 8005828:	2380      	movs	r3, #128	@ 0x80
 800582a:	049b      	lsls	r3, r3, #18
 800582c:	429a      	cmp	r2, r3
 800582e:	d106      	bne.n	800583e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005830:	693a      	ldr	r2, [r7, #16]
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	0011      	movs	r1, r2
 8005836:	0018      	movs	r0, r3
 8005838:	f000 fae6 	bl	8005e08 <I2C_ITListenCplt>
 800583c:	e036      	b.n	80058ac <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2241      	movs	r2, #65	@ 0x41
 8005842:	5c9b      	ldrb	r3, [r3, r2]
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b29      	cmp	r3, #41	@ 0x29
 8005848:	d110      	bne.n	800586c <I2C_Slave_ISR_IT+0xb4>
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	4a59      	ldr	r2, [pc, #356]	@ (80059b4 <I2C_Slave_ISR_IT+0x1fc>)
 800584e:	4293      	cmp	r3, r2
 8005850:	d00c      	beq.n	800586c <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	2210      	movs	r2, #16
 8005858:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	0018      	movs	r0, r3
 800585e:	f000 fc56 	bl	800610e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	0018      	movs	r0, r3
 8005866:	f000 f94b 	bl	8005b00 <I2C_ITSlaveSeqCplt>
 800586a:	e01f      	b.n	80058ac <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	2210      	movs	r2, #16
 8005872:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005874:	e091      	b.n	800599a <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2210      	movs	r2, #16
 800587c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005882:	2204      	movs	r2, #4
 8005884:	431a      	orrs	r2, r3
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d005      	beq.n	800589c <I2C_Slave_ISR_IT+0xe4>
 8005890:	697a      	ldr	r2, [r7, #20]
 8005892:	2380      	movs	r3, #128	@ 0x80
 8005894:	045b      	lsls	r3, r3, #17
 8005896:	429a      	cmp	r2, r3
 8005898:	d000      	beq.n	800589c <I2C_Slave_ISR_IT+0xe4>
 800589a:	e07e      	b.n	800599a <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	0011      	movs	r1, r2
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 fb07 	bl	8005eb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80058aa:	e076      	b.n	800599a <I2C_Slave_ISR_IT+0x1e2>
 80058ac:	e075      	b.n	800599a <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	2204      	movs	r2, #4
 80058b2:	4013      	ands	r3, r2
 80058b4:	d02f      	beq.n	8005916 <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2204      	movs	r2, #4
 80058ba:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80058bc:	d02b      	beq.n	8005916 <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d018      	beq.n	80058fa <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	b2d2      	uxtb	r2, r2
 80058d4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058da:	1c5a      	adds	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	3b01      	subs	r3, #1
 80058f4:	b29a      	uxth	r2, r3
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	2b00      	cmp	r3, #0
 8005902:	d14c      	bne.n	800599e <I2C_Slave_ISR_IT+0x1e6>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	4a2b      	ldr	r2, [pc, #172]	@ (80059b4 <I2C_Slave_ISR_IT+0x1fc>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d048      	beq.n	800599e <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f8f6 	bl	8005b00 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005914:	e043      	b.n	800599e <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005916:	693b      	ldr	r3, [r7, #16]
 8005918:	2208      	movs	r2, #8
 800591a:	4013      	ands	r3, r2
 800591c:	d00a      	beq.n	8005934 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2208      	movs	r2, #8
 8005922:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005924:	d006      	beq.n	8005934 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	0011      	movs	r1, r2
 800592c:	0018      	movs	r0, r3
 800592e:	f000 f843 	bl	80059b8 <I2C_ITAddrCplt>
 8005932:	e035      	b.n	80059a0 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	2202      	movs	r2, #2
 8005938:	4013      	ands	r3, r2
 800593a:	d031      	beq.n	80059a0 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005942:	d02d      	beq.n	80059a0 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005948:	b29b      	uxth	r3, r3
 800594a:	2b00      	cmp	r3, #0
 800594c:	d018      	beq.n	8005980 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005952:	781a      	ldrb	r2, [r3, #0]
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595e:	1c5a      	adds	r2, r3, #1
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005968:	b29b      	uxth	r3, r3
 800596a:	3b01      	subs	r3, #1
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005976:	3b01      	subs	r3, #1
 8005978:	b29a      	uxth	r2, r3
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	851a      	strh	r2, [r3, #40]	@ 0x28
 800597e:	e00f      	b.n	80059a0 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	2380      	movs	r3, #128	@ 0x80
 8005984:	045b      	lsls	r3, r3, #17
 8005986:	429a      	cmp	r2, r3
 8005988:	d002      	beq.n	8005990 <I2C_Slave_ISR_IT+0x1d8>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d107      	bne.n	80059a0 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	0018      	movs	r0, r3
 8005994:	f000 f8b4 	bl	8005b00 <I2C_ITSlaveSeqCplt>
 8005998:	e002      	b.n	80059a0 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	e000      	b.n	80059a0 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800599e:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	2240      	movs	r2, #64	@ 0x40
 80059a4:	2100      	movs	r1, #0
 80059a6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b006      	add	sp, #24
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			@ (mov r8, r8)
 80059b4:	ffff0000 	.word	0xffff0000

080059b8 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80059b8:	b5b0      	push	{r4, r5, r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2241      	movs	r2, #65	@ 0x41
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	001a      	movs	r2, r3
 80059cc:	2328      	movs	r3, #40	@ 0x28
 80059ce:	4013      	ands	r3, r2
 80059d0:	2b28      	cmp	r3, #40	@ 0x28
 80059d2:	d000      	beq.n	80059d6 <I2C_ITAddrCplt+0x1e>
 80059d4:	e088      	b.n	8005ae8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	0c1b      	lsrs	r3, r3, #16
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	250f      	movs	r5, #15
 80059e2:	197b      	adds	r3, r7, r5
 80059e4:	2101      	movs	r1, #1
 80059e6:	400a      	ands	r2, r1
 80059e8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699b      	ldr	r3, [r3, #24]
 80059f0:	0c1b      	lsrs	r3, r3, #16
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	200c      	movs	r0, #12
 80059f6:	183b      	adds	r3, r7, r0
 80059f8:	21fe      	movs	r1, #254	@ 0xfe
 80059fa:	400a      	ands	r2, r1
 80059fc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	b29a      	uxth	r2, r3
 8005a06:	240a      	movs	r4, #10
 8005a08:	193b      	adds	r3, r7, r4
 8005a0a:	0592      	lsls	r2, r2, #22
 8005a0c:	0d92      	lsrs	r2, r2, #22
 8005a0e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	2308      	movs	r3, #8
 8005a1a:	18fb      	adds	r3, r7, r3
 8005a1c:	21fe      	movs	r1, #254	@ 0xfe
 8005a1e:	400a      	ands	r2, r1
 8005a20:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68db      	ldr	r3, [r3, #12]
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d148      	bne.n	8005abc <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005a2a:	0021      	movs	r1, r4
 8005a2c:	187b      	adds	r3, r7, r1
 8005a2e:	881b      	ldrh	r3, [r3, #0]
 8005a30:	09db      	lsrs	r3, r3, #7
 8005a32:	b29a      	uxth	r2, r3
 8005a34:	183b      	adds	r3, r7, r0
 8005a36:	881b      	ldrh	r3, [r3, #0]
 8005a38:	4053      	eors	r3, r2
 8005a3a:	b29b      	uxth	r3, r3
 8005a3c:	001a      	movs	r2, r3
 8005a3e:	2306      	movs	r3, #6
 8005a40:	4013      	ands	r3, r2
 8005a42:	d120      	bne.n	8005a86 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8005a44:	183b      	adds	r3, r7, r0
 8005a46:	187a      	adds	r2, r7, r1
 8005a48:	8812      	ldrh	r2, [r2, #0]
 8005a4a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a50:	1c5a      	adds	r2, r3, #1
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a5a:	2b02      	cmp	r3, #2
 8005a5c:	d14c      	bne.n	8005af8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	2208      	movs	r2, #8
 8005a6a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2240      	movs	r2, #64	@ 0x40
 8005a70:	2100      	movs	r1, #0
 8005a72:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005a74:	183b      	adds	r3, r7, r0
 8005a76:	881a      	ldrh	r2, [r3, #0]
 8005a78:	197b      	adds	r3, r7, r5
 8005a7a:	7819      	ldrb	r1, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f7ff fe71 	bl	8005766 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005a84:	e038      	b.n	8005af8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8005a86:	240c      	movs	r4, #12
 8005a88:	193b      	adds	r3, r7, r4
 8005a8a:	2208      	movs	r2, #8
 8005a8c:	18ba      	adds	r2, r7, r2
 8005a8e:	8812      	ldrh	r2, [r2, #0]
 8005a90:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005a92:	2380      	movs	r3, #128	@ 0x80
 8005a94:	021a      	lsls	r2, r3, #8
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	0011      	movs	r1, r2
 8005a9a:	0018      	movs	r0, r3
 8005a9c:	f000 fe04 	bl	80066a8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2240      	movs	r2, #64	@ 0x40
 8005aa4:	2100      	movs	r1, #0
 8005aa6:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005aa8:	193b      	adds	r3, r7, r4
 8005aaa:	881a      	ldrh	r2, [r3, #0]
 8005aac:	230f      	movs	r3, #15
 8005aae:	18fb      	adds	r3, r7, r3
 8005ab0:	7819      	ldrb	r1, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f7ff fe56 	bl	8005766 <HAL_I2C_AddrCallback>
}
 8005aba:	e01d      	b.n	8005af8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005abc:	2380      	movs	r3, #128	@ 0x80
 8005abe:	021a      	lsls	r2, r3, #8
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	0011      	movs	r1, r2
 8005ac4:	0018      	movs	r0, r3
 8005ac6:	f000 fdef 	bl	80066a8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2240      	movs	r2, #64	@ 0x40
 8005ace:	2100      	movs	r1, #0
 8005ad0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	18fb      	adds	r3, r7, r3
 8005ad6:	881a      	ldrh	r2, [r3, #0]
 8005ad8:	230f      	movs	r3, #15
 8005ada:	18fb      	adds	r3, r7, r3
 8005adc:	7819      	ldrb	r1, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	0018      	movs	r0, r3
 8005ae2:	f7ff fe40 	bl	8005766 <HAL_I2C_AddrCallback>
}
 8005ae6:	e007      	b.n	8005af8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2208      	movs	r2, #8
 8005aee:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2240      	movs	r2, #64	@ 0x40
 8005af4:	2100      	movs	r1, #0
 8005af6:	5499      	strb	r1, [r3, r2]
}
 8005af8:	46c0      	nop			@ (mov r8, r8)
 8005afa:	46bd      	mov	sp, r7
 8005afc:	b004      	add	sp, #16
 8005afe:	bdb0      	pop	{r4, r5, r7, pc}

08005b00 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2242      	movs	r2, #66	@ 0x42
 8005b14:	2100      	movs	r1, #0
 8005b16:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005b18:	68fa      	ldr	r2, [r7, #12]
 8005b1a:	2380      	movs	r3, #128	@ 0x80
 8005b1c:	01db      	lsls	r3, r3, #7
 8005b1e:	4013      	ands	r3, r2
 8005b20:	d008      	beq.n	8005b34 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4924      	ldr	r1, [pc, #144]	@ (8005bc0 <I2C_ITSlaveSeqCplt+0xc0>)
 8005b2e:	400a      	ands	r2, r1
 8005b30:	601a      	str	r2, [r3, #0]
 8005b32:	e00c      	b.n	8005b4e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005b34:	68fa      	ldr	r2, [r7, #12]
 8005b36:	2380      	movs	r3, #128	@ 0x80
 8005b38:	021b      	lsls	r3, r3, #8
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	d007      	beq.n	8005b4e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681a      	ldr	r2, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	491e      	ldr	r1, [pc, #120]	@ (8005bc4 <I2C_ITSlaveSeqCplt+0xc4>)
 8005b4a:	400a      	ands	r2, r1
 8005b4c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2241      	movs	r2, #65	@ 0x41
 8005b52:	5c9b      	ldrb	r3, [r3, r2]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	2b29      	cmp	r3, #41	@ 0x29
 8005b58:	d114      	bne.n	8005b84 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2241      	movs	r2, #65	@ 0x41
 8005b5e:	2128      	movs	r1, #40	@ 0x28
 8005b60:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2221      	movs	r2, #33	@ 0x21
 8005b66:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f000 fd9b 	bl	80066a8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2240      	movs	r2, #64	@ 0x40
 8005b76:	2100      	movs	r1, #0
 8005b78:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	0018      	movs	r0, r3
 8005b7e:	f7ff fde2 	bl	8005746 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005b82:	e019      	b.n	8005bb8 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2241      	movs	r2, #65	@ 0x41
 8005b88:	5c9b      	ldrb	r3, [r3, r2]
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005b8e:	d113      	bne.n	8005bb8 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2241      	movs	r2, #65	@ 0x41
 8005b94:	2128      	movs	r1, #40	@ 0x28
 8005b96:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2222      	movs	r2, #34	@ 0x22
 8005b9c:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2102      	movs	r1, #2
 8005ba2:	0018      	movs	r0, r3
 8005ba4:	f000 fd80 	bl	80066a8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2240      	movs	r2, #64	@ 0x40
 8005bac:	2100      	movs	r1, #0
 8005bae:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	0018      	movs	r0, r3
 8005bb4:	f7ff fdcf 	bl	8005756 <HAL_I2C_SlaveRxCpltCallback>
}
 8005bb8:	46c0      	nop			@ (mov r8, r8)
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	b004      	add	sp, #16
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	ffffbfff 	.word	0xffffbfff
 8005bc4:	ffff7fff 	.word	0xffff7fff

08005bc8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b086      	sub	sp, #24
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005bde:	200f      	movs	r0, #15
 8005be0:	183b      	adds	r3, r7, r0
 8005be2:	687a      	ldr	r2, [r7, #4]
 8005be4:	2141      	movs	r1, #65	@ 0x41
 8005be6:	5c52      	ldrb	r2, [r2, r1]
 8005be8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005bf2:	183b      	adds	r3, r7, r0
 8005bf4:	781b      	ldrb	r3, [r3, #0]
 8005bf6:	2b21      	cmp	r3, #33	@ 0x21
 8005bf8:	d003      	beq.n	8005c02 <I2C_ITSlaveCplt+0x3a>
 8005bfa:	183b      	adds	r3, r7, r0
 8005bfc:	781b      	ldrb	r3, [r3, #0]
 8005bfe:	2b29      	cmp	r3, #41	@ 0x29
 8005c00:	d109      	bne.n	8005c16 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005c02:	4a7b      	ldr	r2, [pc, #492]	@ (8005df0 <I2C_ITSlaveCplt+0x228>)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	0011      	movs	r1, r2
 8005c08:	0018      	movs	r0, r3
 8005c0a:	f000 fd4d 	bl	80066a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2221      	movs	r2, #33	@ 0x21
 8005c12:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c14:	e011      	b.n	8005c3a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005c16:	220f      	movs	r2, #15
 8005c18:	18bb      	adds	r3, r7, r2
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b22      	cmp	r3, #34	@ 0x22
 8005c1e:	d003      	beq.n	8005c28 <I2C_ITSlaveCplt+0x60>
 8005c20:	18bb      	adds	r3, r7, r2
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c26:	d108      	bne.n	8005c3a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005c28:	4a72      	ldr	r2, [pc, #456]	@ (8005df4 <I2C_ITSlaveCplt+0x22c>)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	0011      	movs	r1, r2
 8005c2e:	0018      	movs	r0, r3
 8005c30:	f000 fd3a 	bl	80066a8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2222      	movs	r2, #34	@ 0x22
 8005c38:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	685a      	ldr	r2, [r3, #4]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2180      	movs	r1, #128	@ 0x80
 8005c46:	0209      	lsls	r1, r1, #8
 8005c48:	430a      	orrs	r2, r1
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	4968      	ldr	r1, [pc, #416]	@ (8005df8 <I2C_ITSlaveCplt+0x230>)
 8005c58:	400a      	ands	r2, r1
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	0018      	movs	r0, r3
 8005c60:	f000 fa55 	bl	800610e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	2380      	movs	r3, #128	@ 0x80
 8005c68:	01db      	lsls	r3, r3, #7
 8005c6a:	4013      	ands	r3, r2
 8005c6c:	d013      	beq.n	8005c96 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681a      	ldr	r2, [r3, #0]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4960      	ldr	r1, [pc, #384]	@ (8005dfc <I2C_ITSlaveCplt+0x234>)
 8005c7a:	400a      	ands	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d01f      	beq.n	8005cc6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c94:	e017      	b.n	8005cc6 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005c96:	693a      	ldr	r2, [r7, #16]
 8005c98:	2380      	movs	r3, #128	@ 0x80
 8005c9a:	021b      	lsls	r3, r3, #8
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	d012      	beq.n	8005cc6 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	681a      	ldr	r2, [r3, #0]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4955      	ldr	r1, [pc, #340]	@ (8005e00 <I2C_ITSlaveCplt+0x238>)
 8005cac:	400a      	ands	r2, r1
 8005cae:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d006      	beq.n	8005cc6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	685b      	ldr	r3, [r3, #4]
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	2204      	movs	r2, #4
 8005cca:	4013      	ands	r3, r2
 8005ccc:	d020      	beq.n	8005d10 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	2204      	movs	r2, #4
 8005cd2:	4393      	bics	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce0:	b2d2      	uxtb	r2, r2
 8005ce2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00c      	beq.n	8005d10 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	b29a      	uxth	r2, r3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	3b01      	subs	r3, #1
 8005d0a:	b29a      	uxth	r2, r3
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d005      	beq.n	8005d26 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d1e:	2204      	movs	r2, #4
 8005d20:	431a      	orrs	r2, r3
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2242      	movs	r2, #66	@ 0x42
 8005d2a:	2100      	movs	r1, #0
 8005d2c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d013      	beq.n	8005d64 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	0011      	movs	r1, r2
 8005d44:	0018      	movs	r0, r3
 8005d46:	f000 f8b7 	bl	8005eb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	2241      	movs	r2, #65	@ 0x41
 8005d4e:	5c9b      	ldrb	r3, [r3, r2]
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b28      	cmp	r3, #40	@ 0x28
 8005d54:	d147      	bne.n	8005de6 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	0011      	movs	r1, r2
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	f000 f853 	bl	8005e08 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005d62:	e040      	b.n	8005de6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d68:	4a26      	ldr	r2, [pc, #152]	@ (8005e04 <I2C_ITSlaveCplt+0x23c>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d016      	beq.n	8005d9c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	0018      	movs	r0, r3
 8005d72:	f7ff fec5 	bl	8005b00 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a22      	ldr	r2, [pc, #136]	@ (8005e04 <I2C_ITSlaveCplt+0x23c>)
 8005d7a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2241      	movs	r2, #65	@ 0x41
 8005d80:	2120      	movs	r1, #32
 8005d82:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2240      	movs	r2, #64	@ 0x40
 8005d8e:	2100      	movs	r1, #0
 8005d90:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	0018      	movs	r0, r3
 8005d96:	f7ff fcf6 	bl	8005786 <HAL_I2C_ListenCpltCallback>
}
 8005d9a:	e024      	b.n	8005de6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2241      	movs	r2, #65	@ 0x41
 8005da0:	5c9b      	ldrb	r3, [r3, r2]
 8005da2:	b2db      	uxtb	r3, r3
 8005da4:	2b22      	cmp	r3, #34	@ 0x22
 8005da6:	d10f      	bne.n	8005dc8 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2241      	movs	r2, #65	@ 0x41
 8005dac:	2120      	movs	r1, #32
 8005dae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2240      	movs	r2, #64	@ 0x40
 8005dba:	2100      	movs	r1, #0
 8005dbc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	0018      	movs	r0, r3
 8005dc2:	f7ff fcc8 	bl	8005756 <HAL_I2C_SlaveRxCpltCallback>
}
 8005dc6:	e00e      	b.n	8005de6 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2241      	movs	r2, #65	@ 0x41
 8005dcc:	2120      	movs	r1, #32
 8005dce:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2240      	movs	r2, #64	@ 0x40
 8005dda:	2100      	movs	r1, #0
 8005ddc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	0018      	movs	r0, r3
 8005de2:	f7ff fcb0 	bl	8005746 <HAL_I2C_SlaveTxCpltCallback>
}
 8005de6:	46c0      	nop			@ (mov r8, r8)
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b006      	add	sp, #24
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	46c0      	nop			@ (mov r8, r8)
 8005df0:	00008001 	.word	0x00008001
 8005df4:	00008002 	.word	0x00008002
 8005df8:	fe00e800 	.word	0xfe00e800
 8005dfc:	ffffbfff 	.word	0xffffbfff
 8005e00:	ffff7fff 	.word	0xffff7fff
 8005e04:	ffff0000 	.word	0xffff0000

08005e08 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	4a26      	ldr	r2, [pc, #152]	@ (8005eb0 <I2C_ITListenCplt+0xa8>)
 8005e16:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2241      	movs	r2, #65	@ 0x41
 8005e22:	2120      	movs	r1, #32
 8005e24:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2242      	movs	r2, #66	@ 0x42
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	2204      	movs	r2, #4
 8005e38:	4013      	ands	r3, r2
 8005e3a:	d022      	beq.n	8005e82 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e46:	b2d2      	uxtb	r2, r2
 8005e48:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e4e:	1c5a      	adds	r2, r3, #1
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d012      	beq.n	8005e82 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e60:	3b01      	subs	r3, #1
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	b29a      	uxth	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e7a:	2204      	movs	r2, #4
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005e82:	4a0c      	ldr	r2, [pc, #48]	@ (8005eb4 <I2C_ITListenCplt+0xac>)
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	0011      	movs	r1, r2
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f000 fc0d 	bl	80066a8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2210      	movs	r2, #16
 8005e94:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2240      	movs	r2, #64	@ 0x40
 8005e9a:	2100      	movs	r1, #0
 8005e9c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	0018      	movs	r0, r3
 8005ea2:	f7ff fc70 	bl	8005786 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8005ea6:	46c0      	nop			@ (mov r8, r8)
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	b002      	add	sp, #8
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	46c0      	nop			@ (mov r8, r8)
 8005eb0:	ffff0000 	.word	0xffff0000
 8005eb4:	00008003 	.word	0x00008003

08005eb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005ec2:	200f      	movs	r0, #15
 8005ec4:	183b      	adds	r3, r7, r0
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	2141      	movs	r1, #65	@ 0x41
 8005eca:	5c52      	ldrb	r2, [r2, r1]
 8005ecc:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2242      	movs	r2, #66	@ 0x42
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a72      	ldr	r2, [pc, #456]	@ (80060a4 <I2C_ITError+0x1ec>)
 8005eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2200      	movs	r2, #0
 8005ee0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	431a      	orrs	r2, r3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8005eee:	183b      	adds	r3, r7, r0
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b28      	cmp	r3, #40	@ 0x28
 8005ef4:	d007      	beq.n	8005f06 <I2C_ITError+0x4e>
 8005ef6:	183b      	adds	r3, r7, r0
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b29      	cmp	r3, #41	@ 0x29
 8005efc:	d003      	beq.n	8005f06 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8005efe:	183b      	adds	r3, r7, r0
 8005f00:	781b      	ldrb	r3, [r3, #0]
 8005f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f04:	d10c      	bne.n	8005f20 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2103      	movs	r1, #3
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 fbcc 	bl	80066a8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2241      	movs	r2, #65	@ 0x41
 8005f14:	2128      	movs	r1, #40	@ 0x28
 8005f16:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	4a63      	ldr	r2, [pc, #396]	@ (80060a8 <I2C_ITError+0x1f0>)
 8005f1c:	635a      	str	r2, [r3, #52]	@ 0x34
 8005f1e:	e032      	b.n	8005f86 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8005f20:	4a62      	ldr	r2, [pc, #392]	@ (80060ac <I2C_ITError+0x1f4>)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	0011      	movs	r1, r2
 8005f26:	0018      	movs	r0, r3
 8005f28:	f000 fbbe 	bl	80066a8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	0018      	movs	r0, r3
 8005f30:	f000 f8ed 	bl	800610e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2241      	movs	r2, #65	@ 0x41
 8005f38:	5c9b      	ldrb	r3, [r3, r2]
 8005f3a:	b2db      	uxtb	r3, r3
 8005f3c:	2b60      	cmp	r3, #96	@ 0x60
 8005f3e:	d01f      	beq.n	8005f80 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2241      	movs	r2, #65	@ 0x41
 8005f44:	2120      	movs	r1, #32
 8005f46:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b20      	cmp	r3, #32
 8005f54:	d114      	bne.n	8005f80 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2210      	movs	r2, #16
 8005f5e:	4013      	ands	r3, r2
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d109      	bne.n	8005f78 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2210      	movs	r2, #16
 8005f6a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f70:	2204      	movs	r2, #4
 8005f72:	431a      	orrs	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2220      	movs	r2, #32
 8005f7e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2200      	movs	r2, #0
 8005f84:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d03b      	beq.n	800600c <I2C_ITError+0x154>
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	2b11      	cmp	r3, #17
 8005f98:	d002      	beq.n	8005fa0 <I2C_ITError+0xe8>
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	2b21      	cmp	r3, #33	@ 0x21
 8005f9e:	d135      	bne.n	800600c <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	2380      	movs	r3, #128	@ 0x80
 8005fa8:	01db      	lsls	r3, r3, #7
 8005faa:	401a      	ands	r2, r3
 8005fac:	2380      	movs	r3, #128	@ 0x80
 8005fae:	01db      	lsls	r3, r3, #7
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d107      	bne.n	8005fc4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681a      	ldr	r2, [r3, #0]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	493c      	ldr	r1, [pc, #240]	@ (80060b0 <I2C_ITError+0x1f8>)
 8005fc0:	400a      	ands	r2, r1
 8005fc2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7fe fec8 	bl	8004d5e <HAL_DMA_GetState>
 8005fce:	0003      	movs	r3, r0
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d016      	beq.n	8006002 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fd8:	4a36      	ldr	r2, [pc, #216]	@ (80060b4 <I2C_ITError+0x1fc>)
 8005fda:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2240      	movs	r2, #64	@ 0x40
 8005fe0:	2100      	movs	r1, #0
 8005fe2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fe8:	0018      	movs	r0, r3
 8005fea:	f7fe fe73 	bl	8004cd4 <HAL_DMA_Abort_IT>
 8005fee:	1e03      	subs	r3, r0, #0
 8005ff0:	d051      	beq.n	8006096 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffc:	0018      	movs	r0, r3
 8005ffe:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006000:	e049      	b.n	8006096 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	0018      	movs	r0, r3
 8006006:	f000 f859 	bl	80060bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800600a:	e044      	b.n	8006096 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006010:	2b00      	cmp	r3, #0
 8006012:	d03b      	beq.n	800608c <I2C_ITError+0x1d4>
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	2b12      	cmp	r3, #18
 8006018:	d002      	beq.n	8006020 <I2C_ITError+0x168>
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b22      	cmp	r3, #34	@ 0x22
 800601e:	d135      	bne.n	800608c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	2380      	movs	r3, #128	@ 0x80
 8006028:	021b      	lsls	r3, r3, #8
 800602a:	401a      	ands	r2, r3
 800602c:	2380      	movs	r3, #128	@ 0x80
 800602e:	021b      	lsls	r3, r3, #8
 8006030:	429a      	cmp	r2, r3
 8006032:	d107      	bne.n	8006044 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	491e      	ldr	r1, [pc, #120]	@ (80060b8 <I2C_ITError+0x200>)
 8006040:	400a      	ands	r2, r1
 8006042:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006048:	0018      	movs	r0, r3
 800604a:	f7fe fe88 	bl	8004d5e <HAL_DMA_GetState>
 800604e:	0003      	movs	r3, r0
 8006050:	2b01      	cmp	r3, #1
 8006052:	d016      	beq.n	8006082 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006058:	4a16      	ldr	r2, [pc, #88]	@ (80060b4 <I2C_ITError+0x1fc>)
 800605a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2240      	movs	r2, #64	@ 0x40
 8006060:	2100      	movs	r1, #0
 8006062:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006068:	0018      	movs	r0, r3
 800606a:	f7fe fe33 	bl	8004cd4 <HAL_DMA_Abort_IT>
 800606e:	1e03      	subs	r3, r0, #0
 8006070:	d013      	beq.n	800609a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800607c:	0018      	movs	r0, r3
 800607e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006080:	e00b      	b.n	800609a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	0018      	movs	r0, r3
 8006086:	f000 f819 	bl	80060bc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800608a:	e006      	b.n	800609a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	0018      	movs	r0, r3
 8006090:	f000 f814 	bl	80060bc <I2C_TreatErrorCallback>
  }
}
 8006094:	e002      	b.n	800609c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006096:	46c0      	nop			@ (mov r8, r8)
 8006098:	e000      	b.n	800609c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800609a:	46c0      	nop			@ (mov r8, r8)
}
 800609c:	46c0      	nop			@ (mov r8, r8)
 800609e:	46bd      	mov	sp, r7
 80060a0:	b004      	add	sp, #16
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	ffff0000 	.word	0xffff0000
 80060a8:	080057b9 	.word	0x080057b9
 80060ac:	00008003 	.word	0x00008003
 80060b0:	ffffbfff 	.word	0xffffbfff
 80060b4:	08006153 	.word	0x08006153
 80060b8:	ffff7fff 	.word	0xffff7fff

080060bc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80060bc:	b580      	push	{r7, lr}
 80060be:	b082      	sub	sp, #8
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2241      	movs	r2, #65	@ 0x41
 80060c8:	5c9b      	ldrb	r3, [r3, r2]
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b60      	cmp	r3, #96	@ 0x60
 80060ce:	d10f      	bne.n	80060f0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2241      	movs	r2, #65	@ 0x41
 80060d4:	2120      	movs	r1, #32
 80060d6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2240      	movs	r2, #64	@ 0x40
 80060e2:	2100      	movs	r1, #0
 80060e4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	0018      	movs	r0, r3
 80060ea:	f7ff fb5c 	bl	80057a6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060ee:	e00a      	b.n	8006106 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2240      	movs	r2, #64	@ 0x40
 80060fa:	2100      	movs	r1, #0
 80060fc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	0018      	movs	r0, r3
 8006102:	f7ff fb48 	bl	8005796 <HAL_I2C_ErrorCallback>
}
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	46bd      	mov	sp, r7
 800610a:	b002      	add	sp, #8
 800610c:	bd80      	pop	{r7, pc}

0800610e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800610e:	b580      	push	{r7, lr}
 8006110:	b082      	sub	sp, #8
 8006112:	af00      	add	r7, sp, #0
 8006114:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	2202      	movs	r2, #2
 800611e:	4013      	ands	r3, r2
 8006120:	2b02      	cmp	r3, #2
 8006122:	d103      	bne.n	800612c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	2200      	movs	r2, #0
 800612a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	2201      	movs	r2, #1
 8006134:	4013      	ands	r3, r2
 8006136:	2b01      	cmp	r3, #1
 8006138:	d007      	beq.n	800614a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	699a      	ldr	r2, [r3, #24]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2101      	movs	r1, #1
 8006146:	430a      	orrs	r2, r1
 8006148:	619a      	str	r2, [r3, #24]
  }
}
 800614a:	46c0      	nop			@ (mov r8, r8)
 800614c:	46bd      	mov	sp, r7
 800614e:	b002      	add	sp, #8
 8006150:	bd80      	pop	{r7, pc}

08006152 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006152:	b580      	push	{r7, lr}
 8006154:	b084      	sub	sp, #16
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800615e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006164:	2b00      	cmp	r3, #0
 8006166:	d003      	beq.n	8006170 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800616c:	2200      	movs	r2, #0
 800616e:	635a      	str	r2, [r3, #52]	@ 0x34
  }
  if (hi2c->hdmarx != NULL)
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006174:	2b00      	cmp	r3, #0
 8006176:	d003      	beq.n	8006180 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800617c:	2200      	movs	r2, #0
 800617e:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  I2C_TreatErrorCallback(hi2c);
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0018      	movs	r0, r3
 8006184:	f7ff ff9a 	bl	80060bc <I2C_TreatErrorCallback>
}
 8006188:	46c0      	nop			@ (mov r8, r8)
 800618a:	46bd      	mov	sp, r7
 800618c:	b004      	add	sp, #16
 800618e:	bd80      	pop	{r7, pc}

08006190 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	603b      	str	r3, [r7, #0]
 800619c:	1dfb      	adds	r3, r7, #7
 800619e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061a0:	e030      	b.n	8006204 <I2C_WaitOnFlagUntilTimeout+0x74>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	3301      	adds	r3, #1
 80061a6:	d02d      	beq.n	8006204 <I2C_WaitOnFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a8:	f7fe f8be 	bl	8004328 <HAL_GetTick>
 80061ac:	0002      	movs	r2, r0
 80061ae:	69bb      	ldr	r3, [r7, #24]
 80061b0:	1ad3      	subs	r3, r2, r3
 80061b2:	683a      	ldr	r2, [r7, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d302      	bcc.n	80061be <I2C_WaitOnFlagUntilTimeout+0x2e>
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d122      	bne.n	8006204 <I2C_WaitOnFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699b      	ldr	r3, [r3, #24]
 80061c4:	68ba      	ldr	r2, [r7, #8]
 80061c6:	4013      	ands	r3, r2
 80061c8:	68ba      	ldr	r2, [r7, #8]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	425a      	negs	r2, r3
 80061ce:	4153      	adcs	r3, r2
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	001a      	movs	r2, r3
 80061d4:	1dfb      	adds	r3, r7, #7
 80061d6:	781b      	ldrb	r3, [r3, #0]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d113      	bne.n	8006204 <I2C_WaitOnFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061e0:	2220      	movs	r2, #32
 80061e2:	431a      	orrs	r2, r3
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2241      	movs	r2, #65	@ 0x41
 80061ec:	2120      	movs	r1, #32
 80061ee:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2242      	movs	r2, #66	@ 0x42
 80061f4:	2100      	movs	r1, #0
 80061f6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2240      	movs	r2, #64	@ 0x40
 80061fc:	2100      	movs	r1, #0
 80061fe:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e00f      	b.n	8006224 <I2C_WaitOnFlagUntilTimeout+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	68ba      	ldr	r2, [r7, #8]
 800620c:	4013      	ands	r3, r2
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	1ad3      	subs	r3, r2, r3
 8006212:	425a      	negs	r2, r3
 8006214:	4153      	adcs	r3, r2
 8006216:	b2db      	uxtb	r3, r3
 8006218:	001a      	movs	r2, r3
 800621a:	1dfb      	adds	r3, r7, #7
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	429a      	cmp	r2, r3
 8006220:	d0bf      	beq.n	80061a2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	0018      	movs	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	b004      	add	sp, #16
 800622a:	bd80      	pop	{r7, pc}

0800622c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	60f8      	str	r0, [r7, #12]
 8006234:	60b9      	str	r1, [r7, #8]
 8006236:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006238:	e032      	b.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	68b9      	ldr	r1, [r7, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	0018      	movs	r0, r3
 8006242:	f000 f8ff 	bl	8006444 <I2C_IsErrorOccurred>
 8006246:	1e03      	subs	r3, r0, #0
 8006248:	d001      	beq.n	800624e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e030      	b.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	3301      	adds	r3, #1
 8006252:	d025      	beq.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fe f868 	bl	8004328 <HAL_GetTick>
 8006258:	0002      	movs	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11a      	bne.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	2202      	movs	r2, #2
 8006272:	4013      	ands	r3, r2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d013      	beq.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627c:	2220      	movs	r2, #32
 800627e:	431a      	orrs	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2241      	movs	r2, #65	@ 0x41
 8006288:	2120      	movs	r1, #32
 800628a:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2242      	movs	r2, #66	@ 0x42
 8006290:	2100      	movs	r1, #0
 8006292:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2240      	movs	r2, #64	@ 0x40
 8006298:	2100      	movs	r1, #0
 800629a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e007      	b.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	2202      	movs	r2, #2
 80062a8:	4013      	ands	r3, r2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d1c5      	bne.n	800623a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	0018      	movs	r0, r3
 80062b2:	46bd      	mov	sp, r7
 80062b4:	b004      	add	sp, #16
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062c4:	e02f      	b.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	0018      	movs	r0, r3
 80062ce:	f000 f8b9 	bl	8006444 <I2C_IsErrorOccurred>
 80062d2:	1e03      	subs	r3, r0, #0
 80062d4:	d001      	beq.n	80062da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e02d      	b.n	8006336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062da:	f7fe f825 	bl	8004328 <HAL_GetTick>
 80062de:	0002      	movs	r2, r0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d302      	bcc.n	80062f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11a      	bne.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2220      	movs	r2, #32
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d013      	beq.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006302:	2220      	movs	r2, #32
 8006304:	431a      	orrs	r2, r3
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2241      	movs	r2, #65	@ 0x41
 800630e:	2120      	movs	r1, #32
 8006310:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2242      	movs	r2, #66	@ 0x42
 8006316:	2100      	movs	r1, #0
 8006318:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2240      	movs	r2, #64	@ 0x40
 800631e:	2100      	movs	r1, #0
 8006320:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e007      	b.n	8006336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2220      	movs	r2, #32
 800632e:	4013      	ands	r3, r2
 8006330:	2b20      	cmp	r3, #32
 8006332:	d1c8      	bne.n	80062c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	0018      	movs	r0, r3
 8006338:	46bd      	mov	sp, r7
 800633a:	b004      	add	sp, #16
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800634c:	e06b      	b.n	8006426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68b9      	ldr	r1, [r7, #8]
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	0018      	movs	r0, r3
 8006356:	f000 f875 	bl	8006444 <I2C_IsErrorOccurred>
 800635a:	1e03      	subs	r3, r0, #0
 800635c:	d001      	beq.n	8006362 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e069      	b.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	699b      	ldr	r3, [r3, #24]
 8006368:	2220      	movs	r2, #32
 800636a:	4013      	ands	r3, r2
 800636c:	2b20      	cmp	r3, #32
 800636e:	d138      	bne.n	80063e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	2204      	movs	r2, #4
 8006378:	4013      	ands	r3, r2
 800637a:	2b04      	cmp	r3, #4
 800637c:	d105      	bne.n	800638a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006382:	2b00      	cmp	r3, #0
 8006384:	d001      	beq.n	800638a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8006386:	2300      	movs	r3, #0
 8006388:	e055      	b.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	699b      	ldr	r3, [r3, #24]
 8006390:	2210      	movs	r2, #16
 8006392:	4013      	ands	r3, r2
 8006394:	2b10      	cmp	r3, #16
 8006396:	d107      	bne.n	80063a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	2210      	movs	r2, #16
 800639e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2204      	movs	r2, #4
 80063a4:	645a      	str	r2, [r3, #68]	@ 0x44
 80063a6:	e002      	b.n	80063ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	2220      	movs	r2, #32
 80063b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	491f      	ldr	r1, [pc, #124]	@ (8006440 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 80063c2:	400a      	ands	r2, r1
 80063c4:	605a      	str	r2, [r3, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	2241      	movs	r2, #65	@ 0x41
 80063ca:	2120      	movs	r1, #32
 80063cc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2242      	movs	r2, #66	@ 0x42
 80063d2:	2100      	movs	r1, #0
 80063d4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2240      	movs	r2, #64	@ 0x40
 80063da:	2100      	movs	r1, #0
 80063dc:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	e029      	b.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063e2:	f7fd ffa1 	bl	8004328 <HAL_GetTick>
 80063e6:	0002      	movs	r2, r0
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d302      	bcc.n	80063f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d116      	bne.n	8006426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	2204      	movs	r2, #4
 8006400:	4013      	ands	r3, r2
 8006402:	2b04      	cmp	r3, #4
 8006404:	d00f      	beq.n	8006426 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800640a:	2220      	movs	r2, #32
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2241      	movs	r2, #65	@ 0x41
 8006416:	2120      	movs	r1, #32
 8006418:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2240      	movs	r2, #64	@ 0x40
 800641e:	2100      	movs	r1, #0
 8006420:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e007      	b.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	699b      	ldr	r3, [r3, #24]
 800642c:	2204      	movs	r2, #4
 800642e:	4013      	ands	r3, r2
 8006430:	2b04      	cmp	r3, #4
 8006432:	d18c      	bne.n	800634e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006434:	2300      	movs	r3, #0
}
 8006436:	0018      	movs	r0, r3
 8006438:	46bd      	mov	sp, r7
 800643a:	b004      	add	sp, #16
 800643c:	bd80      	pop	{r7, pc}
 800643e:	46c0      	nop			@ (mov r8, r8)
 8006440:	fe00e800 	.word	0xfe00e800

08006444 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b08a      	sub	sp, #40	@ 0x28
 8006448:	af00      	add	r7, sp, #0
 800644a:	60f8      	str	r0, [r7, #12]
 800644c:	60b9      	str	r1, [r7, #8]
 800644e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006450:	2327      	movs	r3, #39	@ 0x27
 8006452:	18fb      	adds	r3, r7, r3
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	699b      	ldr	r3, [r3, #24]
 800645e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006460:	2300      	movs	r3, #0
 8006462:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	2210      	movs	r2, #16
 800646c:	4013      	ands	r3, r2
 800646e:	d100      	bne.n	8006472 <I2C_IsErrorOccurred+0x2e>
 8006470:	e079      	b.n	8006566 <I2C_IsErrorOccurred+0x122>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2210      	movs	r2, #16
 8006478:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800647a:	e057      	b.n	800652c <I2C_IsErrorOccurred+0xe8>
 800647c:	2227      	movs	r2, #39	@ 0x27
 800647e:	18bb      	adds	r3, r7, r2
 8006480:	18ba      	adds	r2, r7, r2
 8006482:	7812      	ldrb	r2, [r2, #0]
 8006484:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	3301      	adds	r3, #1
 800648a:	d04f      	beq.n	800652c <I2C_IsErrorOccurred+0xe8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800648c:	f7fd ff4c 	bl	8004328 <HAL_GetTick>
 8006490:	0002      	movs	r2, r0
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	1ad3      	subs	r3, r2, r3
 8006496:	68ba      	ldr	r2, [r7, #8]
 8006498:	429a      	cmp	r2, r3
 800649a:	d302      	bcc.n	80064a2 <I2C_IsErrorOccurred+0x5e>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d144      	bne.n	800652c <I2C_IsErrorOccurred+0xe8>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	685a      	ldr	r2, [r3, #4]
 80064a8:	2380      	movs	r3, #128	@ 0x80
 80064aa:	01db      	lsls	r3, r3, #7
 80064ac:	4013      	ands	r3, r2
 80064ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064b0:	2013      	movs	r0, #19
 80064b2:	183b      	adds	r3, r7, r0
 80064b4:	68fa      	ldr	r2, [r7, #12]
 80064b6:	2142      	movs	r1, #66	@ 0x42
 80064b8:	5c52      	ldrb	r2, [r2, r1]
 80064ba:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	699a      	ldr	r2, [r3, #24]
 80064c2:	2380      	movs	r3, #128	@ 0x80
 80064c4:	021b      	lsls	r3, r3, #8
 80064c6:	401a      	ands	r2, r3
 80064c8:	2380      	movs	r3, #128	@ 0x80
 80064ca:	021b      	lsls	r3, r3, #8
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d126      	bne.n	800651e <I2C_IsErrorOccurred+0xda>
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	2380      	movs	r3, #128	@ 0x80
 80064d4:	01db      	lsls	r3, r3, #7
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d021      	beq.n	800651e <I2C_IsErrorOccurred+0xda>
              (tmp1 != I2C_CR2_STOP) && \
 80064da:	183b      	adds	r3, r7, r0
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d01d      	beq.n	800651e <I2C_IsErrorOccurred+0xda>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685a      	ldr	r2, [r3, #4]
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2180      	movs	r1, #128	@ 0x80
 80064ee:	01c9      	lsls	r1, r1, #7
 80064f0:	430a      	orrs	r2, r1
 80064f2:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064f4:	f7fd ff18 	bl	8004328 <HAL_GetTick>
 80064f8:	0003      	movs	r3, r0
 80064fa:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064fc:	e00f      	b.n	800651e <I2C_IsErrorOccurred+0xda>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064fe:	f7fd ff13 	bl	8004328 <HAL_GetTick>
 8006502:	0002      	movs	r2, r0
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	1ad3      	subs	r3, r2, r3
 8006508:	2b19      	cmp	r3, #25
 800650a:	d908      	bls.n	800651e <I2C_IsErrorOccurred+0xda>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	2220      	movs	r2, #32
 8006510:	4313      	orrs	r3, r2
 8006512:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8006514:	2327      	movs	r3, #39	@ 0x27
 8006516:	18fb      	adds	r3, r7, r3
 8006518:	2201      	movs	r2, #1
 800651a:	701a      	strb	r2, [r3, #0]

              break;
 800651c:	e006      	b.n	800652c <I2C_IsErrorOccurred+0xe8>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	699b      	ldr	r3, [r3, #24]
 8006524:	2220      	movs	r2, #32
 8006526:	4013      	ands	r3, r2
 8006528:	2b20      	cmp	r3, #32
 800652a:	d1e8      	bne.n	80064fe <I2C_IsErrorOccurred+0xba>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	2220      	movs	r2, #32
 8006534:	4013      	ands	r3, r2
 8006536:	2b20      	cmp	r3, #32
 8006538:	d004      	beq.n	8006544 <I2C_IsErrorOccurred+0x100>
 800653a:	2327      	movs	r3, #39	@ 0x27
 800653c:	18fb      	adds	r3, r7, r3
 800653e:	781b      	ldrb	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d09b      	beq.n	800647c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006544:	2327      	movs	r3, #39	@ 0x27
 8006546:	18fb      	adds	r3, r7, r3
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <I2C_IsErrorOccurred+0x112>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2220      	movs	r2, #32
 8006554:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006556:	6a3b      	ldr	r3, [r7, #32]
 8006558:	2204      	movs	r2, #4
 800655a:	4313      	orrs	r3, r2
 800655c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800655e:	2327      	movs	r3, #39	@ 0x27
 8006560:	18fb      	adds	r3, r7, r3
 8006562:	2201      	movs	r2, #1
 8006564:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699b      	ldr	r3, [r3, #24]
 800656c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800656e:	69ba      	ldr	r2, [r7, #24]
 8006570:	2380      	movs	r3, #128	@ 0x80
 8006572:	005b      	lsls	r3, r3, #1
 8006574:	4013      	ands	r3, r2
 8006576:	d00c      	beq.n	8006592 <I2C_IsErrorOccurred+0x14e>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	2201      	movs	r2, #1
 800657c:	4313      	orrs	r3, r2
 800657e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2280      	movs	r2, #128	@ 0x80
 8006586:	0052      	lsls	r2, r2, #1
 8006588:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800658a:	2327      	movs	r3, #39	@ 0x27
 800658c:	18fb      	adds	r3, r7, r3
 800658e:	2201      	movs	r2, #1
 8006590:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006592:	69ba      	ldr	r2, [r7, #24]
 8006594:	2380      	movs	r3, #128	@ 0x80
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	4013      	ands	r3, r2
 800659a:	d00c      	beq.n	80065b6 <I2C_IsErrorOccurred+0x172>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800659c:	6a3b      	ldr	r3, [r7, #32]
 800659e:	2208      	movs	r2, #8
 80065a0:	4313      	orrs	r3, r2
 80065a2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	2280      	movs	r2, #128	@ 0x80
 80065aa:	00d2      	lsls	r2, r2, #3
 80065ac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065ae:	2327      	movs	r3, #39	@ 0x27
 80065b0:	18fb      	adds	r3, r7, r3
 80065b2:	2201      	movs	r2, #1
 80065b4:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065b6:	69ba      	ldr	r2, [r7, #24]
 80065b8:	2380      	movs	r3, #128	@ 0x80
 80065ba:	009b      	lsls	r3, r3, #2
 80065bc:	4013      	ands	r3, r2
 80065be:	d00c      	beq.n	80065da <I2C_IsErrorOccurred+0x196>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	2202      	movs	r2, #2
 80065c4:	4313      	orrs	r3, r2
 80065c6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2280      	movs	r2, #128	@ 0x80
 80065ce:	0092      	lsls	r2, r2, #2
 80065d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065d2:	2327      	movs	r3, #39	@ 0x27
 80065d4:	18fb      	adds	r3, r7, r3
 80065d6:	2201      	movs	r2, #1
 80065d8:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 80065da:	2327      	movs	r3, #39	@ 0x27
 80065dc:	18fb      	adds	r3, r7, r3
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01d      	beq.n	8006620 <I2C_IsErrorOccurred+0x1dc>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	0018      	movs	r0, r3
 80065e8:	f7ff fd91 	bl	800610e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	685a      	ldr	r2, [r3, #4]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	490e      	ldr	r1, [pc, #56]	@ (8006630 <I2C_IsErrorOccurred+0x1ec>)
 80065f8:	400a      	ands	r2, r1
 80065fa:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006600:	6a3b      	ldr	r3, [r7, #32]
 8006602:	431a      	orrs	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2241      	movs	r2, #65	@ 0x41
 800660c:	2120      	movs	r1, #32
 800660e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2242      	movs	r2, #66	@ 0x42
 8006614:	2100      	movs	r1, #0
 8006616:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2240      	movs	r2, #64	@ 0x40
 800661c:	2100      	movs	r1, #0
 800661e:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8006620:	2327      	movs	r3, #39	@ 0x27
 8006622:	18fb      	adds	r3, r7, r3
 8006624:	781b      	ldrb	r3, [r3, #0]
}
 8006626:	0018      	movs	r0, r3
 8006628:	46bd      	mov	sp, r7
 800662a:	b00a      	add	sp, #40	@ 0x28
 800662c:	bd80      	pop	{r7, pc}
 800662e:	46c0      	nop			@ (mov r8, r8)
 8006630:	fe00e800 	.word	0xfe00e800

08006634 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006634:	b590      	push	{r4, r7, lr}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	60f8      	str	r0, [r7, #12]
 800663c:	0008      	movs	r0, r1
 800663e:	0011      	movs	r1, r2
 8006640:	607b      	str	r3, [r7, #4]
 8006642:	240a      	movs	r4, #10
 8006644:	193b      	adds	r3, r7, r4
 8006646:	1c02      	adds	r2, r0, #0
 8006648:	801a      	strh	r2, [r3, #0]
 800664a:	2009      	movs	r0, #9
 800664c:	183b      	adds	r3, r7, r0
 800664e:	1c0a      	adds	r2, r1, #0
 8006650:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006652:	193b      	adds	r3, r7, r4
 8006654:	881b      	ldrh	r3, [r3, #0]
 8006656:	059b      	lsls	r3, r3, #22
 8006658:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800665a:	183b      	adds	r3, r7, r0
 800665c:	781b      	ldrb	r3, [r3, #0]
 800665e:	0419      	lsls	r1, r3, #16
 8006660:	23ff      	movs	r3, #255	@ 0xff
 8006662:	041b      	lsls	r3, r3, #16
 8006664:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006666:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800666c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666e:	4313      	orrs	r3, r2
 8006670:	005b      	lsls	r3, r3, #1
 8006672:	085b      	lsrs	r3, r3, #1
 8006674:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800667e:	0d51      	lsrs	r1, r2, #21
 8006680:	2280      	movs	r2, #128	@ 0x80
 8006682:	00d2      	lsls	r2, r2, #3
 8006684:	400a      	ands	r2, r1
 8006686:	4907      	ldr	r1, [pc, #28]	@ (80066a4 <I2C_TransferConfig+0x70>)
 8006688:	430a      	orrs	r2, r1
 800668a:	43d2      	mvns	r2, r2
 800668c:	401a      	ands	r2, r3
 800668e:	0011      	movs	r1, r2
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	430a      	orrs	r2, r1
 8006698:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800669a:	46c0      	nop			@ (mov r8, r8)
 800669c:	46bd      	mov	sp, r7
 800669e:	b007      	add	sp, #28
 80066a0:	bd90      	pop	{r4, r7, pc}
 80066a2:	46c0      	nop			@ (mov r8, r8)
 80066a4:	03ff63ff 	.word	0x03ff63ff

080066a8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b084      	sub	sp, #16
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	000a      	movs	r2, r1
 80066b2:	1cbb      	adds	r3, r7, #2
 80066b4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 80066b6:	2300      	movs	r3, #0
 80066b8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80066ba:	1cbb      	adds	r3, r7, #2
 80066bc:	881b      	ldrh	r3, [r3, #0]
 80066be:	2201      	movs	r2, #1
 80066c0:	4013      	ands	r3, r2
 80066c2:	d010      	beq.n	80066e6 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2242      	movs	r2, #66	@ 0x42
 80066c8:	4313      	orrs	r3, r2
 80066ca:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2241      	movs	r2, #65	@ 0x41
 80066d0:	5c9b      	ldrb	r3, [r3, r2]
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	001a      	movs	r2, r3
 80066d6:	2328      	movs	r3, #40	@ 0x28
 80066d8:	4013      	ands	r3, r2
 80066da:	2b28      	cmp	r3, #40	@ 0x28
 80066dc:	d003      	beq.n	80066e6 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	22b0      	movs	r2, #176	@ 0xb0
 80066e2:	4313      	orrs	r3, r2
 80066e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80066e6:	1cbb      	adds	r3, r7, #2
 80066e8:	881b      	ldrh	r3, [r3, #0]
 80066ea:	2202      	movs	r2, #2
 80066ec:	4013      	ands	r3, r2
 80066ee:	d010      	beq.n	8006712 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	2244      	movs	r2, #68	@ 0x44
 80066f4:	4313      	orrs	r3, r2
 80066f6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2241      	movs	r2, #65	@ 0x41
 80066fc:	5c9b      	ldrb	r3, [r3, r2]
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	001a      	movs	r2, r3
 8006702:	2328      	movs	r3, #40	@ 0x28
 8006704:	4013      	ands	r3, r2
 8006706:	2b28      	cmp	r3, #40	@ 0x28
 8006708:	d003      	beq.n	8006712 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	22b0      	movs	r2, #176	@ 0xb0
 800670e:	4313      	orrs	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006712:	1cbb      	adds	r3, r7, #2
 8006714:	2200      	movs	r2, #0
 8006716:	5e9b      	ldrsh	r3, [r3, r2]
 8006718:	2b00      	cmp	r3, #0
 800671a:	da03      	bge.n	8006724 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	22b8      	movs	r2, #184	@ 0xb8
 8006720:	4313      	orrs	r3, r2
 8006722:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006724:	1cbb      	adds	r3, r7, #2
 8006726:	881b      	ldrh	r3, [r3, #0]
 8006728:	2b10      	cmp	r3, #16
 800672a:	d103      	bne.n	8006734 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2290      	movs	r2, #144	@ 0x90
 8006730:	4313      	orrs	r3, r2
 8006732:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006734:	1cbb      	adds	r3, r7, #2
 8006736:	881b      	ldrh	r3, [r3, #0]
 8006738:	2b20      	cmp	r3, #32
 800673a:	d103      	bne.n	8006744 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2220      	movs	r2, #32
 8006740:	4313      	orrs	r3, r2
 8006742:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8006744:	1cbb      	adds	r3, r7, #2
 8006746:	881b      	ldrh	r3, [r3, #0]
 8006748:	2b40      	cmp	r3, #64	@ 0x40
 800674a:	d103      	bne.n	8006754 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2240      	movs	r2, #64	@ 0x40
 8006750:	4313      	orrs	r3, r2
 8006752:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	43d9      	mvns	r1, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	400a      	ands	r2, r1
 8006764:	601a      	str	r2, [r3, #0]
}
 8006766:	46c0      	nop			@ (mov r8, r8)
 8006768:	46bd      	mov	sp, r7
 800676a:	b004      	add	sp, #16
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
 8006778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2241      	movs	r2, #65	@ 0x41
 800677e:	5c9b      	ldrb	r3, [r3, r2]
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b20      	cmp	r3, #32
 8006784:	d138      	bne.n	80067f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2240      	movs	r2, #64	@ 0x40
 800678a:	5c9b      	ldrb	r3, [r3, r2]
 800678c:	2b01      	cmp	r3, #1
 800678e:	d101      	bne.n	8006794 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006790:	2302      	movs	r3, #2
 8006792:	e032      	b.n	80067fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2240      	movs	r2, #64	@ 0x40
 8006798:	2101      	movs	r1, #1
 800679a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2241      	movs	r2, #65	@ 0x41
 80067a0:	2124      	movs	r1, #36	@ 0x24
 80067a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	681a      	ldr	r2, [r3, #0]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2101      	movs	r1, #1
 80067b0:	438a      	bics	r2, r1
 80067b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4911      	ldr	r1, [pc, #68]	@ (8006804 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80067c0:	400a      	ands	r2, r1
 80067c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	6819      	ldr	r1, [r3, #0]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	683a      	ldr	r2, [r7, #0]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2101      	movs	r1, #1
 80067e0:	430a      	orrs	r2, r1
 80067e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2241      	movs	r2, #65	@ 0x41
 80067e8:	2120      	movs	r1, #32
 80067ea:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2240      	movs	r2, #64	@ 0x40
 80067f0:	2100      	movs	r1, #0
 80067f2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80067f4:	2300      	movs	r3, #0
 80067f6:	e000      	b.n	80067fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80067f8:	2302      	movs	r3, #2
  }
}
 80067fa:	0018      	movs	r0, r3
 80067fc:	46bd      	mov	sp, r7
 80067fe:	b002      	add	sp, #8
 8006800:	bd80      	pop	{r7, pc}
 8006802:	46c0      	nop			@ (mov r8, r8)
 8006804:	ffffefff 	.word	0xffffefff

08006808 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2241      	movs	r2, #65	@ 0x41
 8006816:	5c9b      	ldrb	r3, [r3, r2]
 8006818:	b2db      	uxtb	r3, r3
 800681a:	2b20      	cmp	r3, #32
 800681c:	d139      	bne.n	8006892 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2240      	movs	r2, #64	@ 0x40
 8006822:	5c9b      	ldrb	r3, [r3, r2]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d101      	bne.n	800682c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006828:	2302      	movs	r3, #2
 800682a:	e033      	b.n	8006894 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2240      	movs	r2, #64	@ 0x40
 8006830:	2101      	movs	r1, #1
 8006832:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2241      	movs	r2, #65	@ 0x41
 8006838:	2124      	movs	r1, #36	@ 0x24
 800683a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	681a      	ldr	r2, [r3, #0]
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2101      	movs	r1, #1
 8006848:	438a      	bics	r2, r1
 800684a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4a11      	ldr	r2, [pc, #68]	@ (800689c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8006858:	4013      	ands	r3, r2
 800685a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	021b      	lsls	r3, r3, #8
 8006860:	68fa      	ldr	r2, [r7, #12]
 8006862:	4313      	orrs	r3, r2
 8006864:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2101      	movs	r1, #1
 800687a:	430a      	orrs	r2, r1
 800687c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2241      	movs	r2, #65	@ 0x41
 8006882:	2120      	movs	r1, #32
 8006884:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2240      	movs	r2, #64	@ 0x40
 800688a:	2100      	movs	r1, #0
 800688c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	e000      	b.n	8006894 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006892:	2302      	movs	r3, #2
  }
}
 8006894:	0018      	movs	r0, r3
 8006896:	46bd      	mov	sp, r7
 8006898:	b004      	add	sp, #16
 800689a:	bd80      	pop	{r7, pc}
 800689c:	fffff0ff 	.word	0xfffff0ff

080068a0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80068a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80068a2:	b08b      	sub	sp, #44	@ 0x2c
 80068a4:	af06      	add	r7, sp, #24
 80068a6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d101      	bne.n	80068b2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e0f0      	b.n	8006a94 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a79      	ldr	r2, [pc, #484]	@ (8006a9c <HAL_PCD_Init+0x1fc>)
 80068b6:	5c9b      	ldrb	r3, [r3, r2]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d108      	bne.n	80068d0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80068be:	687a      	ldr	r2, [r7, #4]
 80068c0:	23aa      	movs	r3, #170	@ 0xaa
 80068c2:	009b      	lsls	r3, r3, #2
 80068c4:	2100      	movs	r1, #0
 80068c6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	0018      	movs	r0, r3
 80068cc:	f007 fc1c 	bl	800e108 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a72      	ldr	r2, [pc, #456]	@ (8006a9c <HAL_PCD_Init+0x1fc>)
 80068d4:	2103      	movs	r1, #3
 80068d6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	0018      	movs	r0, r3
 80068de:	f003 fc9d 	bl	800a21c <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80068e2:	230f      	movs	r3, #15
 80068e4:	18fb      	adds	r3, r7, r3
 80068e6:	2200      	movs	r2, #0
 80068e8:	701a      	strb	r2, [r3, #0]
 80068ea:	e049      	b.n	8006980 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80068ec:	200f      	movs	r0, #15
 80068ee:	183b      	adds	r3, r7, r0
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	6879      	ldr	r1, [r7, #4]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	0013      	movs	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	189b      	adds	r3, r3, r2
 80068fc:	00db      	lsls	r3, r3, #3
 80068fe:	18cb      	adds	r3, r1, r3
 8006900:	3301      	adds	r3, #1
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006906:	183b      	adds	r3, r7, r0
 8006908:	781b      	ldrb	r3, [r3, #0]
 800690a:	6879      	ldr	r1, [r7, #4]
 800690c:	1c5a      	adds	r2, r3, #1
 800690e:	0013      	movs	r3, r2
 8006910:	009b      	lsls	r3, r3, #2
 8006912:	189b      	adds	r3, r3, r2
 8006914:	00db      	lsls	r3, r3, #3
 8006916:	183a      	adds	r2, r7, r0
 8006918:	7812      	ldrb	r2, [r2, #0]
 800691a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800691c:	183b      	adds	r3, r7, r0
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	6879      	ldr	r1, [r7, #4]
 8006922:	1c5a      	adds	r2, r3, #1
 8006924:	0013      	movs	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	189b      	adds	r3, r3, r2
 800692a:	00db      	lsls	r3, r3, #3
 800692c:	18cb      	adds	r3, r1, r3
 800692e:	3303      	adds	r3, #3
 8006930:	2200      	movs	r2, #0
 8006932:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006934:	183b      	adds	r3, r7, r0
 8006936:	781a      	ldrb	r2, [r3, #0]
 8006938:	6879      	ldr	r1, [r7, #4]
 800693a:	0013      	movs	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	189b      	adds	r3, r3, r2
 8006940:	00db      	lsls	r3, r3, #3
 8006942:	18cb      	adds	r3, r1, r3
 8006944:	3338      	adds	r3, #56	@ 0x38
 8006946:	2200      	movs	r2, #0
 8006948:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800694a:	183b      	adds	r3, r7, r0
 800694c:	781a      	ldrb	r2, [r3, #0]
 800694e:	6879      	ldr	r1, [r7, #4]
 8006950:	0013      	movs	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	189b      	adds	r3, r3, r2
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	18cb      	adds	r3, r1, r3
 800695a:	333c      	adds	r3, #60	@ 0x3c
 800695c:	2200      	movs	r2, #0
 800695e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006960:	183b      	adds	r3, r7, r0
 8006962:	781a      	ldrb	r2, [r3, #0]
 8006964:	6879      	ldr	r1, [r7, #4]
 8006966:	0013      	movs	r3, r2
 8006968:	009b      	lsls	r3, r3, #2
 800696a:	189b      	adds	r3, r3, r2
 800696c:	00db      	lsls	r3, r3, #3
 800696e:	18cb      	adds	r3, r1, r3
 8006970:	3340      	adds	r3, #64	@ 0x40
 8006972:	2200      	movs	r2, #0
 8006974:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006976:	183b      	adds	r3, r7, r0
 8006978:	781a      	ldrb	r2, [r3, #0]
 800697a:	183b      	adds	r3, r7, r0
 800697c:	3201      	adds	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
 8006980:	210f      	movs	r1, #15
 8006982:	187b      	adds	r3, r7, r1
 8006984:	781a      	ldrb	r2, [r3, #0]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	429a      	cmp	r2, r3
 800698c:	d3ae      	bcc.n	80068ec <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800698e:	187b      	adds	r3, r7, r1
 8006990:	2200      	movs	r2, #0
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	e056      	b.n	8006a44 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006996:	240f      	movs	r4, #15
 8006998:	193b      	adds	r3, r7, r4
 800699a:	781a      	ldrb	r2, [r3, #0]
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	236a      	movs	r3, #106	@ 0x6a
 80069a0:	33ff      	adds	r3, #255	@ 0xff
 80069a2:	0019      	movs	r1, r3
 80069a4:	0013      	movs	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	189b      	adds	r3, r3, r2
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	18c3      	adds	r3, r0, r3
 80069ae:	185b      	adds	r3, r3, r1
 80069b0:	2200      	movs	r2, #0
 80069b2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80069b4:	193b      	adds	r3, r7, r4
 80069b6:	781a      	ldrb	r2, [r3, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	23b4      	movs	r3, #180	@ 0xb4
 80069bc:	0059      	lsls	r1, r3, #1
 80069be:	0013      	movs	r3, r2
 80069c0:	009b      	lsls	r3, r3, #2
 80069c2:	189b      	adds	r3, r3, r2
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	18c3      	adds	r3, r0, r3
 80069c8:	185b      	adds	r3, r3, r1
 80069ca:	193a      	adds	r2, r7, r4
 80069cc:	7812      	ldrb	r2, [r2, #0]
 80069ce:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	781a      	ldrb	r2, [r3, #0]
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	236c      	movs	r3, #108	@ 0x6c
 80069d8:	33ff      	adds	r3, #255	@ 0xff
 80069da:	0019      	movs	r1, r3
 80069dc:	0013      	movs	r3, r2
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	189b      	adds	r3, r3, r2
 80069e2:	00db      	lsls	r3, r3, #3
 80069e4:	18c3      	adds	r3, r0, r3
 80069e6:	185b      	adds	r3, r3, r1
 80069e8:	2200      	movs	r2, #0
 80069ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80069ec:	193b      	adds	r3, r7, r4
 80069ee:	781a      	ldrb	r2, [r3, #0]
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	23bc      	movs	r3, #188	@ 0xbc
 80069f4:	0059      	lsls	r1, r3, #1
 80069f6:	0013      	movs	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	189b      	adds	r3, r3, r2
 80069fc:	00db      	lsls	r3, r3, #3
 80069fe:	18c3      	adds	r3, r0, r3
 8006a00:	185b      	adds	r3, r3, r1
 8006a02:	2200      	movs	r2, #0
 8006a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006a06:	193b      	adds	r3, r7, r4
 8006a08:	781a      	ldrb	r2, [r3, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	23be      	movs	r3, #190	@ 0xbe
 8006a0e:	0059      	lsls	r1, r3, #1
 8006a10:	0013      	movs	r3, r2
 8006a12:	009b      	lsls	r3, r3, #2
 8006a14:	189b      	adds	r3, r3, r2
 8006a16:	00db      	lsls	r3, r3, #3
 8006a18:	18c3      	adds	r3, r0, r3
 8006a1a:	185b      	adds	r3, r3, r1
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	781a      	ldrb	r2, [r3, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	23c0      	movs	r3, #192	@ 0xc0
 8006a28:	0059      	lsls	r1, r3, #1
 8006a2a:	0013      	movs	r3, r2
 8006a2c:	009b      	lsls	r3, r3, #2
 8006a2e:	189b      	adds	r3, r3, r2
 8006a30:	00db      	lsls	r3, r3, #3
 8006a32:	18c3      	adds	r3, r0, r3
 8006a34:	185b      	adds	r3, r3, r1
 8006a36:	2200      	movs	r2, #0
 8006a38:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a3a:	193b      	adds	r3, r7, r4
 8006a3c:	781a      	ldrb	r2, [r3, #0]
 8006a3e:	193b      	adds	r3, r7, r4
 8006a40:	3201      	adds	r2, #1
 8006a42:	701a      	strb	r2, [r3, #0]
 8006a44:	230f      	movs	r3, #15
 8006a46:	18fb      	adds	r3, r7, r3
 8006a48:	781a      	ldrb	r2, [r3, #0]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	685b      	ldr	r3, [r3, #4]
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d3a1      	bcc.n	8006996 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6818      	ldr	r0, [r3, #0]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	466a      	mov	r2, sp
 8006a5a:	0011      	movs	r1, r2
 8006a5c:	001a      	movs	r2, r3
 8006a5e:	3210      	adds	r2, #16
 8006a60:	ca70      	ldmia	r2!, {r4, r5, r6}
 8006a62:	c170      	stmia	r1!, {r4, r5, r6}
 8006a64:	ca30      	ldmia	r2!, {r4, r5}
 8006a66:	c130      	stmia	r1!, {r4, r5}
 8006a68:	6859      	ldr	r1, [r3, #4]
 8006a6a:	689a      	ldr	r2, [r3, #8]
 8006a6c:	68db      	ldr	r3, [r3, #12]
 8006a6e:	f003 fbef 	bl	800a250 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2224      	movs	r2, #36	@ 0x24
 8006a76:	2100      	movs	r1, #0
 8006a78:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	4a07      	ldr	r2, [pc, #28]	@ (8006a9c <HAL_PCD_Init+0x1fc>)
 8006a7e:	2101      	movs	r1, #1
 8006a80:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	69db      	ldr	r3, [r3, #28]
 8006a86:	2b01      	cmp	r3, #1
 8006a88:	d103      	bne.n	8006a92 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	f001 fd23 	bl	80084d8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8006a92:	2300      	movs	r3, #0
}
 8006a94:	0018      	movs	r0, r3
 8006a96:	46bd      	mov	sp, r7
 8006a98:	b005      	add	sp, #20
 8006a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a9c:	000002a9 	.word	0x000002a9

08006aa0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b082      	sub	sp, #8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	23aa      	movs	r3, #170	@ 0xaa
 8006aac:	009b      	lsls	r3, r3, #2
 8006aae:	5cd3      	ldrb	r3, [r2, r3]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_PCD_Start+0x18>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e014      	b.n	8006ae2 <HAL_PCD_Start+0x42>
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	23aa      	movs	r3, #170	@ 0xaa
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	2101      	movs	r1, #1
 8006ac0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	0018      	movs	r0, r3
 8006ac8:	f003 fb92 	bl	800a1f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	0018      	movs	r0, r3
 8006ad2:	f005 fb95 	bl	800c200 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8006ad6:	687a      	ldr	r2, [r7, #4]
 8006ad8:	23aa      	movs	r3, #170	@ 0xaa
 8006ada:	009b      	lsls	r3, r3, #2
 8006adc:	2100      	movs	r1, #0
 8006ade:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006ae0:	2300      	movs	r3, #0
}
 8006ae2:	0018      	movs	r0, r3
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	b002      	add	sp, #8
 8006ae8:	bd80      	pop	{r7, pc}
	...

08006aec <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	0018      	movs	r0, r3
 8006afa:	f005 fb97 	bl	800c22c <USB_ReadInterrupts>
 8006afe:	0003      	movs	r3, r0
 8006b00:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	2380      	movs	r3, #128	@ 0x80
 8006b06:	021b      	lsls	r3, r3, #8
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d004      	beq.n	8006b16 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	0018      	movs	r0, r3
 8006b10:	f000 fb62 	bl	80071d8 <PCD_EP_ISR_Handler>

    return;
 8006b14:	e11d      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	2380      	movs	r3, #128	@ 0x80
 8006b1a:	00db      	lsls	r3, r3, #3
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	d015      	beq.n	8006b4c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2244      	movs	r2, #68	@ 0x44
 8006b26:	5a9b      	ldrh	r3, [r3, r2]
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	498a      	ldr	r1, [pc, #552]	@ (8006d58 <HAL_PCD_IRQHandler+0x26c>)
 8006b30:	400a      	ands	r2, r1
 8006b32:	b291      	uxth	r1, r2
 8006b34:	2244      	movs	r2, #68	@ 0x44
 8006b36:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	0018      	movs	r0, r3
 8006b3c:	f007 fb6f 	bl	800e21e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2100      	movs	r1, #0
 8006b44:	0018      	movs	r0, r3
 8006b46:	f000 f915 	bl	8006d74 <HAL_PCD_SetAddress>

    return;
 8006b4a:	e102      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	2380      	movs	r3, #128	@ 0x80
 8006b50:	01db      	lsls	r3, r3, #7
 8006b52:	4013      	ands	r3, r2
 8006b54:	d00c      	beq.n	8006b70 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	2244      	movs	r2, #68	@ 0x44
 8006b5c:	5a9b      	ldrh	r3, [r3, r2]
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	497d      	ldr	r1, [pc, #500]	@ (8006d5c <HAL_PCD_IRQHandler+0x270>)
 8006b66:	400a      	ands	r2, r1
 8006b68:	b291      	uxth	r1, r2
 8006b6a:	2244      	movs	r2, #68	@ 0x44
 8006b6c:	5299      	strh	r1, [r3, r2]

    return;
 8006b6e:	e0f0      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8006b70:	68fa      	ldr	r2, [r7, #12]
 8006b72:	2380      	movs	r3, #128	@ 0x80
 8006b74:	019b      	lsls	r3, r3, #6
 8006b76:	4013      	ands	r3, r2
 8006b78:	d00c      	beq.n	8006b94 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2244      	movs	r2, #68	@ 0x44
 8006b80:	5a9b      	ldrh	r3, [r3, r2]
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4975      	ldr	r1, [pc, #468]	@ (8006d60 <HAL_PCD_IRQHandler+0x274>)
 8006b8a:	400a      	ands	r2, r1
 8006b8c:	b291      	uxth	r1, r2
 8006b8e:	2244      	movs	r2, #68	@ 0x44
 8006b90:	5299      	strh	r1, [r3, r2]

    return;
 8006b92:	e0de      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	2380      	movs	r3, #128	@ 0x80
 8006b98:	015b      	lsls	r3, r3, #5
 8006b9a:	4013      	ands	r3, r2
 8006b9c:	d038      	beq.n	8006c10 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2240      	movs	r2, #64	@ 0x40
 8006ba4:	5a9b      	ldrh	r3, [r3, r2]
 8006ba6:	b29a      	uxth	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	2104      	movs	r1, #4
 8006bae:	438a      	bics	r2, r1
 8006bb0:	b291      	uxth	r1, r2
 8006bb2:	2240      	movs	r2, #64	@ 0x40
 8006bb4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	2240      	movs	r2, #64	@ 0x40
 8006bbc:	5a9b      	ldrh	r3, [r3, r2]
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	2108      	movs	r1, #8
 8006bc6:	438a      	bics	r2, r1
 8006bc8:	b291      	uxth	r1, r2
 8006bca:	2240      	movs	r2, #64	@ 0x40
 8006bcc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	23b8      	movs	r3, #184	@ 0xb8
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	5cd3      	ldrb	r3, [r2, r3]
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d109      	bne.n	8006bee <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	23b8      	movs	r3, #184	@ 0xb8
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	2100      	movs	r1, #0
 8006be2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2100      	movs	r1, #0
 8006be8:	0018      	movs	r0, r3
 8006bea:	f001 fc9f 	bl	800852c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f007 fb55 	bl	800e2a0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	2244      	movs	r2, #68	@ 0x44
 8006bfc:	5a9b      	ldrh	r3, [r3, r2]
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4957      	ldr	r1, [pc, #348]	@ (8006d64 <HAL_PCD_IRQHandler+0x278>)
 8006c06:	400a      	ands	r2, r1
 8006c08:	b291      	uxth	r1, r2
 8006c0a:	2244      	movs	r2, #68	@ 0x44
 8006c0c:	5299      	strh	r1, [r3, r2]

    return;
 8006c0e:	e0a0      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	2380      	movs	r3, #128	@ 0x80
 8006c14:	011b      	lsls	r3, r3, #4
 8006c16:	4013      	ands	r3, r2
 8006c18:	d028      	beq.n	8006c6c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2240      	movs	r2, #64	@ 0x40
 8006c20:	5a9b      	ldrh	r3, [r3, r2]
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2108      	movs	r1, #8
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	b291      	uxth	r1, r2
 8006c2e:	2240      	movs	r2, #64	@ 0x40
 8006c30:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	2244      	movs	r2, #68	@ 0x44
 8006c38:	5a9b      	ldrh	r3, [r3, r2]
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4949      	ldr	r1, [pc, #292]	@ (8006d68 <HAL_PCD_IRQHandler+0x27c>)
 8006c42:	400a      	ands	r2, r1
 8006c44:	b291      	uxth	r1, r2
 8006c46:	2244      	movs	r2, #68	@ 0x44
 8006c48:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2240      	movs	r2, #64	@ 0x40
 8006c50:	5a9b      	ldrh	r3, [r3, r2]
 8006c52:	b29a      	uxth	r2, r3
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	2104      	movs	r1, #4
 8006c5a:	430a      	orrs	r2, r1
 8006c5c:	b291      	uxth	r1, r2
 8006c5e:	2240      	movs	r2, #64	@ 0x40
 8006c60:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f007 faff 	bl	800e268 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006c6a:	e072      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2280      	movs	r2, #128	@ 0x80
 8006c70:	4013      	ands	r3, r2
 8006c72:	d046      	beq.n	8006d02 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	2244      	movs	r2, #68	@ 0x44
 8006c7a:	5a9b      	ldrh	r3, [r3, r2]
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2180      	movs	r1, #128	@ 0x80
 8006c84:	438a      	bics	r2, r1
 8006c86:	b291      	uxth	r1, r2
 8006c88:	2244      	movs	r2, #68	@ 0x44
 8006c8a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 8006c8c:	687a      	ldr	r2, [r7, #4]
 8006c8e:	23b8      	movs	r3, #184	@ 0xb8
 8006c90:	009b      	lsls	r3, r3, #2
 8006c92:	5cd3      	ldrb	r3, [r2, r3]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d12f      	bne.n	8006cf8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2240      	movs	r2, #64	@ 0x40
 8006c9e:	5a9b      	ldrh	r3, [r3, r2]
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	2104      	movs	r1, #4
 8006ca8:	430a      	orrs	r2, r1
 8006caa:	b291      	uxth	r1, r2
 8006cac:	2240      	movs	r2, #64	@ 0x40
 8006cae:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2240      	movs	r2, #64	@ 0x40
 8006cb6:	5a9b      	ldrh	r3, [r3, r2]
 8006cb8:	b29a      	uxth	r2, r3
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	2108      	movs	r1, #8
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	b291      	uxth	r1, r2
 8006cc4:	2240      	movs	r2, #64	@ 0x40
 8006cc6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	23b8      	movs	r3, #184	@ 0xb8
 8006ccc:	009b      	lsls	r3, r3, #2
 8006cce:	2101      	movs	r1, #1
 8006cd0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	2254      	movs	r2, #84	@ 0x54
 8006cd8:	5a9b      	ldrh	r3, [r3, r2]
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	089b      	lsrs	r3, r3, #2
 8006cde:	223c      	movs	r2, #60	@ 0x3c
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	0019      	movs	r1, r3
 8006ce4:	687a      	ldr	r2, [r7, #4]
 8006ce6:	23b9      	movs	r3, #185	@ 0xb9
 8006ce8:	009b      	lsls	r3, r3, #2
 8006cea:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2101      	movs	r1, #1
 8006cf0:	0018      	movs	r0, r3
 8006cf2:	f001 fc1b 	bl	800852c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8006cf6:	e02c      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f007 fab4 	bl	800e268 <HAL_PCD_SuspendCallback>
    return;
 8006d00:	e027      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8006d02:	68fa      	ldr	r2, [r7, #12]
 8006d04:	2380      	movs	r3, #128	@ 0x80
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	4013      	ands	r3, r2
 8006d0a:	d010      	beq.n	8006d2e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	2244      	movs	r2, #68	@ 0x44
 8006d12:	5a9b      	ldrh	r3, [r3, r2]
 8006d14:	b29a      	uxth	r2, r3
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4914      	ldr	r1, [pc, #80]	@ (8006d6c <HAL_PCD_IRQHandler+0x280>)
 8006d1c:	400a      	ands	r2, r1
 8006d1e:	b291      	uxth	r1, r2
 8006d20:	2244      	movs	r2, #68	@ 0x44
 8006d22:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	0018      	movs	r0, r3
 8006d28:	f007 fa6a 	bl	800e200 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8006d2c:	e011      	b.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	2380      	movs	r3, #128	@ 0x80
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	4013      	ands	r3, r2
 8006d36:	d00c      	beq.n	8006d52 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	2244      	movs	r2, #68	@ 0x44
 8006d3e:	5a9b      	ldrh	r3, [r3, r2]
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	490a      	ldr	r1, [pc, #40]	@ (8006d70 <HAL_PCD_IRQHandler+0x284>)
 8006d48:	400a      	ands	r2, r1
 8006d4a:	b291      	uxth	r1, r2
 8006d4c:	2244      	movs	r2, #68	@ 0x44
 8006d4e:	5299      	strh	r1, [r3, r2]

    return;
 8006d50:	46c0      	nop			@ (mov r8, r8)
  }
}
 8006d52:	46bd      	mov	sp, r7
 8006d54:	b004      	add	sp, #16
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	fffffbff 	.word	0xfffffbff
 8006d5c:	ffffbfff 	.word	0xffffbfff
 8006d60:	ffffdfff 	.word	0xffffdfff
 8006d64:	ffffefff 	.word	0xffffefff
 8006d68:	fffff7ff 	.word	0xfffff7ff
 8006d6c:	fffffdff 	.word	0xfffffdff
 8006d70:	fffffeff 	.word	0xfffffeff

08006d74 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	000a      	movs	r2, r1
 8006d7e:	1cfb      	adds	r3, r7, #3
 8006d80:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	23aa      	movs	r3, #170	@ 0xaa
 8006d86:	009b      	lsls	r3, r3, #2
 8006d88:	5cd3      	ldrb	r3, [r2, r3]
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d101      	bne.n	8006d92 <HAL_PCD_SetAddress+0x1e>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	e017      	b.n	8006dc2 <HAL_PCD_SetAddress+0x4e>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	23aa      	movs	r3, #170	@ 0xaa
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	2101      	movs	r1, #1
 8006d9a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	1cfa      	adds	r2, r7, #3
 8006da0:	2124      	movs	r1, #36	@ 0x24
 8006da2:	7812      	ldrb	r2, [r2, #0]
 8006da4:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681a      	ldr	r2, [r3, #0]
 8006daa:	1cfb      	adds	r3, r7, #3
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	0019      	movs	r1, r3
 8006db0:	0010      	movs	r0, r2
 8006db2:	f005 fa11 	bl	800c1d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006db6:	687a      	ldr	r2, [r7, #4]
 8006db8:	23aa      	movs	r3, #170	@ 0xaa
 8006dba:	009b      	lsls	r3, r3, #2
 8006dbc:	2100      	movs	r1, #0
 8006dbe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8006dc0:	2300      	movs	r3, #0
}
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	b002      	add	sp, #8
 8006dc8:	bd80      	pop	{r7, pc}

08006dca <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006dca:	b590      	push	{r4, r7, lr}
 8006dcc:	b085      	sub	sp, #20
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	6078      	str	r0, [r7, #4]
 8006dd2:	000c      	movs	r4, r1
 8006dd4:	0010      	movs	r0, r2
 8006dd6:	0019      	movs	r1, r3
 8006dd8:	1cfb      	adds	r3, r7, #3
 8006dda:	1c22      	adds	r2, r4, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
 8006dde:	003b      	movs	r3, r7
 8006de0:	1c02      	adds	r2, r0, #0
 8006de2:	801a      	strh	r2, [r3, #0]
 8006de4:	1cbb      	adds	r3, r7, #2
 8006de6:	1c0a      	adds	r2, r1, #0
 8006de8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006dea:	230b      	movs	r3, #11
 8006dec:	18fb      	adds	r3, r7, r3
 8006dee:	2200      	movs	r2, #0
 8006df0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006df2:	1cfb      	adds	r3, r7, #3
 8006df4:	781b      	ldrb	r3, [r3, #0]
 8006df6:	b25b      	sxtb	r3, r3
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	da0f      	bge.n	8006e1c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006dfc:	1cfb      	adds	r3, r7, #3
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2207      	movs	r2, #7
 8006e02:	4013      	ands	r3, r2
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	0013      	movs	r3, r2
 8006e08:	009b      	lsls	r3, r3, #2
 8006e0a:	189b      	adds	r3, r3, r2
 8006e0c:	00db      	lsls	r3, r3, #3
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	18d3      	adds	r3, r2, r3
 8006e12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2201      	movs	r2, #1
 8006e18:	705a      	strb	r2, [r3, #1]
 8006e1a:	e00f      	b.n	8006e3c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e1c:	1cfb      	adds	r3, r7, #3
 8006e1e:	781b      	ldrb	r3, [r3, #0]
 8006e20:	2207      	movs	r2, #7
 8006e22:	401a      	ands	r2, r3
 8006e24:	0013      	movs	r3, r2
 8006e26:	009b      	lsls	r3, r3, #2
 8006e28:	189b      	adds	r3, r3, r2
 8006e2a:	00db      	lsls	r3, r3, #3
 8006e2c:	3369      	adds	r3, #105	@ 0x69
 8006e2e:	33ff      	adds	r3, #255	@ 0xff
 8006e30:	687a      	ldr	r2, [r7, #4]
 8006e32:	18d3      	adds	r3, r2, r3
 8006e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e3c:	1cfb      	adds	r3, r7, #3
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	2207      	movs	r2, #7
 8006e42:	4013      	ands	r3, r2
 8006e44:	b2da      	uxtb	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e4a:	003b      	movs	r3, r7
 8006e4c:	881a      	ldrh	r2, [r3, #0]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1cba      	adds	r2, r7, #2
 8006e56:	7812      	ldrb	r2, [r2, #0]
 8006e58:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e5a:	1cbb      	adds	r3, r7, #2
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d102      	bne.n	8006e68 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	23aa      	movs	r3, #170	@ 0xaa
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	5cd3      	ldrb	r3, [r2, r3]
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d101      	bne.n	8006e78 <HAL_PCD_EP_Open+0xae>
 8006e74:	2302      	movs	r3, #2
 8006e76:	e013      	b.n	8006ea0 <HAL_PCD_EP_Open+0xd6>
 8006e78:	687a      	ldr	r2, [r7, #4]
 8006e7a:	23aa      	movs	r3, #170	@ 0xaa
 8006e7c:	009b      	lsls	r3, r3, #2
 8006e7e:	2101      	movs	r1, #1
 8006e80:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	0011      	movs	r1, r2
 8006e8a:	0018      	movs	r0, r3
 8006e8c:	f003 fa08 	bl	800a2a0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	23aa      	movs	r3, #170	@ 0xaa
 8006e94:	009b      	lsls	r3, r3, #2
 8006e96:	2100      	movs	r1, #0
 8006e98:	54d1      	strb	r1, [r2, r3]

  return ret;
 8006e9a:	230b      	movs	r3, #11
 8006e9c:	18fb      	adds	r3, r7, r3
 8006e9e:	781b      	ldrb	r3, [r3, #0]
}
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	b005      	add	sp, #20
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	000a      	movs	r2, r1
 8006eb2:	1cfb      	adds	r3, r7, #3
 8006eb4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006eb6:	1cfb      	adds	r3, r7, #3
 8006eb8:	781b      	ldrb	r3, [r3, #0]
 8006eba:	b25b      	sxtb	r3, r3
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	da0f      	bge.n	8006ee0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ec0:	1cfb      	adds	r3, r7, #3
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2207      	movs	r2, #7
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	0013      	movs	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	189b      	adds	r3, r3, r2
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	687a      	ldr	r2, [r7, #4]
 8006ed4:	18d3      	adds	r3, r2, r3
 8006ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2201      	movs	r2, #1
 8006edc:	705a      	strb	r2, [r3, #1]
 8006ede:	e00f      	b.n	8006f00 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ee0:	1cfb      	adds	r3, r7, #3
 8006ee2:	781b      	ldrb	r3, [r3, #0]
 8006ee4:	2207      	movs	r2, #7
 8006ee6:	401a      	ands	r2, r3
 8006ee8:	0013      	movs	r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	189b      	adds	r3, r3, r2
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	3369      	adds	r3, #105	@ 0x69
 8006ef2:	33ff      	adds	r3, #255	@ 0xff
 8006ef4:	687a      	ldr	r2, [r7, #4]
 8006ef6:	18d3      	adds	r3, r2, r3
 8006ef8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f00:	1cfb      	adds	r3, r7, #3
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2207      	movs	r2, #7
 8006f06:	4013      	ands	r3, r2
 8006f08:	b2da      	uxtb	r2, r3
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	23aa      	movs	r3, #170	@ 0xaa
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	5cd3      	ldrb	r3, [r2, r3]
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d101      	bne.n	8006f1e <HAL_PCD_EP_Close+0x76>
 8006f1a:	2302      	movs	r3, #2
 8006f1c:	e011      	b.n	8006f42 <HAL_PCD_EP_Close+0x9a>
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	23aa      	movs	r3, #170	@ 0xaa
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	2101      	movs	r1, #1
 8006f26:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	0011      	movs	r1, r2
 8006f30:	0018      	movs	r0, r3
 8006f32:	f003 fd57 	bl	800a9e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	23aa      	movs	r3, #170	@ 0xaa
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	2100      	movs	r1, #0
 8006f3e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	0018      	movs	r0, r3
 8006f44:	46bd      	mov	sp, r7
 8006f46:	b004      	add	sp, #16
 8006f48:	bd80      	pop	{r7, pc}

08006f4a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f4a:	b580      	push	{r7, lr}
 8006f4c:	b086      	sub	sp, #24
 8006f4e:	af00      	add	r7, sp, #0
 8006f50:	60f8      	str	r0, [r7, #12]
 8006f52:	607a      	str	r2, [r7, #4]
 8006f54:	603b      	str	r3, [r7, #0]
 8006f56:	200b      	movs	r0, #11
 8006f58:	183b      	adds	r3, r7, r0
 8006f5a:	1c0a      	adds	r2, r1, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f5e:	0001      	movs	r1, r0
 8006f60:	187b      	adds	r3, r7, r1
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2207      	movs	r2, #7
 8006f66:	401a      	ands	r2, r3
 8006f68:	0013      	movs	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	189b      	adds	r3, r3, r2
 8006f6e:	00db      	lsls	r3, r3, #3
 8006f70:	3369      	adds	r3, #105	@ 0x69
 8006f72:	33ff      	adds	r3, #255	@ 0xff
 8006f74:	68fa      	ldr	r2, [r7, #12]
 8006f76:	18d3      	adds	r3, r2, r3
 8006f78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	687a      	ldr	r2, [r7, #4]
 8006f7e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006f80:	697b      	ldr	r3, [r7, #20]
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006f86:	697b      	ldr	r3, [r7, #20]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f92:	187b      	adds	r3, r7, r1
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2207      	movs	r2, #7
 8006f98:	4013      	ands	r3, r2
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	0011      	movs	r1, r2
 8006fa8:	0018      	movs	r0, r3
 8006faa:	f003 fedb 	bl	800ad64 <USB_EPStartXfer>

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	0018      	movs	r0, r3
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	b006      	add	sp, #24
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	000a      	movs	r2, r1
 8006fc2:	1cfb      	adds	r3, r7, #3
 8006fc4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006fc6:	1cfb      	adds	r3, r7, #3
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2207      	movs	r2, #7
 8006fcc:	401a      	ands	r2, r3
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	23c2      	movs	r3, #194	@ 0xc2
 8006fd2:	0059      	lsls	r1, r3, #1
 8006fd4:	0013      	movs	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	189b      	adds	r3, r3, r2
 8006fda:	00db      	lsls	r3, r3, #3
 8006fdc:	18c3      	adds	r3, r0, r3
 8006fde:	185b      	adds	r3, r3, r1
 8006fe0:	681b      	ldr	r3, [r3, #0]
}
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b002      	add	sp, #8
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	60f8      	str	r0, [r7, #12]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	200b      	movs	r0, #11
 8006ff8:	183b      	adds	r3, r7, r0
 8006ffa:	1c0a      	adds	r2, r1, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ffe:	183b      	adds	r3, r7, r0
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2207      	movs	r2, #7
 8007004:	4013      	ands	r3, r2
 8007006:	1c5a      	adds	r2, r3, #1
 8007008:	0013      	movs	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	189b      	adds	r3, r3, r2
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	68fa      	ldr	r2, [r7, #12]
 8007012:	18d3      	adds	r3, r2, r3
 8007014:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800701c:	697b      	ldr	r3, [r7, #20]
 800701e:	683a      	ldr	r2, [r7, #0]
 8007020:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	2224      	movs	r2, #36	@ 0x24
 8007026:	2101      	movs	r1, #1
 8007028:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	683a      	ldr	r2, [r7, #0]
 800702e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	2200      	movs	r2, #0
 8007034:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8007036:	697b      	ldr	r3, [r7, #20]
 8007038:	2201      	movs	r2, #1
 800703a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800703c:	183b      	adds	r3, r7, r0
 800703e:	781b      	ldrb	r3, [r3, #0]
 8007040:	2207      	movs	r2, #7
 8007042:	4013      	ands	r3, r2
 8007044:	b2da      	uxtb	r2, r3
 8007046:	697b      	ldr	r3, [r7, #20]
 8007048:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	0011      	movs	r1, r2
 8007052:	0018      	movs	r0, r3
 8007054:	f003 fe86 	bl	800ad64 <USB_EPStartXfer>

  return HAL_OK;
 8007058:	2300      	movs	r3, #0
}
 800705a:	0018      	movs	r0, r3
 800705c:	46bd      	mov	sp, r7
 800705e:	b006      	add	sp, #24
 8007060:	bd80      	pop	{r7, pc}

08007062 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007062:	b580      	push	{r7, lr}
 8007064:	b084      	sub	sp, #16
 8007066:	af00      	add	r7, sp, #0
 8007068:	6078      	str	r0, [r7, #4]
 800706a:	000a      	movs	r2, r1
 800706c:	1cfb      	adds	r3, r7, #3
 800706e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007070:	1cfb      	adds	r3, r7, #3
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2207      	movs	r2, #7
 8007076:	401a      	ands	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	429a      	cmp	r2, r3
 800707e:	d901      	bls.n	8007084 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e046      	b.n	8007112 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007084:	1cfb      	adds	r3, r7, #3
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	b25b      	sxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	da0f      	bge.n	80070ae <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800708e:	1cfb      	adds	r3, r7, #3
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2207      	movs	r2, #7
 8007094:	4013      	ands	r3, r2
 8007096:	1c5a      	adds	r2, r3, #1
 8007098:	0013      	movs	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	189b      	adds	r3, r3, r2
 800709e:	00db      	lsls	r3, r3, #3
 80070a0:	687a      	ldr	r2, [r7, #4]
 80070a2:	18d3      	adds	r3, r2, r3
 80070a4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	705a      	strb	r2, [r3, #1]
 80070ac:	e00d      	b.n	80070ca <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80070ae:	1cfb      	adds	r3, r7, #3
 80070b0:	781a      	ldrb	r2, [r3, #0]
 80070b2:	0013      	movs	r3, r2
 80070b4:	009b      	lsls	r3, r3, #2
 80070b6:	189b      	adds	r3, r3, r2
 80070b8:	00db      	lsls	r3, r3, #3
 80070ba:	3369      	adds	r3, #105	@ 0x69
 80070bc:	33ff      	adds	r3, #255	@ 0xff
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	18d3      	adds	r3, r2, r3
 80070c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2201      	movs	r2, #1
 80070ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070d0:	1cfb      	adds	r3, r7, #3
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2207      	movs	r2, #7
 80070d6:	4013      	ands	r3, r2
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070de:	687a      	ldr	r2, [r7, #4]
 80070e0:	23aa      	movs	r3, #170	@ 0xaa
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	5cd3      	ldrb	r3, [r2, r3]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d101      	bne.n	80070ee <HAL_PCD_EP_SetStall+0x8c>
 80070ea:	2302      	movs	r3, #2
 80070ec:	e011      	b.n	8007112 <HAL_PCD_EP_SetStall+0xb0>
 80070ee:	687a      	ldr	r2, [r7, #4]
 80070f0:	23aa      	movs	r3, #170	@ 0xaa
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	2101      	movs	r1, #1
 80070f6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	0011      	movs	r1, r2
 8007100:	0018      	movs	r0, r3
 8007102:	f004 ff67 	bl	800bfd4 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8007106:	687a      	ldr	r2, [r7, #4]
 8007108:	23aa      	movs	r3, #170	@ 0xaa
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	2100      	movs	r1, #0
 800710e:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8007110:	2300      	movs	r3, #0
}
 8007112:	0018      	movs	r0, r3
 8007114:	46bd      	mov	sp, r7
 8007116:	b004      	add	sp, #16
 8007118:	bd80      	pop	{r7, pc}

0800711a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800711a:	b580      	push	{r7, lr}
 800711c:	b084      	sub	sp, #16
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	000a      	movs	r2, r1
 8007124:	1cfb      	adds	r3, r7, #3
 8007126:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007128:	1cfb      	adds	r3, r7, #3
 800712a:	781b      	ldrb	r3, [r3, #0]
 800712c:	220f      	movs	r2, #15
 800712e:	401a      	ands	r2, r3
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	685b      	ldr	r3, [r3, #4]
 8007134:	429a      	cmp	r2, r3
 8007136:	d901      	bls.n	800713c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e048      	b.n	80071ce <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800713c:	1cfb      	adds	r3, r7, #3
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	b25b      	sxtb	r3, r3
 8007142:	2b00      	cmp	r3, #0
 8007144:	da0f      	bge.n	8007166 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007146:	1cfb      	adds	r3, r7, #3
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2207      	movs	r2, #7
 800714c:	4013      	ands	r3, r2
 800714e:	1c5a      	adds	r2, r3, #1
 8007150:	0013      	movs	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	189b      	adds	r3, r3, r2
 8007156:	00db      	lsls	r3, r3, #3
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	18d3      	adds	r3, r2, r3
 800715c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2201      	movs	r2, #1
 8007162:	705a      	strb	r2, [r3, #1]
 8007164:	e00f      	b.n	8007186 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007166:	1cfb      	adds	r3, r7, #3
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2207      	movs	r2, #7
 800716c:	401a      	ands	r2, r3
 800716e:	0013      	movs	r3, r2
 8007170:	009b      	lsls	r3, r3, #2
 8007172:	189b      	adds	r3, r3, r2
 8007174:	00db      	lsls	r3, r3, #3
 8007176:	3369      	adds	r3, #105	@ 0x69
 8007178:	33ff      	adds	r3, #255	@ 0xff
 800717a:	687a      	ldr	r2, [r7, #4]
 800717c:	18d3      	adds	r3, r2, r3
 800717e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2200      	movs	r2, #0
 800718a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800718c:	1cfb      	adds	r3, r7, #3
 800718e:	781b      	ldrb	r3, [r3, #0]
 8007190:	2207      	movs	r2, #7
 8007192:	4013      	ands	r3, r2
 8007194:	b2da      	uxtb	r2, r3
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	23aa      	movs	r3, #170	@ 0xaa
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	5cd3      	ldrb	r3, [r2, r3]
 80071a2:	2b01      	cmp	r3, #1
 80071a4:	d101      	bne.n	80071aa <HAL_PCD_EP_ClrStall+0x90>
 80071a6:	2302      	movs	r3, #2
 80071a8:	e011      	b.n	80071ce <HAL_PCD_EP_ClrStall+0xb4>
 80071aa:	687a      	ldr	r2, [r7, #4]
 80071ac:	23aa      	movs	r3, #170	@ 0xaa
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	2101      	movs	r1, #1
 80071b2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68fa      	ldr	r2, [r7, #12]
 80071ba:	0011      	movs	r1, r2
 80071bc:	0018      	movs	r0, r3
 80071be:	f004 ff59 	bl	800c074 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	23aa      	movs	r3, #170	@ 0xaa
 80071c6:	009b      	lsls	r3, r3, #2
 80071c8:	2100      	movs	r1, #0
 80071ca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	0018      	movs	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	b004      	add	sp, #16
 80071d4:	bd80      	pop	{r7, pc}
	...

080071d8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80071d8:	b5b0      	push	{r4, r5, r7, lr}
 80071da:	b096      	sub	sp, #88	@ 0x58
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80071e0:	f000 fbec 	bl	80079bc <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	204e      	movs	r0, #78	@ 0x4e
 80071ea:	183b      	adds	r3, r7, r0
 80071ec:	2144      	movs	r1, #68	@ 0x44
 80071ee:	5a52      	ldrh	r2, [r2, r1]
 80071f0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80071f2:	183b      	adds	r3, r7, r0
 80071f4:	881b      	ldrh	r3, [r3, #0]
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	244d      	movs	r4, #77	@ 0x4d
 80071fa:	193b      	adds	r3, r7, r4
 80071fc:	210f      	movs	r1, #15
 80071fe:	400a      	ands	r2, r1
 8007200:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 8007202:	193b      	adds	r3, r7, r4
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d000      	beq.n	800720c <PCD_EP_ISR_Handler+0x34>
 800720a:	e18f      	b.n	800752c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800720c:	183b      	adds	r3, r7, r0
 800720e:	881b      	ldrh	r3, [r3, #0]
 8007210:	2210      	movs	r2, #16
 8007212:	4013      	ands	r3, r2
 8007214:	d155      	bne.n	80072c2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	881b      	ldrh	r3, [r3, #0]
 800721c:	b29a      	uxth	r2, r3
 800721e:	200e      	movs	r0, #14
 8007220:	183b      	adds	r3, r7, r0
 8007222:	49bb      	ldr	r1, [pc, #748]	@ (8007510 <PCD_EP_ISR_Handler+0x338>)
 8007224:	400a      	ands	r2, r1
 8007226:	801a      	strh	r2, [r3, #0]
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	183a      	adds	r2, r7, r0
 800722e:	8812      	ldrh	r2, [r2, #0]
 8007230:	49b8      	ldr	r1, [pc, #736]	@ (8007514 <PCD_EP_ISR_Handler+0x33c>)
 8007232:	430a      	orrs	r2, r1
 8007234:	b292      	uxth	r2, r2
 8007236:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	3328      	adds	r3, #40	@ 0x28
 800723c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	2250      	movs	r2, #80	@ 0x50
 8007244:	5a9b      	ldrh	r3, [r3, r2]
 8007246:	b29b      	uxth	r3, r3
 8007248:	001a      	movs	r2, r3
 800724a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	00db      	lsls	r3, r3, #3
 8007250:	18d2      	adds	r2, r2, r3
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	18d3      	adds	r3, r2, r3
 8007258:	4aaf      	ldr	r2, [pc, #700]	@ (8007518 <PCD_EP_ISR_Handler+0x340>)
 800725a:	4694      	mov	ip, r2
 800725c:	4463      	add	r3, ip
 800725e:	881b      	ldrh	r3, [r3, #0]
 8007260:	059b      	lsls	r3, r3, #22
 8007262:	0d9a      	lsrs	r2, r3, #22
 8007264:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007266:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8007268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800726e:	69db      	ldr	r3, [r3, #28]
 8007270:	18d2      	adds	r2, r2, r3
 8007272:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007274:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2100      	movs	r1, #0
 800727a:	0018      	movs	r0, r3
 800727c:	f006 ffa2 	bl	800e1c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	2224      	movs	r2, #36	@ 0x24
 8007284:	5c9b      	ldrb	r3, [r3, r2]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b00      	cmp	r3, #0
 800728a:	d101      	bne.n	8007290 <PCD_EP_ISR_Handler+0xb8>
 800728c:	f000 fb96 	bl	80079bc <PCD_EP_ISR_Handler+0x7e4>
 8007290:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007292:	699b      	ldr	r3, [r3, #24]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d001      	beq.n	800729c <PCD_EP_ISR_Handler+0xc4>
 8007298:	f000 fb90 	bl	80079bc <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2224      	movs	r2, #36	@ 0x24
 80072a0:	5c9b      	ldrb	r3, [r3, r2]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	2280      	movs	r2, #128	@ 0x80
 80072a6:	4252      	negs	r2, r2
 80072a8:	4313      	orrs	r3, r2
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	0011      	movs	r1, r2
 80072b2:	224c      	movs	r2, #76	@ 0x4c
 80072b4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2224      	movs	r2, #36	@ 0x24
 80072ba:	2100      	movs	r1, #0
 80072bc:	5499      	strb	r1, [r3, r2]
 80072be:	f000 fb7d 	bl	80079bc <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	3369      	adds	r3, #105	@ 0x69
 80072c6:	33ff      	adds	r3, #255	@ 0xff
 80072c8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	214a      	movs	r1, #74	@ 0x4a
 80072d0:	187b      	adds	r3, r7, r1
 80072d2:	8812      	ldrh	r2, [r2, #0]
 80072d4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80072d6:	187b      	adds	r3, r7, r1
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	2380      	movs	r3, #128	@ 0x80
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	4013      	ands	r3, r2
 80072e0:	d037      	beq.n	8007352 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	2250      	movs	r2, #80	@ 0x50
 80072e8:	5a9b      	ldrh	r3, [r3, r2]
 80072ea:	b29b      	uxth	r3, r3
 80072ec:	001a      	movs	r2, r3
 80072ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	00db      	lsls	r3, r3, #3
 80072f4:	18d2      	adds	r2, r2, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	18d3      	adds	r3, r2, r3
 80072fc:	4a87      	ldr	r2, [pc, #540]	@ (800751c <PCD_EP_ISR_Handler+0x344>)
 80072fe:	4694      	mov	ip, r2
 8007300:	4463      	add	r3, ip
 8007302:	881b      	ldrh	r3, [r3, #0]
 8007304:	059b      	lsls	r3, r3, #22
 8007306:	0d9a      	lsrs	r2, r3, #22
 8007308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800730a:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6818      	ldr	r0, [r3, #0]
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	22ac      	movs	r2, #172	@ 0xac
 8007314:	0092      	lsls	r2, r2, #2
 8007316:	1899      	adds	r1, r3, r2
 8007318:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800731c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800731e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8007320:	b29b      	uxth	r3, r3
 8007322:	f004 ffda 	bl	800c2da <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	881b      	ldrh	r3, [r3, #0]
 800732c:	b29a      	uxth	r2, r3
 800732e:	2010      	movs	r0, #16
 8007330:	183b      	adds	r3, r7, r0
 8007332:	497b      	ldr	r1, [pc, #492]	@ (8007520 <PCD_EP_ISR_Handler+0x348>)
 8007334:	400a      	ands	r2, r1
 8007336:	801a      	strh	r2, [r3, #0]
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	183a      	adds	r2, r7, r0
 800733e:	8812      	ldrh	r2, [r2, #0]
 8007340:	2180      	movs	r1, #128	@ 0x80
 8007342:	430a      	orrs	r2, r1
 8007344:	b292      	uxth	r2, r2
 8007346:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	0018      	movs	r0, r3
 800734c:	f006 ff04 	bl	800e158 <HAL_PCD_SetupStageCallback>
 8007350:	e334      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007352:	234a      	movs	r3, #74	@ 0x4a
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	2200      	movs	r2, #0
 8007358:	5e9b      	ldrsh	r3, [r3, r2]
 800735a:	2b00      	cmp	r3, #0
 800735c:	db00      	blt.n	8007360 <PCD_EP_ISR_Handler+0x188>
 800735e:	e32d      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	881b      	ldrh	r3, [r3, #0]
 8007366:	b29a      	uxth	r2, r3
 8007368:	201e      	movs	r0, #30
 800736a:	183b      	adds	r3, r7, r0
 800736c:	496c      	ldr	r1, [pc, #432]	@ (8007520 <PCD_EP_ISR_Handler+0x348>)
 800736e:	400a      	ands	r2, r1
 8007370:	801a      	strh	r2, [r3, #0]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	183a      	adds	r2, r7, r0
 8007378:	8812      	ldrh	r2, [r2, #0]
 800737a:	2180      	movs	r1, #128	@ 0x80
 800737c:	430a      	orrs	r2, r1
 800737e:	b292      	uxth	r2, r2
 8007380:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2250      	movs	r2, #80	@ 0x50
 8007388:	5a9b      	ldrh	r3, [r3, r2]
 800738a:	b29b      	uxth	r3, r3
 800738c:	001a      	movs	r2, r3
 800738e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	00db      	lsls	r3, r3, #3
 8007394:	18d2      	adds	r2, r2, r3
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	18d3      	adds	r3, r2, r3
 800739c:	4a5f      	ldr	r2, [pc, #380]	@ (800751c <PCD_EP_ISR_Handler+0x344>)
 800739e:	4694      	mov	ip, r2
 80073a0:	4463      	add	r3, ip
 80073a2:	881b      	ldrh	r3, [r3, #0]
 80073a4:	059b      	lsls	r3, r3, #22
 80073a6:	0d9a      	lsrs	r2, r3, #22
 80073a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073aa:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80073ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ae:	69db      	ldr	r3, [r3, #28]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d01a      	beq.n	80073ea <PCD_EP_ISR_Handler+0x212>
 80073b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073b6:	695b      	ldr	r3, [r3, #20]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d016      	beq.n	80073ea <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6818      	ldr	r0, [r3, #0]
 80073c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c2:	6959      	ldr	r1, [r3, #20]
 80073c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073c6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80073c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073ca:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80073cc:	b29b      	uxth	r3, r3
 80073ce:	f004 ff84 	bl	800c2da <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80073d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073d4:	695a      	ldr	r2, [r3, #20]
 80073d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	18d2      	adds	r2, r2, r3
 80073dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073de:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2100      	movs	r1, #0
 80073e4:	0018      	movs	r0, r3
 80073e6:	f006 fecc 	bl	800e182 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	214a      	movs	r1, #74	@ 0x4a
 80073f0:	187b      	adds	r3, r7, r1
 80073f2:	8812      	ldrh	r2, [r2, #0]
 80073f4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80073f6:	187b      	adds	r3, r7, r1
 80073f8:	881a      	ldrh	r2, [r3, #0]
 80073fa:	2380      	movs	r3, #128	@ 0x80
 80073fc:	011b      	lsls	r3, r3, #4
 80073fe:	4013      	ands	r3, r2
 8007400:	d000      	beq.n	8007404 <PCD_EP_ISR_Handler+0x22c>
 8007402:	e2db      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
 8007404:	187b      	adds	r3, r7, r1
 8007406:	881a      	ldrh	r2, [r3, #0]
 8007408:	23c0      	movs	r3, #192	@ 0xc0
 800740a:	019b      	lsls	r3, r3, #6
 800740c:	401a      	ands	r2, r3
 800740e:	23c0      	movs	r3, #192	@ 0xc0
 8007410:	019b      	lsls	r3, r3, #6
 8007412:	429a      	cmp	r2, r3
 8007414:	d100      	bne.n	8007418 <PCD_EP_ISR_Handler+0x240>
 8007416:	e2d1      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	61bb      	str	r3, [r7, #24]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	2250      	movs	r2, #80	@ 0x50
 8007424:	5a9b      	ldrh	r3, [r3, r2]
 8007426:	b29b      	uxth	r3, r3
 8007428:	001a      	movs	r2, r3
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	189b      	adds	r3, r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	4a3a      	ldr	r2, [pc, #232]	@ (800751c <PCD_EP_ISR_Handler+0x344>)
 8007434:	4694      	mov	ip, r2
 8007436:	4463      	add	r3, ip
 8007438:	617b      	str	r3, [r7, #20]
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b29b      	uxth	r3, r3
 8007440:	059b      	lsls	r3, r3, #22
 8007442:	0d9b      	lsrs	r3, r3, #22
 8007444:	b29a      	uxth	r2, r3
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	801a      	strh	r2, [r3, #0]
 800744a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800744c:	691b      	ldr	r3, [r3, #16]
 800744e:	2b3e      	cmp	r3, #62	@ 0x3e
 8007450:	d91a      	bls.n	8007488 <PCD_EP_ISR_Handler+0x2b0>
 8007452:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	095b      	lsrs	r3, r3, #5
 8007458:	647b      	str	r3, [r7, #68]	@ 0x44
 800745a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800745c:	691b      	ldr	r3, [r3, #16]
 800745e:	221f      	movs	r2, #31
 8007460:	4013      	ands	r3, r2
 8007462:	d102      	bne.n	800746a <PCD_EP_ISR_Handler+0x292>
 8007464:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007466:	3b01      	subs	r3, #1
 8007468:	647b      	str	r3, [r7, #68]	@ 0x44
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	881b      	ldrh	r3, [r3, #0]
 800746e:	b29a      	uxth	r2, r3
 8007470:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007472:	b29b      	uxth	r3, r3
 8007474:	029b      	lsls	r3, r3, #10
 8007476:	b29b      	uxth	r3, r3
 8007478:	4313      	orrs	r3, r2
 800747a:	b29b      	uxth	r3, r3
 800747c:	4a25      	ldr	r2, [pc, #148]	@ (8007514 <PCD_EP_ISR_Handler+0x33c>)
 800747e:	4313      	orrs	r3, r2
 8007480:	b29a      	uxth	r2, r3
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	801a      	strh	r2, [r3, #0]
 8007486:	e023      	b.n	80074d0 <PCD_EP_ISR_Handler+0x2f8>
 8007488:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800748a:	691b      	ldr	r3, [r3, #16]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d108      	bne.n	80074a2 <PCD_EP_ISR_Handler+0x2ca>
 8007490:	697b      	ldr	r3, [r7, #20]
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	4a1f      	ldr	r2, [pc, #124]	@ (8007514 <PCD_EP_ISR_Handler+0x33c>)
 8007498:	4313      	orrs	r3, r2
 800749a:	b29a      	uxth	r2, r3
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	801a      	strh	r2, [r3, #0]
 80074a0:	e016      	b.n	80074d0 <PCD_EP_ISR_Handler+0x2f8>
 80074a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a4:	691b      	ldr	r3, [r3, #16]
 80074a6:	085b      	lsrs	r3, r3, #1
 80074a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	2201      	movs	r2, #1
 80074b0:	4013      	ands	r3, r2
 80074b2:	d002      	beq.n	80074ba <PCD_EP_ISR_Handler+0x2e2>
 80074b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b6:	3301      	adds	r3, #1
 80074b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	881b      	ldrh	r3, [r3, #0]
 80074be:	b29a      	uxth	r2, r3
 80074c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	029b      	lsls	r3, r3, #10
 80074c6:	b29b      	uxth	r3, r3
 80074c8:	4313      	orrs	r3, r2
 80074ca:	b29a      	uxth	r2, r3
 80074cc:	697b      	ldr	r3, [r7, #20]
 80074ce:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	881b      	ldrh	r3, [r3, #0]
 80074d6:	b29a      	uxth	r2, r3
 80074d8:	2012      	movs	r0, #18
 80074da:	183b      	adds	r3, r7, r0
 80074dc:	4911      	ldr	r1, [pc, #68]	@ (8007524 <PCD_EP_ISR_Handler+0x34c>)
 80074de:	400a      	ands	r2, r1
 80074e0:	801a      	strh	r2, [r3, #0]
 80074e2:	183b      	adds	r3, r7, r0
 80074e4:	183a      	adds	r2, r7, r0
 80074e6:	8812      	ldrh	r2, [r2, #0]
 80074e8:	2180      	movs	r1, #128	@ 0x80
 80074ea:	0149      	lsls	r1, r1, #5
 80074ec:	404a      	eors	r2, r1
 80074ee:	801a      	strh	r2, [r3, #0]
 80074f0:	183b      	adds	r3, r7, r0
 80074f2:	183a      	adds	r2, r7, r0
 80074f4:	8812      	ldrh	r2, [r2, #0]
 80074f6:	2180      	movs	r1, #128	@ 0x80
 80074f8:	0189      	lsls	r1, r1, #6
 80074fa:	404a      	eors	r2, r1
 80074fc:	801a      	strh	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	183a      	adds	r2, r7, r0
 8007504:	8812      	ldrh	r2, [r2, #0]
 8007506:	4908      	ldr	r1, [pc, #32]	@ (8007528 <PCD_EP_ISR_Handler+0x350>)
 8007508:	430a      	orrs	r2, r1
 800750a:	b292      	uxth	r2, r2
 800750c:	801a      	strh	r2, [r3, #0]
 800750e:	e255      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
 8007510:	ffff8f0f 	.word	0xffff8f0f
 8007514:	ffff8000 	.word	0xffff8000
 8007518:	00000402 	.word	0x00000402
 800751c:	00000406 	.word	0x00000406
 8007520:	00000f8f 	.word	0x00000f8f
 8007524:	ffffbf8f 	.word	0xffffbf8f
 8007528:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	001a      	movs	r2, r3
 8007532:	204d      	movs	r0, #77	@ 0x4d
 8007534:	183b      	adds	r3, r7, r0
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	009b      	lsls	r3, r3, #2
 800753a:	18d2      	adds	r2, r2, r3
 800753c:	214a      	movs	r1, #74	@ 0x4a
 800753e:	187b      	adds	r3, r7, r1
 8007540:	8812      	ldrh	r2, [r2, #0]
 8007542:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8007544:	187b      	adds	r3, r7, r1
 8007546:	2200      	movs	r2, #0
 8007548:	5e9b      	ldrsh	r3, [r3, r2]
 800754a:	2b00      	cmp	r3, #0
 800754c:	db00      	blt.n	8007550 <PCD_EP_ISR_Handler+0x378>
 800754e:	e0fa      	b.n	8007746 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	001a      	movs	r2, r3
 8007556:	183b      	adds	r3, r7, r0
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	009b      	lsls	r3, r3, #2
 800755c:	18d3      	adds	r3, r2, r3
 800755e:	881b      	ldrh	r3, [r3, #0]
 8007560:	b29a      	uxth	r2, r3
 8007562:	2448      	movs	r4, #72	@ 0x48
 8007564:	193b      	adds	r3, r7, r4
 8007566:	49d1      	ldr	r1, [pc, #836]	@ (80078ac <PCD_EP_ISR_Handler+0x6d4>)
 8007568:	400a      	ands	r2, r1
 800756a:	801a      	strh	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	001a      	movs	r2, r3
 8007572:	183b      	adds	r3, r7, r0
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	009b      	lsls	r3, r3, #2
 8007578:	18d3      	adds	r3, r2, r3
 800757a:	193a      	adds	r2, r7, r4
 800757c:	8812      	ldrh	r2, [r2, #0]
 800757e:	2180      	movs	r1, #128	@ 0x80
 8007580:	430a      	orrs	r2, r1
 8007582:	b292      	uxth	r2, r2
 8007584:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8007586:	183b      	adds	r3, r7, r0
 8007588:	781a      	ldrb	r2, [r3, #0]
 800758a:	0013      	movs	r3, r2
 800758c:	009b      	lsls	r3, r3, #2
 800758e:	189b      	adds	r3, r3, r2
 8007590:	00db      	lsls	r3, r3, #3
 8007592:	3369      	adds	r3, #105	@ 0x69
 8007594:	33ff      	adds	r3, #255	@ 0xff
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	18d3      	adds	r3, r2, r3
 800759a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800759c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800759e:	7b1b      	ldrb	r3, [r3, #12]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d125      	bne.n	80075f0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	2250      	movs	r2, #80	@ 0x50
 80075aa:	5a9b      	ldrh	r3, [r3, r2]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	001a      	movs	r2, r3
 80075b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	00db      	lsls	r3, r3, #3
 80075b6:	18d2      	adds	r2, r2, r3
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	18d3      	adds	r3, r2, r3
 80075be:	4abc      	ldr	r2, [pc, #752]	@ (80078b0 <PCD_EP_ISR_Handler+0x6d8>)
 80075c0:	4694      	mov	ip, r2
 80075c2:	4463      	add	r3, ip
 80075c4:	881a      	ldrh	r2, [r3, #0]
 80075c6:	2450      	movs	r4, #80	@ 0x50
 80075c8:	193b      	adds	r3, r7, r4
 80075ca:	0592      	lsls	r2, r2, #22
 80075cc:	0d92      	lsrs	r2, r2, #22
 80075ce:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80075d0:	193b      	adds	r3, r7, r4
 80075d2:	881b      	ldrh	r3, [r3, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d100      	bne.n	80075da <PCD_EP_ISR_Handler+0x402>
 80075d8:	e08d      	b.n	80076f6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e0:	6959      	ldr	r1, [r3, #20]
 80075e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075e4:	88da      	ldrh	r2, [r3, #6]
 80075e6:	193b      	adds	r3, r7, r4
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	f004 fe76 	bl	800c2da <USB_ReadPMA>
 80075ee:	e082      	b.n	80076f6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80075f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80075f2:	78db      	ldrb	r3, [r3, #3]
 80075f4:	2b02      	cmp	r3, #2
 80075f6:	d10c      	bne.n	8007612 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80075f8:	2350      	movs	r3, #80	@ 0x50
 80075fa:	18fc      	adds	r4, r7, r3
 80075fc:	234a      	movs	r3, #74	@ 0x4a
 80075fe:	18fb      	adds	r3, r7, r3
 8007600:	881a      	ldrh	r2, [r3, #0]
 8007602:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	0018      	movs	r0, r3
 8007608:	f000 f9ec 	bl	80079e4 <HAL_PCD_EP_DB_Receive>
 800760c:	0003      	movs	r3, r0
 800760e:	8023      	strh	r3, [r4, #0]
 8007610:	e071      	b.n	80076f6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	001a      	movs	r2, r3
 8007618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800761a:	781b      	ldrb	r3, [r3, #0]
 800761c:	009b      	lsls	r3, r3, #2
 800761e:	18d3      	adds	r3, r2, r3
 8007620:	881b      	ldrh	r3, [r3, #0]
 8007622:	b29a      	uxth	r2, r3
 8007624:	2052      	movs	r0, #82	@ 0x52
 8007626:	183b      	adds	r3, r7, r0
 8007628:	49a2      	ldr	r1, [pc, #648]	@ (80078b4 <PCD_EP_ISR_Handler+0x6dc>)
 800762a:	400a      	ands	r2, r1
 800762c:	801a      	strh	r2, [r3, #0]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	001a      	movs	r2, r3
 8007634:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	009b      	lsls	r3, r3, #2
 800763a:	18d3      	adds	r3, r2, r3
 800763c:	183a      	adds	r2, r7, r0
 800763e:	8812      	ldrh	r2, [r2, #0]
 8007640:	499d      	ldr	r1, [pc, #628]	@ (80078b8 <PCD_EP_ISR_Handler+0x6e0>)
 8007642:	430a      	orrs	r2, r1
 8007644:	b292      	uxth	r2, r2
 8007646:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	001a      	movs	r2, r3
 800764e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007650:	781b      	ldrb	r3, [r3, #0]
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	18d3      	adds	r3, r2, r3
 8007656:	881b      	ldrh	r3, [r3, #0]
 8007658:	b29b      	uxth	r3, r3
 800765a:	001a      	movs	r2, r3
 800765c:	2380      	movs	r3, #128	@ 0x80
 800765e:	01db      	lsls	r3, r3, #7
 8007660:	4013      	ands	r3, r2
 8007662:	d024      	beq.n	80076ae <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	2250      	movs	r2, #80	@ 0x50
 800766a:	5a9b      	ldrh	r3, [r3, r2]
 800766c:	b29b      	uxth	r3, r3
 800766e:	001a      	movs	r2, r3
 8007670:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	00db      	lsls	r3, r3, #3
 8007676:	18d2      	adds	r2, r2, r3
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	18d3      	adds	r3, r2, r3
 800767e:	4a8f      	ldr	r2, [pc, #572]	@ (80078bc <PCD_EP_ISR_Handler+0x6e4>)
 8007680:	4694      	mov	ip, r2
 8007682:	4463      	add	r3, ip
 8007684:	881a      	ldrh	r2, [r3, #0]
 8007686:	2450      	movs	r4, #80	@ 0x50
 8007688:	193b      	adds	r3, r7, r4
 800768a:	0592      	lsls	r2, r2, #22
 800768c:	0d92      	lsrs	r2, r2, #22
 800768e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8007690:	193b      	adds	r3, r7, r4
 8007692:	881b      	ldrh	r3, [r3, #0]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d02e      	beq.n	80076f6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6818      	ldr	r0, [r3, #0]
 800769c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800769e:	6959      	ldr	r1, [r3, #20]
 80076a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076a2:	891a      	ldrh	r2, [r3, #8]
 80076a4:	193b      	adds	r3, r7, r4
 80076a6:	881b      	ldrh	r3, [r3, #0]
 80076a8:	f004 fe17 	bl	800c2da <USB_ReadPMA>
 80076ac:	e023      	b.n	80076f6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	2250      	movs	r2, #80	@ 0x50
 80076b4:	5a9b      	ldrh	r3, [r3, r2]
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	001a      	movs	r2, r3
 80076ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	00db      	lsls	r3, r3, #3
 80076c0:	18d2      	adds	r2, r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	18d3      	adds	r3, r2, r3
 80076c8:	4a79      	ldr	r2, [pc, #484]	@ (80078b0 <PCD_EP_ISR_Handler+0x6d8>)
 80076ca:	4694      	mov	ip, r2
 80076cc:	4463      	add	r3, ip
 80076ce:	881a      	ldrh	r2, [r3, #0]
 80076d0:	2450      	movs	r4, #80	@ 0x50
 80076d2:	193b      	adds	r3, r7, r4
 80076d4:	0592      	lsls	r2, r2, #22
 80076d6:	0d92      	lsrs	r2, r2, #22
 80076d8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80076da:	193b      	adds	r3, r7, r4
 80076dc:	881b      	ldrh	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076e8:	6959      	ldr	r1, [r3, #20]
 80076ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076ec:	895a      	ldrh	r2, [r3, #10]
 80076ee:	193b      	adds	r3, r7, r4
 80076f0:	881b      	ldrh	r3, [r3, #0]
 80076f2:	f004 fdf2 	bl	800c2da <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80076f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80076f8:	69da      	ldr	r2, [r3, #28]
 80076fa:	2150      	movs	r1, #80	@ 0x50
 80076fc:	187b      	adds	r3, r7, r1
 80076fe:	881b      	ldrh	r3, [r3, #0]
 8007700:	18d2      	adds	r2, r2, r3
 8007702:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007704:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8007706:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007708:	695a      	ldr	r2, [r3, #20]
 800770a:	187b      	adds	r3, r7, r1
 800770c:	881b      	ldrh	r3, [r3, #0]
 800770e:	18d2      	adds	r2, r2, r3
 8007710:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007712:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8007714:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d005      	beq.n	8007728 <PCD_EP_ISR_Handler+0x550>
 800771c:	187b      	adds	r3, r7, r1
 800771e:	881a      	ldrh	r2, [r3, #0]
 8007720:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007722:	691b      	ldr	r3, [r3, #16]
 8007724:	429a      	cmp	r2, r3
 8007726:	d207      	bcs.n	8007738 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8007728:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800772a:	781a      	ldrb	r2, [r3, #0]
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	0011      	movs	r1, r2
 8007730:	0018      	movs	r0, r3
 8007732:	f006 fd26 	bl	800e182 <HAL_PCD_DataOutStageCallback>
 8007736:	e006      	b.n	8007746 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800773e:	0011      	movs	r1, r2
 8007740:	0018      	movs	r0, r3
 8007742:	f003 fb0f 	bl	800ad64 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8007746:	244a      	movs	r4, #74	@ 0x4a
 8007748:	193b      	adds	r3, r7, r4
 800774a:	881b      	ldrh	r3, [r3, #0]
 800774c:	2280      	movs	r2, #128	@ 0x80
 800774e:	4013      	ands	r3, r2
 8007750:	d100      	bne.n	8007754 <PCD_EP_ISR_Handler+0x57c>
 8007752:	e133      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8007754:	204d      	movs	r0, #77	@ 0x4d
 8007756:	183b      	adds	r3, r7, r0
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	1c5a      	adds	r2, r3, #1
 800775c:	0013      	movs	r3, r2
 800775e:	009b      	lsls	r3, r3, #2
 8007760:	189b      	adds	r3, r3, r2
 8007762:	00db      	lsls	r3, r3, #3
 8007764:	687a      	ldr	r2, [r7, #4]
 8007766:	18d3      	adds	r3, r2, r3
 8007768:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	001a      	movs	r2, r3
 8007770:	183b      	adds	r3, r7, r0
 8007772:	781b      	ldrb	r3, [r3, #0]
 8007774:	009b      	lsls	r3, r3, #2
 8007776:	18d3      	adds	r3, r2, r3
 8007778:	881b      	ldrh	r3, [r3, #0]
 800777a:	b29a      	uxth	r2, r3
 800777c:	2542      	movs	r5, #66	@ 0x42
 800777e:	197b      	adds	r3, r7, r5
 8007780:	494f      	ldr	r1, [pc, #316]	@ (80078c0 <PCD_EP_ISR_Handler+0x6e8>)
 8007782:	400a      	ands	r2, r1
 8007784:	801a      	strh	r2, [r3, #0]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	001a      	movs	r2, r3
 800778c:	183b      	adds	r3, r7, r0
 800778e:	781b      	ldrb	r3, [r3, #0]
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	18d3      	adds	r3, r2, r3
 8007794:	197a      	adds	r2, r7, r5
 8007796:	8812      	ldrh	r2, [r2, #0]
 8007798:	494a      	ldr	r1, [pc, #296]	@ (80078c4 <PCD_EP_ISR_Handler+0x6ec>)
 800779a:	430a      	orrs	r2, r1
 800779c:	b292      	uxth	r2, r2
 800779e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 80077a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077a2:	78db      	ldrb	r3, [r3, #3]
 80077a4:	2b01      	cmp	r3, #1
 80077a6:	d000      	beq.n	80077aa <PCD_EP_ISR_Handler+0x5d2>
 80077a8:	e0af      	b.n	800790a <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 80077aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077ac:	2200      	movs	r2, #0
 80077ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80077b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077b2:	7b1b      	ldrb	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d100      	bne.n	80077ba <PCD_EP_ISR_Handler+0x5e2>
 80077b8:	e09f      	b.n	80078fa <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80077ba:	193b      	adds	r3, r7, r4
 80077bc:	881b      	ldrh	r3, [r3, #0]
 80077be:	2240      	movs	r2, #64	@ 0x40
 80077c0:	4013      	ands	r3, r2
 80077c2:	d046      	beq.n	8007852 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80077c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077c6:	785b      	ldrb	r3, [r3, #1]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d125      	bne.n	8007818 <PCD_EP_ISR_Handler+0x640>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	2250      	movs	r2, #80	@ 0x50
 80077d8:	5a9b      	ldrh	r3, [r3, r2]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	001a      	movs	r2, r3
 80077de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077e0:	189b      	adds	r3, r3, r2
 80077e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80077e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	00da      	lsls	r2, r3, #3
 80077ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077ec:	18d3      	adds	r3, r2, r3
 80077ee:	4a33      	ldr	r2, [pc, #204]	@ (80078bc <PCD_EP_ISR_Handler+0x6e4>)
 80077f0:	4694      	mov	ip, r2
 80077f2:	4463      	add	r3, ip
 80077f4:	623b      	str	r3, [r7, #32]
 80077f6:	6a3b      	ldr	r3, [r7, #32]
 80077f8:	881b      	ldrh	r3, [r3, #0]
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	059b      	lsls	r3, r3, #22
 80077fe:	0d9b      	lsrs	r3, r3, #22
 8007800:	b29a      	uxth	r2, r3
 8007802:	6a3b      	ldr	r3, [r7, #32]
 8007804:	801a      	strh	r2, [r3, #0]
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	881b      	ldrh	r3, [r3, #0]
 800780a:	b29b      	uxth	r3, r3
 800780c:	4a2d      	ldr	r2, [pc, #180]	@ (80078c4 <PCD_EP_ISR_Handler+0x6ec>)
 800780e:	4313      	orrs	r3, r2
 8007810:	b29a      	uxth	r2, r3
 8007812:	6a3b      	ldr	r3, [r7, #32]
 8007814:	801a      	strh	r2, [r3, #0]
 8007816:	e070      	b.n	80078fa <PCD_EP_ISR_Handler+0x722>
 8007818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800781a:	785b      	ldrb	r3, [r3, #1]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d16c      	bne.n	80078fa <PCD_EP_ISR_Handler+0x722>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	2250      	movs	r2, #80	@ 0x50
 800782c:	5a9b      	ldrh	r3, [r3, r2]
 800782e:	b29b      	uxth	r3, r3
 8007830:	001a      	movs	r2, r3
 8007832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007834:	189b      	adds	r3, r3, r2
 8007836:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007838:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	00da      	lsls	r2, r3, #3
 800783e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007840:	18d3      	adds	r3, r2, r3
 8007842:	4a1e      	ldr	r2, [pc, #120]	@ (80078bc <PCD_EP_ISR_Handler+0x6e4>)
 8007844:	4694      	mov	ip, r2
 8007846:	4463      	add	r3, ip
 8007848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800784a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784c:	2200      	movs	r2, #0
 800784e:	801a      	strh	r2, [r3, #0]
 8007850:	e053      	b.n	80078fa <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007858:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800785a:	785b      	ldrb	r3, [r3, #1]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d133      	bne.n	80078c8 <PCD_EP_ISR_Handler+0x6f0>
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	637b      	str	r3, [r7, #52]	@ 0x34
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2250      	movs	r2, #80	@ 0x50
 800786c:	5a9b      	ldrh	r3, [r3, r2]
 800786e:	b29b      	uxth	r3, r3
 8007870:	001a      	movs	r2, r3
 8007872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007874:	189b      	adds	r3, r3, r2
 8007876:	637b      	str	r3, [r7, #52]	@ 0x34
 8007878:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	00da      	lsls	r2, r3, #3
 800787e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007880:	18d3      	adds	r3, r2, r3
 8007882:	4a0b      	ldr	r2, [pc, #44]	@ (80078b0 <PCD_EP_ISR_Handler+0x6d8>)
 8007884:	4694      	mov	ip, r2
 8007886:	4463      	add	r3, ip
 8007888:	633b      	str	r3, [r7, #48]	@ 0x30
 800788a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788c:	881b      	ldrh	r3, [r3, #0]
 800788e:	b29b      	uxth	r3, r3
 8007890:	059b      	lsls	r3, r3, #22
 8007892:	0d9b      	lsrs	r3, r3, #22
 8007894:	b29a      	uxth	r2, r3
 8007896:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007898:	801a      	strh	r2, [r3, #0]
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	881b      	ldrh	r3, [r3, #0]
 800789e:	b29b      	uxth	r3, r3
 80078a0:	4a08      	ldr	r2, [pc, #32]	@ (80078c4 <PCD_EP_ISR_Handler+0x6ec>)
 80078a2:	4313      	orrs	r3, r2
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078a8:	801a      	strh	r2, [r3, #0]
 80078aa:	e026      	b.n	80078fa <PCD_EP_ISR_Handler+0x722>
 80078ac:	00000f8f 	.word	0x00000f8f
 80078b0:	00000406 	.word	0x00000406
 80078b4:	ffff8f8f 	.word	0xffff8f8f
 80078b8:	ffff80c0 	.word	0xffff80c0
 80078bc:	00000402 	.word	0x00000402
 80078c0:	ffff8f0f 	.word	0xffff8f0f
 80078c4:	ffff8000 	.word	0xffff8000
 80078c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078ca:	785b      	ldrb	r3, [r3, #1]
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d114      	bne.n	80078fa <PCD_EP_ISR_Handler+0x722>
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2250      	movs	r2, #80	@ 0x50
 80078d6:	5a9b      	ldrh	r3, [r3, r2]
 80078d8:	b29b      	uxth	r3, r3
 80078da:	001a      	movs	r2, r3
 80078dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078de:	189b      	adds	r3, r3, r2
 80078e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	00da      	lsls	r2, r3, #3
 80078e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078ea:	18d3      	adds	r3, r2, r3
 80078ec:	4a3b      	ldr	r2, [pc, #236]	@ (80079dc <PCD_EP_ISR_Handler+0x804>)
 80078ee:	4694      	mov	ip, r2
 80078f0:	4463      	add	r3, ip
 80078f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80078f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078f6:	2200      	movs	r2, #0
 80078f8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80078fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078fc:	781a      	ldrb	r2, [r3, #0]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	0011      	movs	r1, r2
 8007902:	0018      	movs	r0, r3
 8007904:	f006 fc5e 	bl	800e1c4 <HAL_PCD_DataInStageCallback>
 8007908:	e058      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800790a:	234a      	movs	r3, #74	@ 0x4a
 800790c:	18fb      	adds	r3, r7, r3
 800790e:	881a      	ldrh	r2, [r3, #0]
 8007910:	2380      	movs	r3, #128	@ 0x80
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	4013      	ands	r3, r2
 8007916:	d149      	bne.n	80079ac <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2250      	movs	r2, #80	@ 0x50
 800791e:	5a9b      	ldrh	r3, [r3, r2]
 8007920:	b29b      	uxth	r3, r3
 8007922:	001a      	movs	r2, r3
 8007924:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	18d2      	adds	r2, r2, r3
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	18d3      	adds	r3, r2, r3
 8007932:	4a2b      	ldr	r2, [pc, #172]	@ (80079e0 <PCD_EP_ISR_Handler+0x808>)
 8007934:	4694      	mov	ip, r2
 8007936:	4463      	add	r3, ip
 8007938:	881a      	ldrh	r2, [r3, #0]
 800793a:	2140      	movs	r1, #64	@ 0x40
 800793c:	187b      	adds	r3, r7, r1
 800793e:	0592      	lsls	r2, r2, #22
 8007940:	0d92      	lsrs	r2, r2, #22
 8007942:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8007944:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007946:	699a      	ldr	r2, [r3, #24]
 8007948:	187b      	adds	r3, r7, r1
 800794a:	881b      	ldrh	r3, [r3, #0]
 800794c:	429a      	cmp	r2, r3
 800794e:	d907      	bls.n	8007960 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8007950:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007952:	699a      	ldr	r2, [r3, #24]
 8007954:	187b      	adds	r3, r7, r1
 8007956:	881b      	ldrh	r3, [r3, #0]
 8007958:	1ad2      	subs	r2, r2, r3
 800795a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800795c:	619a      	str	r2, [r3, #24]
 800795e:	e002      	b.n	8007966 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8007960:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007962:	2200      	movs	r2, #0
 8007964:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8007966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d107      	bne.n	800797e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800796e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007970:	781a      	ldrb	r2, [r3, #0]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	0011      	movs	r1, r2
 8007976:	0018      	movs	r0, r3
 8007978:	f006 fc24 	bl	800e1c4 <HAL_PCD_DataInStageCallback>
 800797c:	e01e      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800797e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007980:	695a      	ldr	r2, [r3, #20]
 8007982:	2140      	movs	r1, #64	@ 0x40
 8007984:	187b      	adds	r3, r7, r1
 8007986:	881b      	ldrh	r3, [r3, #0]
 8007988:	18d2      	adds	r2, r2, r3
 800798a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800798c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800798e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007990:	69da      	ldr	r2, [r3, #28]
 8007992:	187b      	adds	r3, r7, r1
 8007994:	881b      	ldrh	r3, [r3, #0]
 8007996:	18d2      	adds	r2, r2, r3
 8007998:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800799a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80079a2:	0011      	movs	r1, r2
 80079a4:	0018      	movs	r0, r3
 80079a6:	f003 f9dd 	bl	800ad64 <USB_EPStartXfer>
 80079aa:	e007      	b.n	80079bc <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80079ac:	234a      	movs	r3, #74	@ 0x4a
 80079ae:	18fb      	adds	r3, r7, r3
 80079b0:	881a      	ldrh	r2, [r3, #0]
 80079b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	0018      	movs	r0, r3
 80079b8:	f000 f930 	bl	8007c1c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2244      	movs	r2, #68	@ 0x44
 80079c2:	5a9b      	ldrh	r3, [r3, r2]
 80079c4:	b29b      	uxth	r3, r3
 80079c6:	b21b      	sxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	da01      	bge.n	80079d0 <PCD_EP_ISR_Handler+0x7f8>
 80079cc:	f7ff fc0a 	bl	80071e4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	0018      	movs	r0, r3
 80079d4:	46bd      	mov	sp, r7
 80079d6:	b016      	add	sp, #88	@ 0x58
 80079d8:	bdb0      	pop	{r4, r5, r7, pc}
 80079da:	46c0      	nop			@ (mov r8, r8)
 80079dc:	00000406 	.word	0x00000406
 80079e0:	00000402 	.word	0x00000402

080079e4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80079e4:	b590      	push	{r4, r7, lr}
 80079e6:	b089      	sub	sp, #36	@ 0x24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	1dbb      	adds	r3, r7, #6
 80079f0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80079f2:	1dbb      	adds	r3, r7, #6
 80079f4:	881a      	ldrh	r2, [r3, #0]
 80079f6:	2380      	movs	r3, #128	@ 0x80
 80079f8:	01db      	lsls	r3, r3, #7
 80079fa:	4013      	ands	r3, r2
 80079fc:	d100      	bne.n	8007a00 <HAL_PCD_EP_DB_Receive+0x1c>
 80079fe:	e07d      	b.n	8007afc <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2250      	movs	r2, #80	@ 0x50
 8007a06:	5a9b      	ldrh	r3, [r3, r2]
 8007a08:	b29b      	uxth	r3, r3
 8007a0a:	001a      	movs	r2, r3
 8007a0c:	68bb      	ldr	r3, [r7, #8]
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	18d2      	adds	r2, r2, r3
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	18d3      	adds	r3, r2, r3
 8007a1a:	4a7a      	ldr	r2, [pc, #488]	@ (8007c04 <HAL_PCD_EP_DB_Receive+0x220>)
 8007a1c:	4694      	mov	ip, r2
 8007a1e:	4463      	add	r3, ip
 8007a20:	881a      	ldrh	r2, [r3, #0]
 8007a22:	211a      	movs	r1, #26
 8007a24:	187b      	adds	r3, r7, r1
 8007a26:	0592      	lsls	r2, r2, #22
 8007a28:	0d92      	lsrs	r2, r2, #22
 8007a2a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	699a      	ldr	r2, [r3, #24]
 8007a30:	187b      	adds	r3, r7, r1
 8007a32:	881b      	ldrh	r3, [r3, #0]
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d307      	bcc.n	8007a48 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	699a      	ldr	r2, [r3, #24]
 8007a3c:	187b      	adds	r3, r7, r1
 8007a3e:	881b      	ldrh	r3, [r3, #0]
 8007a40:	1ad2      	subs	r2, r2, r3
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	619a      	str	r2, [r3, #24]
 8007a46:	e002      	b.n	8007a4e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	699b      	ldr	r3, [r3, #24]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d121      	bne.n	8007a9a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	001a      	movs	r2, r3
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	18d3      	adds	r3, r2, r3
 8007a64:	881b      	ldrh	r3, [r3, #0]
 8007a66:	b29a      	uxth	r2, r3
 8007a68:	2018      	movs	r0, #24
 8007a6a:	183b      	adds	r3, r7, r0
 8007a6c:	4966      	ldr	r1, [pc, #408]	@ (8007c08 <HAL_PCD_EP_DB_Receive+0x224>)
 8007a6e:	400a      	ands	r2, r1
 8007a70:	801a      	strh	r2, [r3, #0]
 8007a72:	183b      	adds	r3, r7, r0
 8007a74:	183a      	adds	r2, r7, r0
 8007a76:	8812      	ldrh	r2, [r2, #0]
 8007a78:	2180      	movs	r1, #128	@ 0x80
 8007a7a:	0189      	lsls	r1, r1, #6
 8007a7c:	404a      	eors	r2, r1
 8007a7e:	801a      	strh	r2, [r3, #0]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	001a      	movs	r2, r3
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	18d3      	adds	r3, r2, r3
 8007a8e:	183a      	adds	r2, r7, r0
 8007a90:	8812      	ldrh	r2, [r2, #0]
 8007a92:	495e      	ldr	r1, [pc, #376]	@ (8007c0c <HAL_PCD_EP_DB_Receive+0x228>)
 8007a94:	430a      	orrs	r2, r1
 8007a96:	b292      	uxth	r2, r2
 8007a98:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007a9a:	1dbb      	adds	r3, r7, #6
 8007a9c:	881b      	ldrh	r3, [r3, #0]
 8007a9e:	2240      	movs	r2, #64	@ 0x40
 8007aa0:	4013      	ands	r3, r2
 8007aa2:	d01a      	beq.n	8007ada <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	001a      	movs	r2, r3
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	781b      	ldrb	r3, [r3, #0]
 8007aae:	009b      	lsls	r3, r3, #2
 8007ab0:	18d3      	adds	r3, r2, r3
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	b29a      	uxth	r2, r3
 8007ab6:	2016      	movs	r0, #22
 8007ab8:	183b      	adds	r3, r7, r0
 8007aba:	4955      	ldr	r1, [pc, #340]	@ (8007c10 <HAL_PCD_EP_DB_Receive+0x22c>)
 8007abc:	400a      	ands	r2, r1
 8007abe:	801a      	strh	r2, [r3, #0]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	001a      	movs	r2, r3
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	18d3      	adds	r3, r2, r3
 8007ace:	183a      	adds	r2, r7, r0
 8007ad0:	8812      	ldrh	r2, [r2, #0]
 8007ad2:	4950      	ldr	r1, [pc, #320]	@ (8007c14 <HAL_PCD_EP_DB_Receive+0x230>)
 8007ad4:	430a      	orrs	r2, r1
 8007ad6:	b292      	uxth	r2, r2
 8007ad8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8007ada:	241a      	movs	r4, #26
 8007adc:	193b      	adds	r3, r7, r4
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d100      	bne.n	8007ae6 <HAL_PCD_EP_DB_Receive+0x102>
 8007ae4:	e086      	b.n	8007bf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6818      	ldr	r0, [r3, #0]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	6959      	ldr	r1, [r3, #20]
 8007aee:	68bb      	ldr	r3, [r7, #8]
 8007af0:	891a      	ldrh	r2, [r3, #8]
 8007af2:	193b      	adds	r3, r7, r4
 8007af4:	881b      	ldrh	r3, [r3, #0]
 8007af6:	f004 fbf0 	bl	800c2da <USB_ReadPMA>
 8007afa:	e07b      	b.n	8007bf4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2250      	movs	r2, #80	@ 0x50
 8007b02:	5a9b      	ldrh	r3, [r3, r2]
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	001a      	movs	r2, r3
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	00db      	lsls	r3, r3, #3
 8007b0e:	18d2      	adds	r2, r2, r3
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	18d3      	adds	r3, r2, r3
 8007b16:	4a40      	ldr	r2, [pc, #256]	@ (8007c18 <HAL_PCD_EP_DB_Receive+0x234>)
 8007b18:	4694      	mov	ip, r2
 8007b1a:	4463      	add	r3, ip
 8007b1c:	881a      	ldrh	r2, [r3, #0]
 8007b1e:	211a      	movs	r1, #26
 8007b20:	187b      	adds	r3, r7, r1
 8007b22:	0592      	lsls	r2, r2, #22
 8007b24:	0d92      	lsrs	r2, r2, #22
 8007b26:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	699a      	ldr	r2, [r3, #24]
 8007b2c:	187b      	adds	r3, r7, r1
 8007b2e:	881b      	ldrh	r3, [r3, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d307      	bcc.n	8007b44 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	699a      	ldr	r2, [r3, #24]
 8007b38:	187b      	adds	r3, r7, r1
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	1ad2      	subs	r2, r2, r3
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	619a      	str	r2, [r3, #24]
 8007b42:	e002      	b.n	8007b4a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	699b      	ldr	r3, [r3, #24]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d121      	bne.n	8007b96 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	001a      	movs	r2, r3
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	009b      	lsls	r3, r3, #2
 8007b5e:	18d3      	adds	r3, r2, r3
 8007b60:	881b      	ldrh	r3, [r3, #0]
 8007b62:	b29a      	uxth	r2, r3
 8007b64:	201e      	movs	r0, #30
 8007b66:	183b      	adds	r3, r7, r0
 8007b68:	4927      	ldr	r1, [pc, #156]	@ (8007c08 <HAL_PCD_EP_DB_Receive+0x224>)
 8007b6a:	400a      	ands	r2, r1
 8007b6c:	801a      	strh	r2, [r3, #0]
 8007b6e:	183b      	adds	r3, r7, r0
 8007b70:	183a      	adds	r2, r7, r0
 8007b72:	8812      	ldrh	r2, [r2, #0]
 8007b74:	2180      	movs	r1, #128	@ 0x80
 8007b76:	0189      	lsls	r1, r1, #6
 8007b78:	404a      	eors	r2, r1
 8007b7a:	801a      	strh	r2, [r3, #0]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	001a      	movs	r2, r3
 8007b82:	68bb      	ldr	r3, [r7, #8]
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	009b      	lsls	r3, r3, #2
 8007b88:	18d3      	adds	r3, r2, r3
 8007b8a:	183a      	adds	r2, r7, r0
 8007b8c:	8812      	ldrh	r2, [r2, #0]
 8007b8e:	491f      	ldr	r1, [pc, #124]	@ (8007c0c <HAL_PCD_EP_DB_Receive+0x228>)
 8007b90:	430a      	orrs	r2, r1
 8007b92:	b292      	uxth	r2, r2
 8007b94:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8007b96:	1dbb      	adds	r3, r7, #6
 8007b98:	881b      	ldrh	r3, [r3, #0]
 8007b9a:	2240      	movs	r2, #64	@ 0x40
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	d11a      	bne.n	8007bd6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	001a      	movs	r2, r3
 8007ba6:	68bb      	ldr	r3, [r7, #8]
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	18d3      	adds	r3, r2, r3
 8007bae:	881b      	ldrh	r3, [r3, #0]
 8007bb0:	b29a      	uxth	r2, r3
 8007bb2:	201c      	movs	r0, #28
 8007bb4:	183b      	adds	r3, r7, r0
 8007bb6:	4916      	ldr	r1, [pc, #88]	@ (8007c10 <HAL_PCD_EP_DB_Receive+0x22c>)
 8007bb8:	400a      	ands	r2, r1
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	001a      	movs	r2, r3
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	009b      	lsls	r3, r3, #2
 8007bc8:	18d3      	adds	r3, r2, r3
 8007bca:	183a      	adds	r2, r7, r0
 8007bcc:	8812      	ldrh	r2, [r2, #0]
 8007bce:	4911      	ldr	r1, [pc, #68]	@ (8007c14 <HAL_PCD_EP_DB_Receive+0x230>)
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	b292      	uxth	r2, r2
 8007bd4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8007bd6:	241a      	movs	r4, #26
 8007bd8:	193b      	adds	r3, r7, r4
 8007bda:	881b      	ldrh	r3, [r3, #0]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d009      	beq.n	8007bf4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	6818      	ldr	r0, [r3, #0]
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	6959      	ldr	r1, [r3, #20]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	895a      	ldrh	r2, [r3, #10]
 8007bec:	193b      	adds	r3, r7, r4
 8007bee:	881b      	ldrh	r3, [r3, #0]
 8007bf0:	f004 fb73 	bl	800c2da <USB_ReadPMA>
    }
  }

  return count;
 8007bf4:	231a      	movs	r3, #26
 8007bf6:	18fb      	adds	r3, r7, r3
 8007bf8:	881b      	ldrh	r3, [r3, #0]
}
 8007bfa:	0018      	movs	r0, r3
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	b009      	add	sp, #36	@ 0x24
 8007c00:	bd90      	pop	{r4, r7, pc}
 8007c02:	46c0      	nop			@ (mov r8, r8)
 8007c04:	00000402 	.word	0x00000402
 8007c08:	ffffbf8f 	.word	0xffffbf8f
 8007c0c:	ffff8080 	.word	0xffff8080
 8007c10:	ffff8f8f 	.word	0xffff8f8f
 8007c14:	ffff80c0 	.word	0xffff80c0
 8007c18:	00000406 	.word	0x00000406

08007c1c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b0a4      	sub	sp, #144	@ 0x90
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	1dbb      	adds	r3, r7, #6
 8007c28:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8007c2a:	1dbb      	adds	r3, r7, #6
 8007c2c:	881b      	ldrh	r3, [r3, #0]
 8007c2e:	2240      	movs	r2, #64	@ 0x40
 8007c30:	4013      	ands	r3, r2
 8007c32:	d100      	bne.n	8007c36 <HAL_PCD_EP_DB_Transmit+0x1a>
 8007c34:	e1e4      	b.n	8008000 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	2250      	movs	r2, #80	@ 0x50
 8007c3c:	5a9b      	ldrh	r3, [r3, r2]
 8007c3e:	b29b      	uxth	r3, r3
 8007c40:	001a      	movs	r2, r3
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	781b      	ldrb	r3, [r3, #0]
 8007c46:	00db      	lsls	r3, r3, #3
 8007c48:	18d2      	adds	r2, r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	18d3      	adds	r3, r2, r3
 8007c50:	4ad0      	ldr	r2, [pc, #832]	@ (8007f94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8007c52:	4694      	mov	ip, r2
 8007c54:	4463      	add	r3, ip
 8007c56:	881a      	ldrh	r2, [r3, #0]
 8007c58:	2186      	movs	r1, #134	@ 0x86
 8007c5a:	187b      	adds	r3, r7, r1
 8007c5c:	0592      	lsls	r2, r2, #22
 8007c5e:	0d92      	lsrs	r2, r2, #22
 8007c60:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	699a      	ldr	r2, [r3, #24]
 8007c66:	187b      	adds	r3, r7, r1
 8007c68:	881b      	ldrh	r3, [r3, #0]
 8007c6a:	429a      	cmp	r2, r3
 8007c6c:	d907      	bls.n	8007c7e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	699a      	ldr	r2, [r3, #24]
 8007c72:	187b      	adds	r3, r7, r1
 8007c74:	881b      	ldrh	r3, [r3, #0]
 8007c76:	1ad2      	subs	r2, r2, r3
 8007c78:	68bb      	ldr	r3, [r7, #8]
 8007c7a:	619a      	str	r2, [r3, #24]
 8007c7c:	e002      	b.n	8007c84 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8007c7e:	68bb      	ldr	r3, [r7, #8]
 8007c80:	2200      	movs	r2, #0
 8007c82:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	699b      	ldr	r3, [r3, #24]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d000      	beq.n	8007c8e <HAL_PCD_EP_DB_Transmit+0x72>
 8007c8c:	e0b5      	b.n	8007dfa <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007c8e:	68bb      	ldr	r3, [r7, #8]
 8007c90:	785b      	ldrb	r3, [r3, #1]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d125      	bne.n	8007ce2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2250      	movs	r2, #80	@ 0x50
 8007ca2:	5a9b      	ldrh	r3, [r3, r2]
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	001a      	movs	r2, r3
 8007ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007caa:	189b      	adds	r3, r3, r2
 8007cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	00da      	lsls	r2, r3, #3
 8007cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cb6:	18d3      	adds	r3, r2, r3
 8007cb8:	4ab6      	ldr	r2, [pc, #728]	@ (8007f94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8007cba:	4694      	mov	ip, r2
 8007cbc:	4463      	add	r3, ip
 8007cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	b29b      	uxth	r3, r3
 8007cc6:	059b      	lsls	r3, r3, #22
 8007cc8:	0d9b      	lsrs	r3, r3, #22
 8007cca:	b29a      	uxth	r2, r3
 8007ccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cce:	801a      	strh	r2, [r3, #0]
 8007cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd2:	881b      	ldrh	r3, [r3, #0]
 8007cd4:	b29b      	uxth	r3, r3
 8007cd6:	4ab0      	ldr	r2, [pc, #704]	@ (8007f98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cde:	801a      	strh	r2, [r3, #0]
 8007ce0:	e01b      	b.n	8007d1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	785b      	ldrb	r3, [r3, #1]
 8007ce6:	2b01      	cmp	r3, #1
 8007ce8:	d117      	bne.n	8007d1a <HAL_PCD_EP_DB_Transmit+0xfe>
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2250      	movs	r2, #80	@ 0x50
 8007cf6:	5a9b      	ldrh	r3, [r3, r2]
 8007cf8:	b29b      	uxth	r3, r3
 8007cfa:	001a      	movs	r2, r3
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cfe:	189b      	adds	r3, r3, r2
 8007d00:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	781b      	ldrb	r3, [r3, #0]
 8007d06:	00da      	lsls	r2, r3, #3
 8007d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d0a:	18d3      	adds	r3, r2, r3
 8007d0c:	4aa1      	ldr	r2, [pc, #644]	@ (8007f94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8007d0e:	4694      	mov	ip, r2
 8007d10:	4463      	add	r3, ip
 8007d12:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d16:	2200      	movs	r2, #0
 8007d18:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	785b      	ldrb	r3, [r3, #1]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d125      	bne.n	8007d74 <HAL_PCD_EP_DB_Transmit+0x158>
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	61fb      	str	r3, [r7, #28]
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2250      	movs	r2, #80	@ 0x50
 8007d34:	5a9b      	ldrh	r3, [r3, r2]
 8007d36:	b29b      	uxth	r3, r3
 8007d38:	001a      	movs	r2, r3
 8007d3a:	69fb      	ldr	r3, [r7, #28]
 8007d3c:	189b      	adds	r3, r3, r2
 8007d3e:	61fb      	str	r3, [r7, #28]
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	00da      	lsls	r2, r3, #3
 8007d46:	69fb      	ldr	r3, [r7, #28]
 8007d48:	18d3      	adds	r3, r2, r3
 8007d4a:	4a94      	ldr	r2, [pc, #592]	@ (8007f9c <HAL_PCD_EP_DB_Transmit+0x380>)
 8007d4c:	4694      	mov	ip, r2
 8007d4e:	4463      	add	r3, ip
 8007d50:	61bb      	str	r3, [r7, #24]
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	881b      	ldrh	r3, [r3, #0]
 8007d56:	b29b      	uxth	r3, r3
 8007d58:	059b      	lsls	r3, r3, #22
 8007d5a:	0d9b      	lsrs	r3, r3, #22
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	69bb      	ldr	r3, [r7, #24]
 8007d60:	801a      	strh	r2, [r3, #0]
 8007d62:	69bb      	ldr	r3, [r7, #24]
 8007d64:	881b      	ldrh	r3, [r3, #0]
 8007d66:	b29b      	uxth	r3, r3
 8007d68:	4a8b      	ldr	r2, [pc, #556]	@ (8007f98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	b29a      	uxth	r2, r3
 8007d6e:	69bb      	ldr	r3, [r7, #24]
 8007d70:	801a      	strh	r2, [r3, #0]
 8007d72:	e018      	b.n	8007da6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	785b      	ldrb	r3, [r3, #1]
 8007d78:	2b01      	cmp	r3, #1
 8007d7a:	d114      	bne.n	8007da6 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2250      	movs	r2, #80	@ 0x50
 8007d82:	5a9b      	ldrh	r3, [r3, r2]
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	001a      	movs	r2, r3
 8007d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d8a:	189b      	adds	r3, r3, r2
 8007d8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	00da      	lsls	r2, r3, #3
 8007d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d96:	18d3      	adds	r3, r2, r3
 8007d98:	4a80      	ldr	r2, [pc, #512]	@ (8007f9c <HAL_PCD_EP_DB_Transmit+0x380>)
 8007d9a:	4694      	mov	ip, r2
 8007d9c:	4463      	add	r3, ip
 8007d9e:	623b      	str	r3, [r7, #32]
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	2200      	movs	r2, #0
 8007da4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	781a      	ldrb	r2, [r3, #0]
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	0011      	movs	r1, r2
 8007dae:	0018      	movs	r0, r3
 8007db0:	f006 fa08 	bl	800e1c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007db4:	1dbb      	adds	r3, r7, #6
 8007db6:	881a      	ldrh	r2, [r3, #0]
 8007db8:	2380      	movs	r3, #128	@ 0x80
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	d100      	bne.n	8007dc2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8007dc0:	e309      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	001a      	movs	r2, r3
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	009b      	lsls	r3, r3, #2
 8007dce:	18d3      	adds	r3, r2, r3
 8007dd0:	881b      	ldrh	r3, [r3, #0]
 8007dd2:	b29a      	uxth	r2, r3
 8007dd4:	2016      	movs	r0, #22
 8007dd6:	183b      	adds	r3, r7, r0
 8007dd8:	4971      	ldr	r1, [pc, #452]	@ (8007fa0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8007dda:	400a      	ands	r2, r1
 8007ddc:	801a      	strh	r2, [r3, #0]
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	001a      	movs	r2, r3
 8007de4:	68bb      	ldr	r3, [r7, #8]
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	009b      	lsls	r3, r3, #2
 8007dea:	18d3      	adds	r3, r2, r3
 8007dec:	183a      	adds	r2, r7, r0
 8007dee:	8812      	ldrh	r2, [r2, #0]
 8007df0:	496c      	ldr	r1, [pc, #432]	@ (8007fa4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8007df2:	430a      	orrs	r2, r1
 8007df4:	b292      	uxth	r2, r2
 8007df6:	801a      	strh	r2, [r3, #0]
 8007df8:	e2ed      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8007dfa:	1dbb      	adds	r3, r7, #6
 8007dfc:	881a      	ldrh	r2, [r3, #0]
 8007dfe:	2380      	movs	r3, #128	@ 0x80
 8007e00:	01db      	lsls	r3, r3, #7
 8007e02:	4013      	ands	r3, r2
 8007e04:	d01a      	beq.n	8007e3c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	001a      	movs	r2, r3
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	18d3      	adds	r3, r2, r3
 8007e14:	881b      	ldrh	r3, [r3, #0]
 8007e16:	b29a      	uxth	r2, r3
 8007e18:	208a      	movs	r0, #138	@ 0x8a
 8007e1a:	183b      	adds	r3, r7, r0
 8007e1c:	4960      	ldr	r1, [pc, #384]	@ (8007fa0 <HAL_PCD_EP_DB_Transmit+0x384>)
 8007e1e:	400a      	ands	r2, r1
 8007e20:	801a      	strh	r2, [r3, #0]
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	001a      	movs	r2, r3
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	009b      	lsls	r3, r3, #2
 8007e2e:	18d3      	adds	r3, r2, r3
 8007e30:	183a      	adds	r2, r7, r0
 8007e32:	8812      	ldrh	r2, [r2, #0]
 8007e34:	495b      	ldr	r1, [pc, #364]	@ (8007fa4 <HAL_PCD_EP_DB_Transmit+0x388>)
 8007e36:	430a      	orrs	r2, r1
 8007e38:	b292      	uxth	r2, r2
 8007e3a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8007e3c:	68bb      	ldr	r3, [r7, #8]
 8007e3e:	2224      	movs	r2, #36	@ 0x24
 8007e40:	5c9b      	ldrb	r3, [r3, r2]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d000      	beq.n	8007e48 <HAL_PCD_EP_DB_Transmit+0x22c>
 8007e46:	e2c6      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	695a      	ldr	r2, [r3, #20]
 8007e4c:	2186      	movs	r1, #134	@ 0x86
 8007e4e:	187b      	adds	r3, r7, r1
 8007e50:	881b      	ldrh	r3, [r3, #0]
 8007e52:	18d2      	adds	r2, r2, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	69da      	ldr	r2, [r3, #28]
 8007e5c:	187b      	adds	r3, r7, r1
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	18d2      	adds	r2, r2, r3
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6a1a      	ldr	r2, [r3, #32]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d30c      	bcc.n	8007e8c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8007e72:	68bb      	ldr	r3, [r7, #8]
 8007e74:	691b      	ldr	r3, [r3, #16]
 8007e76:	218c      	movs	r1, #140	@ 0x8c
 8007e78:	187a      	adds	r2, r7, r1
 8007e7a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	6a1a      	ldr	r2, [r3, #32]
 8007e80:	187b      	adds	r3, r7, r1
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	1ad2      	subs	r2, r2, r3
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	621a      	str	r2, [r3, #32]
 8007e8a:	e01a      	b.n	8007ec2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	6a1b      	ldr	r3, [r3, #32]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d10a      	bne.n	8007eaa <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8007e94:	2386      	movs	r3, #134	@ 0x86
 8007e96:	18fb      	adds	r3, r7, r3
 8007e98:	881b      	ldrh	r3, [r3, #0]
 8007e9a:	228c      	movs	r2, #140	@ 0x8c
 8007e9c:	18ba      	adds	r2, r7, r2
 8007e9e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
 8007ea2:	2224      	movs	r2, #36	@ 0x24
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	5499      	strb	r1, [r3, r2]
 8007ea8:	e00b      	b.n	8007ec2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2224      	movs	r2, #36	@ 0x24
 8007eae:	2100      	movs	r1, #0
 8007eb0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	6a1b      	ldr	r3, [r3, #32]
 8007eb6:	228c      	movs	r2, #140	@ 0x8c
 8007eb8:	18ba      	adds	r2, r7, r2
 8007eba:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	785b      	ldrb	r3, [r3, #1]
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d000      	beq.n	8007ecc <HAL_PCD_EP_DB_Transmit+0x2b0>
 8007eca:	e06d      	b.n	8007fa8 <HAL_PCD_EP_DB_Transmit+0x38c>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	2250      	movs	r2, #80	@ 0x50
 8007ed8:	5a9b      	ldrh	r3, [r3, r2]
 8007eda:	b29b      	uxth	r3, r3
 8007edc:	001a      	movs	r2, r3
 8007ede:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee0:	189b      	adds	r3, r3, r2
 8007ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	00da      	lsls	r2, r3, #3
 8007eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007eec:	18d3      	adds	r3, r2, r3
 8007eee:	4a29      	ldr	r2, [pc, #164]	@ (8007f94 <HAL_PCD_EP_DB_Transmit+0x378>)
 8007ef0:	4694      	mov	ip, r2
 8007ef2:	4463      	add	r3, ip
 8007ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ef8:	881b      	ldrh	r3, [r3, #0]
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	059b      	lsls	r3, r3, #22
 8007efe:	0d9b      	lsrs	r3, r3, #22
 8007f00:	b29a      	uxth	r2, r3
 8007f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f04:	801a      	strh	r2, [r3, #0]
 8007f06:	228c      	movs	r2, #140	@ 0x8c
 8007f08:	18bb      	adds	r3, r7, r2
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007f0e:	d91a      	bls.n	8007f46 <HAL_PCD_EP_DB_Transmit+0x32a>
 8007f10:	18bb      	adds	r3, r7, r2
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	095b      	lsrs	r3, r3, #5
 8007f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f18:	18bb      	adds	r3, r7, r2
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	221f      	movs	r2, #31
 8007f1e:	4013      	ands	r3, r2
 8007f20:	d102      	bne.n	8007f28 <HAL_PCD_EP_DB_Transmit+0x30c>
 8007f22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f24:	3b01      	subs	r3, #1
 8007f26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	881b      	ldrh	r3, [r3, #0]
 8007f2c:	b29a      	uxth	r2, r3
 8007f2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f30:	b29b      	uxth	r3, r3
 8007f32:	029b      	lsls	r3, r3, #10
 8007f34:	b29b      	uxth	r3, r3
 8007f36:	4313      	orrs	r3, r2
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	4a17      	ldr	r2, [pc, #92]	@ (8007f98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8007f3c:	4313      	orrs	r3, r2
 8007f3e:	b29a      	uxth	r2, r3
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	801a      	strh	r2, [r3, #0]
 8007f44:	e04f      	b.n	8007fe6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8007f46:	238c      	movs	r3, #140	@ 0x8c
 8007f48:	18fb      	adds	r3, r7, r3
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d108      	bne.n	8007f62 <HAL_PCD_EP_DB_Transmit+0x346>
 8007f50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f52:	881b      	ldrh	r3, [r3, #0]
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	4a10      	ldr	r2, [pc, #64]	@ (8007f98 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8007f58:	4313      	orrs	r3, r2
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f5e:	801a      	strh	r2, [r3, #0]
 8007f60:	e041      	b.n	8007fe6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8007f62:	228c      	movs	r2, #140	@ 0x8c
 8007f64:	18bb      	adds	r3, r7, r2
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	085b      	lsrs	r3, r3, #1
 8007f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f6c:	18bb      	adds	r3, r7, r2
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2201      	movs	r2, #1
 8007f72:	4013      	ands	r3, r2
 8007f74:	d002      	beq.n	8007f7c <HAL_PCD_EP_DB_Transmit+0x360>
 8007f76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f78:	3301      	adds	r3, #1
 8007f7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f7e:	881b      	ldrh	r3, [r3, #0]
 8007f80:	b29a      	uxth	r2, r3
 8007f82:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	029b      	lsls	r3, r3, #10
 8007f88:	b29b      	uxth	r3, r3
 8007f8a:	4313      	orrs	r3, r2
 8007f8c:	b29a      	uxth	r2, r3
 8007f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f90:	801a      	strh	r2, [r3, #0]
 8007f92:	e028      	b.n	8007fe6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8007f94:	00000402 	.word	0x00000402
 8007f98:	ffff8000 	.word	0xffff8000
 8007f9c:	00000406 	.word	0x00000406
 8007fa0:	ffff8f8f 	.word	0xffff8f8f
 8007fa4:	ffffc080 	.word	0xffffc080
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	785b      	ldrb	r3, [r3, #1]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d11a      	bne.n	8007fe6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	2250      	movs	r2, #80	@ 0x50
 8007fbc:	5a9b      	ldrh	r3, [r3, r2]
 8007fbe:	b29b      	uxth	r3, r3
 8007fc0:	001a      	movs	r2, r3
 8007fc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fc4:	189b      	adds	r3, r3, r2
 8007fc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007fc8:	68bb      	ldr	r3, [r7, #8]
 8007fca:	781b      	ldrb	r3, [r3, #0]
 8007fcc:	00da      	lsls	r2, r3, #3
 8007fce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fd0:	18d3      	adds	r3, r2, r3
 8007fd2:	4adb      	ldr	r2, [pc, #876]	@ (8008340 <HAL_PCD_EP_DB_Transmit+0x724>)
 8007fd4:	4694      	mov	ip, r2
 8007fd6:	4463      	add	r3, ip
 8007fd8:	643b      	str	r3, [r7, #64]	@ 0x40
 8007fda:	238c      	movs	r3, #140	@ 0x8c
 8007fdc:	18fb      	adds	r3, r7, r3
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	b29a      	uxth	r2, r3
 8007fe2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007fe4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6818      	ldr	r0, [r3, #0]
 8007fea:	68bb      	ldr	r3, [r7, #8]
 8007fec:	6959      	ldr	r1, [r3, #20]
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	891a      	ldrh	r2, [r3, #8]
 8007ff2:	238c      	movs	r3, #140	@ 0x8c
 8007ff4:	18fb      	adds	r3, r7, r3
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	b29b      	uxth	r3, r3
 8007ffa:	f004 f925 	bl	800c248 <USB_WritePMA>
 8007ffe:	e1ea      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2250      	movs	r2, #80	@ 0x50
 8008006:	5a9b      	ldrh	r3, [r3, r2]
 8008008:	b29b      	uxth	r3, r3
 800800a:	001a      	movs	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	781b      	ldrb	r3, [r3, #0]
 8008010:	00db      	lsls	r3, r3, #3
 8008012:	18d2      	adds	r2, r2, r3
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	18d3      	adds	r3, r2, r3
 800801a:	4aca      	ldr	r2, [pc, #808]	@ (8008344 <HAL_PCD_EP_DB_Transmit+0x728>)
 800801c:	4694      	mov	ip, r2
 800801e:	4463      	add	r3, ip
 8008020:	881a      	ldrh	r2, [r3, #0]
 8008022:	2186      	movs	r1, #134	@ 0x86
 8008024:	187b      	adds	r3, r7, r1
 8008026:	0592      	lsls	r2, r2, #22
 8008028:	0d92      	lsrs	r2, r2, #22
 800802a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	699a      	ldr	r2, [r3, #24]
 8008030:	187b      	adds	r3, r7, r1
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	429a      	cmp	r2, r3
 8008036:	d307      	bcc.n	8008048 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	699a      	ldr	r2, [r3, #24]
 800803c:	187b      	adds	r3, r7, r1
 800803e:	881b      	ldrh	r3, [r3, #0]
 8008040:	1ad2      	subs	r2, r2, r3
 8008042:	68bb      	ldr	r3, [r7, #8]
 8008044:	619a      	str	r2, [r3, #24]
 8008046:	e002      	b.n	800804e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8008048:	68bb      	ldr	r3, [r7, #8]
 800804a:	2200      	movs	r2, #0
 800804c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	699b      	ldr	r3, [r3, #24]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d000      	beq.n	8008058 <HAL_PCD_EP_DB_Transmit+0x43c>
 8008056:	e0bb      	b.n	80081d0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	785b      	ldrb	r3, [r3, #1]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d125      	bne.n	80080ac <HAL_PCD_EP_DB_Transmit+0x490>
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2250      	movs	r2, #80	@ 0x50
 800806c:	5a9b      	ldrh	r3, [r3, r2]
 800806e:	b29b      	uxth	r3, r3
 8008070:	001a      	movs	r2, r3
 8008072:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008074:	189b      	adds	r3, r3, r2
 8008076:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	00da      	lsls	r2, r3, #3
 800807e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8008080:	18d3      	adds	r3, r2, r3
 8008082:	4aaf      	ldr	r2, [pc, #700]	@ (8008340 <HAL_PCD_EP_DB_Transmit+0x724>)
 8008084:	4694      	mov	ip, r2
 8008086:	4463      	add	r3, ip
 8008088:	67bb      	str	r3, [r7, #120]	@ 0x78
 800808a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800808c:	881b      	ldrh	r3, [r3, #0]
 800808e:	b29b      	uxth	r3, r3
 8008090:	059b      	lsls	r3, r3, #22
 8008092:	0d9b      	lsrs	r3, r3, #22
 8008094:	b29a      	uxth	r2, r3
 8008096:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008098:	801a      	strh	r2, [r3, #0]
 800809a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800809c:	881b      	ldrh	r3, [r3, #0]
 800809e:	b29b      	uxth	r3, r3
 80080a0:	4aa9      	ldr	r2, [pc, #676]	@ (8008348 <HAL_PCD_EP_DB_Transmit+0x72c>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	b29a      	uxth	r2, r3
 80080a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80080a8:	801a      	strh	r2, [r3, #0]
 80080aa:	e01b      	b.n	80080e4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	d117      	bne.n	80080e4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	667b      	str	r3, [r7, #100]	@ 0x64
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	2250      	movs	r2, #80	@ 0x50
 80080c0:	5a9b      	ldrh	r3, [r3, r2]
 80080c2:	b29b      	uxth	r3, r3
 80080c4:	001a      	movs	r2, r3
 80080c6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080c8:	189b      	adds	r3, r3, r2
 80080ca:	667b      	str	r3, [r7, #100]	@ 0x64
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	781b      	ldrb	r3, [r3, #0]
 80080d0:	00da      	lsls	r2, r3, #3
 80080d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80080d4:	18d3      	adds	r3, r2, r3
 80080d6:	4a9a      	ldr	r2, [pc, #616]	@ (8008340 <HAL_PCD_EP_DB_Transmit+0x724>)
 80080d8:	4694      	mov	ip, r2
 80080da:	4463      	add	r3, ip
 80080dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80080de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80080e0:	2200      	movs	r2, #0
 80080e2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	677b      	str	r3, [r7, #116]	@ 0x74
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	785b      	ldrb	r3, [r3, #1]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d12b      	bne.n	800814a <HAL_PCD_EP_DB_Transmit+0x52e>
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2250      	movs	r2, #80	@ 0x50
 80080fe:	5a9b      	ldrh	r3, [r3, r2]
 8008100:	b29b      	uxth	r3, r3
 8008102:	001a      	movs	r2, r3
 8008104:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008106:	189b      	adds	r3, r3, r2
 8008108:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	00da      	lsls	r2, r3, #3
 8008110:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008112:	18d3      	adds	r3, r2, r3
 8008114:	4a8b      	ldr	r2, [pc, #556]	@ (8008344 <HAL_PCD_EP_DB_Transmit+0x728>)
 8008116:	4694      	mov	ip, r2
 8008118:	4463      	add	r3, ip
 800811a:	2180      	movs	r1, #128	@ 0x80
 800811c:	187a      	adds	r2, r7, r1
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	187b      	adds	r3, r7, r1
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	881b      	ldrh	r3, [r3, #0]
 8008126:	b29b      	uxth	r3, r3
 8008128:	059b      	lsls	r3, r3, #22
 800812a:	0d9b      	lsrs	r3, r3, #22
 800812c:	b29a      	uxth	r2, r3
 800812e:	187b      	adds	r3, r7, r1
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	801a      	strh	r2, [r3, #0]
 8008134:	187b      	adds	r3, r7, r1
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	881b      	ldrh	r3, [r3, #0]
 800813a:	b29b      	uxth	r3, r3
 800813c:	4a82      	ldr	r2, [pc, #520]	@ (8008348 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800813e:	4313      	orrs	r3, r2
 8008140:	b29a      	uxth	r2, r3
 8008142:	187b      	adds	r3, r7, r1
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	801a      	strh	r2, [r3, #0]
 8008148:	e018      	b.n	800817c <HAL_PCD_EP_DB_Transmit+0x560>
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	785b      	ldrb	r3, [r3, #1]
 800814e:	2b01      	cmp	r3, #1
 8008150:	d114      	bne.n	800817c <HAL_PCD_EP_DB_Transmit+0x560>
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	2250      	movs	r2, #80	@ 0x50
 8008158:	5a9b      	ldrh	r3, [r3, r2]
 800815a:	b29b      	uxth	r3, r3
 800815c:	001a      	movs	r2, r3
 800815e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008160:	189b      	adds	r3, r3, r2
 8008162:	677b      	str	r3, [r7, #116]	@ 0x74
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	781b      	ldrb	r3, [r3, #0]
 8008168:	00da      	lsls	r2, r3, #3
 800816a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800816c:	18d3      	adds	r3, r2, r3
 800816e:	4a75      	ldr	r2, [pc, #468]	@ (8008344 <HAL_PCD_EP_DB_Transmit+0x728>)
 8008170:	4694      	mov	ip, r2
 8008172:	4463      	add	r3, ip
 8008174:	673b      	str	r3, [r7, #112]	@ 0x70
 8008176:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008178:	2200      	movs	r2, #0
 800817a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	781a      	ldrb	r2, [r3, #0]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	0011      	movs	r1, r2
 8008184:	0018      	movs	r0, r3
 8008186:	f006 f81d 	bl	800e1c4 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800818a:	1dbb      	adds	r3, r7, #6
 800818c:	881a      	ldrh	r2, [r3, #0]
 800818e:	2380      	movs	r3, #128	@ 0x80
 8008190:	01db      	lsls	r3, r3, #7
 8008192:	4013      	ands	r3, r2
 8008194:	d000      	beq.n	8008198 <HAL_PCD_EP_DB_Transmit+0x57c>
 8008196:	e11e      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	001a      	movs	r2, r3
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	781b      	ldrb	r3, [r3, #0]
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	18d3      	adds	r3, r2, r3
 80081a6:	881b      	ldrh	r3, [r3, #0]
 80081a8:	b29a      	uxth	r2, r3
 80081aa:	2088      	movs	r0, #136	@ 0x88
 80081ac:	183b      	adds	r3, r7, r0
 80081ae:	4967      	ldr	r1, [pc, #412]	@ (800834c <HAL_PCD_EP_DB_Transmit+0x730>)
 80081b0:	400a      	ands	r2, r1
 80081b2:	801a      	strh	r2, [r3, #0]
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	001a      	movs	r2, r3
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	009b      	lsls	r3, r3, #2
 80081c0:	18d3      	adds	r3, r2, r3
 80081c2:	183a      	adds	r2, r7, r0
 80081c4:	8812      	ldrh	r2, [r2, #0]
 80081c6:	4962      	ldr	r1, [pc, #392]	@ (8008350 <HAL_PCD_EP_DB_Transmit+0x734>)
 80081c8:	430a      	orrs	r2, r1
 80081ca:	b292      	uxth	r2, r2
 80081cc:	801a      	strh	r2, [r3, #0]
 80081ce:	e102      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80081d0:	1dbb      	adds	r3, r7, #6
 80081d2:	881a      	ldrh	r2, [r3, #0]
 80081d4:	2380      	movs	r3, #128	@ 0x80
 80081d6:	01db      	lsls	r3, r3, #7
 80081d8:	4013      	ands	r3, r2
 80081da:	d11a      	bne.n	8008212 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	001a      	movs	r2, r3
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	18d3      	adds	r3, r2, r3
 80081ea:	881b      	ldrh	r3, [r3, #0]
 80081ec:	b29a      	uxth	r2, r3
 80081ee:	204e      	movs	r0, #78	@ 0x4e
 80081f0:	183b      	adds	r3, r7, r0
 80081f2:	4956      	ldr	r1, [pc, #344]	@ (800834c <HAL_PCD_EP_DB_Transmit+0x730>)
 80081f4:	400a      	ands	r2, r1
 80081f6:	801a      	strh	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	001a      	movs	r2, r3
 80081fe:	68bb      	ldr	r3, [r7, #8]
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	009b      	lsls	r3, r3, #2
 8008204:	18d3      	adds	r3, r2, r3
 8008206:	183a      	adds	r2, r7, r0
 8008208:	8812      	ldrh	r2, [r2, #0]
 800820a:	4951      	ldr	r1, [pc, #324]	@ (8008350 <HAL_PCD_EP_DB_Transmit+0x734>)
 800820c:	430a      	orrs	r2, r1
 800820e:	b292      	uxth	r2, r2
 8008210:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	2224      	movs	r2, #36	@ 0x24
 8008216:	5c9b      	ldrb	r3, [r3, r2]
 8008218:	2b01      	cmp	r3, #1
 800821a:	d000      	beq.n	800821e <HAL_PCD_EP_DB_Transmit+0x602>
 800821c:	e0db      	b.n	80083d6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	695a      	ldr	r2, [r3, #20]
 8008222:	2186      	movs	r1, #134	@ 0x86
 8008224:	187b      	adds	r3, r7, r1
 8008226:	881b      	ldrh	r3, [r3, #0]
 8008228:	18d2      	adds	r2, r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800822e:	68bb      	ldr	r3, [r7, #8]
 8008230:	69da      	ldr	r2, [r3, #28]
 8008232:	187b      	adds	r3, r7, r1
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	18d2      	adds	r2, r2, r3
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	6a1a      	ldr	r2, [r3, #32]
 8008240:	68bb      	ldr	r3, [r7, #8]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	429a      	cmp	r2, r3
 8008246:	d30c      	bcc.n	8008262 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	691b      	ldr	r3, [r3, #16]
 800824c:	218c      	movs	r1, #140	@ 0x8c
 800824e:	187a      	adds	r2, r7, r1
 8008250:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8008252:	68bb      	ldr	r3, [r7, #8]
 8008254:	6a1a      	ldr	r2, [r3, #32]
 8008256:	187b      	adds	r3, r7, r1
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	1ad2      	subs	r2, r2, r3
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	621a      	str	r2, [r3, #32]
 8008260:	e01a      	b.n	8008298 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	6a1b      	ldr	r3, [r3, #32]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d10a      	bne.n	8008280 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800826a:	2386      	movs	r3, #134	@ 0x86
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	881b      	ldrh	r3, [r3, #0]
 8008270:	228c      	movs	r2, #140	@ 0x8c
 8008272:	18ba      	adds	r2, r7, r2
 8008274:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2224      	movs	r2, #36	@ 0x24
 800827a:	2100      	movs	r1, #0
 800827c:	5499      	strb	r1, [r3, r2]
 800827e:	e00b      	b.n	8008298 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	6a1b      	ldr	r3, [r3, #32]
 8008284:	228c      	movs	r2, #140	@ 0x8c
 8008286:	18ba      	adds	r2, r7, r2
 8008288:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800828a:	68bb      	ldr	r3, [r7, #8]
 800828c:	2200      	movs	r2, #0
 800828e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2224      	movs	r2, #36	@ 0x24
 8008294:	2100      	movs	r1, #0
 8008296:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	657b      	str	r3, [r7, #84]	@ 0x54
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	785b      	ldrb	r3, [r3, #1]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d000      	beq.n	80082a8 <HAL_PCD_EP_DB_Transmit+0x68c>
 80082a6:	e06e      	b.n	8008386 <HAL_PCD_EP_DB_Transmit+0x76a>
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	2250      	movs	r2, #80	@ 0x50
 80082b4:	5a9b      	ldrh	r3, [r3, r2]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	001a      	movs	r2, r3
 80082ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082bc:	189b      	adds	r3, r3, r2
 80082be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	781b      	ldrb	r3, [r3, #0]
 80082c4:	00da      	lsls	r2, r3, #3
 80082c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082c8:	18d3      	adds	r3, r2, r3
 80082ca:	4a1e      	ldr	r2, [pc, #120]	@ (8008344 <HAL_PCD_EP_DB_Transmit+0x728>)
 80082cc:	4694      	mov	ip, r2
 80082ce:	4463      	add	r3, ip
 80082d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80082d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082d4:	881b      	ldrh	r3, [r3, #0]
 80082d6:	b29b      	uxth	r3, r3
 80082d8:	059b      	lsls	r3, r3, #22
 80082da:	0d9b      	lsrs	r3, r3, #22
 80082dc:	b29a      	uxth	r2, r3
 80082de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80082e0:	801a      	strh	r2, [r3, #0]
 80082e2:	228c      	movs	r2, #140	@ 0x8c
 80082e4:	18bb      	adds	r3, r7, r2
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b3e      	cmp	r3, #62	@ 0x3e
 80082ea:	d91a      	bls.n	8008322 <HAL_PCD_EP_DB_Transmit+0x706>
 80082ec:	18bb      	adds	r3, r7, r2
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80082f4:	18bb      	adds	r3, r7, r2
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	221f      	movs	r2, #31
 80082fa:	4013      	ands	r3, r2
 80082fc:	d102      	bne.n	8008304 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80082fe:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008300:	3b01      	subs	r3, #1
 8008302:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008304:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008306:	881b      	ldrh	r3, [r3, #0]
 8008308:	b29a      	uxth	r2, r3
 800830a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800830c:	b29b      	uxth	r3, r3
 800830e:	029b      	lsls	r3, r3, #10
 8008310:	b29b      	uxth	r3, r3
 8008312:	4313      	orrs	r3, r2
 8008314:	b29b      	uxth	r3, r3
 8008316:	4a0c      	ldr	r2, [pc, #48]	@ (8008348 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8008318:	4313      	orrs	r3, r2
 800831a:	b29a      	uxth	r2, r3
 800831c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800831e:	801a      	strh	r2, [r3, #0]
 8008320:	e04d      	b.n	80083be <HAL_PCD_EP_DB_Transmit+0x7a2>
 8008322:	238c      	movs	r3, #140	@ 0x8c
 8008324:	18fb      	adds	r3, r7, r3
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d113      	bne.n	8008354 <HAL_PCD_EP_DB_Transmit+0x738>
 800832c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800832e:	881b      	ldrh	r3, [r3, #0]
 8008330:	b29b      	uxth	r3, r3
 8008332:	4a05      	ldr	r2, [pc, #20]	@ (8008348 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8008334:	4313      	orrs	r3, r2
 8008336:	b29a      	uxth	r2, r3
 8008338:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800833a:	801a      	strh	r2, [r3, #0]
 800833c:	e03f      	b.n	80083be <HAL_PCD_EP_DB_Transmit+0x7a2>
 800833e:	46c0      	nop			@ (mov r8, r8)
 8008340:	00000402 	.word	0x00000402
 8008344:	00000406 	.word	0x00000406
 8008348:	ffff8000 	.word	0xffff8000
 800834c:	ffff8f8f 	.word	0xffff8f8f
 8008350:	ffffc080 	.word	0xffffc080
 8008354:	228c      	movs	r2, #140	@ 0x8c
 8008356:	18bb      	adds	r3, r7, r2
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	085b      	lsrs	r3, r3, #1
 800835c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800835e:	18bb      	adds	r3, r7, r2
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2201      	movs	r2, #1
 8008364:	4013      	ands	r3, r2
 8008366:	d002      	beq.n	800836e <HAL_PCD_EP_DB_Transmit+0x752>
 8008368:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800836a:	3301      	adds	r3, #1
 800836c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800836e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008370:	881b      	ldrh	r3, [r3, #0]
 8008372:	b29a      	uxth	r2, r3
 8008374:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008376:	b29b      	uxth	r3, r3
 8008378:	029b      	lsls	r3, r3, #10
 800837a:	b29b      	uxth	r3, r3
 800837c:	4313      	orrs	r3, r2
 800837e:	b29a      	uxth	r2, r3
 8008380:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008382:	801a      	strh	r2, [r3, #0]
 8008384:	e01b      	b.n	80083be <HAL_PCD_EP_DB_Transmit+0x7a2>
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	785b      	ldrb	r3, [r3, #1]
 800838a:	2b01      	cmp	r3, #1
 800838c:	d117      	bne.n	80083be <HAL_PCD_EP_DB_Transmit+0x7a2>
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	681b      	ldr	r3, [r3, #0]
 8008392:	2250      	movs	r2, #80	@ 0x50
 8008394:	5a9b      	ldrh	r3, [r3, r2]
 8008396:	b29b      	uxth	r3, r3
 8008398:	001a      	movs	r2, r3
 800839a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800839c:	189b      	adds	r3, r3, r2
 800839e:	657b      	str	r3, [r7, #84]	@ 0x54
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	00da      	lsls	r2, r3, #3
 80083a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80083a8:	18d3      	adds	r3, r2, r3
 80083aa:	4a21      	ldr	r2, [pc, #132]	@ (8008430 <HAL_PCD_EP_DB_Transmit+0x814>)
 80083ac:	4694      	mov	ip, r2
 80083ae:	4463      	add	r3, ip
 80083b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80083b2:	238c      	movs	r3, #140	@ 0x8c
 80083b4:	18fb      	adds	r3, r7, r3
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	b29a      	uxth	r2, r3
 80083ba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80083bc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6818      	ldr	r0, [r3, #0]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	6959      	ldr	r1, [r3, #20]
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	895a      	ldrh	r2, [r3, #10]
 80083ca:	238c      	movs	r3, #140	@ 0x8c
 80083cc:	18fb      	adds	r3, r7, r3
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	f003 ff39 	bl	800c248 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	001a      	movs	r2, r3
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	18d3      	adds	r3, r2, r3
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	b29a      	uxth	r2, r3
 80083e8:	2014      	movs	r0, #20
 80083ea:	183b      	adds	r3, r7, r0
 80083ec:	4911      	ldr	r1, [pc, #68]	@ (8008434 <HAL_PCD_EP_DB_Transmit+0x818>)
 80083ee:	400a      	ands	r2, r1
 80083f0:	801a      	strh	r2, [r3, #0]
 80083f2:	183b      	adds	r3, r7, r0
 80083f4:	183a      	adds	r2, r7, r0
 80083f6:	8812      	ldrh	r2, [r2, #0]
 80083f8:	2110      	movs	r1, #16
 80083fa:	404a      	eors	r2, r1
 80083fc:	801a      	strh	r2, [r3, #0]
 80083fe:	183b      	adds	r3, r7, r0
 8008400:	183a      	adds	r2, r7, r0
 8008402:	8812      	ldrh	r2, [r2, #0]
 8008404:	2120      	movs	r1, #32
 8008406:	404a      	eors	r2, r1
 8008408:	801a      	strh	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	001a      	movs	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	009b      	lsls	r3, r3, #2
 8008416:	18d3      	adds	r3, r2, r3
 8008418:	183a      	adds	r2, r7, r0
 800841a:	8812      	ldrh	r2, [r2, #0]
 800841c:	4906      	ldr	r1, [pc, #24]	@ (8008438 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800841e:	430a      	orrs	r2, r1
 8008420:	b292      	uxth	r2, r2
 8008422:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	0018      	movs	r0, r3
 8008428:	46bd      	mov	sp, r7
 800842a:	b024      	add	sp, #144	@ 0x90
 800842c:	bd80      	pop	{r7, pc}
 800842e:	46c0      	nop			@ (mov r8, r8)
 8008430:	00000406 	.word	0x00000406
 8008434:	ffff8fbf 	.word	0xffff8fbf
 8008438:	ffff8080 	.word	0xffff8080

0800843c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800843c:	b590      	push	{r4, r7, lr}
 800843e:	b087      	sub	sp, #28
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	0008      	movs	r0, r1
 8008446:	0011      	movs	r1, r2
 8008448:	607b      	str	r3, [r7, #4]
 800844a:	240a      	movs	r4, #10
 800844c:	193b      	adds	r3, r7, r4
 800844e:	1c02      	adds	r2, r0, #0
 8008450:	801a      	strh	r2, [r3, #0]
 8008452:	2308      	movs	r3, #8
 8008454:	18fb      	adds	r3, r7, r3
 8008456:	1c0a      	adds	r2, r1, #0
 8008458:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800845a:	0021      	movs	r1, r4
 800845c:	187b      	adds	r3, r7, r1
 800845e:	881b      	ldrh	r3, [r3, #0]
 8008460:	2280      	movs	r2, #128	@ 0x80
 8008462:	4013      	ands	r3, r2
 8008464:	b29b      	uxth	r3, r3
 8008466:	2b00      	cmp	r3, #0
 8008468:	d00c      	beq.n	8008484 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800846a:	187b      	adds	r3, r7, r1
 800846c:	881b      	ldrh	r3, [r3, #0]
 800846e:	2207      	movs	r2, #7
 8008470:	4013      	ands	r3, r2
 8008472:	1c5a      	adds	r2, r3, #1
 8008474:	0013      	movs	r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	189b      	adds	r3, r3, r2
 800847a:	00db      	lsls	r3, r3, #3
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	18d3      	adds	r3, r2, r3
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	e00b      	b.n	800849c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008484:	230a      	movs	r3, #10
 8008486:	18fb      	adds	r3, r7, r3
 8008488:	881a      	ldrh	r2, [r3, #0]
 800848a:	0013      	movs	r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	189b      	adds	r3, r3, r2
 8008490:	00db      	lsls	r3, r3, #3
 8008492:	3369      	adds	r3, #105	@ 0x69
 8008494:	33ff      	adds	r3, #255	@ 0xff
 8008496:	68fa      	ldr	r2, [r7, #12]
 8008498:	18d3      	adds	r3, r2, r3
 800849a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800849c:	2308      	movs	r3, #8
 800849e:	18fb      	adds	r3, r7, r3
 80084a0:	881b      	ldrh	r3, [r3, #0]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d107      	bne.n	80084b6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	2200      	movs	r2, #0
 80084aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	b29a      	uxth	r2, r3
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	80da      	strh	r2, [r3, #6]
 80084b4:	e00b      	b.n	80084ce <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80084b6:	697b      	ldr	r3, [r7, #20]
 80084b8:	2201      	movs	r2, #1
 80084ba:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	b29a      	uxth	r2, r3
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	0c1b      	lsrs	r3, r3, #16
 80084c8:	b29a      	uxth	r2, r3
 80084ca:	697b      	ldr	r3, [r7, #20]
 80084cc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80084ce:	2300      	movs	r3, #0
}
 80084d0:	0018      	movs	r0, r3
 80084d2:	46bd      	mov	sp, r7
 80084d4:	b007      	add	sp, #28
 80084d6:	bd90      	pop	{r4, r7, pc}

080084d8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b084      	sub	sp, #16
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	23ba      	movs	r3, #186	@ 0xba
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	2101      	movs	r1, #1
 80084ee:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80084f0:	687a      	ldr	r2, [r7, #4]
 80084f2:	23b8      	movs	r3, #184	@ 0xb8
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	2100      	movs	r1, #0
 80084f8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	2254      	movs	r2, #84	@ 0x54
 80084fe:	5a9b      	ldrh	r3, [r3, r2]
 8008500:	b29b      	uxth	r3, r3
 8008502:	2201      	movs	r2, #1
 8008504:	4313      	orrs	r3, r2
 8008506:	b299      	uxth	r1, r3
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2254      	movs	r2, #84	@ 0x54
 800850c:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2254      	movs	r2, #84	@ 0x54
 8008512:	5a9b      	ldrh	r3, [r3, r2]
 8008514:	b29b      	uxth	r3, r3
 8008516:	2202      	movs	r2, #2
 8008518:	4313      	orrs	r3, r2
 800851a:	b299      	uxth	r1, r3
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2254      	movs	r2, #84	@ 0x54
 8008520:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8008522:	2300      	movs	r3, #0
}
 8008524:	0018      	movs	r0, r3
 8008526:	46bd      	mov	sp, r7
 8008528:	b004      	add	sp, #16
 800852a:	bd80      	pop	{r7, pc}

0800852c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b082      	sub	sp, #8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
 8008534:	000a      	movs	r2, r1
 8008536:	1cfb      	adds	r3, r7, #3
 8008538:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800853a:	46c0      	nop			@ (mov r8, r8)
 800853c:	46bd      	mov	sp, r7
 800853e:	b002      	add	sp, #8
 8008540:	bd80      	pop	{r7, pc}
	...

08008544 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008544:	b580      	push	{r7, lr}
 8008546:	b088      	sub	sp, #32
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d102      	bne.n	8008558 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	f000 fb76 	bl	8008c44 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	2201      	movs	r2, #1
 800855e:	4013      	ands	r3, r2
 8008560:	d100      	bne.n	8008564 <HAL_RCC_OscConfig+0x20>
 8008562:	e08e      	b.n	8008682 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8008564:	4bc5      	ldr	r3, [pc, #788]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008566:	685b      	ldr	r3, [r3, #4]
 8008568:	220c      	movs	r2, #12
 800856a:	4013      	ands	r3, r2
 800856c:	2b04      	cmp	r3, #4
 800856e:	d00e      	beq.n	800858e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8008570:	4bc2      	ldr	r3, [pc, #776]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	220c      	movs	r2, #12
 8008576:	4013      	ands	r3, r2
 8008578:	2b08      	cmp	r3, #8
 800857a:	d117      	bne.n	80085ac <HAL_RCC_OscConfig+0x68>
 800857c:	4bbf      	ldr	r3, [pc, #764]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	23c0      	movs	r3, #192	@ 0xc0
 8008582:	025b      	lsls	r3, r3, #9
 8008584:	401a      	ands	r2, r3
 8008586:	2380      	movs	r3, #128	@ 0x80
 8008588:	025b      	lsls	r3, r3, #9
 800858a:	429a      	cmp	r2, r3
 800858c:	d10e      	bne.n	80085ac <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800858e:	4bbb      	ldr	r3, [pc, #748]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008590:	681a      	ldr	r2, [r3, #0]
 8008592:	2380      	movs	r3, #128	@ 0x80
 8008594:	029b      	lsls	r3, r3, #10
 8008596:	4013      	ands	r3, r2
 8008598:	d100      	bne.n	800859c <HAL_RCC_OscConfig+0x58>
 800859a:	e071      	b.n	8008680 <HAL_RCC_OscConfig+0x13c>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d000      	beq.n	80085a6 <HAL_RCC_OscConfig+0x62>
 80085a4:	e06c      	b.n	8008680 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80085a6:	2301      	movs	r3, #1
 80085a8:	f000 fb4c 	bl	8008c44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d107      	bne.n	80085c4 <HAL_RCC_OscConfig+0x80>
 80085b4:	4bb1      	ldr	r3, [pc, #708]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	4bb0      	ldr	r3, [pc, #704]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085ba:	2180      	movs	r1, #128	@ 0x80
 80085bc:	0249      	lsls	r1, r1, #9
 80085be:	430a      	orrs	r2, r1
 80085c0:	601a      	str	r2, [r3, #0]
 80085c2:	e02f      	b.n	8008624 <HAL_RCC_OscConfig+0xe0>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	685b      	ldr	r3, [r3, #4]
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d10c      	bne.n	80085e6 <HAL_RCC_OscConfig+0xa2>
 80085cc:	4bab      	ldr	r3, [pc, #684]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085ce:	681a      	ldr	r2, [r3, #0]
 80085d0:	4baa      	ldr	r3, [pc, #680]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085d2:	49ab      	ldr	r1, [pc, #684]	@ (8008880 <HAL_RCC_OscConfig+0x33c>)
 80085d4:	400a      	ands	r2, r1
 80085d6:	601a      	str	r2, [r3, #0]
 80085d8:	4ba8      	ldr	r3, [pc, #672]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	4ba7      	ldr	r3, [pc, #668]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085de:	49a9      	ldr	r1, [pc, #676]	@ (8008884 <HAL_RCC_OscConfig+0x340>)
 80085e0:	400a      	ands	r2, r1
 80085e2:	601a      	str	r2, [r3, #0]
 80085e4:	e01e      	b.n	8008624 <HAL_RCC_OscConfig+0xe0>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	2b05      	cmp	r3, #5
 80085ec:	d10e      	bne.n	800860c <HAL_RCC_OscConfig+0xc8>
 80085ee:	4ba3      	ldr	r3, [pc, #652]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4ba2      	ldr	r3, [pc, #648]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085f4:	2180      	movs	r1, #128	@ 0x80
 80085f6:	02c9      	lsls	r1, r1, #11
 80085f8:	430a      	orrs	r2, r1
 80085fa:	601a      	str	r2, [r3, #0]
 80085fc:	4b9f      	ldr	r3, [pc, #636]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80085fe:	681a      	ldr	r2, [r3, #0]
 8008600:	4b9e      	ldr	r3, [pc, #632]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008602:	2180      	movs	r1, #128	@ 0x80
 8008604:	0249      	lsls	r1, r1, #9
 8008606:	430a      	orrs	r2, r1
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	e00b      	b.n	8008624 <HAL_RCC_OscConfig+0xe0>
 800860c:	4b9b      	ldr	r3, [pc, #620]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800860e:	681a      	ldr	r2, [r3, #0]
 8008610:	4b9a      	ldr	r3, [pc, #616]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008612:	499b      	ldr	r1, [pc, #620]	@ (8008880 <HAL_RCC_OscConfig+0x33c>)
 8008614:	400a      	ands	r2, r1
 8008616:	601a      	str	r2, [r3, #0]
 8008618:	4b98      	ldr	r3, [pc, #608]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800861a:	681a      	ldr	r2, [r3, #0]
 800861c:	4b97      	ldr	r3, [pc, #604]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800861e:	4999      	ldr	r1, [pc, #612]	@ (8008884 <HAL_RCC_OscConfig+0x340>)
 8008620:	400a      	ands	r2, r1
 8008622:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	685b      	ldr	r3, [r3, #4]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d014      	beq.n	8008656 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800862c:	f7fb fe7c 	bl	8004328 <HAL_GetTick>
 8008630:	0003      	movs	r3, r0
 8008632:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008634:	e008      	b.n	8008648 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008636:	f7fb fe77 	bl	8004328 <HAL_GetTick>
 800863a:	0002      	movs	r2, r0
 800863c:	69bb      	ldr	r3, [r7, #24]
 800863e:	1ad3      	subs	r3, r2, r3
 8008640:	2b64      	cmp	r3, #100	@ 0x64
 8008642:	d901      	bls.n	8008648 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8008644:	2303      	movs	r3, #3
 8008646:	e2fd      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008648:	4b8c      	ldr	r3, [pc, #560]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	2380      	movs	r3, #128	@ 0x80
 800864e:	029b      	lsls	r3, r3, #10
 8008650:	4013      	ands	r3, r2
 8008652:	d0f0      	beq.n	8008636 <HAL_RCC_OscConfig+0xf2>
 8008654:	e015      	b.n	8008682 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008656:	f7fb fe67 	bl	8004328 <HAL_GetTick>
 800865a:	0003      	movs	r3, r0
 800865c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800865e:	e008      	b.n	8008672 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008660:	f7fb fe62 	bl	8004328 <HAL_GetTick>
 8008664:	0002      	movs	r2, r0
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	1ad3      	subs	r3, r2, r3
 800866a:	2b64      	cmp	r3, #100	@ 0x64
 800866c:	d901      	bls.n	8008672 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800866e:	2303      	movs	r3, #3
 8008670:	e2e8      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008672:	4b82      	ldr	r3, [pc, #520]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	2380      	movs	r3, #128	@ 0x80
 8008678:	029b      	lsls	r3, r3, #10
 800867a:	4013      	ands	r3, r2
 800867c:	d1f0      	bne.n	8008660 <HAL_RCC_OscConfig+0x11c>
 800867e:	e000      	b.n	8008682 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008680:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2202      	movs	r2, #2
 8008688:	4013      	ands	r3, r2
 800868a:	d100      	bne.n	800868e <HAL_RCC_OscConfig+0x14a>
 800868c:	e06c      	b.n	8008768 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800868e:	4b7b      	ldr	r3, [pc, #492]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	220c      	movs	r2, #12
 8008694:	4013      	ands	r3, r2
 8008696:	d00e      	beq.n	80086b6 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8008698:	4b78      	ldr	r3, [pc, #480]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	220c      	movs	r2, #12
 800869e:	4013      	ands	r3, r2
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d11f      	bne.n	80086e4 <HAL_RCC_OscConfig+0x1a0>
 80086a4:	4b75      	ldr	r3, [pc, #468]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	23c0      	movs	r3, #192	@ 0xc0
 80086aa:	025b      	lsls	r3, r3, #9
 80086ac:	401a      	ands	r2, r3
 80086ae:	2380      	movs	r3, #128	@ 0x80
 80086b0:	021b      	lsls	r3, r3, #8
 80086b2:	429a      	cmp	r2, r3
 80086b4:	d116      	bne.n	80086e4 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086b6:	4b71      	ldr	r3, [pc, #452]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	2202      	movs	r2, #2
 80086bc:	4013      	ands	r3, r2
 80086be:	d005      	beq.n	80086cc <HAL_RCC_OscConfig+0x188>
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	68db      	ldr	r3, [r3, #12]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d001      	beq.n	80086cc <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80086c8:	2301      	movs	r3, #1
 80086ca:	e2bb      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086cc:	4b6b      	ldr	r3, [pc, #428]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	22f8      	movs	r2, #248	@ 0xf8
 80086d2:	4393      	bics	r3, r2
 80086d4:	0019      	movs	r1, r3
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	691b      	ldr	r3, [r3, #16]
 80086da:	00da      	lsls	r2, r3, #3
 80086dc:	4b67      	ldr	r3, [pc, #412]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80086de:	430a      	orrs	r2, r1
 80086e0:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086e2:	e041      	b.n	8008768 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	68db      	ldr	r3, [r3, #12]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d024      	beq.n	8008736 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086ec:	4b63      	ldr	r3, [pc, #396]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	4b62      	ldr	r3, [pc, #392]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80086f2:	2101      	movs	r1, #1
 80086f4:	430a      	orrs	r2, r1
 80086f6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80086f8:	f7fb fe16 	bl	8004328 <HAL_GetTick>
 80086fc:	0003      	movs	r3, r0
 80086fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008700:	e008      	b.n	8008714 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008702:	f7fb fe11 	bl	8004328 <HAL_GetTick>
 8008706:	0002      	movs	r2, r0
 8008708:	69bb      	ldr	r3, [r7, #24]
 800870a:	1ad3      	subs	r3, r2, r3
 800870c:	2b02      	cmp	r3, #2
 800870e:	d901      	bls.n	8008714 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8008710:	2303      	movs	r3, #3
 8008712:	e297      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008714:	4b59      	ldr	r3, [pc, #356]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2202      	movs	r2, #2
 800871a:	4013      	ands	r3, r2
 800871c:	d0f1      	beq.n	8008702 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800871e:	4b57      	ldr	r3, [pc, #348]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	22f8      	movs	r2, #248	@ 0xf8
 8008724:	4393      	bics	r3, r2
 8008726:	0019      	movs	r1, r3
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	691b      	ldr	r3, [r3, #16]
 800872c:	00da      	lsls	r2, r3, #3
 800872e:	4b53      	ldr	r3, [pc, #332]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008730:	430a      	orrs	r2, r1
 8008732:	601a      	str	r2, [r3, #0]
 8008734:	e018      	b.n	8008768 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008736:	4b51      	ldr	r3, [pc, #324]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	4b50      	ldr	r3, [pc, #320]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800873c:	2101      	movs	r1, #1
 800873e:	438a      	bics	r2, r1
 8008740:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008742:	f7fb fdf1 	bl	8004328 <HAL_GetTick>
 8008746:	0003      	movs	r3, r0
 8008748:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800874a:	e008      	b.n	800875e <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800874c:	f7fb fdec 	bl	8004328 <HAL_GetTick>
 8008750:	0002      	movs	r2, r0
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	1ad3      	subs	r3, r2, r3
 8008756:	2b02      	cmp	r3, #2
 8008758:	d901      	bls.n	800875e <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800875a:	2303      	movs	r3, #3
 800875c:	e272      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800875e:	4b47      	ldr	r3, [pc, #284]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	2202      	movs	r2, #2
 8008764:	4013      	ands	r3, r2
 8008766:	d1f1      	bne.n	800874c <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2208      	movs	r2, #8
 800876e:	4013      	ands	r3, r2
 8008770:	d036      	beq.n	80087e0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	69db      	ldr	r3, [r3, #28]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d019      	beq.n	80087ae <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800877a:	4b40      	ldr	r3, [pc, #256]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800877c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800877e:	4b3f      	ldr	r3, [pc, #252]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008780:	2101      	movs	r1, #1
 8008782:	430a      	orrs	r2, r1
 8008784:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008786:	f7fb fdcf 	bl	8004328 <HAL_GetTick>
 800878a:	0003      	movs	r3, r0
 800878c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008790:	f7fb fdca 	bl	8004328 <HAL_GetTick>
 8008794:	0002      	movs	r2, r0
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e250      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80087a2:	4b36      	ldr	r3, [pc, #216]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80087a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087a6:	2202      	movs	r2, #2
 80087a8:	4013      	ands	r3, r2
 80087aa:	d0f1      	beq.n	8008790 <HAL_RCC_OscConfig+0x24c>
 80087ac:	e018      	b.n	80087e0 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80087ae:	4b33      	ldr	r3, [pc, #204]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80087b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80087b2:	4b32      	ldr	r3, [pc, #200]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80087b4:	2101      	movs	r1, #1
 80087b6:	438a      	bics	r2, r1
 80087b8:	625a      	str	r2, [r3, #36]	@ 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80087ba:	f7fb fdb5 	bl	8004328 <HAL_GetTick>
 80087be:	0003      	movs	r3, r0
 80087c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087c2:	e008      	b.n	80087d6 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80087c4:	f7fb fdb0 	bl	8004328 <HAL_GetTick>
 80087c8:	0002      	movs	r2, r0
 80087ca:	69bb      	ldr	r3, [r7, #24]
 80087cc:	1ad3      	subs	r3, r2, r3
 80087ce:	2b02      	cmp	r3, #2
 80087d0:	d901      	bls.n	80087d6 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e236      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80087d6:	4b29      	ldr	r3, [pc, #164]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80087d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087da:	2202      	movs	r2, #2
 80087dc:	4013      	ands	r3, r2
 80087de:	d1f1      	bne.n	80087c4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	2204      	movs	r2, #4
 80087e6:	4013      	ands	r3, r2
 80087e8:	d100      	bne.n	80087ec <HAL_RCC_OscConfig+0x2a8>
 80087ea:	e0b5      	b.n	8008958 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087ec:	201f      	movs	r0, #31
 80087ee:	183b      	adds	r3, r7, r0
 80087f0:	2200      	movs	r2, #0
 80087f2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087f4:	4b21      	ldr	r3, [pc, #132]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 80087f6:	69da      	ldr	r2, [r3, #28]
 80087f8:	2380      	movs	r3, #128	@ 0x80
 80087fa:	055b      	lsls	r3, r3, #21
 80087fc:	4013      	ands	r3, r2
 80087fe:	d110      	bne.n	8008822 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008800:	4b1e      	ldr	r3, [pc, #120]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008802:	69da      	ldr	r2, [r3, #28]
 8008804:	4b1d      	ldr	r3, [pc, #116]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008806:	2180      	movs	r1, #128	@ 0x80
 8008808:	0549      	lsls	r1, r1, #21
 800880a:	430a      	orrs	r2, r1
 800880c:	61da      	str	r2, [r3, #28]
 800880e:	4b1b      	ldr	r3, [pc, #108]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008810:	69da      	ldr	r2, [r3, #28]
 8008812:	2380      	movs	r3, #128	@ 0x80
 8008814:	055b      	lsls	r3, r3, #21
 8008816:	4013      	ands	r3, r2
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800881c:	183b      	adds	r3, r7, r0
 800881e:	2201      	movs	r2, #1
 8008820:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008822:	4b19      	ldr	r3, [pc, #100]	@ (8008888 <HAL_RCC_OscConfig+0x344>)
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	2380      	movs	r3, #128	@ 0x80
 8008828:	005b      	lsls	r3, r3, #1
 800882a:	4013      	ands	r3, r2
 800882c:	d11a      	bne.n	8008864 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800882e:	4b16      	ldr	r3, [pc, #88]	@ (8008888 <HAL_RCC_OscConfig+0x344>)
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4b15      	ldr	r3, [pc, #84]	@ (8008888 <HAL_RCC_OscConfig+0x344>)
 8008834:	2180      	movs	r1, #128	@ 0x80
 8008836:	0049      	lsls	r1, r1, #1
 8008838:	430a      	orrs	r2, r1
 800883a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800883c:	f7fb fd74 	bl	8004328 <HAL_GetTick>
 8008840:	0003      	movs	r3, r0
 8008842:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008844:	e008      	b.n	8008858 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008846:	f7fb fd6f 	bl	8004328 <HAL_GetTick>
 800884a:	0002      	movs	r2, r0
 800884c:	69bb      	ldr	r3, [r7, #24]
 800884e:	1ad3      	subs	r3, r2, r3
 8008850:	2b64      	cmp	r3, #100	@ 0x64
 8008852:	d901      	bls.n	8008858 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e1f5      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008858:	4b0b      	ldr	r3, [pc, #44]	@ (8008888 <HAL_RCC_OscConfig+0x344>)
 800885a:	681a      	ldr	r2, [r3, #0]
 800885c:	2380      	movs	r3, #128	@ 0x80
 800885e:	005b      	lsls	r3, r3, #1
 8008860:	4013      	ands	r3, r2
 8008862:	d0f0      	beq.n	8008846 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	2b01      	cmp	r3, #1
 800886a:	d10f      	bne.n	800888c <HAL_RCC_OscConfig+0x348>
 800886c:	4b03      	ldr	r3, [pc, #12]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 800886e:	6a1a      	ldr	r2, [r3, #32]
 8008870:	4b02      	ldr	r3, [pc, #8]	@ (800887c <HAL_RCC_OscConfig+0x338>)
 8008872:	2101      	movs	r1, #1
 8008874:	430a      	orrs	r2, r1
 8008876:	621a      	str	r2, [r3, #32]
 8008878:	e036      	b.n	80088e8 <HAL_RCC_OscConfig+0x3a4>
 800887a:	46c0      	nop			@ (mov r8, r8)
 800887c:	40021000 	.word	0x40021000
 8008880:	fffeffff 	.word	0xfffeffff
 8008884:	fffbffff 	.word	0xfffbffff
 8008888:	40007000 	.word	0x40007000
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	689b      	ldr	r3, [r3, #8]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d10c      	bne.n	80088ae <HAL_RCC_OscConfig+0x36a>
 8008894:	4bca      	ldr	r3, [pc, #808]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008896:	6a1a      	ldr	r2, [r3, #32]
 8008898:	4bc9      	ldr	r3, [pc, #804]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 800889a:	2101      	movs	r1, #1
 800889c:	438a      	bics	r2, r1
 800889e:	621a      	str	r2, [r3, #32]
 80088a0:	4bc7      	ldr	r3, [pc, #796]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088a2:	6a1a      	ldr	r2, [r3, #32]
 80088a4:	4bc6      	ldr	r3, [pc, #792]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088a6:	2104      	movs	r1, #4
 80088a8:	438a      	bics	r2, r1
 80088aa:	621a      	str	r2, [r3, #32]
 80088ac:	e01c      	b.n	80088e8 <HAL_RCC_OscConfig+0x3a4>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	689b      	ldr	r3, [r3, #8]
 80088b2:	2b05      	cmp	r3, #5
 80088b4:	d10c      	bne.n	80088d0 <HAL_RCC_OscConfig+0x38c>
 80088b6:	4bc2      	ldr	r3, [pc, #776]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088b8:	6a1a      	ldr	r2, [r3, #32]
 80088ba:	4bc1      	ldr	r3, [pc, #772]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088bc:	2104      	movs	r1, #4
 80088be:	430a      	orrs	r2, r1
 80088c0:	621a      	str	r2, [r3, #32]
 80088c2:	4bbf      	ldr	r3, [pc, #764]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088c4:	6a1a      	ldr	r2, [r3, #32]
 80088c6:	4bbe      	ldr	r3, [pc, #760]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088c8:	2101      	movs	r1, #1
 80088ca:	430a      	orrs	r2, r1
 80088cc:	621a      	str	r2, [r3, #32]
 80088ce:	e00b      	b.n	80088e8 <HAL_RCC_OscConfig+0x3a4>
 80088d0:	4bbb      	ldr	r3, [pc, #748]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088d2:	6a1a      	ldr	r2, [r3, #32]
 80088d4:	4bba      	ldr	r3, [pc, #744]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088d6:	2101      	movs	r1, #1
 80088d8:	438a      	bics	r2, r1
 80088da:	621a      	str	r2, [r3, #32]
 80088dc:	4bb8      	ldr	r3, [pc, #736]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088de:	6a1a      	ldr	r2, [r3, #32]
 80088e0:	4bb7      	ldr	r3, [pc, #732]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80088e2:	2104      	movs	r1, #4
 80088e4:	438a      	bics	r2, r1
 80088e6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	689b      	ldr	r3, [r3, #8]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d014      	beq.n	800891a <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80088f0:	f7fb fd1a 	bl	8004328 <HAL_GetTick>
 80088f4:	0003      	movs	r3, r0
 80088f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088f8:	e009      	b.n	800890e <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088fa:	f7fb fd15 	bl	8004328 <HAL_GetTick>
 80088fe:	0002      	movs	r2, r0
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	1ad3      	subs	r3, r2, r3
 8008904:	4aaf      	ldr	r2, [pc, #700]	@ (8008bc4 <HAL_RCC_OscConfig+0x680>)
 8008906:	4293      	cmp	r3, r2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e19a      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800890e:	4bac      	ldr	r3, [pc, #688]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	2202      	movs	r2, #2
 8008914:	4013      	ands	r3, r2
 8008916:	d0f0      	beq.n	80088fa <HAL_RCC_OscConfig+0x3b6>
 8008918:	e013      	b.n	8008942 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800891a:	f7fb fd05 	bl	8004328 <HAL_GetTick>
 800891e:	0003      	movs	r3, r0
 8008920:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008922:	e009      	b.n	8008938 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008924:	f7fb fd00 	bl	8004328 <HAL_GetTick>
 8008928:	0002      	movs	r2, r0
 800892a:	69bb      	ldr	r3, [r7, #24]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	4aa5      	ldr	r2, [pc, #660]	@ (8008bc4 <HAL_RCC_OscConfig+0x680>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d901      	bls.n	8008938 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8008934:	2303      	movs	r3, #3
 8008936:	e185      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008938:	4ba1      	ldr	r3, [pc, #644]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 800893a:	6a1b      	ldr	r3, [r3, #32]
 800893c:	2202      	movs	r2, #2
 800893e:	4013      	ands	r3, r2
 8008940:	d1f0      	bne.n	8008924 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8008942:	231f      	movs	r3, #31
 8008944:	18fb      	adds	r3, r7, r3
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b01      	cmp	r3, #1
 800894a:	d105      	bne.n	8008958 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800894c:	4b9c      	ldr	r3, [pc, #624]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 800894e:	69da      	ldr	r2, [r3, #28]
 8008950:	4b9b      	ldr	r3, [pc, #620]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008952:	499d      	ldr	r1, [pc, #628]	@ (8008bc8 <HAL_RCC_OscConfig+0x684>)
 8008954:	400a      	ands	r2, r1
 8008956:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	2210      	movs	r2, #16
 800895e:	4013      	ands	r3, r2
 8008960:	d063      	beq.n	8008a2a <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	2b01      	cmp	r3, #1
 8008968:	d12a      	bne.n	80089c0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800896a:	4b95      	ldr	r3, [pc, #596]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 800896c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800896e:	4b94      	ldr	r3, [pc, #592]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008970:	2104      	movs	r1, #4
 8008972:	430a      	orrs	r2, r1
 8008974:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8008976:	4b92      	ldr	r3, [pc, #584]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008978:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800897a:	4b91      	ldr	r3, [pc, #580]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 800897c:	2101      	movs	r1, #1
 800897e:	430a      	orrs	r2, r1
 8008980:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008982:	f7fb fcd1 	bl	8004328 <HAL_GetTick>
 8008986:	0003      	movs	r3, r0
 8008988:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800898a:	e008      	b.n	800899e <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800898c:	f7fb fccc 	bl	8004328 <HAL_GetTick>
 8008990:	0002      	movs	r2, r0
 8008992:	69bb      	ldr	r3, [r7, #24]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b02      	cmp	r3, #2
 8008998:	d901      	bls.n	800899e <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e152      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800899e:	4b88      	ldr	r3, [pc, #544]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a2:	2202      	movs	r2, #2
 80089a4:	4013      	ands	r3, r2
 80089a6:	d0f1      	beq.n	800898c <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80089a8:	4b85      	ldr	r3, [pc, #532]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089ac:	22f8      	movs	r2, #248	@ 0xf8
 80089ae:	4393      	bics	r3, r2
 80089b0:	0019      	movs	r1, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	699b      	ldr	r3, [r3, #24]
 80089b6:	00da      	lsls	r2, r3, #3
 80089b8:	4b81      	ldr	r3, [pc, #516]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089ba:	430a      	orrs	r2, r1
 80089bc:	635a      	str	r2, [r3, #52]	@ 0x34
 80089be:	e034      	b.n	8008a2a <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	695b      	ldr	r3, [r3, #20]
 80089c4:	3305      	adds	r3, #5
 80089c6:	d111      	bne.n	80089ec <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80089c8:	4b7d      	ldr	r3, [pc, #500]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089cc:	4b7c      	ldr	r3, [pc, #496]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089ce:	2104      	movs	r1, #4
 80089d0:	438a      	bics	r2, r1
 80089d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80089d4:	4b7a      	ldr	r3, [pc, #488]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089d8:	22f8      	movs	r2, #248	@ 0xf8
 80089da:	4393      	bics	r3, r2
 80089dc:	0019      	movs	r1, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	699b      	ldr	r3, [r3, #24]
 80089e2:	00da      	lsls	r2, r3, #3
 80089e4:	4b76      	ldr	r3, [pc, #472]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089e6:	430a      	orrs	r2, r1
 80089e8:	635a      	str	r2, [r3, #52]	@ 0x34
 80089ea:	e01e      	b.n	8008a2a <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80089ec:	4b74      	ldr	r3, [pc, #464]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089f0:	4b73      	ldr	r3, [pc, #460]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089f2:	2104      	movs	r1, #4
 80089f4:	430a      	orrs	r2, r1
 80089f6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80089f8:	4b71      	ldr	r3, [pc, #452]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089fc:	4b70      	ldr	r3, [pc, #448]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 80089fe:	2101      	movs	r1, #1
 8008a00:	438a      	bics	r2, r1
 8008a02:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a04:	f7fb fc90 	bl	8004328 <HAL_GetTick>
 8008a08:	0003      	movs	r3, r0
 8008a0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008a0c:	e008      	b.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8008a0e:	f7fb fc8b 	bl	8004328 <HAL_GetTick>
 8008a12:	0002      	movs	r2, r0
 8008a14:	69bb      	ldr	r3, [r7, #24]
 8008a16:	1ad3      	subs	r3, r2, r3
 8008a18:	2b02      	cmp	r3, #2
 8008a1a:	d901      	bls.n	8008a20 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8008a1c:	2303      	movs	r3, #3
 8008a1e:	e111      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8008a20:	4b67      	ldr	r3, [pc, #412]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008a22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a24:	2202      	movs	r2, #2
 8008a26:	4013      	ands	r3, r2
 8008a28:	d1f1      	bne.n	8008a0e <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	2220      	movs	r2, #32
 8008a30:	4013      	ands	r3, r2
 8008a32:	d05c      	beq.n	8008aee <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008a34:	4b62      	ldr	r3, [pc, #392]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	220c      	movs	r2, #12
 8008a3a:	4013      	ands	r3, r2
 8008a3c:	2b0c      	cmp	r3, #12
 8008a3e:	d00e      	beq.n	8008a5e <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008a40:	4b5f      	ldr	r3, [pc, #380]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	220c      	movs	r2, #12
 8008a46:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8008a48:	2b08      	cmp	r3, #8
 8008a4a:	d114      	bne.n	8008a76 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8008a4c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008a4e:	685a      	ldr	r2, [r3, #4]
 8008a50:	23c0      	movs	r3, #192	@ 0xc0
 8008a52:	025b      	lsls	r3, r3, #9
 8008a54:	401a      	ands	r2, r3
 8008a56:	23c0      	movs	r3, #192	@ 0xc0
 8008a58:	025b      	lsls	r3, r3, #9
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d10b      	bne.n	8008a76 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008a5e:	4b58      	ldr	r3, [pc, #352]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008a60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a62:	2380      	movs	r3, #128	@ 0x80
 8008a64:	029b      	lsls	r3, r3, #10
 8008a66:	4013      	ands	r3, r2
 8008a68:	d040      	beq.n	8008aec <HAL_RCC_OscConfig+0x5a8>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6a1b      	ldr	r3, [r3, #32]
 8008a6e:	2b01      	cmp	r3, #1
 8008a70:	d03c      	beq.n	8008aec <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8008a72:	2301      	movs	r3, #1
 8008a74:	e0e6      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a1b      	ldr	r3, [r3, #32]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d01b      	beq.n	8008ab6 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8008a7e:	4b50      	ldr	r3, [pc, #320]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008a80:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008a82:	4b4f      	ldr	r3, [pc, #316]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008a84:	2180      	movs	r1, #128	@ 0x80
 8008a86:	0249      	lsls	r1, r1, #9
 8008a88:	430a      	orrs	r2, r1
 8008a8a:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a8c:	f7fb fc4c 	bl	8004328 <HAL_GetTick>
 8008a90:	0003      	movs	r3, r0
 8008a92:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008a94:	e008      	b.n	8008aa8 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008a96:	f7fb fc47 	bl	8004328 <HAL_GetTick>
 8008a9a:	0002      	movs	r2, r0
 8008a9c:	69bb      	ldr	r3, [r7, #24]
 8008a9e:	1ad3      	subs	r3, r2, r3
 8008aa0:	2b02      	cmp	r3, #2
 8008aa2:	d901      	bls.n	8008aa8 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8008aa4:	2303      	movs	r3, #3
 8008aa6:	e0cd      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008aa8:	4b45      	ldr	r3, [pc, #276]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008aaa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aac:	2380      	movs	r3, #128	@ 0x80
 8008aae:	029b      	lsls	r3, r3, #10
 8008ab0:	4013      	ands	r3, r2
 8008ab2:	d0f0      	beq.n	8008a96 <HAL_RCC_OscConfig+0x552>
 8008ab4:	e01b      	b.n	8008aee <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8008ab6:	4b42      	ldr	r3, [pc, #264]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008aba:	4b41      	ldr	r3, [pc, #260]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008abc:	4943      	ldr	r1, [pc, #268]	@ (8008bcc <HAL_RCC_OscConfig+0x688>)
 8008abe:	400a      	ands	r2, r1
 8008ac0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ac2:	f7fb fc31 	bl	8004328 <HAL_GetTick>
 8008ac6:	0003      	movs	r3, r0
 8008ac8:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008aca:	e008      	b.n	8008ade <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008acc:	f7fb fc2c 	bl	8004328 <HAL_GetTick>
 8008ad0:	0002      	movs	r2, r0
 8008ad2:	69bb      	ldr	r3, [r7, #24]
 8008ad4:	1ad3      	subs	r3, r2, r3
 8008ad6:	2b02      	cmp	r3, #2
 8008ad8:	d901      	bls.n	8008ade <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8008ada:	2303      	movs	r3, #3
 8008adc:	e0b2      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8008ade:	4b38      	ldr	r3, [pc, #224]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008ae0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ae2:	2380      	movs	r3, #128	@ 0x80
 8008ae4:	029b      	lsls	r3, r3, #10
 8008ae6:	4013      	ands	r3, r2
 8008ae8:	d1f0      	bne.n	8008acc <HAL_RCC_OscConfig+0x588>
 8008aea:	e000      	b.n	8008aee <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8008aec:	46c0      	nop			@ (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d100      	bne.n	8008af8 <HAL_RCC_OscConfig+0x5b4>
 8008af6:	e0a4      	b.n	8008c42 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008af8:	4b31      	ldr	r3, [pc, #196]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	220c      	movs	r2, #12
 8008afe:	4013      	ands	r3, r2
 8008b00:	2b08      	cmp	r3, #8
 8008b02:	d100      	bne.n	8008b06 <HAL_RCC_OscConfig+0x5c2>
 8008b04:	e078      	b.n	8008bf8 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0a:	2b02      	cmp	r3, #2
 8008b0c:	d14c      	bne.n	8008ba8 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b0e:	4b2c      	ldr	r3, [pc, #176]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b14:	492e      	ldr	r1, [pc, #184]	@ (8008bd0 <HAL_RCC_OscConfig+0x68c>)
 8008b16:	400a      	ands	r2, r1
 8008b18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b1a:	f7fb fc05 	bl	8004328 <HAL_GetTick>
 8008b1e:	0003      	movs	r3, r0
 8008b20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b22:	e008      	b.n	8008b36 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b24:	f7fb fc00 	bl	8004328 <HAL_GetTick>
 8008b28:	0002      	movs	r2, r0
 8008b2a:	69bb      	ldr	r3, [r7, #24]
 8008b2c:	1ad3      	subs	r3, r2, r3
 8008b2e:	2b02      	cmp	r3, #2
 8008b30:	d901      	bls.n	8008b36 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8008b32:	2303      	movs	r3, #3
 8008b34:	e086      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008b36:	4b22      	ldr	r3, [pc, #136]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b38:	681a      	ldr	r2, [r3, #0]
 8008b3a:	2380      	movs	r3, #128	@ 0x80
 8008b3c:	049b      	lsls	r3, r3, #18
 8008b3e:	4013      	ands	r3, r2
 8008b40:	d1f0      	bne.n	8008b24 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b42:	4b1f      	ldr	r3, [pc, #124]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b46:	220f      	movs	r2, #15
 8008b48:	4393      	bics	r3, r2
 8008b4a:	0019      	movs	r1, r3
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b50:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b52:	430a      	orrs	r2, r1
 8008b54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008b56:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b58:	685b      	ldr	r3, [r3, #4]
 8008b5a:	4a1e      	ldr	r2, [pc, #120]	@ (8008bd4 <HAL_RCC_OscConfig+0x690>)
 8008b5c:	4013      	ands	r3, r2
 8008b5e:	0019      	movs	r1, r3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	4b15      	ldr	r3, [pc, #84]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b6c:	430a      	orrs	r2, r1
 8008b6e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b70:	4b13      	ldr	r3, [pc, #76]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b72:	681a      	ldr	r2, [r3, #0]
 8008b74:	4b12      	ldr	r3, [pc, #72]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b76:	2180      	movs	r1, #128	@ 0x80
 8008b78:	0449      	lsls	r1, r1, #17
 8008b7a:	430a      	orrs	r2, r1
 8008b7c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b7e:	f7fb fbd3 	bl	8004328 <HAL_GetTick>
 8008b82:	0003      	movs	r3, r0
 8008b84:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b86:	e008      	b.n	8008b9a <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b88:	f7fb fbce 	bl	8004328 <HAL_GetTick>
 8008b8c:	0002      	movs	r2, r0
 8008b8e:	69bb      	ldr	r3, [r7, #24]
 8008b90:	1ad3      	subs	r3, r2, r3
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d901      	bls.n	8008b9a <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8008b96:	2303      	movs	r3, #3
 8008b98:	e054      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8008b9a:	4b09      	ldr	r3, [pc, #36]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	2380      	movs	r3, #128	@ 0x80
 8008ba0:	049b      	lsls	r3, r3, #18
 8008ba2:	4013      	ands	r3, r2
 8008ba4:	d0f0      	beq.n	8008b88 <HAL_RCC_OscConfig+0x644>
 8008ba6:	e04c      	b.n	8008c42 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ba8:	4b05      	ldr	r3, [pc, #20]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008baa:	681a      	ldr	r2, [r3, #0]
 8008bac:	4b04      	ldr	r3, [pc, #16]	@ (8008bc0 <HAL_RCC_OscConfig+0x67c>)
 8008bae:	4908      	ldr	r1, [pc, #32]	@ (8008bd0 <HAL_RCC_OscConfig+0x68c>)
 8008bb0:	400a      	ands	r2, r1
 8008bb2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008bb4:	f7fb fbb8 	bl	8004328 <HAL_GetTick>
 8008bb8:	0003      	movs	r3, r0
 8008bba:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bbc:	e015      	b.n	8008bea <HAL_RCC_OscConfig+0x6a6>
 8008bbe:	46c0      	nop			@ (mov r8, r8)
 8008bc0:	40021000 	.word	0x40021000
 8008bc4:	00001388 	.word	0x00001388
 8008bc8:	efffffff 	.word	0xefffffff
 8008bcc:	fffeffff 	.word	0xfffeffff
 8008bd0:	feffffff 	.word	0xfeffffff
 8008bd4:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008bd8:	f7fb fba6 	bl	8004328 <HAL_GetTick>
 8008bdc:	0002      	movs	r2, r0
 8008bde:	69bb      	ldr	r3, [r7, #24]
 8008be0:	1ad3      	subs	r3, r2, r3
 8008be2:	2b02      	cmp	r3, #2
 8008be4:	d901      	bls.n	8008bea <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8008be6:	2303      	movs	r3, #3
 8008be8:	e02c      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8008bea:	4b18      	ldr	r3, [pc, #96]	@ (8008c4c <HAL_RCC_OscConfig+0x708>)
 8008bec:	681a      	ldr	r2, [r3, #0]
 8008bee:	2380      	movs	r3, #128	@ 0x80
 8008bf0:	049b      	lsls	r3, r3, #18
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	d1f0      	bne.n	8008bd8 <HAL_RCC_OscConfig+0x694>
 8008bf6:	e024      	b.n	8008c42 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d101      	bne.n	8008c04 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e01f      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8008c04:	4b11      	ldr	r3, [pc, #68]	@ (8008c4c <HAL_RCC_OscConfig+0x708>)
 8008c06:	685b      	ldr	r3, [r3, #4]
 8008c08:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8008c0a:	4b10      	ldr	r3, [pc, #64]	@ (8008c4c <HAL_RCC_OscConfig+0x708>)
 8008c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c0e:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	23c0      	movs	r3, #192	@ 0xc0
 8008c14:	025b      	lsls	r3, r3, #9
 8008c16:	401a      	ands	r2, r3
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	429a      	cmp	r2, r3
 8008c1e:	d10e      	bne.n	8008c3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	220f      	movs	r2, #15
 8008c24:	401a      	ands	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008c2a:	429a      	cmp	r2, r3
 8008c2c:	d107      	bne.n	8008c3e <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8008c2e:	697a      	ldr	r2, [r7, #20]
 8008c30:	23f0      	movs	r3, #240	@ 0xf0
 8008c32:	039b      	lsls	r3, r3, #14
 8008c34:	401a      	ands	r2, r3
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8008c3a:	429a      	cmp	r2, r3
 8008c3c:	d001      	beq.n	8008c42 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	e000      	b.n	8008c44 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	0018      	movs	r0, r3
 8008c46:	46bd      	mov	sp, r7
 8008c48:	b008      	add	sp, #32
 8008c4a:	bd80      	pop	{r7, pc}
 8008c4c:	40021000 	.word	0x40021000

08008c50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
 8008c58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d101      	bne.n	8008c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c60:	2301      	movs	r3, #1
 8008c62:	e0bf      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c64:	4b61      	ldr	r3, [pc, #388]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	2201      	movs	r2, #1
 8008c6a:	4013      	ands	r3, r2
 8008c6c:	683a      	ldr	r2, [r7, #0]
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d911      	bls.n	8008c96 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c72:	4b5e      	ldr	r3, [pc, #376]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2201      	movs	r2, #1
 8008c78:	4393      	bics	r3, r2
 8008c7a:	0019      	movs	r1, r3
 8008c7c:	4b5b      	ldr	r3, [pc, #364]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008c7e:	683a      	ldr	r2, [r7, #0]
 8008c80:	430a      	orrs	r2, r1
 8008c82:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c84:	4b59      	ldr	r3, [pc, #356]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2201      	movs	r2, #1
 8008c8a:	4013      	ands	r3, r2
 8008c8c:	683a      	ldr	r2, [r7, #0]
 8008c8e:	429a      	cmp	r2, r3
 8008c90:	d001      	beq.n	8008c96 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8008c92:	2301      	movs	r3, #1
 8008c94:	e0a6      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	4013      	ands	r3, r2
 8008c9e:	d015      	beq.n	8008ccc <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	2204      	movs	r2, #4
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	d006      	beq.n	8008cb8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8008caa:	4b51      	ldr	r3, [pc, #324]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008cac:	685a      	ldr	r2, [r3, #4]
 8008cae:	4b50      	ldr	r3, [pc, #320]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008cb0:	21e0      	movs	r1, #224	@ 0xe0
 8008cb2:	00c9      	lsls	r1, r1, #3
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008cb8:	4b4d      	ldr	r3, [pc, #308]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008cba:	685b      	ldr	r3, [r3, #4]
 8008cbc:	22f0      	movs	r2, #240	@ 0xf0
 8008cbe:	4393      	bics	r3, r2
 8008cc0:	0019      	movs	r1, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	689a      	ldr	r2, [r3, #8]
 8008cc6:	4b4a      	ldr	r3, [pc, #296]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008cc8:	430a      	orrs	r2, r1
 8008cca:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	2201      	movs	r2, #1
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	d04c      	beq.n	8008d70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	2b01      	cmp	r3, #1
 8008cdc:	d107      	bne.n	8008cee <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cde:	4b44      	ldr	r3, [pc, #272]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	2380      	movs	r3, #128	@ 0x80
 8008ce4:	029b      	lsls	r3, r3, #10
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	d120      	bne.n	8008d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e07a      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	2b02      	cmp	r3, #2
 8008cf4:	d107      	bne.n	8008d06 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	2380      	movs	r3, #128	@ 0x80
 8008cfc:	049b      	lsls	r3, r3, #18
 8008cfe:	4013      	ands	r3, r2
 8008d00:	d114      	bne.n	8008d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	e06e      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	2b03      	cmp	r3, #3
 8008d0c:	d107      	bne.n	8008d1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8008d0e:	4b38      	ldr	r3, [pc, #224]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008d10:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d12:	2380      	movs	r3, #128	@ 0x80
 8008d14:	029b      	lsls	r3, r3, #10
 8008d16:	4013      	ands	r3, r2
 8008d18:	d108      	bne.n	8008d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008d1a:	2301      	movs	r3, #1
 8008d1c:	e062      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d1e:	4b34      	ldr	r3, [pc, #208]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	2202      	movs	r2, #2
 8008d24:	4013      	ands	r3, r2
 8008d26:	d101      	bne.n	8008d2c <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8008d28:	2301      	movs	r3, #1
 8008d2a:	e05b      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d2c:	4b30      	ldr	r3, [pc, #192]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008d2e:	685b      	ldr	r3, [r3, #4]
 8008d30:	2203      	movs	r2, #3
 8008d32:	4393      	bics	r3, r2
 8008d34:	0019      	movs	r1, r3
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	685a      	ldr	r2, [r3, #4]
 8008d3a:	4b2d      	ldr	r3, [pc, #180]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008d3c:	430a      	orrs	r2, r1
 8008d3e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008d40:	f7fb faf2 	bl	8004328 <HAL_GetTick>
 8008d44:	0003      	movs	r3, r0
 8008d46:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d48:	e009      	b.n	8008d5e <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d4a:	f7fb faed 	bl	8004328 <HAL_GetTick>
 8008d4e:	0002      	movs	r2, r0
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	1ad3      	subs	r3, r2, r3
 8008d54:	4a27      	ldr	r2, [pc, #156]	@ (8008df4 <HAL_RCC_ClockConfig+0x1a4>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e042      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d5e:	4b24      	ldr	r3, [pc, #144]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008d60:	685b      	ldr	r3, [r3, #4]
 8008d62:	220c      	movs	r2, #12
 8008d64:	401a      	ands	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	009b      	lsls	r3, r3, #2
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d1ec      	bne.n	8008d4a <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d70:	4b1e      	ldr	r3, [pc, #120]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2201      	movs	r2, #1
 8008d76:	4013      	ands	r3, r2
 8008d78:	683a      	ldr	r2, [r7, #0]
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d211      	bcs.n	8008da2 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d7e:	4b1b      	ldr	r3, [pc, #108]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2201      	movs	r2, #1
 8008d84:	4393      	bics	r3, r2
 8008d86:	0019      	movs	r1, r3
 8008d88:	4b18      	ldr	r3, [pc, #96]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008d8a:	683a      	ldr	r2, [r7, #0]
 8008d8c:	430a      	orrs	r2, r1
 8008d8e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d90:	4b16      	ldr	r3, [pc, #88]	@ (8008dec <HAL_RCC_ClockConfig+0x19c>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2201      	movs	r2, #1
 8008d96:	4013      	ands	r3, r2
 8008d98:	683a      	ldr	r2, [r7, #0]
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d001      	beq.n	8008da2 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	e020      	b.n	8008de4 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2204      	movs	r2, #4
 8008da8:	4013      	ands	r3, r2
 8008daa:	d009      	beq.n	8008dc0 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8008dac:	4b10      	ldr	r3, [pc, #64]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	4a11      	ldr	r2, [pc, #68]	@ (8008df8 <HAL_RCC_ClockConfig+0x1a8>)
 8008db2:	4013      	ands	r3, r2
 8008db4:	0019      	movs	r1, r3
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	68da      	ldr	r2, [r3, #12]
 8008dba:	4b0d      	ldr	r3, [pc, #52]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008dbc:	430a      	orrs	r2, r1
 8008dbe:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8008dc0:	f000 f820 	bl	8008e04 <HAL_RCC_GetSysClockFreq>
 8008dc4:	0001      	movs	r1, r0
 8008dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8008df0 <HAL_RCC_ClockConfig+0x1a0>)
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	091b      	lsrs	r3, r3, #4
 8008dcc:	220f      	movs	r2, #15
 8008dce:	4013      	ands	r3, r2
 8008dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8008dfc <HAL_RCC_ClockConfig+0x1ac>)
 8008dd2:	5cd3      	ldrb	r3, [r2, r3]
 8008dd4:	000a      	movs	r2, r1
 8008dd6:	40da      	lsrs	r2, r3
 8008dd8:	4b09      	ldr	r3, [pc, #36]	@ (8008e00 <HAL_RCC_ClockConfig+0x1b0>)
 8008dda:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8008ddc:	2003      	movs	r0, #3
 8008dde:	f7fb fa5d 	bl	800429c <HAL_InitTick>
  
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
}
 8008de4:	0018      	movs	r0, r3
 8008de6:	46bd      	mov	sp, r7
 8008de8:	b004      	add	sp, #16
 8008dea:	bd80      	pop	{r7, pc}
 8008dec:	40022000 	.word	0x40022000
 8008df0:	40021000 	.word	0x40021000
 8008df4:	00001388 	.word	0x00001388
 8008df8:	fffff8ff 	.word	0xfffff8ff
 8008dfc:	0800ec0c 	.word	0x0800ec0c
 8008e00:	20000014 	.word	0x20000014

08008e04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	b086      	sub	sp, #24
 8008e08:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	60fb      	str	r3, [r7, #12]
 8008e0e:	2300      	movs	r3, #0
 8008e10:	60bb      	str	r3, [r7, #8]
 8008e12:	2300      	movs	r3, #0
 8008e14:	617b      	str	r3, [r7, #20]
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8008e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008e20:	685b      	ldr	r3, [r3, #4]
 8008e22:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	220c      	movs	r2, #12
 8008e28:	4013      	ands	r3, r2
 8008e2a:	2b0c      	cmp	r3, #12
 8008e2c:	d046      	beq.n	8008ebc <HAL_RCC_GetSysClockFreq+0xb8>
 8008e2e:	d848      	bhi.n	8008ec2 <HAL_RCC_GetSysClockFreq+0xbe>
 8008e30:	2b04      	cmp	r3, #4
 8008e32:	d002      	beq.n	8008e3a <HAL_RCC_GetSysClockFreq+0x36>
 8008e34:	2b08      	cmp	r3, #8
 8008e36:	d003      	beq.n	8008e40 <HAL_RCC_GetSysClockFreq+0x3c>
 8008e38:	e043      	b.n	8008ec2 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8008e3a:	4b27      	ldr	r3, [pc, #156]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008e3c:	613b      	str	r3, [r7, #16]
      break;
 8008e3e:	e043      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	0c9b      	lsrs	r3, r3, #18
 8008e44:	220f      	movs	r2, #15
 8008e46:	4013      	ands	r3, r2
 8008e48:	4a24      	ldr	r2, [pc, #144]	@ (8008edc <HAL_RCC_GetSysClockFreq+0xd8>)
 8008e4a:	5cd3      	ldrb	r3, [r2, r3]
 8008e4c:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8008e4e:	4b21      	ldr	r3, [pc, #132]	@ (8008ed4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8008e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e52:	220f      	movs	r2, #15
 8008e54:	4013      	ands	r3, r2
 8008e56:	4a22      	ldr	r2, [pc, #136]	@ (8008ee0 <HAL_RCC_GetSysClockFreq+0xdc>)
 8008e58:	5cd3      	ldrb	r3, [r2, r3]
 8008e5a:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	23c0      	movs	r3, #192	@ 0xc0
 8008e60:	025b      	lsls	r3, r3, #9
 8008e62:	401a      	ands	r2, r3
 8008e64:	2380      	movs	r3, #128	@ 0x80
 8008e66:	025b      	lsls	r3, r3, #9
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d109      	bne.n	8008e80 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008e6c:	68b9      	ldr	r1, [r7, #8]
 8008e6e:	481a      	ldr	r0, [pc, #104]	@ (8008ed8 <HAL_RCC_GetSysClockFreq+0xd4>)
 8008e70:	f7f7 f94a 	bl	8000108 <__udivsi3>
 8008e74:	0003      	movs	r3, r0
 8008e76:	001a      	movs	r2, r3
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4353      	muls	r3, r2
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e01a      	b.n	8008eb6 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8008e80:	68fa      	ldr	r2, [r7, #12]
 8008e82:	23c0      	movs	r3, #192	@ 0xc0
 8008e84:	025b      	lsls	r3, r3, #9
 8008e86:	401a      	ands	r2, r3
 8008e88:	23c0      	movs	r3, #192	@ 0xc0
 8008e8a:	025b      	lsls	r3, r3, #9
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d109      	bne.n	8008ea4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008e90:	68b9      	ldr	r1, [r7, #8]
 8008e92:	4814      	ldr	r0, [pc, #80]	@ (8008ee4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8008e94:	f7f7 f938 	bl	8000108 <__udivsi3>
 8008e98:	0003      	movs	r3, r0
 8008e9a:	001a      	movs	r2, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	4353      	muls	r3, r2
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	e008      	b.n	8008eb6 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8008ea4:	68b9      	ldr	r1, [r7, #8]
 8008ea6:	4810      	ldr	r0, [pc, #64]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8008ea8:	f7f7 f92e 	bl	8000108 <__udivsi3>
 8008eac:	0003      	movs	r3, r0
 8008eae:	001a      	movs	r2, r3
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	4353      	muls	r3, r2
 8008eb4:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	613b      	str	r3, [r7, #16]
      break;
 8008eba:	e005      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8008ebc:	4b09      	ldr	r3, [pc, #36]	@ (8008ee4 <HAL_RCC_GetSysClockFreq+0xe0>)
 8008ebe:	613b      	str	r3, [r7, #16]
      break;
 8008ec0:	e002      	b.n	8008ec8 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8008ec2:	4b09      	ldr	r3, [pc, #36]	@ (8008ee8 <HAL_RCC_GetSysClockFreq+0xe4>)
 8008ec4:	613b      	str	r3, [r7, #16]
      break;
 8008ec6:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 8008ec8:	693b      	ldr	r3, [r7, #16]
}
 8008eca:	0018      	movs	r0, r3
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	b006      	add	sp, #24
 8008ed0:	bd80      	pop	{r7, pc}
 8008ed2:	46c0      	nop			@ (mov r8, r8)
 8008ed4:	40021000 	.word	0x40021000
 8008ed8:	00f42400 	.word	0x00f42400
 8008edc:	0800ec1c 	.word	0x0800ec1c
 8008ee0:	0800ec2c 	.word	0x0800ec2c
 8008ee4:	02dc6c00 	.word	0x02dc6c00
 8008ee8:	007a1200 	.word	0x007a1200

08008eec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	2380      	movs	r3, #128	@ 0x80
 8008f02:	025b      	lsls	r3, r3, #9
 8008f04:	4013      	ands	r3, r2
 8008f06:	d100      	bne.n	8008f0a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8008f08:	e08e      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8008f0a:	2017      	movs	r0, #23
 8008f0c:	183b      	adds	r3, r7, r0
 8008f0e:	2200      	movs	r2, #0
 8008f10:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f12:	4b6e      	ldr	r3, [pc, #440]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f14:	69da      	ldr	r2, [r3, #28]
 8008f16:	2380      	movs	r3, #128	@ 0x80
 8008f18:	055b      	lsls	r3, r3, #21
 8008f1a:	4013      	ands	r3, r2
 8008f1c:	d110      	bne.n	8008f40 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008f1e:	4b6b      	ldr	r3, [pc, #428]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f20:	69da      	ldr	r2, [r3, #28]
 8008f22:	4b6a      	ldr	r3, [pc, #424]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f24:	2180      	movs	r1, #128	@ 0x80
 8008f26:	0549      	lsls	r1, r1, #21
 8008f28:	430a      	orrs	r2, r1
 8008f2a:	61da      	str	r2, [r3, #28]
 8008f2c:	4b67      	ldr	r3, [pc, #412]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f2e:	69da      	ldr	r2, [r3, #28]
 8008f30:	2380      	movs	r3, #128	@ 0x80
 8008f32:	055b      	lsls	r3, r3, #21
 8008f34:	4013      	ands	r3, r2
 8008f36:	60bb      	str	r3, [r7, #8]
 8008f38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008f3a:	183b      	adds	r3, r7, r0
 8008f3c:	2201      	movs	r2, #1
 8008f3e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f40:	4b63      	ldr	r3, [pc, #396]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	2380      	movs	r3, #128	@ 0x80
 8008f46:	005b      	lsls	r3, r3, #1
 8008f48:	4013      	ands	r3, r2
 8008f4a:	d11a      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008f4c:	4b60      	ldr	r3, [pc, #384]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008f4e:	681a      	ldr	r2, [r3, #0]
 8008f50:	4b5f      	ldr	r3, [pc, #380]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008f52:	2180      	movs	r1, #128	@ 0x80
 8008f54:	0049      	lsls	r1, r1, #1
 8008f56:	430a      	orrs	r2, r1
 8008f58:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f5a:	f7fb f9e5 	bl	8004328 <HAL_GetTick>
 8008f5e:	0003      	movs	r3, r0
 8008f60:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f62:	e008      	b.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f64:	f7fb f9e0 	bl	8004328 <HAL_GetTick>
 8008f68:	0002      	movs	r2, r0
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	2b64      	cmp	r3, #100	@ 0x64
 8008f70:	d901      	bls.n	8008f76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8008f72:	2303      	movs	r3, #3
 8008f74:	e0a6      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008f76:	4b56      	ldr	r3, [pc, #344]	@ (80090d0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	2380      	movs	r3, #128	@ 0x80
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	4013      	ands	r3, r2
 8008f80:	d0f0      	beq.n	8008f64 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008f82:	4b52      	ldr	r3, [pc, #328]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008f84:	6a1a      	ldr	r2, [r3, #32]
 8008f86:	23c0      	movs	r3, #192	@ 0xc0
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4013      	ands	r3, r2
 8008f8c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d034      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x112>
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	685a      	ldr	r2, [r3, #4]
 8008f98:	23c0      	movs	r3, #192	@ 0xc0
 8008f9a:	009b      	lsls	r3, r3, #2
 8008f9c:	4013      	ands	r3, r2
 8008f9e:	68fa      	ldr	r2, [r7, #12]
 8008fa0:	429a      	cmp	r2, r3
 8008fa2:	d02c      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008fa4:	4b49      	ldr	r3, [pc, #292]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fa6:	6a1b      	ldr	r3, [r3, #32]
 8008fa8:	4a4a      	ldr	r2, [pc, #296]	@ (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8008faa:	4013      	ands	r3, r2
 8008fac:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008fae:	4b47      	ldr	r3, [pc, #284]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fb0:	6a1a      	ldr	r2, [r3, #32]
 8008fb2:	4b46      	ldr	r3, [pc, #280]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fb4:	2180      	movs	r1, #128	@ 0x80
 8008fb6:	0249      	lsls	r1, r1, #9
 8008fb8:	430a      	orrs	r2, r1
 8008fba:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008fbc:	4b43      	ldr	r3, [pc, #268]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fbe:	6a1a      	ldr	r2, [r3, #32]
 8008fc0:	4b42      	ldr	r3, [pc, #264]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fc2:	4945      	ldr	r1, [pc, #276]	@ (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8008fc4:	400a      	ands	r2, r1
 8008fc6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8008fc8:	4b40      	ldr	r3, [pc, #256]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008fca:	68fa      	ldr	r2, [r7, #12]
 8008fcc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	2201      	movs	r2, #1
 8008fd2:	4013      	ands	r3, r2
 8008fd4:	d013      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fd6:	f7fb f9a7 	bl	8004328 <HAL_GetTick>
 8008fda:	0003      	movs	r3, r0
 8008fdc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008fde:	e009      	b.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fe0:	f7fb f9a2 	bl	8004328 <HAL_GetTick>
 8008fe4:	0002      	movs	r2, r0
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	4a3c      	ldr	r2, [pc, #240]	@ (80090dc <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d901      	bls.n	8008ff4 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8008ff0:	2303      	movs	r3, #3
 8008ff2:	e067      	b.n	80090c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ff4:	4b35      	ldr	r3, [pc, #212]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8008ff6:	6a1b      	ldr	r3, [r3, #32]
 8008ff8:	2202      	movs	r2, #2
 8008ffa:	4013      	ands	r3, r2
 8008ffc:	d0f0      	beq.n	8008fe0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008ffe:	4b33      	ldr	r3, [pc, #204]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009000:	6a1b      	ldr	r3, [r3, #32]
 8009002:	4a34      	ldr	r2, [pc, #208]	@ (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8009004:	4013      	ands	r3, r2
 8009006:	0019      	movs	r1, r3
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	685a      	ldr	r2, [r3, #4]
 800900c:	4b2f      	ldr	r3, [pc, #188]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800900e:	430a      	orrs	r2, r1
 8009010:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009012:	2317      	movs	r3, #23
 8009014:	18fb      	adds	r3, r7, r3
 8009016:	781b      	ldrb	r3, [r3, #0]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d105      	bne.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800901c:	4b2b      	ldr	r3, [pc, #172]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800901e:	69da      	ldr	r2, [r3, #28]
 8009020:	4b2a      	ldr	r3, [pc, #168]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009022:	492f      	ldr	r1, [pc, #188]	@ (80090e0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8009024:	400a      	ands	r2, r1
 8009026:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	2201      	movs	r2, #1
 800902e:	4013      	ands	r3, r2
 8009030:	d009      	beq.n	8009046 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009032:	4b26      	ldr	r3, [pc, #152]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009036:	2203      	movs	r2, #3
 8009038:	4393      	bics	r3, r2
 800903a:	0019      	movs	r1, r3
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	689a      	ldr	r2, [r3, #8]
 8009040:	4b22      	ldr	r3, [pc, #136]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009042:	430a      	orrs	r2, r1
 8009044:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	2202      	movs	r2, #2
 800904c:	4013      	ands	r3, r2
 800904e:	d009      	beq.n	8009064 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009050:	4b1e      	ldr	r3, [pc, #120]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009054:	4a23      	ldr	r2, [pc, #140]	@ (80090e4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8009056:	4013      	ands	r3, r2
 8009058:	0019      	movs	r1, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68da      	ldr	r2, [r3, #12]
 800905e:	4b1b      	ldr	r3, [pc, #108]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009060:	430a      	orrs	r2, r1
 8009062:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2220      	movs	r2, #32
 800906a:	4013      	ands	r3, r2
 800906c:	d009      	beq.n	8009082 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800906e:	4b17      	ldr	r3, [pc, #92]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009072:	2210      	movs	r2, #16
 8009074:	4393      	bics	r3, r2
 8009076:	0019      	movs	r1, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691a      	ldr	r2, [r3, #16]
 800907c:	4b13      	ldr	r3, [pc, #76]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800907e:	430a      	orrs	r2, r1
 8009080:	631a      	str	r2, [r3, #48]	@ 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	2380      	movs	r3, #128	@ 0x80
 8009088:	029b      	lsls	r3, r3, #10
 800908a:	4013      	ands	r3, r2
 800908c:	d009      	beq.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800908e:	4b0f      	ldr	r3, [pc, #60]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8009090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009092:	2280      	movs	r2, #128	@ 0x80
 8009094:	4393      	bics	r3, r2
 8009096:	0019      	movs	r1, r3
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	699a      	ldr	r2, [r3, #24]
 800909c:	4b0b      	ldr	r3, [pc, #44]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 800909e:	430a      	orrs	r2, r1
 80090a0:	631a      	str	r2, [r3, #48]	@ 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681a      	ldr	r2, [r3, #0]
 80090a6:	2380      	movs	r3, #128	@ 0x80
 80090a8:	00db      	lsls	r3, r3, #3
 80090aa:	4013      	ands	r3, r2
 80090ac:	d009      	beq.n	80090c2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80090ae:	4b07      	ldr	r3, [pc, #28]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80090b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090b2:	2240      	movs	r2, #64	@ 0x40
 80090b4:	4393      	bics	r3, r2
 80090b6:	0019      	movs	r1, r3
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	695a      	ldr	r2, [r3, #20]
 80090bc:	4b03      	ldr	r3, [pc, #12]	@ (80090cc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 80090be:	430a      	orrs	r2, r1
 80090c0:	631a      	str	r2, [r3, #48]	@ 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	0018      	movs	r0, r3
 80090c6:	46bd      	mov	sp, r7
 80090c8:	b006      	add	sp, #24
 80090ca:	bd80      	pop	{r7, pc}
 80090cc:	40021000 	.word	0x40021000
 80090d0:	40007000 	.word	0x40007000
 80090d4:	fffffcff 	.word	0xfffffcff
 80090d8:	fffeffff 	.word	0xfffeffff
 80090dc:	00001388 	.word	0x00001388
 80090e0:	efffffff 	.word	0xefffffff
 80090e4:	fffcffff 	.word	0xfffcffff

080090e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b082      	sub	sp, #8
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d101      	bne.n	80090fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e042      	b.n	8009180 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	223d      	movs	r2, #61	@ 0x3d
 80090fe:	5c9b      	ldrb	r3, [r3, r2]
 8009100:	b2db      	uxtb	r3, r3
 8009102:	2b00      	cmp	r3, #0
 8009104:	d107      	bne.n	8009116 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	223c      	movs	r2, #60	@ 0x3c
 800910a:	2100      	movs	r1, #0
 800910c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	0018      	movs	r0, r3
 8009112:	f7fa fe99 	bl	8003e48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	223d      	movs	r2, #61	@ 0x3d
 800911a:	2102      	movs	r1, #2
 800911c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	3304      	adds	r3, #4
 8009126:	0019      	movs	r1, r3
 8009128:	0010      	movs	r0, r2
 800912a:	f000 fcb9 	bl	8009aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2246      	movs	r2, #70	@ 0x46
 8009132:	2101      	movs	r1, #1
 8009134:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	223e      	movs	r2, #62	@ 0x3e
 800913a:	2101      	movs	r1, #1
 800913c:	5499      	strb	r1, [r3, r2]
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	223f      	movs	r2, #63	@ 0x3f
 8009142:	2101      	movs	r1, #1
 8009144:	5499      	strb	r1, [r3, r2]
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2240      	movs	r2, #64	@ 0x40
 800914a:	2101      	movs	r1, #1
 800914c:	5499      	strb	r1, [r3, r2]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2241      	movs	r2, #65	@ 0x41
 8009152:	2101      	movs	r1, #1
 8009154:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2242      	movs	r2, #66	@ 0x42
 800915a:	2101      	movs	r1, #1
 800915c:	5499      	strb	r1, [r3, r2]
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2243      	movs	r2, #67	@ 0x43
 8009162:	2101      	movs	r1, #1
 8009164:	5499      	strb	r1, [r3, r2]
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2244      	movs	r2, #68	@ 0x44
 800916a:	2101      	movs	r1, #1
 800916c:	5499      	strb	r1, [r3, r2]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	2245      	movs	r2, #69	@ 0x45
 8009172:	2101      	movs	r1, #1
 8009174:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	223d      	movs	r2, #61	@ 0x3d
 800917a:	2101      	movs	r1, #1
 800917c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800917e:	2300      	movs	r3, #0
}
 8009180:	0018      	movs	r0, r3
 8009182:	46bd      	mov	sp, r7
 8009184:	b002      	add	sp, #8
 8009186:	bd80      	pop	{r7, pc}

08009188 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b084      	sub	sp, #16
 800918c:	af00      	add	r7, sp, #0
 800918e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	223d      	movs	r2, #61	@ 0x3d
 8009194:	5c9b      	ldrb	r3, [r3, r2]
 8009196:	b2db      	uxtb	r3, r3
 8009198:	2b01      	cmp	r3, #1
 800919a:	d001      	beq.n	80091a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e03b      	b.n	8009218 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	223d      	movs	r2, #61	@ 0x3d
 80091a4:	2102      	movs	r1, #2
 80091a6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	68da      	ldr	r2, [r3, #12]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2101      	movs	r1, #1
 80091b4:	430a      	orrs	r2, r1
 80091b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	4a18      	ldr	r2, [pc, #96]	@ (8009220 <HAL_TIM_Base_Start_IT+0x98>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d00f      	beq.n	80091e2 <HAL_TIM_Base_Start_IT+0x5a>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	2380      	movs	r3, #128	@ 0x80
 80091c8:	05db      	lsls	r3, r3, #23
 80091ca:	429a      	cmp	r2, r3
 80091cc:	d009      	beq.n	80091e2 <HAL_TIM_Base_Start_IT+0x5a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	4a14      	ldr	r2, [pc, #80]	@ (8009224 <HAL_TIM_Base_Start_IT+0x9c>)
 80091d4:	4293      	cmp	r3, r2
 80091d6:	d004      	beq.n	80091e2 <HAL_TIM_Base_Start_IT+0x5a>
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	4a12      	ldr	r2, [pc, #72]	@ (8009228 <HAL_TIM_Base_Start_IT+0xa0>)
 80091de:	4293      	cmp	r3, r2
 80091e0:	d111      	bne.n	8009206 <HAL_TIM_Base_Start_IT+0x7e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	2207      	movs	r2, #7
 80091ea:	4013      	ands	r3, r2
 80091ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b06      	cmp	r3, #6
 80091f2:	d010      	beq.n	8009216 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	681a      	ldr	r2, [r3, #0]
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2101      	movs	r1, #1
 8009200:	430a      	orrs	r2, r1
 8009202:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009204:	e007      	b.n	8009216 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	681a      	ldr	r2, [r3, #0]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2101      	movs	r1, #1
 8009212:	430a      	orrs	r2, r1
 8009214:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009216:	2300      	movs	r3, #0
}
 8009218:	0018      	movs	r0, r3
 800921a:	46bd      	mov	sp, r7
 800921c:	b004      	add	sp, #16
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40012c00 	.word	0x40012c00
 8009224:	40000400 	.word	0x40000400
 8009228:	40014000 	.word	0x40014000

0800922c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d101      	bne.n	800923e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e042      	b.n	80092c4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	223d      	movs	r2, #61	@ 0x3d
 8009242:	5c9b      	ldrb	r3, [r3, r2]
 8009244:	b2db      	uxtb	r3, r3
 8009246:	2b00      	cmp	r3, #0
 8009248:	d107      	bne.n	800925a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	223c      	movs	r2, #60	@ 0x3c
 800924e:	2100      	movs	r1, #0
 8009250:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	0018      	movs	r0, r3
 8009256:	f000 f839 	bl	80092cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	223d      	movs	r2, #61	@ 0x3d
 800925e:	2102      	movs	r1, #2
 8009260:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681a      	ldr	r2, [r3, #0]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	3304      	adds	r3, #4
 800926a:	0019      	movs	r1, r3
 800926c:	0010      	movs	r0, r2
 800926e:	f000 fc17 	bl	8009aa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	2246      	movs	r2, #70	@ 0x46
 8009276:	2101      	movs	r1, #1
 8009278:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	223e      	movs	r2, #62	@ 0x3e
 800927e:	2101      	movs	r1, #1
 8009280:	5499      	strb	r1, [r3, r2]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	223f      	movs	r2, #63	@ 0x3f
 8009286:	2101      	movs	r1, #1
 8009288:	5499      	strb	r1, [r3, r2]
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2240      	movs	r2, #64	@ 0x40
 800928e:	2101      	movs	r1, #1
 8009290:	5499      	strb	r1, [r3, r2]
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	2241      	movs	r2, #65	@ 0x41
 8009296:	2101      	movs	r1, #1
 8009298:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2242      	movs	r2, #66	@ 0x42
 800929e:	2101      	movs	r1, #1
 80092a0:	5499      	strb	r1, [r3, r2]
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2243      	movs	r2, #67	@ 0x43
 80092a6:	2101      	movs	r1, #1
 80092a8:	5499      	strb	r1, [r3, r2]
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2244      	movs	r2, #68	@ 0x44
 80092ae:	2101      	movs	r1, #1
 80092b0:	5499      	strb	r1, [r3, r2]
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2245      	movs	r2, #69	@ 0x45
 80092b6:	2101      	movs	r1, #1
 80092b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	223d      	movs	r2, #61	@ 0x3d
 80092be:	2101      	movs	r1, #1
 80092c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80092c2:	2300      	movs	r3, #0
}
 80092c4:	0018      	movs	r0, r3
 80092c6:	46bd      	mov	sp, r7
 80092c8:	b002      	add	sp, #8
 80092ca:	bd80      	pop	{r7, pc}

080092cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80092d4:	46c0      	nop			@ (mov r8, r8)
 80092d6:	46bd      	mov	sp, r7
 80092d8:	b002      	add	sp, #8
 80092da:	bd80      	pop	{r7, pc}

080092dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b084      	sub	sp, #16
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	6078      	str	r0, [r7, #4]
 80092e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80092e6:	683b      	ldr	r3, [r7, #0]
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d108      	bne.n	80092fe <HAL_TIM_PWM_Start+0x22>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	223e      	movs	r2, #62	@ 0x3e
 80092f0:	5c9b      	ldrb	r3, [r3, r2]
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	3b01      	subs	r3, #1
 80092f6:	1e5a      	subs	r2, r3, #1
 80092f8:	4193      	sbcs	r3, r2
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	e01f      	b.n	800933e <HAL_TIM_PWM_Start+0x62>
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	2b04      	cmp	r3, #4
 8009302:	d108      	bne.n	8009316 <HAL_TIM_PWM_Start+0x3a>
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	223f      	movs	r2, #63	@ 0x3f
 8009308:	5c9b      	ldrb	r3, [r3, r2]
 800930a:	b2db      	uxtb	r3, r3
 800930c:	3b01      	subs	r3, #1
 800930e:	1e5a      	subs	r2, r3, #1
 8009310:	4193      	sbcs	r3, r2
 8009312:	b2db      	uxtb	r3, r3
 8009314:	e013      	b.n	800933e <HAL_TIM_PWM_Start+0x62>
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	2b08      	cmp	r3, #8
 800931a:	d108      	bne.n	800932e <HAL_TIM_PWM_Start+0x52>
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2240      	movs	r2, #64	@ 0x40
 8009320:	5c9b      	ldrb	r3, [r3, r2]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	3b01      	subs	r3, #1
 8009326:	1e5a      	subs	r2, r3, #1
 8009328:	4193      	sbcs	r3, r2
 800932a:	b2db      	uxtb	r3, r3
 800932c:	e007      	b.n	800933e <HAL_TIM_PWM_Start+0x62>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2241      	movs	r2, #65	@ 0x41
 8009332:	5c9b      	ldrb	r3, [r3, r2]
 8009334:	b2db      	uxtb	r3, r3
 8009336:	3b01      	subs	r3, #1
 8009338:	1e5a      	subs	r2, r3, #1
 800933a:	4193      	sbcs	r3, r2
 800933c:	b2db      	uxtb	r3, r3
 800933e:	2b00      	cmp	r3, #0
 8009340:	d001      	beq.n	8009346 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8009342:	2301      	movs	r3, #1
 8009344:	e074      	b.n	8009430 <HAL_TIM_PWM_Start+0x154>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009346:	683b      	ldr	r3, [r7, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d104      	bne.n	8009356 <HAL_TIM_PWM_Start+0x7a>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	223e      	movs	r2, #62	@ 0x3e
 8009350:	2102      	movs	r1, #2
 8009352:	5499      	strb	r1, [r3, r2]
 8009354:	e013      	b.n	800937e <HAL_TIM_PWM_Start+0xa2>
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	2b04      	cmp	r3, #4
 800935a:	d104      	bne.n	8009366 <HAL_TIM_PWM_Start+0x8a>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	223f      	movs	r2, #63	@ 0x3f
 8009360:	2102      	movs	r1, #2
 8009362:	5499      	strb	r1, [r3, r2]
 8009364:	e00b      	b.n	800937e <HAL_TIM_PWM_Start+0xa2>
 8009366:	683b      	ldr	r3, [r7, #0]
 8009368:	2b08      	cmp	r3, #8
 800936a:	d104      	bne.n	8009376 <HAL_TIM_PWM_Start+0x9a>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2240      	movs	r2, #64	@ 0x40
 8009370:	2102      	movs	r1, #2
 8009372:	5499      	strb	r1, [r3, r2]
 8009374:	e003      	b.n	800937e <HAL_TIM_PWM_Start+0xa2>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2241      	movs	r2, #65	@ 0x41
 800937a:	2102      	movs	r1, #2
 800937c:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6839      	ldr	r1, [r7, #0]
 8009384:	2201      	movs	r2, #1
 8009386:	0018      	movs	r0, r3
 8009388:	f000 fea0 	bl	800a0cc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a29      	ldr	r2, [pc, #164]	@ (8009438 <HAL_TIM_PWM_Start+0x15c>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d00e      	beq.n	80093b4 <HAL_TIM_PWM_Start+0xd8>
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a28      	ldr	r2, [pc, #160]	@ (800943c <HAL_TIM_PWM_Start+0x160>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d009      	beq.n	80093b4 <HAL_TIM_PWM_Start+0xd8>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	4a26      	ldr	r2, [pc, #152]	@ (8009440 <HAL_TIM_PWM_Start+0x164>)
 80093a6:	4293      	cmp	r3, r2
 80093a8:	d004      	beq.n	80093b4 <HAL_TIM_PWM_Start+0xd8>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a25      	ldr	r2, [pc, #148]	@ (8009444 <HAL_TIM_PWM_Start+0x168>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d101      	bne.n	80093b8 <HAL_TIM_PWM_Start+0xdc>
 80093b4:	2301      	movs	r3, #1
 80093b6:	e000      	b.n	80093ba <HAL_TIM_PWM_Start+0xde>
 80093b8:	2300      	movs	r3, #0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d008      	beq.n	80093d0 <HAL_TIM_PWM_Start+0xf4>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2180      	movs	r1, #128	@ 0x80
 80093ca:	0209      	lsls	r1, r1, #8
 80093cc:	430a      	orrs	r2, r1
 80093ce:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	4a18      	ldr	r2, [pc, #96]	@ (8009438 <HAL_TIM_PWM_Start+0x15c>)
 80093d6:	4293      	cmp	r3, r2
 80093d8:	d00f      	beq.n	80093fa <HAL_TIM_PWM_Start+0x11e>
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681a      	ldr	r2, [r3, #0]
 80093de:	2380      	movs	r3, #128	@ 0x80
 80093e0:	05db      	lsls	r3, r3, #23
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d009      	beq.n	80093fa <HAL_TIM_PWM_Start+0x11e>
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a17      	ldr	r2, [pc, #92]	@ (8009448 <HAL_TIM_PWM_Start+0x16c>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d004      	beq.n	80093fa <HAL_TIM_PWM_Start+0x11e>
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a11      	ldr	r2, [pc, #68]	@ (800943c <HAL_TIM_PWM_Start+0x160>)
 80093f6:	4293      	cmp	r3, r2
 80093f8:	d111      	bne.n	800941e <HAL_TIM_PWM_Start+0x142>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	689b      	ldr	r3, [r3, #8]
 8009400:	2207      	movs	r2, #7
 8009402:	4013      	ands	r3, r2
 8009404:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	2b06      	cmp	r3, #6
 800940a:	d010      	beq.n	800942e <HAL_TIM_PWM_Start+0x152>
    {
      __HAL_TIM_ENABLE(htim);
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	681a      	ldr	r2, [r3, #0]
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	2101      	movs	r1, #1
 8009418:	430a      	orrs	r2, r1
 800941a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800941c:	e007      	b.n	800942e <HAL_TIM_PWM_Start+0x152>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	681a      	ldr	r2, [r3, #0]
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2101      	movs	r1, #1
 800942a:	430a      	orrs	r2, r1
 800942c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
}
 8009430:	0018      	movs	r0, r3
 8009432:	46bd      	mov	sp, r7
 8009434:	b004      	add	sp, #16
 8009436:	bd80      	pop	{r7, pc}
 8009438:	40012c00 	.word	0x40012c00
 800943c:	40014000 	.word	0x40014000
 8009440:	40014400 	.word	0x40014400
 8009444:	40014800 	.word	0x40014800
 8009448:	40000400 	.word	0x40000400

0800944c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	6078      	str	r0, [r7, #4]
 8009454:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d101      	bne.n	8009460 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800945c:	2301      	movs	r3, #1
 800945e:	e042      	b.n	80094e6 <HAL_TIM_OnePulse_Init+0x9a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	223d      	movs	r2, #61	@ 0x3d
 8009464:	5c9b      	ldrb	r3, [r3, r2]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	2b00      	cmp	r3, #0
 800946a:	d107      	bne.n	800947c <HAL_TIM_OnePulse_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	223c      	movs	r2, #60	@ 0x3c
 8009470:	2100      	movs	r1, #0
 8009472:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	0018      	movs	r0, r3
 8009478:	f000 f839 	bl	80094ee <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	223d      	movs	r2, #61	@ 0x3d
 8009480:	2102      	movs	r1, #2
 8009482:	5499      	strb	r1, [r3, r2]

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3304      	adds	r3, #4
 800948c:	0019      	movs	r1, r3
 800948e:	0010      	movs	r0, r2
 8009490:	f000 fb06 	bl	8009aa0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	2108      	movs	r1, #8
 80094a0:	438a      	bics	r2, r1
 80094a2:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6819      	ldr	r1, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	683a      	ldr	r2, [r7, #0]
 80094b0:	430a      	orrs	r2, r1
 80094b2:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2246      	movs	r2, #70	@ 0x46
 80094b8:	2101      	movs	r1, #1
 80094ba:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	223e      	movs	r2, #62	@ 0x3e
 80094c0:	2101      	movs	r1, #1
 80094c2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	223f      	movs	r2, #63	@ 0x3f
 80094c8:	2101      	movs	r1, #1
 80094ca:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2242      	movs	r2, #66	@ 0x42
 80094d0:	2101      	movs	r1, #1
 80094d2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2243      	movs	r2, #67	@ 0x43
 80094d8:	2101      	movs	r1, #1
 80094da:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	223d      	movs	r2, #61	@ 0x3d
 80094e0:	2101      	movs	r1, #1
 80094e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80094e4:	2300      	movs	r3, #0
}
 80094e6:	0018      	movs	r0, r3
 80094e8:	46bd      	mov	sp, r7
 80094ea:	b002      	add	sp, #8
 80094ec:	bd80      	pop	{r7, pc}

080094ee <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 80094f6:	46c0      	nop			@ (mov r8, r8)
 80094f8:	46bd      	mov	sp, r7
 80094fa:	b002      	add	sp, #8
 80094fc:	bd80      	pop	{r7, pc}

080094fe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80094fe:	b580      	push	{r7, lr}
 8009500:	b082      	sub	sp, #8
 8009502:	af00      	add	r7, sp, #0
 8009504:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	691b      	ldr	r3, [r3, #16]
 800950c:	2202      	movs	r2, #2
 800950e:	4013      	ands	r3, r2
 8009510:	2b02      	cmp	r3, #2
 8009512:	d124      	bne.n	800955e <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	2202      	movs	r2, #2
 800951c:	4013      	ands	r3, r2
 800951e:	2b02      	cmp	r3, #2
 8009520:	d11d      	bne.n	800955e <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2203      	movs	r2, #3
 8009528:	4252      	negs	r2, r2
 800952a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2201      	movs	r2, #1
 8009530:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	699b      	ldr	r3, [r3, #24]
 8009538:	2203      	movs	r2, #3
 800953a:	4013      	ands	r3, r2
 800953c:	d004      	beq.n	8009548 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	0018      	movs	r0, r3
 8009542:	f000 fa95 	bl	8009a70 <HAL_TIM_IC_CaptureCallback>
 8009546:	e007      	b.n	8009558 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	0018      	movs	r0, r3
 800954c:	f000 fa88 	bl	8009a60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	0018      	movs	r0, r3
 8009554:	f000 fa94 	bl	8009a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2200      	movs	r2, #0
 800955c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	691b      	ldr	r3, [r3, #16]
 8009564:	2204      	movs	r2, #4
 8009566:	4013      	ands	r3, r2
 8009568:	2b04      	cmp	r3, #4
 800956a:	d125      	bne.n	80095b8 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68db      	ldr	r3, [r3, #12]
 8009572:	2204      	movs	r2, #4
 8009574:	4013      	ands	r3, r2
 8009576:	2b04      	cmp	r3, #4
 8009578:	d11e      	bne.n	80095b8 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2205      	movs	r2, #5
 8009580:	4252      	negs	r2, r2
 8009582:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2202      	movs	r2, #2
 8009588:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	699a      	ldr	r2, [r3, #24]
 8009590:	23c0      	movs	r3, #192	@ 0xc0
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4013      	ands	r3, r2
 8009596:	d004      	beq.n	80095a2 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	0018      	movs	r0, r3
 800959c:	f000 fa68 	bl	8009a70 <HAL_TIM_IC_CaptureCallback>
 80095a0:	e007      	b.n	80095b2 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	0018      	movs	r0, r3
 80095a6:	f000 fa5b 	bl	8009a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	0018      	movs	r0, r3
 80095ae:	f000 fa67 	bl	8009a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2200      	movs	r2, #0
 80095b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	691b      	ldr	r3, [r3, #16]
 80095be:	2208      	movs	r2, #8
 80095c0:	4013      	ands	r3, r2
 80095c2:	2b08      	cmp	r3, #8
 80095c4:	d124      	bne.n	8009610 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	68db      	ldr	r3, [r3, #12]
 80095cc:	2208      	movs	r2, #8
 80095ce:	4013      	ands	r3, r2
 80095d0:	2b08      	cmp	r3, #8
 80095d2:	d11d      	bne.n	8009610 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	2209      	movs	r2, #9
 80095da:	4252      	negs	r2, r2
 80095dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2204      	movs	r2, #4
 80095e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	69db      	ldr	r3, [r3, #28]
 80095ea:	2203      	movs	r2, #3
 80095ec:	4013      	ands	r3, r2
 80095ee:	d004      	beq.n	80095fa <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	0018      	movs	r0, r3
 80095f4:	f000 fa3c 	bl	8009a70 <HAL_TIM_IC_CaptureCallback>
 80095f8:	e007      	b.n	800960a <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	0018      	movs	r0, r3
 80095fe:	f000 fa2f 	bl	8009a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	0018      	movs	r0, r3
 8009606:	f000 fa3b 	bl	8009a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2200      	movs	r2, #0
 800960e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	691b      	ldr	r3, [r3, #16]
 8009616:	2210      	movs	r2, #16
 8009618:	4013      	ands	r3, r2
 800961a:	2b10      	cmp	r3, #16
 800961c:	d125      	bne.n	800966a <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2210      	movs	r2, #16
 8009626:	4013      	ands	r3, r2
 8009628:	2b10      	cmp	r3, #16
 800962a:	d11e      	bne.n	800966a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2211      	movs	r2, #17
 8009632:	4252      	negs	r2, r2
 8009634:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2208      	movs	r2, #8
 800963a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	69da      	ldr	r2, [r3, #28]
 8009642:	23c0      	movs	r3, #192	@ 0xc0
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	4013      	ands	r3, r2
 8009648:	d004      	beq.n	8009654 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	0018      	movs	r0, r3
 800964e:	f000 fa0f 	bl	8009a70 <HAL_TIM_IC_CaptureCallback>
 8009652:	e007      	b.n	8009664 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	0018      	movs	r0, r3
 8009658:	f000 fa02 	bl	8009a60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	0018      	movs	r0, r3
 8009660:	f000 fa0e 	bl	8009a80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2200      	movs	r2, #0
 8009668:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	2201      	movs	r2, #1
 8009672:	4013      	ands	r3, r2
 8009674:	2b01      	cmp	r3, #1
 8009676:	d10f      	bne.n	8009698 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	2201      	movs	r2, #1
 8009680:	4013      	ands	r3, r2
 8009682:	2b01      	cmp	r3, #1
 8009684:	d108      	bne.n	8009698 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	2202      	movs	r2, #2
 800968c:	4252      	negs	r2, r2
 800968e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	0018      	movs	r0, r3
 8009694:	f7f9 ff65 	bl	8003562 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	2280      	movs	r2, #128	@ 0x80
 80096a0:	4013      	ands	r3, r2
 80096a2:	2b80      	cmp	r3, #128	@ 0x80
 80096a4:	d10f      	bne.n	80096c6 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	2280      	movs	r2, #128	@ 0x80
 80096ae:	4013      	ands	r3, r2
 80096b0:	2b80      	cmp	r3, #128	@ 0x80
 80096b2:	d108      	bne.n	80096c6 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	2281      	movs	r2, #129	@ 0x81
 80096ba:	4252      	negs	r2, r2
 80096bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	0018      	movs	r0, r3
 80096c2:	f000 fd8d 	bl	800a1e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	691b      	ldr	r3, [r3, #16]
 80096cc:	2240      	movs	r2, #64	@ 0x40
 80096ce:	4013      	ands	r3, r2
 80096d0:	2b40      	cmp	r3, #64	@ 0x40
 80096d2:	d10f      	bne.n	80096f4 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	2240      	movs	r2, #64	@ 0x40
 80096dc:	4013      	ands	r3, r2
 80096de:	2b40      	cmp	r3, #64	@ 0x40
 80096e0:	d108      	bne.n	80096f4 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	2241      	movs	r2, #65	@ 0x41
 80096e8:	4252      	negs	r2, r2
 80096ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	0018      	movs	r0, r3
 80096f0:	f000 f9ce 	bl	8009a90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	691b      	ldr	r3, [r3, #16]
 80096fa:	2220      	movs	r2, #32
 80096fc:	4013      	ands	r3, r2
 80096fe:	2b20      	cmp	r3, #32
 8009700:	d10f      	bne.n	8009722 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	68db      	ldr	r3, [r3, #12]
 8009708:	2220      	movs	r2, #32
 800970a:	4013      	ands	r3, r2
 800970c:	2b20      	cmp	r3, #32
 800970e:	d108      	bne.n	8009722 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2221      	movs	r2, #33	@ 0x21
 8009716:	4252      	negs	r2, r2
 8009718:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	0018      	movs	r0, r3
 800971e:	f000 fd57 	bl	800a1d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009722:	46c0      	nop			@ (mov r8, r8)
 8009724:	46bd      	mov	sp, r7
 8009726:	b002      	add	sp, #8
 8009728:	bd80      	pop	{r7, pc}
	...

0800972c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b086      	sub	sp, #24
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009738:	2317      	movs	r3, #23
 800973a:	18fb      	adds	r3, r7, r3
 800973c:	2200      	movs	r2, #0
 800973e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	223c      	movs	r2, #60	@ 0x3c
 8009744:	5c9b      	ldrb	r3, [r3, r2]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d101      	bne.n	800974e <HAL_TIM_PWM_ConfigChannel+0x22>
 800974a:	2302      	movs	r3, #2
 800974c:	e0ad      	b.n	80098aa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	223c      	movs	r2, #60	@ 0x3c
 8009752:	2101      	movs	r1, #1
 8009754:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b0c      	cmp	r3, #12
 800975a:	d100      	bne.n	800975e <HAL_TIM_PWM_ConfigChannel+0x32>
 800975c:	e076      	b.n	800984c <HAL_TIM_PWM_ConfigChannel+0x120>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	2b0c      	cmp	r3, #12
 8009762:	d900      	bls.n	8009766 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8009764:	e095      	b.n	8009892 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2b08      	cmp	r3, #8
 800976a:	d04e      	beq.n	800980a <HAL_TIM_PWM_ConfigChannel+0xde>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2b08      	cmp	r3, #8
 8009770:	d900      	bls.n	8009774 <HAL_TIM_PWM_ConfigChannel+0x48>
 8009772:	e08e      	b.n	8009892 <HAL_TIM_PWM_ConfigChannel+0x166>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d003      	beq.n	8009782 <HAL_TIM_PWM_ConfigChannel+0x56>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2b04      	cmp	r3, #4
 800977e:	d021      	beq.n	80097c4 <HAL_TIM_PWM_ConfigChannel+0x98>
 8009780:	e087      	b.n	8009892 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	68ba      	ldr	r2, [r7, #8]
 8009788:	0011      	movs	r1, r2
 800978a:	0018      	movs	r0, r3
 800978c:	f000 fa08 	bl	8009ba0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	699a      	ldr	r2, [r3, #24]
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2108      	movs	r1, #8
 800979c:	430a      	orrs	r2, r1
 800979e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	699a      	ldr	r2, [r3, #24]
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	2104      	movs	r1, #4
 80097ac:	438a      	bics	r2, r1
 80097ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	6999      	ldr	r1, [r3, #24]
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	691a      	ldr	r2, [r3, #16]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	619a      	str	r2, [r3, #24]
      break;
 80097c2:	e06b      	b.n	800989c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68ba      	ldr	r2, [r7, #8]
 80097ca:	0011      	movs	r1, r2
 80097cc:	0018      	movs	r0, r3
 80097ce:	f000 fa6f 	bl	8009cb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	699a      	ldr	r2, [r3, #24]
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	2180      	movs	r1, #128	@ 0x80
 80097de:	0109      	lsls	r1, r1, #4
 80097e0:	430a      	orrs	r2, r1
 80097e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	699a      	ldr	r2, [r3, #24]
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4931      	ldr	r1, [pc, #196]	@ (80098b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80097f0:	400a      	ands	r2, r1
 80097f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	6999      	ldr	r1, [r3, #24]
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	691b      	ldr	r3, [r3, #16]
 80097fe:	021a      	lsls	r2, r3, #8
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	430a      	orrs	r2, r1
 8009806:	619a      	str	r2, [r3, #24]
      break;
 8009808:	e048      	b.n	800989c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	68ba      	ldr	r2, [r7, #8]
 8009810:	0011      	movs	r1, r2
 8009812:	0018      	movs	r0, r3
 8009814:	f000 fad0 	bl	8009db8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	69da      	ldr	r2, [r3, #28]
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	2108      	movs	r1, #8
 8009824:	430a      	orrs	r2, r1
 8009826:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	69da      	ldr	r2, [r3, #28]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2104      	movs	r1, #4
 8009834:	438a      	bics	r2, r1
 8009836:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	69d9      	ldr	r1, [r3, #28]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	691a      	ldr	r2, [r3, #16]
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	430a      	orrs	r2, r1
 8009848:	61da      	str	r2, [r3, #28]
      break;
 800984a:	e027      	b.n	800989c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68ba      	ldr	r2, [r7, #8]
 8009852:	0011      	movs	r1, r2
 8009854:	0018      	movs	r0, r3
 8009856:	f000 fb35 	bl	8009ec4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	69da      	ldr	r2, [r3, #28]
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	2180      	movs	r1, #128	@ 0x80
 8009866:	0109      	lsls	r1, r1, #4
 8009868:	430a      	orrs	r2, r1
 800986a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	69da      	ldr	r2, [r3, #28]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	490f      	ldr	r1, [pc, #60]	@ (80098b4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8009878:	400a      	ands	r2, r1
 800987a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69d9      	ldr	r1, [r3, #28]
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	021a      	lsls	r2, r3, #8
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	430a      	orrs	r2, r1
 800988e:	61da      	str	r2, [r3, #28]
      break;
 8009890:	e004      	b.n	800989c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8009892:	2317      	movs	r3, #23
 8009894:	18fb      	adds	r3, r7, r3
 8009896:	2201      	movs	r2, #1
 8009898:	701a      	strb	r2, [r3, #0]
      break;
 800989a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	223c      	movs	r2, #60	@ 0x3c
 80098a0:	2100      	movs	r1, #0
 80098a2:	5499      	strb	r1, [r3, r2]

  return status;
 80098a4:	2317      	movs	r3, #23
 80098a6:	18fb      	adds	r3, r7, r3
 80098a8:	781b      	ldrb	r3, [r3, #0]
}
 80098aa:	0018      	movs	r0, r3
 80098ac:	46bd      	mov	sp, r7
 80098ae:	b006      	add	sp, #24
 80098b0:	bd80      	pop	{r7, pc}
 80098b2:	46c0      	nop			@ (mov r8, r8)
 80098b4:	fffffbff 	.word	0xfffffbff

080098b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80098b8:	b580      	push	{r7, lr}
 80098ba:	b084      	sub	sp, #16
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
 80098c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098c2:	230f      	movs	r3, #15
 80098c4:	18fb      	adds	r3, r7, r3
 80098c6:	2200      	movs	r2, #0
 80098c8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	223c      	movs	r2, #60	@ 0x3c
 80098ce:	5c9b      	ldrb	r3, [r3, r2]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d101      	bne.n	80098d8 <HAL_TIM_ConfigClockSource+0x20>
 80098d4:	2302      	movs	r3, #2
 80098d6:	e0bc      	b.n	8009a52 <HAL_TIM_ConfigClockSource+0x19a>
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	223c      	movs	r2, #60	@ 0x3c
 80098dc:	2101      	movs	r1, #1
 80098de:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	223d      	movs	r2, #61	@ 0x3d
 80098e4:	2102      	movs	r1, #2
 80098e6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	689b      	ldr	r3, [r3, #8]
 80098ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	2277      	movs	r2, #119	@ 0x77
 80098f4:	4393      	bics	r3, r2
 80098f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80098f8:	68bb      	ldr	r3, [r7, #8]
 80098fa:	4a58      	ldr	r2, [pc, #352]	@ (8009a5c <HAL_TIM_ConfigClockSource+0x1a4>)
 80098fc:	4013      	ands	r3, r2
 80098fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68ba      	ldr	r2, [r7, #8]
 8009906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2280      	movs	r2, #128	@ 0x80
 800990e:	0192      	lsls	r2, r2, #6
 8009910:	4293      	cmp	r3, r2
 8009912:	d040      	beq.n	8009996 <HAL_TIM_ConfigClockSource+0xde>
 8009914:	2280      	movs	r2, #128	@ 0x80
 8009916:	0192      	lsls	r2, r2, #6
 8009918:	4293      	cmp	r3, r2
 800991a:	d900      	bls.n	800991e <HAL_TIM_ConfigClockSource+0x66>
 800991c:	e088      	b.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 800991e:	2280      	movs	r2, #128	@ 0x80
 8009920:	0152      	lsls	r2, r2, #5
 8009922:	4293      	cmp	r3, r2
 8009924:	d100      	bne.n	8009928 <HAL_TIM_ConfigClockSource+0x70>
 8009926:	e088      	b.n	8009a3a <HAL_TIM_ConfigClockSource+0x182>
 8009928:	2280      	movs	r2, #128	@ 0x80
 800992a:	0152      	lsls	r2, r2, #5
 800992c:	4293      	cmp	r3, r2
 800992e:	d900      	bls.n	8009932 <HAL_TIM_ConfigClockSource+0x7a>
 8009930:	e07e      	b.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 8009932:	2b70      	cmp	r3, #112	@ 0x70
 8009934:	d018      	beq.n	8009968 <HAL_TIM_ConfigClockSource+0xb0>
 8009936:	d900      	bls.n	800993a <HAL_TIM_ConfigClockSource+0x82>
 8009938:	e07a      	b.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 800993a:	2b60      	cmp	r3, #96	@ 0x60
 800993c:	d04f      	beq.n	80099de <HAL_TIM_ConfigClockSource+0x126>
 800993e:	d900      	bls.n	8009942 <HAL_TIM_ConfigClockSource+0x8a>
 8009940:	e076      	b.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 8009942:	2b50      	cmp	r3, #80	@ 0x50
 8009944:	d03b      	beq.n	80099be <HAL_TIM_ConfigClockSource+0x106>
 8009946:	d900      	bls.n	800994a <HAL_TIM_ConfigClockSource+0x92>
 8009948:	e072      	b.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 800994a:	2b40      	cmp	r3, #64	@ 0x40
 800994c:	d057      	beq.n	80099fe <HAL_TIM_ConfigClockSource+0x146>
 800994e:	d900      	bls.n	8009952 <HAL_TIM_ConfigClockSource+0x9a>
 8009950:	e06e      	b.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 8009952:	2b30      	cmp	r3, #48	@ 0x30
 8009954:	d063      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0x166>
 8009956:	d86b      	bhi.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 8009958:	2b20      	cmp	r3, #32
 800995a:	d060      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0x166>
 800995c:	d868      	bhi.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
 800995e:	2b00      	cmp	r3, #0
 8009960:	d05d      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0x166>
 8009962:	2b10      	cmp	r3, #16
 8009964:	d05b      	beq.n	8009a1e <HAL_TIM_ConfigClockSource+0x166>
 8009966:	e063      	b.n	8009a30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8009978:	f000 fb88 	bl	800a08c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	689b      	ldr	r3, [r3, #8]
 8009982:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	2277      	movs	r2, #119	@ 0x77
 8009988:	4313      	orrs	r3, r2
 800998a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	68ba      	ldr	r2, [r7, #8]
 8009992:	609a      	str	r2, [r3, #8]
      break;
 8009994:	e052      	b.n	8009a3c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80099a6:	f000 fb71 	bl	800a08c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	689a      	ldr	r2, [r3, #8]
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2180      	movs	r1, #128	@ 0x80
 80099b6:	01c9      	lsls	r1, r1, #7
 80099b8:	430a      	orrs	r2, r1
 80099ba:	609a      	str	r2, [r3, #8]
      break;
 80099bc:	e03e      	b.n	8009a3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099c6:	683b      	ldr	r3, [r7, #0]
 80099c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80099ca:	001a      	movs	r2, r3
 80099cc:	f000 fae4 	bl	8009f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	2150      	movs	r1, #80	@ 0x50
 80099d6:	0018      	movs	r0, r3
 80099d8:	f000 fb3e 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 80099dc:	e02e      	b.n	8009a3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80099e2:	683b      	ldr	r3, [r7, #0]
 80099e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80099ea:	001a      	movs	r2, r3
 80099ec:	f000 fb02 	bl	8009ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2160      	movs	r1, #96	@ 0x60
 80099f6:	0018      	movs	r0, r3
 80099f8:	f000 fb2e 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 80099fc:	e01e      	b.n	8009a3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009a0a:	001a      	movs	r2, r3
 8009a0c:	f000 fac4 	bl	8009f98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	2140      	movs	r1, #64	@ 0x40
 8009a16:	0018      	movs	r0, r3
 8009a18:	f000 fb1e 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 8009a1c:	e00e      	b.n	8009a3c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681a      	ldr	r2, [r3, #0]
 8009a22:	683b      	ldr	r3, [r7, #0]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	0019      	movs	r1, r3
 8009a28:	0010      	movs	r0, r2
 8009a2a:	f000 fb15 	bl	800a058 <TIM_ITRx_SetConfig>
      break;
 8009a2e:	e005      	b.n	8009a3c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8009a30:	230f      	movs	r3, #15
 8009a32:	18fb      	adds	r3, r7, r3
 8009a34:	2201      	movs	r2, #1
 8009a36:	701a      	strb	r2, [r3, #0]
      break;
 8009a38:	e000      	b.n	8009a3c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8009a3a:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	223d      	movs	r2, #61	@ 0x3d
 8009a40:	2101      	movs	r1, #1
 8009a42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	223c      	movs	r2, #60	@ 0x3c
 8009a48:	2100      	movs	r1, #0
 8009a4a:	5499      	strb	r1, [r3, r2]

  return status;
 8009a4c:	230f      	movs	r3, #15
 8009a4e:	18fb      	adds	r3, r7, r3
 8009a50:	781b      	ldrb	r3, [r3, #0]
}
 8009a52:	0018      	movs	r0, r3
 8009a54:	46bd      	mov	sp, r7
 8009a56:	b004      	add	sp, #16
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	46c0      	nop			@ (mov r8, r8)
 8009a5c:	ffff00ff 	.word	0xffff00ff

08009a60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b082      	sub	sp, #8
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009a68:	46c0      	nop			@ (mov r8, r8)
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	b002      	add	sp, #8
 8009a6e:	bd80      	pop	{r7, pc}

08009a70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009a78:	46c0      	nop			@ (mov r8, r8)
 8009a7a:	46bd      	mov	sp, r7
 8009a7c:	b002      	add	sp, #8
 8009a7e:	bd80      	pop	{r7, pc}

08009a80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009a80:	b580      	push	{r7, lr}
 8009a82:	b082      	sub	sp, #8
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009a88:	46c0      	nop			@ (mov r8, r8)
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	b002      	add	sp, #8
 8009a8e:	bd80      	pop	{r7, pc}

08009a90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b082      	sub	sp, #8
 8009a94:	af00      	add	r7, sp, #0
 8009a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009a98:	46c0      	nop			@ (mov r8, r8)
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	b002      	add	sp, #8
 8009a9e:	bd80      	pop	{r7, pc}

08009aa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b084      	sub	sp, #16
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
 8009aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	4a34      	ldr	r2, [pc, #208]	@ (8009b84 <TIM_Base_SetConfig+0xe4>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d008      	beq.n	8009aca <TIM_Base_SetConfig+0x2a>
 8009ab8:	687a      	ldr	r2, [r7, #4]
 8009aba:	2380      	movs	r3, #128	@ 0x80
 8009abc:	05db      	lsls	r3, r3, #23
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d003      	beq.n	8009aca <TIM_Base_SetConfig+0x2a>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	4a30      	ldr	r2, [pc, #192]	@ (8009b88 <TIM_Base_SetConfig+0xe8>)
 8009ac6:	4293      	cmp	r3, r2
 8009ac8:	d108      	bne.n	8009adc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2270      	movs	r2, #112	@ 0x70
 8009ace:	4393      	bics	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	685b      	ldr	r3, [r3, #4]
 8009ad6:	68fa      	ldr	r2, [r7, #12]
 8009ad8:	4313      	orrs	r3, r2
 8009ada:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	4a29      	ldr	r2, [pc, #164]	@ (8009b84 <TIM_Base_SetConfig+0xe4>)
 8009ae0:	4293      	cmp	r3, r2
 8009ae2:	d018      	beq.n	8009b16 <TIM_Base_SetConfig+0x76>
 8009ae4:	687a      	ldr	r2, [r7, #4]
 8009ae6:	2380      	movs	r3, #128	@ 0x80
 8009ae8:	05db      	lsls	r3, r3, #23
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d013      	beq.n	8009b16 <TIM_Base_SetConfig+0x76>
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	4a25      	ldr	r2, [pc, #148]	@ (8009b88 <TIM_Base_SetConfig+0xe8>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d00f      	beq.n	8009b16 <TIM_Base_SetConfig+0x76>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	4a24      	ldr	r2, [pc, #144]	@ (8009b8c <TIM_Base_SetConfig+0xec>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d00b      	beq.n	8009b16 <TIM_Base_SetConfig+0x76>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	4a23      	ldr	r2, [pc, #140]	@ (8009b90 <TIM_Base_SetConfig+0xf0>)
 8009b02:	4293      	cmp	r3, r2
 8009b04:	d007      	beq.n	8009b16 <TIM_Base_SetConfig+0x76>
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	4a22      	ldr	r2, [pc, #136]	@ (8009b94 <TIM_Base_SetConfig+0xf4>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d003      	beq.n	8009b16 <TIM_Base_SetConfig+0x76>
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	4a21      	ldr	r2, [pc, #132]	@ (8009b98 <TIM_Base_SetConfig+0xf8>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d108      	bne.n	8009b28 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	4a20      	ldr	r2, [pc, #128]	@ (8009b9c <TIM_Base_SetConfig+0xfc>)
 8009b1a:	4013      	ands	r3, r2
 8009b1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	68db      	ldr	r3, [r3, #12]
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4313      	orrs	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	2280      	movs	r2, #128	@ 0x80
 8009b2c:	4393      	bics	r3, r2
 8009b2e:	001a      	movs	r2, r3
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	695b      	ldr	r3, [r3, #20]
 8009b34:	4313      	orrs	r3, r2
 8009b36:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	68fa      	ldr	r2, [r7, #12]
 8009b3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	689a      	ldr	r2, [r3, #8]
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	681a      	ldr	r2, [r3, #0]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	4a0c      	ldr	r2, [pc, #48]	@ (8009b84 <TIM_Base_SetConfig+0xe4>)
 8009b52:	4293      	cmp	r3, r2
 8009b54:	d00b      	beq.n	8009b6e <TIM_Base_SetConfig+0xce>
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	4a0d      	ldr	r2, [pc, #52]	@ (8009b90 <TIM_Base_SetConfig+0xf0>)
 8009b5a:	4293      	cmp	r3, r2
 8009b5c:	d007      	beq.n	8009b6e <TIM_Base_SetConfig+0xce>
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	4a0c      	ldr	r2, [pc, #48]	@ (8009b94 <TIM_Base_SetConfig+0xf4>)
 8009b62:	4293      	cmp	r3, r2
 8009b64:	d003      	beq.n	8009b6e <TIM_Base_SetConfig+0xce>
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	4a0b      	ldr	r2, [pc, #44]	@ (8009b98 <TIM_Base_SetConfig+0xf8>)
 8009b6a:	4293      	cmp	r3, r2
 8009b6c:	d103      	bne.n	8009b76 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	691a      	ldr	r2, [r3, #16]
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	615a      	str	r2, [r3, #20]
}
 8009b7c:	46c0      	nop			@ (mov r8, r8)
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	b004      	add	sp, #16
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	40012c00 	.word	0x40012c00
 8009b88:	40000400 	.word	0x40000400
 8009b8c:	40002000 	.word	0x40002000
 8009b90:	40014000 	.word	0x40014000
 8009b94:	40014400 	.word	0x40014400
 8009b98:	40014800 	.word	0x40014800
 8009b9c:	fffffcff 	.word	0xfffffcff

08009ba0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ba0:	b580      	push	{r7, lr}
 8009ba2:	b086      	sub	sp, #24
 8009ba4:	af00      	add	r7, sp, #0
 8009ba6:	6078      	str	r0, [r7, #4]
 8009ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6a1b      	ldr	r3, [r3, #32]
 8009bae:	2201      	movs	r2, #1
 8009bb0:	4393      	bics	r3, r2
 8009bb2:	001a      	movs	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	6a1b      	ldr	r3, [r3, #32]
 8009bbc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2270      	movs	r2, #112	@ 0x70
 8009bce:	4393      	bics	r3, r2
 8009bd0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2203      	movs	r2, #3
 8009bd6:	4393      	bics	r3, r2
 8009bd8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bda:	683b      	ldr	r3, [r7, #0]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	4313      	orrs	r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009be4:	697b      	ldr	r3, [r7, #20]
 8009be6:	2202      	movs	r2, #2
 8009be8:	4393      	bics	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	689b      	ldr	r3, [r3, #8]
 8009bf0:	697a      	ldr	r2, [r7, #20]
 8009bf2:	4313      	orrs	r3, r2
 8009bf4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	4a27      	ldr	r2, [pc, #156]	@ (8009c98 <TIM_OC1_SetConfig+0xf8>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00b      	beq.n	8009c16 <TIM_OC1_SetConfig+0x76>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a26      	ldr	r2, [pc, #152]	@ (8009c9c <TIM_OC1_SetConfig+0xfc>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d007      	beq.n	8009c16 <TIM_OC1_SetConfig+0x76>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a25      	ldr	r2, [pc, #148]	@ (8009ca0 <TIM_OC1_SetConfig+0x100>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d003      	beq.n	8009c16 <TIM_OC1_SetConfig+0x76>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a24      	ldr	r2, [pc, #144]	@ (8009ca4 <TIM_OC1_SetConfig+0x104>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d10c      	bne.n	8009c30 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	2208      	movs	r2, #8
 8009c1a:	4393      	bics	r3, r2
 8009c1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	4313      	orrs	r3, r2
 8009c26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	2204      	movs	r2, #4
 8009c2c:	4393      	bics	r3, r2
 8009c2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	4a19      	ldr	r2, [pc, #100]	@ (8009c98 <TIM_OC1_SetConfig+0xf8>)
 8009c34:	4293      	cmp	r3, r2
 8009c36:	d00b      	beq.n	8009c50 <TIM_OC1_SetConfig+0xb0>
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	4a18      	ldr	r2, [pc, #96]	@ (8009c9c <TIM_OC1_SetConfig+0xfc>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d007      	beq.n	8009c50 <TIM_OC1_SetConfig+0xb0>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a17      	ldr	r2, [pc, #92]	@ (8009ca0 <TIM_OC1_SetConfig+0x100>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d003      	beq.n	8009c50 <TIM_OC1_SetConfig+0xb0>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	4a16      	ldr	r2, [pc, #88]	@ (8009ca4 <TIM_OC1_SetConfig+0x104>)
 8009c4c:	4293      	cmp	r3, r2
 8009c4e:	d111      	bne.n	8009c74 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009c50:	693b      	ldr	r3, [r7, #16]
 8009c52:	4a15      	ldr	r2, [pc, #84]	@ (8009ca8 <TIM_OC1_SetConfig+0x108>)
 8009c54:	4013      	ands	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	4a14      	ldr	r2, [pc, #80]	@ (8009cac <TIM_OC1_SetConfig+0x10c>)
 8009c5c:	4013      	ands	r3, r2
 8009c5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009c60:	683b      	ldr	r3, [r7, #0]
 8009c62:	695b      	ldr	r3, [r3, #20]
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	693a      	ldr	r2, [r7, #16]
 8009c70:	4313      	orrs	r3, r2
 8009c72:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	68fa      	ldr	r2, [r7, #12]
 8009c7e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	685a      	ldr	r2, [r3, #4]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	697a      	ldr	r2, [r7, #20]
 8009c8c:	621a      	str	r2, [r3, #32]
}
 8009c8e:	46c0      	nop			@ (mov r8, r8)
 8009c90:	46bd      	mov	sp, r7
 8009c92:	b006      	add	sp, #24
 8009c94:	bd80      	pop	{r7, pc}
 8009c96:	46c0      	nop			@ (mov r8, r8)
 8009c98:	40012c00 	.word	0x40012c00
 8009c9c:	40014000 	.word	0x40014000
 8009ca0:	40014400 	.word	0x40014400
 8009ca4:	40014800 	.word	0x40014800
 8009ca8:	fffffeff 	.word	0xfffffeff
 8009cac:	fffffdff 	.word	0xfffffdff

08009cb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009cb0:	b580      	push	{r7, lr}
 8009cb2:	b086      	sub	sp, #24
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6a1b      	ldr	r3, [r3, #32]
 8009cbe:	2210      	movs	r2, #16
 8009cc0:	4393      	bics	r3, r2
 8009cc2:	001a      	movs	r2, r3
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	6a1b      	ldr	r3, [r3, #32]
 8009ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699b      	ldr	r3, [r3, #24]
 8009cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4a2e      	ldr	r2, [pc, #184]	@ (8009d98 <TIM_OC2_SetConfig+0xe8>)
 8009cde:	4013      	ands	r3, r2
 8009ce0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8009d9c <TIM_OC2_SetConfig+0xec>)
 8009ce6:	4013      	ands	r3, r2
 8009ce8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	021b      	lsls	r3, r3, #8
 8009cf0:	68fa      	ldr	r2, [r7, #12]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	2220      	movs	r2, #32
 8009cfa:	4393      	bics	r3, r2
 8009cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	689b      	ldr	r3, [r3, #8]
 8009d02:	011b      	lsls	r3, r3, #4
 8009d04:	697a      	ldr	r2, [r7, #20]
 8009d06:	4313      	orrs	r3, r2
 8009d08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4a24      	ldr	r2, [pc, #144]	@ (8009da0 <TIM_OC2_SetConfig+0xf0>)
 8009d0e:	4293      	cmp	r3, r2
 8009d10:	d10d      	bne.n	8009d2e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	2280      	movs	r2, #128	@ 0x80
 8009d16:	4393      	bics	r3, r2
 8009d18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	68db      	ldr	r3, [r3, #12]
 8009d1e:	011b      	lsls	r3, r3, #4
 8009d20:	697a      	ldr	r2, [r7, #20]
 8009d22:	4313      	orrs	r3, r2
 8009d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009d26:	697b      	ldr	r3, [r7, #20]
 8009d28:	2240      	movs	r2, #64	@ 0x40
 8009d2a:	4393      	bics	r3, r2
 8009d2c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	4a1b      	ldr	r2, [pc, #108]	@ (8009da0 <TIM_OC2_SetConfig+0xf0>)
 8009d32:	4293      	cmp	r3, r2
 8009d34:	d00b      	beq.n	8009d4e <TIM_OC2_SetConfig+0x9e>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	4a1a      	ldr	r2, [pc, #104]	@ (8009da4 <TIM_OC2_SetConfig+0xf4>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d007      	beq.n	8009d4e <TIM_OC2_SetConfig+0x9e>
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	4a19      	ldr	r2, [pc, #100]	@ (8009da8 <TIM_OC2_SetConfig+0xf8>)
 8009d42:	4293      	cmp	r3, r2
 8009d44:	d003      	beq.n	8009d4e <TIM_OC2_SetConfig+0x9e>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	4a18      	ldr	r2, [pc, #96]	@ (8009dac <TIM_OC2_SetConfig+0xfc>)
 8009d4a:	4293      	cmp	r3, r2
 8009d4c:	d113      	bne.n	8009d76 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009d4e:	693b      	ldr	r3, [r7, #16]
 8009d50:	4a17      	ldr	r2, [pc, #92]	@ (8009db0 <TIM_OC2_SetConfig+0x100>)
 8009d52:	4013      	ands	r3, r2
 8009d54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009d56:	693b      	ldr	r3, [r7, #16]
 8009d58:	4a16      	ldr	r2, [pc, #88]	@ (8009db4 <TIM_OC2_SetConfig+0x104>)
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	695b      	ldr	r3, [r3, #20]
 8009d62:	009b      	lsls	r3, r3, #2
 8009d64:	693a      	ldr	r2, [r7, #16]
 8009d66:	4313      	orrs	r3, r2
 8009d68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009d6a:	683b      	ldr	r3, [r7, #0]
 8009d6c:	699b      	ldr	r3, [r3, #24]
 8009d6e:	009b      	lsls	r3, r3, #2
 8009d70:	693a      	ldr	r2, [r7, #16]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	685a      	ldr	r2, [r3, #4]
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	621a      	str	r2, [r3, #32]
}
 8009d90:	46c0      	nop			@ (mov r8, r8)
 8009d92:	46bd      	mov	sp, r7
 8009d94:	b006      	add	sp, #24
 8009d96:	bd80      	pop	{r7, pc}
 8009d98:	ffff8fff 	.word	0xffff8fff
 8009d9c:	fffffcff 	.word	0xfffffcff
 8009da0:	40012c00 	.word	0x40012c00
 8009da4:	40014000 	.word	0x40014000
 8009da8:	40014400 	.word	0x40014400
 8009dac:	40014800 	.word	0x40014800
 8009db0:	fffffbff 	.word	0xfffffbff
 8009db4:	fffff7ff 	.word	0xfffff7ff

08009db8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b086      	sub	sp, #24
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
 8009dc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	4a35      	ldr	r2, [pc, #212]	@ (8009e9c <TIM_OC3_SetConfig+0xe4>)
 8009dc8:	401a      	ands	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	69db      	ldr	r3, [r3, #28]
 8009dde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	2270      	movs	r2, #112	@ 0x70
 8009de4:	4393      	bics	r3, r2
 8009de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	2203      	movs	r2, #3
 8009dec:	4393      	bics	r3, r2
 8009dee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68fa      	ldr	r2, [r7, #12]
 8009df6:	4313      	orrs	r3, r2
 8009df8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009dfa:	697b      	ldr	r3, [r7, #20]
 8009dfc:	4a28      	ldr	r2, [pc, #160]	@ (8009ea0 <TIM_OC3_SetConfig+0xe8>)
 8009dfe:	4013      	ands	r3, r2
 8009e00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	021b      	lsls	r3, r3, #8
 8009e08:	697a      	ldr	r2, [r7, #20]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	4a24      	ldr	r2, [pc, #144]	@ (8009ea4 <TIM_OC3_SetConfig+0xec>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d10d      	bne.n	8009e32 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	4a23      	ldr	r2, [pc, #140]	@ (8009ea8 <TIM_OC3_SetConfig+0xf0>)
 8009e1a:	4013      	ands	r3, r2
 8009e1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	68db      	ldr	r3, [r3, #12]
 8009e22:	021b      	lsls	r3, r3, #8
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009e2a:	697b      	ldr	r3, [r7, #20]
 8009e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8009eac <TIM_OC3_SetConfig+0xf4>)
 8009e2e:	4013      	ands	r3, r2
 8009e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a1b      	ldr	r2, [pc, #108]	@ (8009ea4 <TIM_OC3_SetConfig+0xec>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d00b      	beq.n	8009e52 <TIM_OC3_SetConfig+0x9a>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8009eb0 <TIM_OC3_SetConfig+0xf8>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d007      	beq.n	8009e52 <TIM_OC3_SetConfig+0x9a>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a1b      	ldr	r2, [pc, #108]	@ (8009eb4 <TIM_OC3_SetConfig+0xfc>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d003      	beq.n	8009e52 <TIM_OC3_SetConfig+0x9a>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a1a      	ldr	r2, [pc, #104]	@ (8009eb8 <TIM_OC3_SetConfig+0x100>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d113      	bne.n	8009e7a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009e52:	693b      	ldr	r3, [r7, #16]
 8009e54:	4a19      	ldr	r2, [pc, #100]	@ (8009ebc <TIM_OC3_SetConfig+0x104>)
 8009e56:	4013      	ands	r3, r2
 8009e58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009e5a:	693b      	ldr	r3, [r7, #16]
 8009e5c:	4a18      	ldr	r2, [pc, #96]	@ (8009ec0 <TIM_OC3_SetConfig+0x108>)
 8009e5e:	4013      	ands	r3, r2
 8009e60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	695b      	ldr	r3, [r3, #20]
 8009e66:	011b      	lsls	r3, r3, #4
 8009e68:	693a      	ldr	r2, [r7, #16]
 8009e6a:	4313      	orrs	r3, r2
 8009e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	699b      	ldr	r3, [r3, #24]
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	4313      	orrs	r3, r2
 8009e78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	68fa      	ldr	r2, [r7, #12]
 8009e84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	685a      	ldr	r2, [r3, #4]
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	697a      	ldr	r2, [r7, #20]
 8009e92:	621a      	str	r2, [r3, #32]
}
 8009e94:	46c0      	nop			@ (mov r8, r8)
 8009e96:	46bd      	mov	sp, r7
 8009e98:	b006      	add	sp, #24
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	fffffeff 	.word	0xfffffeff
 8009ea0:	fffffdff 	.word	0xfffffdff
 8009ea4:	40012c00 	.word	0x40012c00
 8009ea8:	fffff7ff 	.word	0xfffff7ff
 8009eac:	fffffbff 	.word	0xfffffbff
 8009eb0:	40014000 	.word	0x40014000
 8009eb4:	40014400 	.word	0x40014400
 8009eb8:	40014800 	.word	0x40014800
 8009ebc:	ffffefff 	.word	0xffffefff
 8009ec0:	ffffdfff 	.word	0xffffdfff

08009ec4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b086      	sub	sp, #24
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	6a1b      	ldr	r3, [r3, #32]
 8009ed2:	4a28      	ldr	r2, [pc, #160]	@ (8009f74 <TIM_OC4_SetConfig+0xb0>)
 8009ed4:	401a      	ands	r2, r3
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	685b      	ldr	r3, [r3, #4]
 8009ee4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	69db      	ldr	r3, [r3, #28]
 8009eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	4a22      	ldr	r2, [pc, #136]	@ (8009f78 <TIM_OC4_SetConfig+0xb4>)
 8009ef0:	4013      	ands	r3, r2
 8009ef2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4a21      	ldr	r2, [pc, #132]	@ (8009f7c <TIM_OC4_SetConfig+0xb8>)
 8009ef8:	4013      	ands	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	021b      	lsls	r3, r3, #8
 8009f02:	68fa      	ldr	r2, [r7, #12]
 8009f04:	4313      	orrs	r3, r2
 8009f06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009f08:	693b      	ldr	r3, [r7, #16]
 8009f0a:	4a1d      	ldr	r2, [pc, #116]	@ (8009f80 <TIM_OC4_SetConfig+0xbc>)
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	689b      	ldr	r3, [r3, #8]
 8009f14:	031b      	lsls	r3, r3, #12
 8009f16:	693a      	ldr	r2, [r7, #16]
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a19      	ldr	r2, [pc, #100]	@ (8009f84 <TIM_OC4_SetConfig+0xc0>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d00b      	beq.n	8009f3c <TIM_OC4_SetConfig+0x78>
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	4a18      	ldr	r2, [pc, #96]	@ (8009f88 <TIM_OC4_SetConfig+0xc4>)
 8009f28:	4293      	cmp	r3, r2
 8009f2a:	d007      	beq.n	8009f3c <TIM_OC4_SetConfig+0x78>
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	4a17      	ldr	r2, [pc, #92]	@ (8009f8c <TIM_OC4_SetConfig+0xc8>)
 8009f30:	4293      	cmp	r3, r2
 8009f32:	d003      	beq.n	8009f3c <TIM_OC4_SetConfig+0x78>
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	4a16      	ldr	r2, [pc, #88]	@ (8009f90 <TIM_OC4_SetConfig+0xcc>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d109      	bne.n	8009f50 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	4a15      	ldr	r2, [pc, #84]	@ (8009f94 <TIM_OC4_SetConfig+0xd0>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	695b      	ldr	r3, [r3, #20]
 8009f48:	019b      	lsls	r3, r3, #6
 8009f4a:	697a      	ldr	r2, [r7, #20]
 8009f4c:	4313      	orrs	r3, r2
 8009f4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	68fa      	ldr	r2, [r7, #12]
 8009f5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	685a      	ldr	r2, [r3, #4]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	693a      	ldr	r2, [r7, #16]
 8009f68:	621a      	str	r2, [r3, #32]
}
 8009f6a:	46c0      	nop			@ (mov r8, r8)
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	b006      	add	sp, #24
 8009f70:	bd80      	pop	{r7, pc}
 8009f72:	46c0      	nop			@ (mov r8, r8)
 8009f74:	ffffefff 	.word	0xffffefff
 8009f78:	ffff8fff 	.word	0xffff8fff
 8009f7c:	fffffcff 	.word	0xfffffcff
 8009f80:	ffffdfff 	.word	0xffffdfff
 8009f84:	40012c00 	.word	0x40012c00
 8009f88:	40014000 	.word	0x40014000
 8009f8c:	40014400 	.word	0x40014400
 8009f90:	40014800 	.word	0x40014800
 8009f94:	ffffbfff 	.word	0xffffbfff

08009f98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6a1b      	ldr	r3, [r3, #32]
 8009fa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	6a1b      	ldr	r3, [r3, #32]
 8009fae:	2201      	movs	r2, #1
 8009fb0:	4393      	bics	r3, r2
 8009fb2:	001a      	movs	r2, r3
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	22f0      	movs	r2, #240	@ 0xf0
 8009fc2:	4393      	bics	r3, r2
 8009fc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	011b      	lsls	r3, r3, #4
 8009fca:	693a      	ldr	r2, [r7, #16]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	220a      	movs	r2, #10
 8009fd4:	4393      	bics	r3, r2
 8009fd6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009fd8:	697a      	ldr	r2, [r7, #20]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	693a      	ldr	r2, [r7, #16]
 8009fe4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	697a      	ldr	r2, [r7, #20]
 8009fea:	621a      	str	r2, [r3, #32]
}
 8009fec:	46c0      	nop			@ (mov r8, r8)
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	b006      	add	sp, #24
 8009ff2:	bd80      	pop	{r7, pc}

08009ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009ff4:	b580      	push	{r7, lr}
 8009ff6:	b086      	sub	sp, #24
 8009ff8:	af00      	add	r7, sp, #0
 8009ffa:	60f8      	str	r0, [r7, #12]
 8009ffc:	60b9      	str	r1, [r7, #8]
 8009ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	6a1b      	ldr	r3, [r3, #32]
 800a004:	2210      	movs	r2, #16
 800a006:	4393      	bics	r3, r2
 800a008:	001a      	movs	r2, r3
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	699b      	ldr	r3, [r3, #24]
 800a012:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	6a1b      	ldr	r3, [r3, #32]
 800a018:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	4a0d      	ldr	r2, [pc, #52]	@ (800a054 <TIM_TI2_ConfigInputStage+0x60>)
 800a01e:	4013      	ands	r3, r2
 800a020:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	031b      	lsls	r3, r3, #12
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	4313      	orrs	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a02c:	693b      	ldr	r3, [r7, #16]
 800a02e:	22a0      	movs	r2, #160	@ 0xa0
 800a030:	4393      	bics	r3, r2
 800a032:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a034:	68bb      	ldr	r3, [r7, #8]
 800a036:	011b      	lsls	r3, r3, #4
 800a038:	693a      	ldr	r2, [r7, #16]
 800a03a:	4313      	orrs	r3, r2
 800a03c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	621a      	str	r2, [r3, #32]
}
 800a04a:	46c0      	nop			@ (mov r8, r8)
 800a04c:	46bd      	mov	sp, r7
 800a04e:	b006      	add	sp, #24
 800a050:	bd80      	pop	{r7, pc}
 800a052:	46c0      	nop			@ (mov r8, r8)
 800a054:	ffff0fff 	.word	0xffff0fff

0800a058 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
 800a060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	689b      	ldr	r3, [r3, #8]
 800a066:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2270      	movs	r2, #112	@ 0x70
 800a06c:	4393      	bics	r3, r2
 800a06e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a070:	683a      	ldr	r2, [r7, #0]
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	4313      	orrs	r3, r2
 800a076:	2207      	movs	r2, #7
 800a078:	4313      	orrs	r3, r2
 800a07a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	68fa      	ldr	r2, [r7, #12]
 800a080:	609a      	str	r2, [r3, #8]
}
 800a082:	46c0      	nop			@ (mov r8, r8)
 800a084:	46bd      	mov	sp, r7
 800a086:	b004      	add	sp, #16
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b086      	sub	sp, #24
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a0a0:	697b      	ldr	r3, [r7, #20]
 800a0a2:	4a09      	ldr	r2, [pc, #36]	@ (800a0c8 <TIM_ETR_SetConfig+0x3c>)
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	021a      	lsls	r2, r3, #8
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	4313      	orrs	r3, r2
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	697a      	ldr	r2, [r7, #20]
 800a0be:	609a      	str	r2, [r3, #8]
}
 800a0c0:	46c0      	nop			@ (mov r8, r8)
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b006      	add	sp, #24
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	ffff00ff 	.word	0xffff00ff

0800a0cc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b086      	sub	sp, #24
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	60f8      	str	r0, [r7, #12]
 800a0d4:	60b9      	str	r1, [r7, #8]
 800a0d6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a0d8:	68bb      	ldr	r3, [r7, #8]
 800a0da:	221f      	movs	r2, #31
 800a0dc:	4013      	ands	r3, r2
 800a0de:	2201      	movs	r2, #1
 800a0e0:	409a      	lsls	r2, r3
 800a0e2:	0013      	movs	r3, r2
 800a0e4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	6a1b      	ldr	r3, [r3, #32]
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	43d2      	mvns	r2, r2
 800a0ee:	401a      	ands	r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	6a1a      	ldr	r2, [r3, #32]
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	211f      	movs	r1, #31
 800a0fc:	400b      	ands	r3, r1
 800a0fe:	6879      	ldr	r1, [r7, #4]
 800a100:	4099      	lsls	r1, r3
 800a102:	000b      	movs	r3, r1
 800a104:	431a      	orrs	r2, r3
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	621a      	str	r2, [r3, #32]
}
 800a10a:	46c0      	nop			@ (mov r8, r8)
 800a10c:	46bd      	mov	sp, r7
 800a10e:	b006      	add	sp, #24
 800a110:	bd80      	pop	{r7, pc}
	...

0800a114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	223c      	movs	r2, #60	@ 0x3c
 800a122:	5c9b      	ldrb	r3, [r3, r2]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d101      	bne.n	800a12c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a128:	2302      	movs	r3, #2
 800a12a:	e047      	b.n	800a1bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	223c      	movs	r2, #60	@ 0x3c
 800a130:	2101      	movs	r1, #1
 800a132:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	223d      	movs	r2, #61	@ 0x3d
 800a138:	2102      	movs	r1, #2
 800a13a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	689b      	ldr	r3, [r3, #8]
 800a14a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2270      	movs	r2, #112	@ 0x70
 800a150:	4393      	bics	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a154:	683b      	ldr	r3, [r7, #0]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	68fa      	ldr	r2, [r7, #12]
 800a15a:	4313      	orrs	r3, r2
 800a15c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	4a16      	ldr	r2, [pc, #88]	@ (800a1c4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d00f      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681a      	ldr	r2, [r3, #0]
 800a174:	2380      	movs	r3, #128	@ 0x80
 800a176:	05db      	lsls	r3, r3, #23
 800a178:	429a      	cmp	r2, r3
 800a17a:	d009      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a11      	ldr	r2, [pc, #68]	@ (800a1c8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d004      	beq.n	800a190 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a10      	ldr	r2, [pc, #64]	@ (800a1cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d10c      	bne.n	800a1aa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	2280      	movs	r2, #128	@ 0x80
 800a194:	4393      	bics	r3, r2
 800a196:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	4313      	orrs	r3, r2
 800a1a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	223d      	movs	r2, #61	@ 0x3d
 800a1ae:	2101      	movs	r1, #1
 800a1b0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	223c      	movs	r2, #60	@ 0x3c
 800a1b6:	2100      	movs	r1, #0
 800a1b8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a1ba:	2300      	movs	r3, #0
}
 800a1bc:	0018      	movs	r0, r3
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	b004      	add	sp, #16
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	40012c00 	.word	0x40012c00
 800a1c8:	40000400 	.word	0x40000400
 800a1cc:	40014000 	.word	0x40014000

0800a1d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a1d8:	46c0      	nop			@ (mov r8, r8)
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	b002      	add	sp, #8
 800a1de:	bd80      	pop	{r7, pc}

0800a1e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b082      	sub	sp, #8
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a1e8:	46c0      	nop			@ (mov r8, r8)
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	b002      	add	sp, #8
 800a1ee:	bd80      	pop	{r7, pc}

0800a1f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2244      	movs	r2, #68	@ 0x44
 800a1fc:	2100      	movs	r1, #0
 800a1fe:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a200:	4b05      	ldr	r3, [pc, #20]	@ (800a218 <USB_EnableGlobalInt+0x28>)
 800a202:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	b299      	uxth	r1, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	2240      	movs	r2, #64	@ 0x40
 800a20c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a20e:	2300      	movs	r3, #0
}
 800a210:	0018      	movs	r0, r3
 800a212:	46bd      	mov	sp, r7
 800a214:	b004      	add	sp, #16
 800a216:	bd80      	pop	{r7, pc}
 800a218:	0000bf80 	.word	0x0000bf80

0800a21c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b084      	sub	sp, #16
 800a220:	af00      	add	r7, sp, #0
 800a222:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a224:	4b09      	ldr	r3, [pc, #36]	@ (800a24c <USB_DisableGlobalInt+0x30>)
 800a226:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2240      	movs	r2, #64	@ 0x40
 800a22c:	5a9b      	ldrh	r3, [r3, r2]
 800a22e:	b29b      	uxth	r3, r3
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	b292      	uxth	r2, r2
 800a234:	43d2      	mvns	r2, r2
 800a236:	b292      	uxth	r2, r2
 800a238:	4013      	ands	r3, r2
 800a23a:	b299      	uxth	r1, r3
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2240      	movs	r2, #64	@ 0x40
 800a240:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	0018      	movs	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	b004      	add	sp, #16
 800a24a:	bd80      	pop	{r7, pc}
 800a24c:	0000bf80 	.word	0x0000bf80

0800a250 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a250:	b084      	sub	sp, #16
 800a252:	b590      	push	{r4, r7, lr}
 800a254:	b083      	sub	sp, #12
 800a256:	af00      	add	r7, sp, #0
 800a258:	6078      	str	r0, [r7, #4]
 800a25a:	2004      	movs	r0, #4
 800a25c:	2410      	movs	r4, #16
 800a25e:	1900      	adds	r0, r0, r4
 800a260:	2408      	movs	r4, #8
 800a262:	46a4      	mov	ip, r4
 800a264:	44bc      	add	ip, r7
 800a266:	4460      	add	r0, ip
 800a268:	6001      	str	r1, [r0, #0]
 800a26a:	6042      	str	r2, [r0, #4]
 800a26c:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2240      	movs	r2, #64	@ 0x40
 800a272:	2101      	movs	r1, #1
 800a274:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	2240      	movs	r2, #64	@ 0x40
 800a27a:	2100      	movs	r1, #0
 800a27c:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2244      	movs	r2, #68	@ 0x44
 800a282:	2100      	movs	r1, #0
 800a284:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	2250      	movs	r2, #80	@ 0x50
 800a28a:	2100      	movs	r1, #0
 800a28c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800a28e:	2300      	movs	r3, #0
}
 800a290:	0018      	movs	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	b003      	add	sp, #12
 800a296:	bc90      	pop	{r4, r7}
 800a298:	bc08      	pop	{r3}
 800a29a:	b004      	add	sp, #16
 800a29c:	4718      	bx	r3
	...

0800a2a0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b09c      	sub	sp, #112	@ 0x70
 800a2a4:	af00      	add	r7, sp, #0
 800a2a6:	6078      	str	r0, [r7, #4]
 800a2a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2aa:	236f      	movs	r3, #111	@ 0x6f
 800a2ac:	18fb      	adds	r3, r7, r3
 800a2ae:	2200      	movs	r2, #0
 800a2b0:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	009b      	lsls	r3, r3, #2
 800a2ba:	18d3      	adds	r3, r2, r3
 800a2bc:	881b      	ldrh	r3, [r3, #0]
 800a2be:	b29a      	uxth	r2, r3
 800a2c0:	236c      	movs	r3, #108	@ 0x6c
 800a2c2:	18fb      	adds	r3, r7, r3
 800a2c4:	49a3      	ldr	r1, [pc, #652]	@ (800a554 <USB_ActivateEndpoint+0x2b4>)
 800a2c6:	400a      	ands	r2, r1
 800a2c8:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 800a2ca:	683b      	ldr	r3, [r7, #0]
 800a2cc:	78db      	ldrb	r3, [r3, #3]
 800a2ce:	2b03      	cmp	r3, #3
 800a2d0:	d017      	beq.n	800a302 <USB_ActivateEndpoint+0x62>
 800a2d2:	dc28      	bgt.n	800a326 <USB_ActivateEndpoint+0x86>
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d00e      	beq.n	800a2f6 <USB_ActivateEndpoint+0x56>
 800a2d8:	dc25      	bgt.n	800a326 <USB_ActivateEndpoint+0x86>
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d002      	beq.n	800a2e4 <USB_ActivateEndpoint+0x44>
 800a2de:	2b01      	cmp	r3, #1
 800a2e0:	d018      	beq.n	800a314 <USB_ActivateEndpoint+0x74>
 800a2e2:	e020      	b.n	800a326 <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800a2e4:	226c      	movs	r2, #108	@ 0x6c
 800a2e6:	18bb      	adds	r3, r7, r2
 800a2e8:	18ba      	adds	r2, r7, r2
 800a2ea:	8812      	ldrh	r2, [r2, #0]
 800a2ec:	2180      	movs	r1, #128	@ 0x80
 800a2ee:	0089      	lsls	r1, r1, #2
 800a2f0:	430a      	orrs	r2, r1
 800a2f2:	801a      	strh	r2, [r3, #0]
      break;
 800a2f4:	e01c      	b.n	800a330 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 800a2f6:	226c      	movs	r2, #108	@ 0x6c
 800a2f8:	18bb      	adds	r3, r7, r2
 800a2fa:	18ba      	adds	r2, r7, r2
 800a2fc:	8812      	ldrh	r2, [r2, #0]
 800a2fe:	801a      	strh	r2, [r3, #0]
      break;
 800a300:	e016      	b.n	800a330 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800a302:	226c      	movs	r2, #108	@ 0x6c
 800a304:	18bb      	adds	r3, r7, r2
 800a306:	18ba      	adds	r2, r7, r2
 800a308:	8812      	ldrh	r2, [r2, #0]
 800a30a:	21c0      	movs	r1, #192	@ 0xc0
 800a30c:	00c9      	lsls	r1, r1, #3
 800a30e:	430a      	orrs	r2, r1
 800a310:	801a      	strh	r2, [r3, #0]
      break;
 800a312:	e00d      	b.n	800a330 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800a314:	226c      	movs	r2, #108	@ 0x6c
 800a316:	18bb      	adds	r3, r7, r2
 800a318:	18ba      	adds	r2, r7, r2
 800a31a:	8812      	ldrh	r2, [r2, #0]
 800a31c:	2180      	movs	r1, #128	@ 0x80
 800a31e:	00c9      	lsls	r1, r1, #3
 800a320:	430a      	orrs	r2, r1
 800a322:	801a      	strh	r2, [r3, #0]
      break;
 800a324:	e004      	b.n	800a330 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 800a326:	236f      	movs	r3, #111	@ 0x6f
 800a328:	18fb      	adds	r3, r7, r3
 800a32a:	2201      	movs	r2, #1
 800a32c:	701a      	strb	r2, [r3, #0]
      break;
 800a32e:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	781b      	ldrb	r3, [r3, #0]
 800a336:	009b      	lsls	r3, r3, #2
 800a338:	18d3      	adds	r3, r2, r3
 800a33a:	226c      	movs	r2, #108	@ 0x6c
 800a33c:	18ba      	adds	r2, r7, r2
 800a33e:	8812      	ldrh	r2, [r2, #0]
 800a340:	4985      	ldr	r1, [pc, #532]	@ (800a558 <USB_ActivateEndpoint+0x2b8>)
 800a342:	430a      	orrs	r2, r1
 800a344:	b292      	uxth	r2, r2
 800a346:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800a348:	687a      	ldr	r2, [r7, #4]
 800a34a:	683b      	ldr	r3, [r7, #0]
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	009b      	lsls	r3, r3, #2
 800a350:	18d3      	adds	r3, r2, r3
 800a352:	881b      	ldrh	r3, [r3, #0]
 800a354:	b29b      	uxth	r3, r3
 800a356:	b21b      	sxth	r3, r3
 800a358:	4a80      	ldr	r2, [pc, #512]	@ (800a55c <USB_ActivateEndpoint+0x2bc>)
 800a35a:	4013      	ands	r3, r2
 800a35c:	b21a      	sxth	r2, r3
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	781b      	ldrb	r3, [r3, #0]
 800a362:	b21b      	sxth	r3, r3
 800a364:	4313      	orrs	r3, r2
 800a366:	b21a      	sxth	r2, r3
 800a368:	2166      	movs	r1, #102	@ 0x66
 800a36a:	187b      	adds	r3, r7, r1
 800a36c:	801a      	strh	r2, [r3, #0]
 800a36e:	687a      	ldr	r2, [r7, #4]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	781b      	ldrb	r3, [r3, #0]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	18d3      	adds	r3, r2, r3
 800a378:	187a      	adds	r2, r7, r1
 800a37a:	8812      	ldrh	r2, [r2, #0]
 800a37c:	4976      	ldr	r1, [pc, #472]	@ (800a558 <USB_ActivateEndpoint+0x2b8>)
 800a37e:	430a      	orrs	r2, r1
 800a380:	b292      	uxth	r2, r2
 800a382:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	7b1b      	ldrb	r3, [r3, #12]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d000      	beq.n	800a38e <USB_ActivateEndpoint+0xee>
 800a38c:	e178      	b.n	800a680 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	785b      	ldrb	r3, [r3, #1]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d100      	bne.n	800a398 <USB_ActivateEndpoint+0xf8>
 800a396:	e07a      	b.n	800a48e <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	61bb      	str	r3, [r7, #24]
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	2250      	movs	r2, #80	@ 0x50
 800a3a0:	5a9b      	ldrh	r3, [r3, r2]
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	001a      	movs	r2, r3
 800a3a6:	69bb      	ldr	r3, [r7, #24]
 800a3a8:	189b      	adds	r3, r3, r2
 800a3aa:	61bb      	str	r3, [r7, #24]
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	00da      	lsls	r2, r3, #3
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	18d3      	adds	r3, r2, r3
 800a3b6:	2280      	movs	r2, #128	@ 0x80
 800a3b8:	00d2      	lsls	r2, r2, #3
 800a3ba:	4694      	mov	ip, r2
 800a3bc:	4463      	add	r3, ip
 800a3be:	617b      	str	r3, [r7, #20]
 800a3c0:	683b      	ldr	r3, [r7, #0]
 800a3c2:	88db      	ldrh	r3, [r3, #6]
 800a3c4:	085b      	lsrs	r3, r3, #1
 800a3c6:	b29b      	uxth	r3, r3
 800a3c8:	18db      	adds	r3, r3, r3
 800a3ca:	b29a      	uxth	r2, r3
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a3d0:	687a      	ldr	r2, [r7, #4]
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	781b      	ldrb	r3, [r3, #0]
 800a3d6:	009b      	lsls	r3, r3, #2
 800a3d8:	18d2      	adds	r2, r2, r3
 800a3da:	2112      	movs	r1, #18
 800a3dc:	187b      	adds	r3, r7, r1
 800a3de:	8812      	ldrh	r2, [r2, #0]
 800a3e0:	801a      	strh	r2, [r3, #0]
 800a3e2:	187b      	adds	r3, r7, r1
 800a3e4:	881b      	ldrh	r3, [r3, #0]
 800a3e6:	2240      	movs	r2, #64	@ 0x40
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	d016      	beq.n	800a41a <USB_ActivateEndpoint+0x17a>
 800a3ec:	687a      	ldr	r2, [r7, #4]
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	781b      	ldrb	r3, [r3, #0]
 800a3f2:	009b      	lsls	r3, r3, #2
 800a3f4:	18d3      	adds	r3, r2, r3
 800a3f6:	881b      	ldrh	r3, [r3, #0]
 800a3f8:	b29a      	uxth	r2, r3
 800a3fa:	2010      	movs	r0, #16
 800a3fc:	183b      	adds	r3, r7, r0
 800a3fe:	4957      	ldr	r1, [pc, #348]	@ (800a55c <USB_ActivateEndpoint+0x2bc>)
 800a400:	400a      	ands	r2, r1
 800a402:	801a      	strh	r2, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	009b      	lsls	r3, r3, #2
 800a40c:	18d3      	adds	r3, r2, r3
 800a40e:	183a      	adds	r2, r7, r0
 800a410:	8812      	ldrh	r2, [r2, #0]
 800a412:	4953      	ldr	r1, [pc, #332]	@ (800a560 <USB_ActivateEndpoint+0x2c0>)
 800a414:	430a      	orrs	r2, r1
 800a416:	b292      	uxth	r2, r2
 800a418:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	78db      	ldrb	r3, [r3, #3]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d01d      	beq.n	800a45e <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	781b      	ldrb	r3, [r3, #0]
 800a428:	009b      	lsls	r3, r3, #2
 800a42a:	18d3      	adds	r3, r2, r3
 800a42c:	881b      	ldrh	r3, [r3, #0]
 800a42e:	b29a      	uxth	r2, r3
 800a430:	200c      	movs	r0, #12
 800a432:	183b      	adds	r3, r7, r0
 800a434:	494b      	ldr	r1, [pc, #300]	@ (800a564 <USB_ActivateEndpoint+0x2c4>)
 800a436:	400a      	ands	r2, r1
 800a438:	801a      	strh	r2, [r3, #0]
 800a43a:	183b      	adds	r3, r7, r0
 800a43c:	183a      	adds	r2, r7, r0
 800a43e:	8812      	ldrh	r2, [r2, #0]
 800a440:	2120      	movs	r1, #32
 800a442:	404a      	eors	r2, r1
 800a444:	801a      	strh	r2, [r3, #0]
 800a446:	687a      	ldr	r2, [r7, #4]
 800a448:	683b      	ldr	r3, [r7, #0]
 800a44a:	781b      	ldrb	r3, [r3, #0]
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	18d3      	adds	r3, r2, r3
 800a450:	183a      	adds	r2, r7, r0
 800a452:	8812      	ldrh	r2, [r2, #0]
 800a454:	4940      	ldr	r1, [pc, #256]	@ (800a558 <USB_ActivateEndpoint+0x2b8>)
 800a456:	430a      	orrs	r2, r1
 800a458:	b292      	uxth	r2, r2
 800a45a:	801a      	strh	r2, [r3, #0]
 800a45c:	e2b4      	b.n	800a9c8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	683b      	ldr	r3, [r7, #0]
 800a462:	781b      	ldrb	r3, [r3, #0]
 800a464:	009b      	lsls	r3, r3, #2
 800a466:	18d3      	adds	r3, r2, r3
 800a468:	881b      	ldrh	r3, [r3, #0]
 800a46a:	b29a      	uxth	r2, r3
 800a46c:	200e      	movs	r0, #14
 800a46e:	183b      	adds	r3, r7, r0
 800a470:	493c      	ldr	r1, [pc, #240]	@ (800a564 <USB_ActivateEndpoint+0x2c4>)
 800a472:	400a      	ands	r2, r1
 800a474:	801a      	strh	r2, [r3, #0]
 800a476:	687a      	ldr	r2, [r7, #4]
 800a478:	683b      	ldr	r3, [r7, #0]
 800a47a:	781b      	ldrb	r3, [r3, #0]
 800a47c:	009b      	lsls	r3, r3, #2
 800a47e:	18d3      	adds	r3, r2, r3
 800a480:	183a      	adds	r2, r7, r0
 800a482:	8812      	ldrh	r2, [r2, #0]
 800a484:	4934      	ldr	r1, [pc, #208]	@ (800a558 <USB_ActivateEndpoint+0x2b8>)
 800a486:	430a      	orrs	r2, r1
 800a488:	b292      	uxth	r2, r2
 800a48a:	801a      	strh	r2, [r3, #0]
 800a48c:	e29c      	b.n	800a9c8 <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	633b      	str	r3, [r7, #48]	@ 0x30
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2250      	movs	r2, #80	@ 0x50
 800a496:	5a9b      	ldrh	r3, [r3, r2]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	001a      	movs	r2, r3
 800a49c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a49e:	189b      	adds	r3, r3, r2
 800a4a0:	633b      	str	r3, [r7, #48]	@ 0x30
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	781b      	ldrb	r3, [r3, #0]
 800a4a6:	00da      	lsls	r2, r3, #3
 800a4a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4aa:	18d3      	adds	r3, r2, r3
 800a4ac:	4a2e      	ldr	r2, [pc, #184]	@ (800a568 <USB_ActivateEndpoint+0x2c8>)
 800a4ae:	4694      	mov	ip, r2
 800a4b0:	4463      	add	r3, ip
 800a4b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	88db      	ldrh	r3, [r3, #6]
 800a4b8:	085b      	lsrs	r3, r3, #1
 800a4ba:	b29b      	uxth	r3, r3
 800a4bc:	18db      	adds	r3, r3, r3
 800a4be:	b29a      	uxth	r2, r3
 800a4c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a4c2:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	2250      	movs	r2, #80	@ 0x50
 800a4cc:	5a9b      	ldrh	r3, [r3, r2]
 800a4ce:	b29b      	uxth	r3, r3
 800a4d0:	001a      	movs	r2, r3
 800a4d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4d4:	189b      	adds	r3, r3, r2
 800a4d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	781b      	ldrb	r3, [r3, #0]
 800a4dc:	00da      	lsls	r2, r3, #3
 800a4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e0:	18d3      	adds	r3, r2, r3
 800a4e2:	4a22      	ldr	r2, [pc, #136]	@ (800a56c <USB_ActivateEndpoint+0x2cc>)
 800a4e4:	4694      	mov	ip, r2
 800a4e6:	4463      	add	r3, ip
 800a4e8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ec:	881b      	ldrh	r3, [r3, #0]
 800a4ee:	b29b      	uxth	r3, r3
 800a4f0:	059b      	lsls	r3, r3, #22
 800a4f2:	0d9b      	lsrs	r3, r3, #22
 800a4f4:	b29a      	uxth	r2, r3
 800a4f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f8:	801a      	strh	r2, [r3, #0]
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	2b3e      	cmp	r3, #62	@ 0x3e
 800a500:	d91a      	bls.n	800a538 <USB_ActivateEndpoint+0x298>
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	095b      	lsrs	r3, r3, #5
 800a508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	221f      	movs	r2, #31
 800a510:	4013      	ands	r3, r2
 800a512:	d102      	bne.n	800a51a <USB_ActivateEndpoint+0x27a>
 800a514:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a516:	3b01      	subs	r3, #1
 800a518:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a51a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a51c:	881b      	ldrh	r3, [r3, #0]
 800a51e:	b29a      	uxth	r2, r3
 800a520:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a522:	b29b      	uxth	r3, r3
 800a524:	029b      	lsls	r3, r3, #10
 800a526:	b29b      	uxth	r3, r3
 800a528:	4313      	orrs	r3, r2
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	4a10      	ldr	r2, [pc, #64]	@ (800a570 <USB_ActivateEndpoint+0x2d0>)
 800a52e:	4313      	orrs	r3, r2
 800a530:	b29a      	uxth	r2, r3
 800a532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a534:	801a      	strh	r2, [r3, #0]
 800a536:	e034      	b.n	800a5a2 <USB_ActivateEndpoint+0x302>
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d119      	bne.n	800a574 <USB_ActivateEndpoint+0x2d4>
 800a540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a542:	881b      	ldrh	r3, [r3, #0]
 800a544:	b29b      	uxth	r3, r3
 800a546:	4a0a      	ldr	r2, [pc, #40]	@ (800a570 <USB_ActivateEndpoint+0x2d0>)
 800a548:	4313      	orrs	r3, r2
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	801a      	strh	r2, [r3, #0]
 800a550:	e027      	b.n	800a5a2 <USB_ActivateEndpoint+0x302>
 800a552:	46c0      	nop			@ (mov r8, r8)
 800a554:	ffff898f 	.word	0xffff898f
 800a558:	ffff8080 	.word	0xffff8080
 800a55c:	ffff8f8f 	.word	0xffff8f8f
 800a560:	ffff80c0 	.word	0xffff80c0
 800a564:	ffff8fbf 	.word	0xffff8fbf
 800a568:	00000404 	.word	0x00000404
 800a56c:	00000406 	.word	0x00000406
 800a570:	ffff8000 	.word	0xffff8000
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	691b      	ldr	r3, [r3, #16]
 800a578:	085b      	lsrs	r3, r3, #1
 800a57a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	691b      	ldr	r3, [r3, #16]
 800a580:	2201      	movs	r2, #1
 800a582:	4013      	ands	r3, r2
 800a584:	d002      	beq.n	800a58c <USB_ActivateEndpoint+0x2ec>
 800a586:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a588:	3301      	adds	r3, #1
 800a58a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a58c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a58e:	881b      	ldrh	r3, [r3, #0]
 800a590:	b29a      	uxth	r2, r3
 800a592:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a594:	b29b      	uxth	r3, r3
 800a596:	029b      	lsls	r3, r3, #10
 800a598:	b29b      	uxth	r3, r3
 800a59a:	4313      	orrs	r3, r2
 800a59c:	b29a      	uxth	r2, r3
 800a59e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5a0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a5a2:	687a      	ldr	r2, [r7, #4]
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	781b      	ldrb	r3, [r3, #0]
 800a5a8:	009b      	lsls	r3, r3, #2
 800a5aa:	18d2      	adds	r2, r2, r3
 800a5ac:	2122      	movs	r1, #34	@ 0x22
 800a5ae:	187b      	adds	r3, r7, r1
 800a5b0:	8812      	ldrh	r2, [r2, #0]
 800a5b2:	801a      	strh	r2, [r3, #0]
 800a5b4:	187b      	adds	r3, r7, r1
 800a5b6:	881a      	ldrh	r2, [r3, #0]
 800a5b8:	2380      	movs	r3, #128	@ 0x80
 800a5ba:	01db      	lsls	r3, r3, #7
 800a5bc:	4013      	ands	r3, r2
 800a5be:	d016      	beq.n	800a5ee <USB_ActivateEndpoint+0x34e>
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	009b      	lsls	r3, r3, #2
 800a5c8:	18d3      	adds	r3, r2, r3
 800a5ca:	881b      	ldrh	r3, [r3, #0]
 800a5cc:	b29a      	uxth	r2, r3
 800a5ce:	2020      	movs	r0, #32
 800a5d0:	183b      	adds	r3, r7, r0
 800a5d2:	49dd      	ldr	r1, [pc, #884]	@ (800a948 <USB_ActivateEndpoint+0x6a8>)
 800a5d4:	400a      	ands	r2, r1
 800a5d6:	801a      	strh	r2, [r3, #0]
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	683b      	ldr	r3, [r7, #0]
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	009b      	lsls	r3, r3, #2
 800a5e0:	18d3      	adds	r3, r2, r3
 800a5e2:	183a      	adds	r2, r7, r0
 800a5e4:	8812      	ldrh	r2, [r2, #0]
 800a5e6:	49d9      	ldr	r1, [pc, #868]	@ (800a94c <USB_ActivateEndpoint+0x6ac>)
 800a5e8:	430a      	orrs	r2, r1
 800a5ea:	b292      	uxth	r2, r2
 800a5ec:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 800a5ee:	683b      	ldr	r3, [r7, #0]
 800a5f0:	781b      	ldrb	r3, [r3, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d125      	bne.n	800a642 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	683b      	ldr	r3, [r7, #0]
 800a5fa:	781b      	ldrb	r3, [r3, #0]
 800a5fc:	009b      	lsls	r3, r3, #2
 800a5fe:	18d3      	adds	r3, r2, r3
 800a600:	881b      	ldrh	r3, [r3, #0]
 800a602:	b29a      	uxth	r2, r3
 800a604:	201c      	movs	r0, #28
 800a606:	183b      	adds	r3, r7, r0
 800a608:	49d1      	ldr	r1, [pc, #836]	@ (800a950 <USB_ActivateEndpoint+0x6b0>)
 800a60a:	400a      	ands	r2, r1
 800a60c:	801a      	strh	r2, [r3, #0]
 800a60e:	183b      	adds	r3, r7, r0
 800a610:	183a      	adds	r2, r7, r0
 800a612:	8812      	ldrh	r2, [r2, #0]
 800a614:	2180      	movs	r1, #128	@ 0x80
 800a616:	0149      	lsls	r1, r1, #5
 800a618:	404a      	eors	r2, r1
 800a61a:	801a      	strh	r2, [r3, #0]
 800a61c:	183b      	adds	r3, r7, r0
 800a61e:	183a      	adds	r2, r7, r0
 800a620:	8812      	ldrh	r2, [r2, #0]
 800a622:	2180      	movs	r1, #128	@ 0x80
 800a624:	0189      	lsls	r1, r1, #6
 800a626:	404a      	eors	r2, r1
 800a628:	801a      	strh	r2, [r3, #0]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	009b      	lsls	r3, r3, #2
 800a632:	18d3      	adds	r3, r2, r3
 800a634:	183a      	adds	r2, r7, r0
 800a636:	8812      	ldrh	r2, [r2, #0]
 800a638:	49c6      	ldr	r1, [pc, #792]	@ (800a954 <USB_ActivateEndpoint+0x6b4>)
 800a63a:	430a      	orrs	r2, r1
 800a63c:	b292      	uxth	r2, r2
 800a63e:	801a      	strh	r2, [r3, #0]
 800a640:	e1c2      	b.n	800a9c8 <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	781b      	ldrb	r3, [r3, #0]
 800a648:	009b      	lsls	r3, r3, #2
 800a64a:	18d3      	adds	r3, r2, r3
 800a64c:	881b      	ldrh	r3, [r3, #0]
 800a64e:	b29a      	uxth	r2, r3
 800a650:	201e      	movs	r0, #30
 800a652:	183b      	adds	r3, r7, r0
 800a654:	49be      	ldr	r1, [pc, #760]	@ (800a950 <USB_ActivateEndpoint+0x6b0>)
 800a656:	400a      	ands	r2, r1
 800a658:	801a      	strh	r2, [r3, #0]
 800a65a:	183b      	adds	r3, r7, r0
 800a65c:	183a      	adds	r2, r7, r0
 800a65e:	8812      	ldrh	r2, [r2, #0]
 800a660:	2180      	movs	r1, #128	@ 0x80
 800a662:	0189      	lsls	r1, r1, #6
 800a664:	404a      	eors	r2, r1
 800a666:	801a      	strh	r2, [r3, #0]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	683b      	ldr	r3, [r7, #0]
 800a66c:	781b      	ldrb	r3, [r3, #0]
 800a66e:	009b      	lsls	r3, r3, #2
 800a670:	18d3      	adds	r3, r2, r3
 800a672:	183a      	adds	r2, r7, r0
 800a674:	8812      	ldrh	r2, [r2, #0]
 800a676:	49b7      	ldr	r1, [pc, #732]	@ (800a954 <USB_ActivateEndpoint+0x6b4>)
 800a678:	430a      	orrs	r2, r1
 800a67a:	b292      	uxth	r2, r2
 800a67c:	801a      	strh	r2, [r3, #0]
 800a67e:	e1a3      	b.n	800a9c8 <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	78db      	ldrb	r3, [r3, #3]
 800a684:	2b02      	cmp	r3, #2
 800a686:	d117      	bne.n	800a6b8 <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800a688:	687a      	ldr	r2, [r7, #4]
 800a68a:	683b      	ldr	r3, [r7, #0]
 800a68c:	781b      	ldrb	r3, [r3, #0]
 800a68e:	009b      	lsls	r3, r3, #2
 800a690:	18d3      	adds	r3, r2, r3
 800a692:	881b      	ldrh	r3, [r3, #0]
 800a694:	b29a      	uxth	r2, r3
 800a696:	2062      	movs	r0, #98	@ 0x62
 800a698:	183b      	adds	r3, r7, r0
 800a69a:	49ab      	ldr	r1, [pc, #684]	@ (800a948 <USB_ActivateEndpoint+0x6a8>)
 800a69c:	400a      	ands	r2, r1
 800a69e:	801a      	strh	r2, [r3, #0]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	009b      	lsls	r3, r3, #2
 800a6a8:	18d3      	adds	r3, r2, r3
 800a6aa:	183a      	adds	r2, r7, r0
 800a6ac:	8812      	ldrh	r2, [r2, #0]
 800a6ae:	49aa      	ldr	r1, [pc, #680]	@ (800a958 <USB_ActivateEndpoint+0x6b8>)
 800a6b0:	430a      	orrs	r2, r1
 800a6b2:	b292      	uxth	r2, r2
 800a6b4:	801a      	strh	r2, [r3, #0]
 800a6b6:	e016      	b.n	800a6e6 <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	781b      	ldrb	r3, [r3, #0]
 800a6be:	009b      	lsls	r3, r3, #2
 800a6c0:	18d3      	adds	r3, r2, r3
 800a6c2:	881b      	ldrh	r3, [r3, #0]
 800a6c4:	b29a      	uxth	r2, r3
 800a6c6:	2064      	movs	r0, #100	@ 0x64
 800a6c8:	183b      	adds	r3, r7, r0
 800a6ca:	49a4      	ldr	r1, [pc, #656]	@ (800a95c <USB_ActivateEndpoint+0x6bc>)
 800a6cc:	400a      	ands	r2, r1
 800a6ce:	801a      	strh	r2, [r3, #0]
 800a6d0:	687a      	ldr	r2, [r7, #4]
 800a6d2:	683b      	ldr	r3, [r7, #0]
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	009b      	lsls	r3, r3, #2
 800a6d8:	18d3      	adds	r3, r2, r3
 800a6da:	183a      	adds	r2, r7, r0
 800a6dc:	8812      	ldrh	r2, [r2, #0]
 800a6de:	499d      	ldr	r1, [pc, #628]	@ (800a954 <USB_ActivateEndpoint+0x6b4>)
 800a6e0:	430a      	orrs	r2, r1
 800a6e2:	b292      	uxth	r2, r2
 800a6e4:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2250      	movs	r2, #80	@ 0x50
 800a6ee:	5a9b      	ldrh	r3, [r3, r2]
 800a6f0:	b29b      	uxth	r3, r3
 800a6f2:	001a      	movs	r2, r3
 800a6f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a6f6:	189b      	adds	r3, r3, r2
 800a6f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	781b      	ldrb	r3, [r3, #0]
 800a6fe:	00da      	lsls	r2, r3, #3
 800a700:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a702:	18d3      	adds	r3, r2, r3
 800a704:	2280      	movs	r2, #128	@ 0x80
 800a706:	00d2      	lsls	r2, r2, #3
 800a708:	4694      	mov	ip, r2
 800a70a:	4463      	add	r3, ip
 800a70c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	891b      	ldrh	r3, [r3, #8]
 800a712:	085b      	lsrs	r3, r3, #1
 800a714:	b29b      	uxth	r3, r3
 800a716:	18db      	adds	r3, r3, r3
 800a718:	b29a      	uxth	r2, r3
 800a71a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a71c:	801a      	strh	r2, [r3, #0]
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	657b      	str	r3, [r7, #84]	@ 0x54
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	2250      	movs	r2, #80	@ 0x50
 800a726:	5a9b      	ldrh	r3, [r3, r2]
 800a728:	b29b      	uxth	r3, r3
 800a72a:	001a      	movs	r2, r3
 800a72c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a72e:	189b      	adds	r3, r3, r2
 800a730:	657b      	str	r3, [r7, #84]	@ 0x54
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	781b      	ldrb	r3, [r3, #0]
 800a736:	00da      	lsls	r2, r3, #3
 800a738:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a73a:	18d3      	adds	r3, r2, r3
 800a73c:	4a88      	ldr	r2, [pc, #544]	@ (800a960 <USB_ActivateEndpoint+0x6c0>)
 800a73e:	4694      	mov	ip, r2
 800a740:	4463      	add	r3, ip
 800a742:	653b      	str	r3, [r7, #80]	@ 0x50
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	895b      	ldrh	r3, [r3, #10]
 800a748:	085b      	lsrs	r3, r3, #1
 800a74a:	b29b      	uxth	r3, r3
 800a74c:	18db      	adds	r3, r3, r3
 800a74e:	b29a      	uxth	r2, r3
 800a750:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a752:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800a754:	683b      	ldr	r3, [r7, #0]
 800a756:	785b      	ldrb	r3, [r3, #1]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	d000      	beq.n	800a75e <USB_ActivateEndpoint+0x4be>
 800a75c:	e087      	b.n	800a86e <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	009b      	lsls	r3, r3, #2
 800a766:	18d2      	adds	r2, r2, r3
 800a768:	2140      	movs	r1, #64	@ 0x40
 800a76a:	187b      	adds	r3, r7, r1
 800a76c:	8812      	ldrh	r2, [r2, #0]
 800a76e:	801a      	strh	r2, [r3, #0]
 800a770:	187b      	adds	r3, r7, r1
 800a772:	881a      	ldrh	r2, [r3, #0]
 800a774:	2380      	movs	r3, #128	@ 0x80
 800a776:	01db      	lsls	r3, r3, #7
 800a778:	4013      	ands	r3, r2
 800a77a:	d016      	beq.n	800a7aa <USB_ActivateEndpoint+0x50a>
 800a77c:	687a      	ldr	r2, [r7, #4]
 800a77e:	683b      	ldr	r3, [r7, #0]
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	009b      	lsls	r3, r3, #2
 800a784:	18d3      	adds	r3, r2, r3
 800a786:	881b      	ldrh	r3, [r3, #0]
 800a788:	b29a      	uxth	r2, r3
 800a78a:	203e      	movs	r0, #62	@ 0x3e
 800a78c:	183b      	adds	r3, r7, r0
 800a78e:	496e      	ldr	r1, [pc, #440]	@ (800a948 <USB_ActivateEndpoint+0x6a8>)
 800a790:	400a      	ands	r2, r1
 800a792:	801a      	strh	r2, [r3, #0]
 800a794:	687a      	ldr	r2, [r7, #4]
 800a796:	683b      	ldr	r3, [r7, #0]
 800a798:	781b      	ldrb	r3, [r3, #0]
 800a79a:	009b      	lsls	r3, r3, #2
 800a79c:	18d3      	adds	r3, r2, r3
 800a79e:	183a      	adds	r2, r7, r0
 800a7a0:	8812      	ldrh	r2, [r2, #0]
 800a7a2:	496a      	ldr	r1, [pc, #424]	@ (800a94c <USB_ActivateEndpoint+0x6ac>)
 800a7a4:	430a      	orrs	r2, r1
 800a7a6:	b292      	uxth	r2, r2
 800a7a8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	781b      	ldrb	r3, [r3, #0]
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	18d2      	adds	r2, r2, r3
 800a7b4:	213c      	movs	r1, #60	@ 0x3c
 800a7b6:	187b      	adds	r3, r7, r1
 800a7b8:	8812      	ldrh	r2, [r2, #0]
 800a7ba:	801a      	strh	r2, [r3, #0]
 800a7bc:	187b      	adds	r3, r7, r1
 800a7be:	881b      	ldrh	r3, [r3, #0]
 800a7c0:	2240      	movs	r2, #64	@ 0x40
 800a7c2:	4013      	ands	r3, r2
 800a7c4:	d016      	beq.n	800a7f4 <USB_ActivateEndpoint+0x554>
 800a7c6:	687a      	ldr	r2, [r7, #4]
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	009b      	lsls	r3, r3, #2
 800a7ce:	18d3      	adds	r3, r2, r3
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	203a      	movs	r0, #58	@ 0x3a
 800a7d6:	183b      	adds	r3, r7, r0
 800a7d8:	495b      	ldr	r1, [pc, #364]	@ (800a948 <USB_ActivateEndpoint+0x6a8>)
 800a7da:	400a      	ands	r2, r1
 800a7dc:	801a      	strh	r2, [r3, #0]
 800a7de:	687a      	ldr	r2, [r7, #4]
 800a7e0:	683b      	ldr	r3, [r7, #0]
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	009b      	lsls	r3, r3, #2
 800a7e6:	18d3      	adds	r3, r2, r3
 800a7e8:	183a      	adds	r2, r7, r0
 800a7ea:	8812      	ldrh	r2, [r2, #0]
 800a7ec:	495d      	ldr	r1, [pc, #372]	@ (800a964 <USB_ActivateEndpoint+0x6c4>)
 800a7ee:	430a      	orrs	r2, r1
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	683b      	ldr	r3, [r7, #0]
 800a7f8:	781b      	ldrb	r3, [r3, #0]
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	18d3      	adds	r3, r2, r3
 800a7fe:	881b      	ldrh	r3, [r3, #0]
 800a800:	b29a      	uxth	r2, r3
 800a802:	2038      	movs	r0, #56	@ 0x38
 800a804:	183b      	adds	r3, r7, r0
 800a806:	4952      	ldr	r1, [pc, #328]	@ (800a950 <USB_ActivateEndpoint+0x6b0>)
 800a808:	400a      	ands	r2, r1
 800a80a:	801a      	strh	r2, [r3, #0]
 800a80c:	183b      	adds	r3, r7, r0
 800a80e:	183a      	adds	r2, r7, r0
 800a810:	8812      	ldrh	r2, [r2, #0]
 800a812:	2180      	movs	r1, #128	@ 0x80
 800a814:	0149      	lsls	r1, r1, #5
 800a816:	404a      	eors	r2, r1
 800a818:	801a      	strh	r2, [r3, #0]
 800a81a:	183b      	adds	r3, r7, r0
 800a81c:	183a      	adds	r2, r7, r0
 800a81e:	8812      	ldrh	r2, [r2, #0]
 800a820:	2180      	movs	r1, #128	@ 0x80
 800a822:	0189      	lsls	r1, r1, #6
 800a824:	404a      	eors	r2, r1
 800a826:	801a      	strh	r2, [r3, #0]
 800a828:	687a      	ldr	r2, [r7, #4]
 800a82a:	683b      	ldr	r3, [r7, #0]
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	009b      	lsls	r3, r3, #2
 800a830:	18d3      	adds	r3, r2, r3
 800a832:	183a      	adds	r2, r7, r0
 800a834:	8812      	ldrh	r2, [r2, #0]
 800a836:	4947      	ldr	r1, [pc, #284]	@ (800a954 <USB_ActivateEndpoint+0x6b4>)
 800a838:	430a      	orrs	r2, r1
 800a83a:	b292      	uxth	r2, r2
 800a83c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	781b      	ldrb	r3, [r3, #0]
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	18d3      	adds	r3, r2, r3
 800a848:	881b      	ldrh	r3, [r3, #0]
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	2036      	movs	r0, #54	@ 0x36
 800a84e:	183b      	adds	r3, r7, r0
 800a850:	4945      	ldr	r1, [pc, #276]	@ (800a968 <USB_ActivateEndpoint+0x6c8>)
 800a852:	400a      	ands	r2, r1
 800a854:	801a      	strh	r2, [r3, #0]
 800a856:	687a      	ldr	r2, [r7, #4]
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	781b      	ldrb	r3, [r3, #0]
 800a85c:	009b      	lsls	r3, r3, #2
 800a85e:	18d3      	adds	r3, r2, r3
 800a860:	183a      	adds	r2, r7, r0
 800a862:	8812      	ldrh	r2, [r2, #0]
 800a864:	493b      	ldr	r1, [pc, #236]	@ (800a954 <USB_ActivateEndpoint+0x6b4>)
 800a866:	430a      	orrs	r2, r1
 800a868:	b292      	uxth	r2, r2
 800a86a:	801a      	strh	r2, [r3, #0]
 800a86c:	e0ac      	b.n	800a9c8 <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	781b      	ldrb	r3, [r3, #0]
 800a874:	009b      	lsls	r3, r3, #2
 800a876:	18d2      	adds	r2, r2, r3
 800a878:	214e      	movs	r1, #78	@ 0x4e
 800a87a:	187b      	adds	r3, r7, r1
 800a87c:	8812      	ldrh	r2, [r2, #0]
 800a87e:	801a      	strh	r2, [r3, #0]
 800a880:	187b      	adds	r3, r7, r1
 800a882:	881a      	ldrh	r2, [r3, #0]
 800a884:	2380      	movs	r3, #128	@ 0x80
 800a886:	01db      	lsls	r3, r3, #7
 800a888:	4013      	ands	r3, r2
 800a88a:	d016      	beq.n	800a8ba <USB_ActivateEndpoint+0x61a>
 800a88c:	687a      	ldr	r2, [r7, #4]
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	781b      	ldrb	r3, [r3, #0]
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	18d3      	adds	r3, r2, r3
 800a896:	881b      	ldrh	r3, [r3, #0]
 800a898:	b29a      	uxth	r2, r3
 800a89a:	204c      	movs	r0, #76	@ 0x4c
 800a89c:	183b      	adds	r3, r7, r0
 800a89e:	492a      	ldr	r1, [pc, #168]	@ (800a948 <USB_ActivateEndpoint+0x6a8>)
 800a8a0:	400a      	ands	r2, r1
 800a8a2:	801a      	strh	r2, [r3, #0]
 800a8a4:	687a      	ldr	r2, [r7, #4]
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	781b      	ldrb	r3, [r3, #0]
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	18d3      	adds	r3, r2, r3
 800a8ae:	183a      	adds	r2, r7, r0
 800a8b0:	8812      	ldrh	r2, [r2, #0]
 800a8b2:	4926      	ldr	r1, [pc, #152]	@ (800a94c <USB_ActivateEndpoint+0x6ac>)
 800a8b4:	430a      	orrs	r2, r1
 800a8b6:	b292      	uxth	r2, r2
 800a8b8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800a8ba:	687a      	ldr	r2, [r7, #4]
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	781b      	ldrb	r3, [r3, #0]
 800a8c0:	009b      	lsls	r3, r3, #2
 800a8c2:	18d2      	adds	r2, r2, r3
 800a8c4:	214a      	movs	r1, #74	@ 0x4a
 800a8c6:	187b      	adds	r3, r7, r1
 800a8c8:	8812      	ldrh	r2, [r2, #0]
 800a8ca:	801a      	strh	r2, [r3, #0]
 800a8cc:	187b      	adds	r3, r7, r1
 800a8ce:	881b      	ldrh	r3, [r3, #0]
 800a8d0:	2240      	movs	r2, #64	@ 0x40
 800a8d2:	4013      	ands	r3, r2
 800a8d4:	d016      	beq.n	800a904 <USB_ActivateEndpoint+0x664>
 800a8d6:	687a      	ldr	r2, [r7, #4]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	781b      	ldrb	r3, [r3, #0]
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	18d3      	adds	r3, r2, r3
 800a8e0:	881b      	ldrh	r3, [r3, #0]
 800a8e2:	b29a      	uxth	r2, r3
 800a8e4:	2048      	movs	r0, #72	@ 0x48
 800a8e6:	183b      	adds	r3, r7, r0
 800a8e8:	4917      	ldr	r1, [pc, #92]	@ (800a948 <USB_ActivateEndpoint+0x6a8>)
 800a8ea:	400a      	ands	r2, r1
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	781b      	ldrb	r3, [r3, #0]
 800a8f4:	009b      	lsls	r3, r3, #2
 800a8f6:	18d3      	adds	r3, r2, r3
 800a8f8:	183a      	adds	r2, r7, r0
 800a8fa:	8812      	ldrh	r2, [r2, #0]
 800a8fc:	4919      	ldr	r1, [pc, #100]	@ (800a964 <USB_ActivateEndpoint+0x6c4>)
 800a8fe:	430a      	orrs	r2, r1
 800a900:	b292      	uxth	r2, r2
 800a902:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	78db      	ldrb	r3, [r3, #3]
 800a908:	2b01      	cmp	r3, #1
 800a90a:	d02f      	beq.n	800a96c <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800a90c:	687a      	ldr	r2, [r7, #4]
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	781b      	ldrb	r3, [r3, #0]
 800a912:	009b      	lsls	r3, r3, #2
 800a914:	18d3      	adds	r3, r2, r3
 800a916:	881b      	ldrh	r3, [r3, #0]
 800a918:	b29a      	uxth	r2, r3
 800a91a:	2044      	movs	r0, #68	@ 0x44
 800a91c:	183b      	adds	r3, r7, r0
 800a91e:	4912      	ldr	r1, [pc, #72]	@ (800a968 <USB_ActivateEndpoint+0x6c8>)
 800a920:	400a      	ands	r2, r1
 800a922:	801a      	strh	r2, [r3, #0]
 800a924:	183b      	adds	r3, r7, r0
 800a926:	183a      	adds	r2, r7, r0
 800a928:	8812      	ldrh	r2, [r2, #0]
 800a92a:	2120      	movs	r1, #32
 800a92c:	404a      	eors	r2, r1
 800a92e:	801a      	strh	r2, [r3, #0]
 800a930:	687a      	ldr	r2, [r7, #4]
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	781b      	ldrb	r3, [r3, #0]
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	18d3      	adds	r3, r2, r3
 800a93a:	183a      	adds	r2, r7, r0
 800a93c:	8812      	ldrh	r2, [r2, #0]
 800a93e:	4905      	ldr	r1, [pc, #20]	@ (800a954 <USB_ActivateEndpoint+0x6b4>)
 800a940:	430a      	orrs	r2, r1
 800a942:	b292      	uxth	r2, r2
 800a944:	801a      	strh	r2, [r3, #0]
 800a946:	e028      	b.n	800a99a <USB_ActivateEndpoint+0x6fa>
 800a948:	ffff8f8f 	.word	0xffff8f8f
 800a94c:	ffffc080 	.word	0xffffc080
 800a950:	ffffbf8f 	.word	0xffffbf8f
 800a954:	ffff8080 	.word	0xffff8080
 800a958:	ffff8180 	.word	0xffff8180
 800a95c:	ffff8e8f 	.word	0xffff8e8f
 800a960:	00000404 	.word	0x00000404
 800a964:	ffff80c0 	.word	0xffff80c0
 800a968:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	009b      	lsls	r3, r3, #2
 800a974:	18d3      	adds	r3, r2, r3
 800a976:	881b      	ldrh	r3, [r3, #0]
 800a978:	b29a      	uxth	r2, r3
 800a97a:	2046      	movs	r0, #70	@ 0x46
 800a97c:	183b      	adds	r3, r7, r0
 800a97e:	4916      	ldr	r1, [pc, #88]	@ (800a9d8 <USB_ActivateEndpoint+0x738>)
 800a980:	400a      	ands	r2, r1
 800a982:	801a      	strh	r2, [r3, #0]
 800a984:	687a      	ldr	r2, [r7, #4]
 800a986:	683b      	ldr	r3, [r7, #0]
 800a988:	781b      	ldrb	r3, [r3, #0]
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	18d3      	adds	r3, r2, r3
 800a98e:	183a      	adds	r2, r7, r0
 800a990:	8812      	ldrh	r2, [r2, #0]
 800a992:	4912      	ldr	r1, [pc, #72]	@ (800a9dc <USB_ActivateEndpoint+0x73c>)
 800a994:	430a      	orrs	r2, r1
 800a996:	b292      	uxth	r2, r2
 800a998:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800a99a:	687a      	ldr	r2, [r7, #4]
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	781b      	ldrb	r3, [r3, #0]
 800a9a0:	009b      	lsls	r3, r3, #2
 800a9a2:	18d3      	adds	r3, r2, r3
 800a9a4:	881b      	ldrh	r3, [r3, #0]
 800a9a6:	b29a      	uxth	r2, r3
 800a9a8:	2042      	movs	r0, #66	@ 0x42
 800a9aa:	183b      	adds	r3, r7, r0
 800a9ac:	490c      	ldr	r1, [pc, #48]	@ (800a9e0 <USB_ActivateEndpoint+0x740>)
 800a9ae:	400a      	ands	r2, r1
 800a9b0:	801a      	strh	r2, [r3, #0]
 800a9b2:	687a      	ldr	r2, [r7, #4]
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	781b      	ldrb	r3, [r3, #0]
 800a9b8:	009b      	lsls	r3, r3, #2
 800a9ba:	18d3      	adds	r3, r2, r3
 800a9bc:	183a      	adds	r2, r7, r0
 800a9be:	8812      	ldrh	r2, [r2, #0]
 800a9c0:	4906      	ldr	r1, [pc, #24]	@ (800a9dc <USB_ActivateEndpoint+0x73c>)
 800a9c2:	430a      	orrs	r2, r1
 800a9c4:	b292      	uxth	r2, r2
 800a9c6:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 800a9c8:	236f      	movs	r3, #111	@ 0x6f
 800a9ca:	18fb      	adds	r3, r7, r3
 800a9cc:	781b      	ldrb	r3, [r3, #0]
}
 800a9ce:	0018      	movs	r0, r3
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	b01c      	add	sp, #112	@ 0x70
 800a9d4:	bd80      	pop	{r7, pc}
 800a9d6:	46c0      	nop			@ (mov r8, r8)
 800a9d8:	ffff8fbf 	.word	0xffff8fbf
 800a9dc:	ffff8080 	.word	0xffff8080
 800a9e0:	ffffbf8f 	.word	0xffffbf8f

0800a9e4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08c      	sub	sp, #48	@ 0x30
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	6078      	str	r0, [r7, #4]
 800a9ec:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	7b1b      	ldrb	r3, [r3, #12]
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d000      	beq.n	800a9f8 <USB_DeactivateEndpoint+0x14>
 800a9f6:	e07e      	b.n	800aaf6 <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	785b      	ldrb	r3, [r3, #1]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d03c      	beq.n	800aa7a <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800aa00:	687a      	ldr	r2, [r7, #4]
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	781b      	ldrb	r3, [r3, #0]
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	18d2      	adds	r2, r2, r3
 800aa0a:	210c      	movs	r1, #12
 800aa0c:	187b      	adds	r3, r7, r1
 800aa0e:	8812      	ldrh	r2, [r2, #0]
 800aa10:	801a      	strh	r2, [r3, #0]
 800aa12:	187b      	adds	r3, r7, r1
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	2240      	movs	r2, #64	@ 0x40
 800aa18:	4013      	ands	r3, r2
 800aa1a:	d016      	beq.n	800aa4a <USB_DeactivateEndpoint+0x66>
 800aa1c:	687a      	ldr	r2, [r7, #4]
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	781b      	ldrb	r3, [r3, #0]
 800aa22:	009b      	lsls	r3, r3, #2
 800aa24:	18d3      	adds	r3, r2, r3
 800aa26:	881b      	ldrh	r3, [r3, #0]
 800aa28:	b29a      	uxth	r2, r3
 800aa2a:	200a      	movs	r0, #10
 800aa2c:	183b      	adds	r3, r7, r0
 800aa2e:	49c7      	ldr	r1, [pc, #796]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800aa30:	400a      	ands	r2, r1
 800aa32:	801a      	strh	r2, [r3, #0]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	781b      	ldrb	r3, [r3, #0]
 800aa3a:	009b      	lsls	r3, r3, #2
 800aa3c:	18d3      	adds	r3, r2, r3
 800aa3e:	183a      	adds	r2, r7, r0
 800aa40:	8812      	ldrh	r2, [r2, #0]
 800aa42:	49c3      	ldr	r1, [pc, #780]	@ (800ad50 <USB_DeactivateEndpoint+0x36c>)
 800aa44:	430a      	orrs	r2, r1
 800aa46:	b292      	uxth	r2, r2
 800aa48:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	781b      	ldrb	r3, [r3, #0]
 800aa50:	009b      	lsls	r3, r3, #2
 800aa52:	18d3      	adds	r3, r2, r3
 800aa54:	881b      	ldrh	r3, [r3, #0]
 800aa56:	b29a      	uxth	r2, r3
 800aa58:	2008      	movs	r0, #8
 800aa5a:	183b      	adds	r3, r7, r0
 800aa5c:	49bd      	ldr	r1, [pc, #756]	@ (800ad54 <USB_DeactivateEndpoint+0x370>)
 800aa5e:	400a      	ands	r2, r1
 800aa60:	801a      	strh	r2, [r3, #0]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	781b      	ldrb	r3, [r3, #0]
 800aa68:	009b      	lsls	r3, r3, #2
 800aa6a:	18d3      	adds	r3, r2, r3
 800aa6c:	183a      	adds	r2, r7, r0
 800aa6e:	8812      	ldrh	r2, [r2, #0]
 800aa70:	49b9      	ldr	r1, [pc, #740]	@ (800ad58 <USB_DeactivateEndpoint+0x374>)
 800aa72:	430a      	orrs	r2, r1
 800aa74:	b292      	uxth	r2, r2
 800aa76:	801a      	strh	r2, [r3, #0]
 800aa78:	e163      	b.n	800ad42 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	18d2      	adds	r2, r2, r3
 800aa84:	2112      	movs	r1, #18
 800aa86:	187b      	adds	r3, r7, r1
 800aa88:	8812      	ldrh	r2, [r2, #0]
 800aa8a:	801a      	strh	r2, [r3, #0]
 800aa8c:	187b      	adds	r3, r7, r1
 800aa8e:	881a      	ldrh	r2, [r3, #0]
 800aa90:	2380      	movs	r3, #128	@ 0x80
 800aa92:	01db      	lsls	r3, r3, #7
 800aa94:	4013      	ands	r3, r2
 800aa96:	d016      	beq.n	800aac6 <USB_DeactivateEndpoint+0xe2>
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	781b      	ldrb	r3, [r3, #0]
 800aa9e:	009b      	lsls	r3, r3, #2
 800aaa0:	18d3      	adds	r3, r2, r3
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	b29a      	uxth	r2, r3
 800aaa6:	2010      	movs	r0, #16
 800aaa8:	183b      	adds	r3, r7, r0
 800aaaa:	49a8      	ldr	r1, [pc, #672]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800aaac:	400a      	ands	r2, r1
 800aaae:	801a      	strh	r2, [r3, #0]
 800aab0:	687a      	ldr	r2, [r7, #4]
 800aab2:	683b      	ldr	r3, [r7, #0]
 800aab4:	781b      	ldrb	r3, [r3, #0]
 800aab6:	009b      	lsls	r3, r3, #2
 800aab8:	18d3      	adds	r3, r2, r3
 800aaba:	183a      	adds	r2, r7, r0
 800aabc:	8812      	ldrh	r2, [r2, #0]
 800aabe:	49a7      	ldr	r1, [pc, #668]	@ (800ad5c <USB_DeactivateEndpoint+0x378>)
 800aac0:	430a      	orrs	r2, r1
 800aac2:	b292      	uxth	r2, r2
 800aac4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	683b      	ldr	r3, [r7, #0]
 800aaca:	781b      	ldrb	r3, [r3, #0]
 800aacc:	009b      	lsls	r3, r3, #2
 800aace:	18d3      	adds	r3, r2, r3
 800aad0:	881b      	ldrh	r3, [r3, #0]
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	200e      	movs	r0, #14
 800aad6:	183b      	adds	r3, r7, r0
 800aad8:	49a1      	ldr	r1, [pc, #644]	@ (800ad60 <USB_DeactivateEndpoint+0x37c>)
 800aada:	400a      	ands	r2, r1
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	687a      	ldr	r2, [r7, #4]
 800aae0:	683b      	ldr	r3, [r7, #0]
 800aae2:	781b      	ldrb	r3, [r3, #0]
 800aae4:	009b      	lsls	r3, r3, #2
 800aae6:	18d3      	adds	r3, r2, r3
 800aae8:	183a      	adds	r2, r7, r0
 800aaea:	8812      	ldrh	r2, [r2, #0]
 800aaec:	499a      	ldr	r1, [pc, #616]	@ (800ad58 <USB_DeactivateEndpoint+0x374>)
 800aaee:	430a      	orrs	r2, r1
 800aaf0:	b292      	uxth	r2, r2
 800aaf2:	801a      	strh	r2, [r3, #0]
 800aaf4:	e125      	b.n	800ad42 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	785b      	ldrb	r3, [r3, #1]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d000      	beq.n	800ab00 <USB_DeactivateEndpoint+0x11c>
 800aafe:	e090      	b.n	800ac22 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	781b      	ldrb	r3, [r3, #0]
 800ab06:	009b      	lsls	r3, r3, #2
 800ab08:	18d2      	adds	r2, r2, r3
 800ab0a:	2120      	movs	r1, #32
 800ab0c:	187b      	adds	r3, r7, r1
 800ab0e:	8812      	ldrh	r2, [r2, #0]
 800ab10:	801a      	strh	r2, [r3, #0]
 800ab12:	187b      	adds	r3, r7, r1
 800ab14:	881a      	ldrh	r2, [r3, #0]
 800ab16:	2380      	movs	r3, #128	@ 0x80
 800ab18:	01db      	lsls	r3, r3, #7
 800ab1a:	4013      	ands	r3, r2
 800ab1c:	d016      	beq.n	800ab4c <USB_DeactivateEndpoint+0x168>
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	683b      	ldr	r3, [r7, #0]
 800ab22:	781b      	ldrb	r3, [r3, #0]
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	18d3      	adds	r3, r2, r3
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	b29a      	uxth	r2, r3
 800ab2c:	201e      	movs	r0, #30
 800ab2e:	183b      	adds	r3, r7, r0
 800ab30:	4986      	ldr	r1, [pc, #536]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800ab32:	400a      	ands	r2, r1
 800ab34:	801a      	strh	r2, [r3, #0]
 800ab36:	687a      	ldr	r2, [r7, #4]
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	18d3      	adds	r3, r2, r3
 800ab40:	183a      	adds	r2, r7, r0
 800ab42:	8812      	ldrh	r2, [r2, #0]
 800ab44:	4985      	ldr	r1, [pc, #532]	@ (800ad5c <USB_DeactivateEndpoint+0x378>)
 800ab46:	430a      	orrs	r2, r1
 800ab48:	b292      	uxth	r2, r2
 800ab4a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	683b      	ldr	r3, [r7, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	18d2      	adds	r2, r2, r3
 800ab56:	211c      	movs	r1, #28
 800ab58:	187b      	adds	r3, r7, r1
 800ab5a:	8812      	ldrh	r2, [r2, #0]
 800ab5c:	801a      	strh	r2, [r3, #0]
 800ab5e:	187b      	adds	r3, r7, r1
 800ab60:	881b      	ldrh	r3, [r3, #0]
 800ab62:	2240      	movs	r2, #64	@ 0x40
 800ab64:	4013      	ands	r3, r2
 800ab66:	d016      	beq.n	800ab96 <USB_DeactivateEndpoint+0x1b2>
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	683b      	ldr	r3, [r7, #0]
 800ab6c:	781b      	ldrb	r3, [r3, #0]
 800ab6e:	009b      	lsls	r3, r3, #2
 800ab70:	18d3      	adds	r3, r2, r3
 800ab72:	881b      	ldrh	r3, [r3, #0]
 800ab74:	b29a      	uxth	r2, r3
 800ab76:	201a      	movs	r0, #26
 800ab78:	183b      	adds	r3, r7, r0
 800ab7a:	4974      	ldr	r1, [pc, #464]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800ab7c:	400a      	ands	r2, r1
 800ab7e:	801a      	strh	r2, [r3, #0]
 800ab80:	687a      	ldr	r2, [r7, #4]
 800ab82:	683b      	ldr	r3, [r7, #0]
 800ab84:	781b      	ldrb	r3, [r3, #0]
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	18d3      	adds	r3, r2, r3
 800ab8a:	183a      	adds	r2, r7, r0
 800ab8c:	8812      	ldrh	r2, [r2, #0]
 800ab8e:	4970      	ldr	r1, [pc, #448]	@ (800ad50 <USB_DeactivateEndpoint+0x36c>)
 800ab90:	430a      	orrs	r2, r1
 800ab92:	b292      	uxth	r2, r2
 800ab94:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800ab96:	687a      	ldr	r2, [r7, #4]
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	781b      	ldrb	r3, [r3, #0]
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	18d3      	adds	r3, r2, r3
 800aba0:	881b      	ldrh	r3, [r3, #0]
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	2018      	movs	r0, #24
 800aba6:	183b      	adds	r3, r7, r0
 800aba8:	4968      	ldr	r1, [pc, #416]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800abaa:	400a      	ands	r2, r1
 800abac:	801a      	strh	r2, [r3, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	781b      	ldrb	r3, [r3, #0]
 800abb4:	009b      	lsls	r3, r3, #2
 800abb6:	18d3      	adds	r3, r2, r3
 800abb8:	183a      	adds	r2, r7, r0
 800abba:	8812      	ldrh	r2, [r2, #0]
 800abbc:	4964      	ldr	r1, [pc, #400]	@ (800ad50 <USB_DeactivateEndpoint+0x36c>)
 800abbe:	430a      	orrs	r2, r1
 800abc0:	b292      	uxth	r2, r2
 800abc2:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800abc4:	687a      	ldr	r2, [r7, #4]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	009b      	lsls	r3, r3, #2
 800abcc:	18d3      	adds	r3, r2, r3
 800abce:	881b      	ldrh	r3, [r3, #0]
 800abd0:	b29a      	uxth	r2, r3
 800abd2:	2016      	movs	r0, #22
 800abd4:	183b      	adds	r3, r7, r0
 800abd6:	4962      	ldr	r1, [pc, #392]	@ (800ad60 <USB_DeactivateEndpoint+0x37c>)
 800abd8:	400a      	ands	r2, r1
 800abda:	801a      	strh	r2, [r3, #0]
 800abdc:	687a      	ldr	r2, [r7, #4]
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	781b      	ldrb	r3, [r3, #0]
 800abe2:	009b      	lsls	r3, r3, #2
 800abe4:	18d3      	adds	r3, r2, r3
 800abe6:	183a      	adds	r2, r7, r0
 800abe8:	8812      	ldrh	r2, [r2, #0]
 800abea:	495b      	ldr	r1, [pc, #364]	@ (800ad58 <USB_DeactivateEndpoint+0x374>)
 800abec:	430a      	orrs	r2, r1
 800abee:	b292      	uxth	r2, r2
 800abf0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800abf2:	687a      	ldr	r2, [r7, #4]
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	781b      	ldrb	r3, [r3, #0]
 800abf8:	009b      	lsls	r3, r3, #2
 800abfa:	18d3      	adds	r3, r2, r3
 800abfc:	881b      	ldrh	r3, [r3, #0]
 800abfe:	b29a      	uxth	r2, r3
 800ac00:	2014      	movs	r0, #20
 800ac02:	183b      	adds	r3, r7, r0
 800ac04:	4953      	ldr	r1, [pc, #332]	@ (800ad54 <USB_DeactivateEndpoint+0x370>)
 800ac06:	400a      	ands	r2, r1
 800ac08:	801a      	strh	r2, [r3, #0]
 800ac0a:	687a      	ldr	r2, [r7, #4]
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	781b      	ldrb	r3, [r3, #0]
 800ac10:	009b      	lsls	r3, r3, #2
 800ac12:	18d3      	adds	r3, r2, r3
 800ac14:	183a      	adds	r2, r7, r0
 800ac16:	8812      	ldrh	r2, [r2, #0]
 800ac18:	494f      	ldr	r1, [pc, #316]	@ (800ad58 <USB_DeactivateEndpoint+0x374>)
 800ac1a:	430a      	orrs	r2, r1
 800ac1c:	b292      	uxth	r2, r2
 800ac1e:	801a      	strh	r2, [r3, #0]
 800ac20:	e08f      	b.n	800ad42 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	18d2      	adds	r2, r2, r3
 800ac2c:	212e      	movs	r1, #46	@ 0x2e
 800ac2e:	187b      	adds	r3, r7, r1
 800ac30:	8812      	ldrh	r2, [r2, #0]
 800ac32:	801a      	strh	r2, [r3, #0]
 800ac34:	187b      	adds	r3, r7, r1
 800ac36:	881a      	ldrh	r2, [r3, #0]
 800ac38:	2380      	movs	r3, #128	@ 0x80
 800ac3a:	01db      	lsls	r3, r3, #7
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	d016      	beq.n	800ac6e <USB_DeactivateEndpoint+0x28a>
 800ac40:	687a      	ldr	r2, [r7, #4]
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	781b      	ldrb	r3, [r3, #0]
 800ac46:	009b      	lsls	r3, r3, #2
 800ac48:	18d3      	adds	r3, r2, r3
 800ac4a:	881b      	ldrh	r3, [r3, #0]
 800ac4c:	b29a      	uxth	r2, r3
 800ac4e:	202c      	movs	r0, #44	@ 0x2c
 800ac50:	183b      	adds	r3, r7, r0
 800ac52:	493e      	ldr	r1, [pc, #248]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800ac54:	400a      	ands	r2, r1
 800ac56:	801a      	strh	r2, [r3, #0]
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	683b      	ldr	r3, [r7, #0]
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	009b      	lsls	r3, r3, #2
 800ac60:	18d3      	adds	r3, r2, r3
 800ac62:	183a      	adds	r2, r7, r0
 800ac64:	8812      	ldrh	r2, [r2, #0]
 800ac66:	493d      	ldr	r1, [pc, #244]	@ (800ad5c <USB_DeactivateEndpoint+0x378>)
 800ac68:	430a      	orrs	r2, r1
 800ac6a:	b292      	uxth	r2, r2
 800ac6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800ac6e:	687a      	ldr	r2, [r7, #4]
 800ac70:	683b      	ldr	r3, [r7, #0]
 800ac72:	781b      	ldrb	r3, [r3, #0]
 800ac74:	009b      	lsls	r3, r3, #2
 800ac76:	18d2      	adds	r2, r2, r3
 800ac78:	212a      	movs	r1, #42	@ 0x2a
 800ac7a:	187b      	adds	r3, r7, r1
 800ac7c:	8812      	ldrh	r2, [r2, #0]
 800ac7e:	801a      	strh	r2, [r3, #0]
 800ac80:	187b      	adds	r3, r7, r1
 800ac82:	881b      	ldrh	r3, [r3, #0]
 800ac84:	2240      	movs	r2, #64	@ 0x40
 800ac86:	4013      	ands	r3, r2
 800ac88:	d016      	beq.n	800acb8 <USB_DeactivateEndpoint+0x2d4>
 800ac8a:	687a      	ldr	r2, [r7, #4]
 800ac8c:	683b      	ldr	r3, [r7, #0]
 800ac8e:	781b      	ldrb	r3, [r3, #0]
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	18d3      	adds	r3, r2, r3
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	b29a      	uxth	r2, r3
 800ac98:	2028      	movs	r0, #40	@ 0x28
 800ac9a:	183b      	adds	r3, r7, r0
 800ac9c:	492b      	ldr	r1, [pc, #172]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800ac9e:	400a      	ands	r2, r1
 800aca0:	801a      	strh	r2, [r3, #0]
 800aca2:	687a      	ldr	r2, [r7, #4]
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	781b      	ldrb	r3, [r3, #0]
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	18d3      	adds	r3, r2, r3
 800acac:	183a      	adds	r2, r7, r0
 800acae:	8812      	ldrh	r2, [r2, #0]
 800acb0:	4927      	ldr	r1, [pc, #156]	@ (800ad50 <USB_DeactivateEndpoint+0x36c>)
 800acb2:	430a      	orrs	r2, r1
 800acb4:	b292      	uxth	r2, r2
 800acb6:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	18d3      	adds	r3, r2, r3
 800acc2:	881b      	ldrh	r3, [r3, #0]
 800acc4:	b29a      	uxth	r2, r3
 800acc6:	2026      	movs	r0, #38	@ 0x26
 800acc8:	183b      	adds	r3, r7, r0
 800acca:	4920      	ldr	r1, [pc, #128]	@ (800ad4c <USB_DeactivateEndpoint+0x368>)
 800accc:	400a      	ands	r2, r1
 800acce:	801a      	strh	r2, [r3, #0]
 800acd0:	687a      	ldr	r2, [r7, #4]
 800acd2:	683b      	ldr	r3, [r7, #0]
 800acd4:	781b      	ldrb	r3, [r3, #0]
 800acd6:	009b      	lsls	r3, r3, #2
 800acd8:	18d3      	adds	r3, r2, r3
 800acda:	183a      	adds	r2, r7, r0
 800acdc:	8812      	ldrh	r2, [r2, #0]
 800acde:	491f      	ldr	r1, [pc, #124]	@ (800ad5c <USB_DeactivateEndpoint+0x378>)
 800ace0:	430a      	orrs	r2, r1
 800ace2:	b292      	uxth	r2, r2
 800ace4:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800ace6:	687a      	ldr	r2, [r7, #4]
 800ace8:	683b      	ldr	r3, [r7, #0]
 800acea:	781b      	ldrb	r3, [r3, #0]
 800acec:	009b      	lsls	r3, r3, #2
 800acee:	18d3      	adds	r3, r2, r3
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	b29a      	uxth	r2, r3
 800acf4:	2024      	movs	r0, #36	@ 0x24
 800acf6:	183b      	adds	r3, r7, r0
 800acf8:	4916      	ldr	r1, [pc, #88]	@ (800ad54 <USB_DeactivateEndpoint+0x370>)
 800acfa:	400a      	ands	r2, r1
 800acfc:	801a      	strh	r2, [r3, #0]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	781b      	ldrb	r3, [r3, #0]
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	18d3      	adds	r3, r2, r3
 800ad08:	183a      	adds	r2, r7, r0
 800ad0a:	8812      	ldrh	r2, [r2, #0]
 800ad0c:	4912      	ldr	r1, [pc, #72]	@ (800ad58 <USB_DeactivateEndpoint+0x374>)
 800ad0e:	430a      	orrs	r2, r1
 800ad10:	b292      	uxth	r2, r2
 800ad12:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800ad14:	687a      	ldr	r2, [r7, #4]
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	781b      	ldrb	r3, [r3, #0]
 800ad1a:	009b      	lsls	r3, r3, #2
 800ad1c:	18d3      	adds	r3, r2, r3
 800ad1e:	881b      	ldrh	r3, [r3, #0]
 800ad20:	b29a      	uxth	r2, r3
 800ad22:	2022      	movs	r0, #34	@ 0x22
 800ad24:	183b      	adds	r3, r7, r0
 800ad26:	490e      	ldr	r1, [pc, #56]	@ (800ad60 <USB_DeactivateEndpoint+0x37c>)
 800ad28:	400a      	ands	r2, r1
 800ad2a:	801a      	strh	r2, [r3, #0]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	781b      	ldrb	r3, [r3, #0]
 800ad32:	009b      	lsls	r3, r3, #2
 800ad34:	18d3      	adds	r3, r2, r3
 800ad36:	183a      	adds	r2, r7, r0
 800ad38:	8812      	ldrh	r2, [r2, #0]
 800ad3a:	4907      	ldr	r1, [pc, #28]	@ (800ad58 <USB_DeactivateEndpoint+0x374>)
 800ad3c:	430a      	orrs	r2, r1
 800ad3e:	b292      	uxth	r2, r2
 800ad40:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	0018      	movs	r0, r3
 800ad46:	46bd      	mov	sp, r7
 800ad48:	b00c      	add	sp, #48	@ 0x30
 800ad4a:	bd80      	pop	{r7, pc}
 800ad4c:	ffff8f8f 	.word	0xffff8f8f
 800ad50:	ffff80c0 	.word	0xffff80c0
 800ad54:	ffff8fbf 	.word	0xffff8fbf
 800ad58:	ffff8080 	.word	0xffff8080
 800ad5c:	ffffc080 	.word	0xffffc080
 800ad60:	ffffbf8f 	.word	0xffffbf8f

0800ad64 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800ad64:	b590      	push	{r4, r7, lr}
 800ad66:	b0c3      	sub	sp, #268	@ 0x10c
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
 800ad6c:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	785b      	ldrb	r3, [r3, #1]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d001      	beq.n	800ad7a <USB_EPStartXfer+0x16>
 800ad76:	f000 fd2d 	bl	800b7d4 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	699a      	ldr	r2, [r3, #24]
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	691b      	ldr	r3, [r3, #16]
 800ad82:	429a      	cmp	r2, r3
 800ad84:	d905      	bls.n	800ad92 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 800ad86:	683b      	ldr	r3, [r7, #0]
 800ad88:	691b      	ldr	r3, [r3, #16]
 800ad8a:	1d7a      	adds	r2, r7, #5
 800ad8c:	32ff      	adds	r2, #255	@ 0xff
 800ad8e:	6013      	str	r3, [r2, #0]
 800ad90:	e004      	b.n	800ad9c <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 800ad92:	683b      	ldr	r3, [r7, #0]
 800ad94:	699b      	ldr	r3, [r3, #24]
 800ad96:	1d7a      	adds	r2, r7, #5
 800ad98:	32ff      	adds	r2, #255	@ 0xff
 800ad9a:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	7b1b      	ldrb	r3, [r3, #12]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d125      	bne.n	800adf0 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	6959      	ldr	r1, [r3, #20]
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	88da      	ldrh	r2, [r3, #6]
 800adac:	1d7b      	adds	r3, r7, #5
 800adae:	33ff      	adds	r3, #255	@ 0xff
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f001 fa47 	bl	800c248 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	613b      	str	r3, [r7, #16]
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	2250      	movs	r2, #80	@ 0x50
 800adc2:	5a9b      	ldrh	r3, [r3, r2]
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	001a      	movs	r2, r3
 800adc8:	693b      	ldr	r3, [r7, #16]
 800adca:	189b      	adds	r3, r3, r2
 800adcc:	613b      	str	r3, [r7, #16]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	781b      	ldrb	r3, [r3, #0]
 800add2:	00da      	lsls	r2, r3, #3
 800add4:	693b      	ldr	r3, [r7, #16]
 800add6:	18d3      	adds	r3, r2, r3
 800add8:	4ad7      	ldr	r2, [pc, #860]	@ (800b138 <USB_EPStartXfer+0x3d4>)
 800adda:	4694      	mov	ip, r2
 800addc:	4463      	add	r3, ip
 800adde:	60fb      	str	r3, [r7, #12]
 800ade0:	1d7b      	adds	r3, r7, #5
 800ade2:	33ff      	adds	r3, #255	@ 0xff
 800ade4:	681b      	ldr	r3, [r3, #0]
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	801a      	strh	r2, [r3, #0]
 800adec:	f000 fccd 	bl	800b78a <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800adf0:	683b      	ldr	r3, [r7, #0]
 800adf2:	78db      	ldrb	r3, [r3, #3]
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d000      	beq.n	800adfa <USB_EPStartXfer+0x96>
 800adf8:	e362      	b.n	800b4c0 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	6a1a      	ldr	r2, [r3, #32]
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	691b      	ldr	r3, [r3, #16]
 800ae02:	429a      	cmp	r2, r3
 800ae04:	d800      	bhi.n	800ae08 <USB_EPStartXfer+0xa4>
 800ae06:	e309      	b.n	800b41c <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800ae08:	687a      	ldr	r2, [r7, #4]
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	009b      	lsls	r3, r3, #2
 800ae10:	18d3      	adds	r3, r2, r3
 800ae12:	881b      	ldrh	r3, [r3, #0]
 800ae14:	b29a      	uxth	r2, r3
 800ae16:	2056      	movs	r0, #86	@ 0x56
 800ae18:	183b      	adds	r3, r7, r0
 800ae1a:	49c8      	ldr	r1, [pc, #800]	@ (800b13c <USB_EPStartXfer+0x3d8>)
 800ae1c:	400a      	ands	r2, r1
 800ae1e:	801a      	strh	r2, [r3, #0]
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	009b      	lsls	r3, r3, #2
 800ae28:	18d3      	adds	r3, r2, r3
 800ae2a:	183a      	adds	r2, r7, r0
 800ae2c:	8812      	ldrh	r2, [r2, #0]
 800ae2e:	49c4      	ldr	r1, [pc, #784]	@ (800b140 <USB_EPStartXfer+0x3dc>)
 800ae30:	430a      	orrs	r2, r1
 800ae32:	b292      	uxth	r2, r2
 800ae34:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800ae36:	683b      	ldr	r3, [r7, #0]
 800ae38:	6a1a      	ldr	r2, [r3, #32]
 800ae3a:	1d7b      	adds	r3, r7, #5
 800ae3c:	33ff      	adds	r3, #255	@ 0xff
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	1ad2      	subs	r2, r2, r3
 800ae42:	683b      	ldr	r3, [r7, #0]
 800ae44:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800ae46:	687a      	ldr	r2, [r7, #4]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	18d3      	adds	r3, r2, r3
 800ae50:	881b      	ldrh	r3, [r3, #0]
 800ae52:	b29b      	uxth	r3, r3
 800ae54:	001a      	movs	r2, r3
 800ae56:	2340      	movs	r3, #64	@ 0x40
 800ae58:	4013      	ands	r3, r2
 800ae5a:	d100      	bne.n	800ae5e <USB_EPStartXfer+0xfa>
 800ae5c:	e176      	b.n	800b14c <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	633b      	str	r3, [r7, #48]	@ 0x30
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	785b      	ldrb	r3, [r3, #1]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d000      	beq.n	800ae6c <USB_EPStartXfer+0x108>
 800ae6a:	e074      	b.n	800af56 <USB_EPStartXfer+0x1f2>
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	2250      	movs	r2, #80	@ 0x50
 800ae74:	5a9b      	ldrh	r3, [r3, r2]
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	001a      	movs	r2, r3
 800ae7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae7c:	189b      	adds	r3, r3, r2
 800ae7e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	781b      	ldrb	r3, [r3, #0]
 800ae84:	00da      	lsls	r2, r3, #3
 800ae86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae88:	18d3      	adds	r3, r2, r3
 800ae8a:	4aae      	ldr	r2, [pc, #696]	@ (800b144 <USB_EPStartXfer+0x3e0>)
 800ae8c:	4694      	mov	ip, r2
 800ae8e:	4463      	add	r3, ip
 800ae90:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae94:	881b      	ldrh	r3, [r3, #0]
 800ae96:	b29b      	uxth	r3, r3
 800ae98:	059b      	lsls	r3, r3, #22
 800ae9a:	0d9b      	lsrs	r3, r3, #22
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aea0:	801a      	strh	r2, [r3, #0]
 800aea2:	1d7b      	adds	r3, r7, #5
 800aea4:	33ff      	adds	r3, #255	@ 0xff
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b3e      	cmp	r3, #62	@ 0x3e
 800aeaa:	d924      	bls.n	800aef6 <USB_EPStartXfer+0x192>
 800aeac:	1d7b      	adds	r3, r7, #5
 800aeae:	33ff      	adds	r3, #255	@ 0xff
 800aeb0:	681b      	ldr	r3, [r3, #0]
 800aeb2:	095b      	lsrs	r3, r3, #5
 800aeb4:	1c7a      	adds	r2, r7, #1
 800aeb6:	32ff      	adds	r2, #255	@ 0xff
 800aeb8:	6013      	str	r3, [r2, #0]
 800aeba:	1d7b      	adds	r3, r7, #5
 800aebc:	33ff      	adds	r3, #255	@ 0xff
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	221f      	movs	r2, #31
 800aec2:	4013      	ands	r3, r2
 800aec4:	d106      	bne.n	800aed4 <USB_EPStartXfer+0x170>
 800aec6:	1c7b      	adds	r3, r7, #1
 800aec8:	33ff      	adds	r3, #255	@ 0xff
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	3b01      	subs	r3, #1
 800aece:	1c7a      	adds	r2, r7, #1
 800aed0:	32ff      	adds	r2, #255	@ 0xff
 800aed2:	6013      	str	r3, [r2, #0]
 800aed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29a      	uxth	r2, r3
 800aeda:	1c7b      	adds	r3, r7, #1
 800aedc:	33ff      	adds	r3, #255	@ 0xff
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	b29b      	uxth	r3, r3
 800aee2:	029b      	lsls	r3, r3, #10
 800aee4:	b29b      	uxth	r3, r3
 800aee6:	4313      	orrs	r3, r2
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	4a97      	ldr	r2, [pc, #604]	@ (800b148 <USB_EPStartXfer+0x3e4>)
 800aeec:	4313      	orrs	r3, r2
 800aeee:	b29a      	uxth	r2, r3
 800aef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aef2:	801a      	strh	r2, [r3, #0]
 800aef4:	e04a      	b.n	800af8c <USB_EPStartXfer+0x228>
 800aef6:	1d7b      	adds	r3, r7, #5
 800aef8:	33ff      	adds	r3, #255	@ 0xff
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d108      	bne.n	800af12 <USB_EPStartXfer+0x1ae>
 800af00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af02:	881b      	ldrh	r3, [r3, #0]
 800af04:	b29b      	uxth	r3, r3
 800af06:	4a90      	ldr	r2, [pc, #576]	@ (800b148 <USB_EPStartXfer+0x3e4>)
 800af08:	4313      	orrs	r3, r2
 800af0a:	b29a      	uxth	r2, r3
 800af0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af0e:	801a      	strh	r2, [r3, #0]
 800af10:	e03c      	b.n	800af8c <USB_EPStartXfer+0x228>
 800af12:	1d7b      	adds	r3, r7, #5
 800af14:	33ff      	adds	r3, #255	@ 0xff
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	085b      	lsrs	r3, r3, #1
 800af1a:	1c7a      	adds	r2, r7, #1
 800af1c:	32ff      	adds	r2, #255	@ 0xff
 800af1e:	6013      	str	r3, [r2, #0]
 800af20:	1d7b      	adds	r3, r7, #5
 800af22:	33ff      	adds	r3, #255	@ 0xff
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2201      	movs	r2, #1
 800af28:	4013      	ands	r3, r2
 800af2a:	d006      	beq.n	800af3a <USB_EPStartXfer+0x1d6>
 800af2c:	1c7b      	adds	r3, r7, #1
 800af2e:	33ff      	adds	r3, #255	@ 0xff
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	3301      	adds	r3, #1
 800af34:	1c7a      	adds	r2, r7, #1
 800af36:	32ff      	adds	r2, #255	@ 0xff
 800af38:	6013      	str	r3, [r2, #0]
 800af3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	b29a      	uxth	r2, r3
 800af40:	1c7b      	adds	r3, r7, #1
 800af42:	33ff      	adds	r3, #255	@ 0xff
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	b29b      	uxth	r3, r3
 800af48:	029b      	lsls	r3, r3, #10
 800af4a:	b29b      	uxth	r3, r3
 800af4c:	4313      	orrs	r3, r2
 800af4e:	b29a      	uxth	r2, r3
 800af50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800af52:	801a      	strh	r2, [r3, #0]
 800af54:	e01a      	b.n	800af8c <USB_EPStartXfer+0x228>
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	785b      	ldrb	r3, [r3, #1]
 800af5a:	2b01      	cmp	r3, #1
 800af5c:	d116      	bne.n	800af8c <USB_EPStartXfer+0x228>
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2250      	movs	r2, #80	@ 0x50
 800af62:	5a9b      	ldrh	r3, [r3, r2]
 800af64:	b29b      	uxth	r3, r3
 800af66:	001a      	movs	r2, r3
 800af68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af6a:	189b      	adds	r3, r3, r2
 800af6c:	633b      	str	r3, [r7, #48]	@ 0x30
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	781b      	ldrb	r3, [r3, #0]
 800af72:	00da      	lsls	r2, r3, #3
 800af74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af76:	18d3      	adds	r3, r2, r3
 800af78:	4a72      	ldr	r2, [pc, #456]	@ (800b144 <USB_EPStartXfer+0x3e0>)
 800af7a:	4694      	mov	ip, r2
 800af7c:	4463      	add	r3, ip
 800af7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800af80:	1d7b      	adds	r3, r7, #5
 800af82:	33ff      	adds	r3, #255	@ 0xff
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	b29a      	uxth	r2, r3
 800af88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800af8a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800af8c:	2076      	movs	r0, #118	@ 0x76
 800af8e:	183b      	adds	r3, r7, r0
 800af90:	683a      	ldr	r2, [r7, #0]
 800af92:	8952      	ldrh	r2, [r2, #10]
 800af94:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af96:	683b      	ldr	r3, [r7, #0]
 800af98:	6959      	ldr	r1, [r3, #20]
 800af9a:	1d7b      	adds	r3, r7, #5
 800af9c:	33ff      	adds	r3, #255	@ 0xff
 800af9e:	681b      	ldr	r3, [r3, #0]
 800afa0:	b29c      	uxth	r4, r3
 800afa2:	183b      	adds	r3, r7, r0
 800afa4:	881a      	ldrh	r2, [r3, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	0023      	movs	r3, r4
 800afaa:	f001 f94d 	bl	800c248 <USB_WritePMA>
            ep->xfer_buff += len;
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	695a      	ldr	r2, [r3, #20]
 800afb2:	1d7b      	adds	r3, r7, #5
 800afb4:	33ff      	adds	r3, #255	@ 0xff
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	18d2      	adds	r2, r2, r3
 800afba:	683b      	ldr	r3, [r7, #0]
 800afbc:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	6a1a      	ldr	r2, [r3, #32]
 800afc2:	683b      	ldr	r3, [r7, #0]
 800afc4:	691b      	ldr	r3, [r3, #16]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d908      	bls.n	800afdc <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 800afca:	683b      	ldr	r3, [r7, #0]
 800afcc:	6a1a      	ldr	r2, [r3, #32]
 800afce:	1d7b      	adds	r3, r7, #5
 800afd0:	33ff      	adds	r3, #255	@ 0xff
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	1ad2      	subs	r2, r2, r3
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	621a      	str	r2, [r3, #32]
 800afda:	e007      	b.n	800afec <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	6a1b      	ldr	r3, [r3, #32]
 800afe0:	1d7a      	adds	r2, r7, #5
 800afe2:	32ff      	adds	r2, #255	@ 0xff
 800afe4:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800afe6:	683b      	ldr	r3, [r7, #0]
 800afe8:	2200      	movs	r2, #0
 800afea:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800afec:	683b      	ldr	r3, [r7, #0]
 800afee:	785b      	ldrb	r3, [r3, #1]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d000      	beq.n	800aff6 <USB_EPStartXfer+0x292>
 800aff4:	e070      	b.n	800b0d8 <USB_EPStartXfer+0x374>
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2250      	movs	r2, #80	@ 0x50
 800affe:	5a9b      	ldrh	r3, [r3, r2]
 800b000:	b29b      	uxth	r3, r3
 800b002:	001a      	movs	r2, r3
 800b004:	69bb      	ldr	r3, [r7, #24]
 800b006:	189b      	adds	r3, r3, r2
 800b008:	61bb      	str	r3, [r7, #24]
 800b00a:	683b      	ldr	r3, [r7, #0]
 800b00c:	781b      	ldrb	r3, [r3, #0]
 800b00e:	00da      	lsls	r2, r3, #3
 800b010:	69bb      	ldr	r3, [r7, #24]
 800b012:	18d3      	adds	r3, r2, r3
 800b014:	4a48      	ldr	r2, [pc, #288]	@ (800b138 <USB_EPStartXfer+0x3d4>)
 800b016:	4694      	mov	ip, r2
 800b018:	4463      	add	r3, ip
 800b01a:	617b      	str	r3, [r7, #20]
 800b01c:	697b      	ldr	r3, [r7, #20]
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	b29b      	uxth	r3, r3
 800b022:	059b      	lsls	r3, r3, #22
 800b024:	0d9b      	lsrs	r3, r3, #22
 800b026:	b29a      	uxth	r2, r3
 800b028:	697b      	ldr	r3, [r7, #20]
 800b02a:	801a      	strh	r2, [r3, #0]
 800b02c:	1d7b      	adds	r3, r7, #5
 800b02e:	33ff      	adds	r3, #255	@ 0xff
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	2b3e      	cmp	r3, #62	@ 0x3e
 800b034:	d922      	bls.n	800b07c <USB_EPStartXfer+0x318>
 800b036:	1d7b      	adds	r3, r7, #5
 800b038:	33ff      	adds	r3, #255	@ 0xff
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	095b      	lsrs	r3, r3, #5
 800b03e:	21fc      	movs	r1, #252	@ 0xfc
 800b040:	187a      	adds	r2, r7, r1
 800b042:	6013      	str	r3, [r2, #0]
 800b044:	1d7b      	adds	r3, r7, #5
 800b046:	33ff      	adds	r3, #255	@ 0xff
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	221f      	movs	r2, #31
 800b04c:	4013      	ands	r3, r2
 800b04e:	d104      	bne.n	800b05a <USB_EPStartXfer+0x2f6>
 800b050:	187b      	adds	r3, r7, r1
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	3b01      	subs	r3, #1
 800b056:	187a      	adds	r2, r7, r1
 800b058:	6013      	str	r3, [r2, #0]
 800b05a:	697b      	ldr	r3, [r7, #20]
 800b05c:	881b      	ldrh	r3, [r3, #0]
 800b05e:	b29a      	uxth	r2, r3
 800b060:	23fc      	movs	r3, #252	@ 0xfc
 800b062:	18fb      	adds	r3, r7, r3
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	b29b      	uxth	r3, r3
 800b068:	029b      	lsls	r3, r3, #10
 800b06a:	b29b      	uxth	r3, r3
 800b06c:	4313      	orrs	r3, r2
 800b06e:	b29b      	uxth	r3, r3
 800b070:	4a35      	ldr	r2, [pc, #212]	@ (800b148 <USB_EPStartXfer+0x3e4>)
 800b072:	4313      	orrs	r3, r2
 800b074:	b29a      	uxth	r2, r3
 800b076:	697b      	ldr	r3, [r7, #20]
 800b078:	801a      	strh	r2, [r3, #0]
 800b07a:	e04a      	b.n	800b112 <USB_EPStartXfer+0x3ae>
 800b07c:	1d7b      	adds	r3, r7, #5
 800b07e:	33ff      	adds	r3, #255	@ 0xff
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	2b00      	cmp	r3, #0
 800b084:	d108      	bne.n	800b098 <USB_EPStartXfer+0x334>
 800b086:	697b      	ldr	r3, [r7, #20]
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	b29b      	uxth	r3, r3
 800b08c:	4a2e      	ldr	r2, [pc, #184]	@ (800b148 <USB_EPStartXfer+0x3e4>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	b29a      	uxth	r2, r3
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	801a      	strh	r2, [r3, #0]
 800b096:	e03c      	b.n	800b112 <USB_EPStartXfer+0x3ae>
 800b098:	1d7b      	adds	r3, r7, #5
 800b09a:	33ff      	adds	r3, #255	@ 0xff
 800b09c:	681b      	ldr	r3, [r3, #0]
 800b09e:	085b      	lsrs	r3, r3, #1
 800b0a0:	21fc      	movs	r1, #252	@ 0xfc
 800b0a2:	187a      	adds	r2, r7, r1
 800b0a4:	6013      	str	r3, [r2, #0]
 800b0a6:	1d7b      	adds	r3, r7, #5
 800b0a8:	33ff      	adds	r3, #255	@ 0xff
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	4013      	ands	r3, r2
 800b0b0:	d004      	beq.n	800b0bc <USB_EPStartXfer+0x358>
 800b0b2:	187b      	adds	r3, r7, r1
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	3301      	adds	r3, #1
 800b0b8:	187a      	adds	r2, r7, r1
 800b0ba:	6013      	str	r3, [r2, #0]
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	b29a      	uxth	r2, r3
 800b0c2:	23fc      	movs	r3, #252	@ 0xfc
 800b0c4:	18fb      	adds	r3, r7, r3
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	b29b      	uxth	r3, r3
 800b0ca:	029b      	lsls	r3, r3, #10
 800b0cc:	b29b      	uxth	r3, r3
 800b0ce:	4313      	orrs	r3, r2
 800b0d0:	b29a      	uxth	r2, r3
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	801a      	strh	r2, [r3, #0]
 800b0d6:	e01c      	b.n	800b112 <USB_EPStartXfer+0x3ae>
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	785b      	ldrb	r3, [r3, #1]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d118      	bne.n	800b112 <USB_EPStartXfer+0x3ae>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	623b      	str	r3, [r7, #32]
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2250      	movs	r2, #80	@ 0x50
 800b0e8:	5a9b      	ldrh	r3, [r3, r2]
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	001a      	movs	r2, r3
 800b0ee:	6a3b      	ldr	r3, [r7, #32]
 800b0f0:	189b      	adds	r3, r3, r2
 800b0f2:	623b      	str	r3, [r7, #32]
 800b0f4:	683b      	ldr	r3, [r7, #0]
 800b0f6:	781b      	ldrb	r3, [r3, #0]
 800b0f8:	00da      	lsls	r2, r3, #3
 800b0fa:	6a3b      	ldr	r3, [r7, #32]
 800b0fc:	18d3      	adds	r3, r2, r3
 800b0fe:	4a0e      	ldr	r2, [pc, #56]	@ (800b138 <USB_EPStartXfer+0x3d4>)
 800b100:	4694      	mov	ip, r2
 800b102:	4463      	add	r3, ip
 800b104:	61fb      	str	r3, [r7, #28]
 800b106:	1d7b      	adds	r3, r7, #5
 800b108:	33ff      	adds	r3, #255	@ 0xff
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	b29a      	uxth	r2, r3
 800b10e:	69fb      	ldr	r3, [r7, #28]
 800b110:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b112:	2076      	movs	r0, #118	@ 0x76
 800b114:	183b      	adds	r3, r7, r0
 800b116:	683a      	ldr	r2, [r7, #0]
 800b118:	8912      	ldrh	r2, [r2, #8]
 800b11a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b11c:	683b      	ldr	r3, [r7, #0]
 800b11e:	6959      	ldr	r1, [r3, #20]
 800b120:	1d7b      	adds	r3, r7, #5
 800b122:	33ff      	adds	r3, #255	@ 0xff
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	b29c      	uxth	r4, r3
 800b128:	183b      	adds	r3, r7, r0
 800b12a:	881a      	ldrh	r2, [r3, #0]
 800b12c:	6878      	ldr	r0, [r7, #4]
 800b12e:	0023      	movs	r3, r4
 800b130:	f001 f88a 	bl	800c248 <USB_WritePMA>
 800b134:	e329      	b.n	800b78a <USB_EPStartXfer+0xa26>
 800b136:	46c0      	nop			@ (mov r8, r8)
 800b138:	00000402 	.word	0x00000402
 800b13c:	ffff8f8f 	.word	0xffff8f8f
 800b140:	ffff8180 	.word	0xffff8180
 800b144:	00000406 	.word	0x00000406
 800b148:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b14c:	683b      	ldr	r3, [r7, #0]
 800b14e:	785b      	ldrb	r3, [r3, #1]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d000      	beq.n	800b156 <USB_EPStartXfer+0x3f2>
 800b154:	e070      	b.n	800b238 <USB_EPStartXfer+0x4d4>
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	2250      	movs	r2, #80	@ 0x50
 800b15e:	5a9b      	ldrh	r3, [r3, r2]
 800b160:	b29b      	uxth	r3, r3
 800b162:	001a      	movs	r2, r3
 800b164:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b166:	189b      	adds	r3, r3, r2
 800b168:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	781b      	ldrb	r3, [r3, #0]
 800b16e:	00da      	lsls	r2, r3, #3
 800b170:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b172:	18d3      	adds	r3, r2, r3
 800b174:	4acd      	ldr	r2, [pc, #820]	@ (800b4ac <USB_EPStartXfer+0x748>)
 800b176:	4694      	mov	ip, r2
 800b178:	4463      	add	r3, ip
 800b17a:	647b      	str	r3, [r7, #68]	@ 0x44
 800b17c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b17e:	881b      	ldrh	r3, [r3, #0]
 800b180:	b29b      	uxth	r3, r3
 800b182:	059b      	lsls	r3, r3, #22
 800b184:	0d9b      	lsrs	r3, r3, #22
 800b186:	b29a      	uxth	r2, r3
 800b188:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b18a:	801a      	strh	r2, [r3, #0]
 800b18c:	1d7b      	adds	r3, r7, #5
 800b18e:	33ff      	adds	r3, #255	@ 0xff
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b3e      	cmp	r3, #62	@ 0x3e
 800b194:	d922      	bls.n	800b1dc <USB_EPStartXfer+0x478>
 800b196:	1d7b      	adds	r3, r7, #5
 800b198:	33ff      	adds	r3, #255	@ 0xff
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	095b      	lsrs	r3, r3, #5
 800b19e:	21f8      	movs	r1, #248	@ 0xf8
 800b1a0:	187a      	adds	r2, r7, r1
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	1d7b      	adds	r3, r7, #5
 800b1a6:	33ff      	adds	r3, #255	@ 0xff
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	221f      	movs	r2, #31
 800b1ac:	4013      	ands	r3, r2
 800b1ae:	d104      	bne.n	800b1ba <USB_EPStartXfer+0x456>
 800b1b0:	187b      	adds	r3, r7, r1
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	3b01      	subs	r3, #1
 800b1b6:	187a      	adds	r2, r7, r1
 800b1b8:	6013      	str	r3, [r2, #0]
 800b1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1bc:	881b      	ldrh	r3, [r3, #0]
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	23f8      	movs	r3, #248	@ 0xf8
 800b1c2:	18fb      	adds	r3, r7, r3
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	b29b      	uxth	r3, r3
 800b1c8:	029b      	lsls	r3, r3, #10
 800b1ca:	b29b      	uxth	r3, r3
 800b1cc:	4313      	orrs	r3, r2
 800b1ce:	b29b      	uxth	r3, r3
 800b1d0:	4ab7      	ldr	r2, [pc, #732]	@ (800b4b0 <USB_EPStartXfer+0x74c>)
 800b1d2:	4313      	orrs	r3, r2
 800b1d4:	b29a      	uxth	r2, r3
 800b1d6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1d8:	801a      	strh	r2, [r3, #0]
 800b1da:	e04a      	b.n	800b272 <USB_EPStartXfer+0x50e>
 800b1dc:	1d7b      	adds	r3, r7, #5
 800b1de:	33ff      	adds	r3, #255	@ 0xff
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	2b00      	cmp	r3, #0
 800b1e4:	d108      	bne.n	800b1f8 <USB_EPStartXfer+0x494>
 800b1e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1e8:	881b      	ldrh	r3, [r3, #0]
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	4ab0      	ldr	r2, [pc, #704]	@ (800b4b0 <USB_EPStartXfer+0x74c>)
 800b1ee:	4313      	orrs	r3, r2
 800b1f0:	b29a      	uxth	r2, r3
 800b1f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b1f4:	801a      	strh	r2, [r3, #0]
 800b1f6:	e03c      	b.n	800b272 <USB_EPStartXfer+0x50e>
 800b1f8:	1d7b      	adds	r3, r7, #5
 800b1fa:	33ff      	adds	r3, #255	@ 0xff
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	085b      	lsrs	r3, r3, #1
 800b200:	21f8      	movs	r1, #248	@ 0xf8
 800b202:	187a      	adds	r2, r7, r1
 800b204:	6013      	str	r3, [r2, #0]
 800b206:	1d7b      	adds	r3, r7, #5
 800b208:	33ff      	adds	r3, #255	@ 0xff
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	2201      	movs	r2, #1
 800b20e:	4013      	ands	r3, r2
 800b210:	d004      	beq.n	800b21c <USB_EPStartXfer+0x4b8>
 800b212:	187b      	adds	r3, r7, r1
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	3301      	adds	r3, #1
 800b218:	187a      	adds	r2, r7, r1
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b21e:	881b      	ldrh	r3, [r3, #0]
 800b220:	b29a      	uxth	r2, r3
 800b222:	23f8      	movs	r3, #248	@ 0xf8
 800b224:	18fb      	adds	r3, r7, r3
 800b226:	681b      	ldr	r3, [r3, #0]
 800b228:	b29b      	uxth	r3, r3
 800b22a:	029b      	lsls	r3, r3, #10
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	4313      	orrs	r3, r2
 800b230:	b29a      	uxth	r2, r3
 800b232:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b234:	801a      	strh	r2, [r3, #0]
 800b236:	e01c      	b.n	800b272 <USB_EPStartXfer+0x50e>
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	785b      	ldrb	r3, [r3, #1]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d118      	bne.n	800b272 <USB_EPStartXfer+0x50e>
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	653b      	str	r3, [r7, #80]	@ 0x50
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2250      	movs	r2, #80	@ 0x50
 800b248:	5a9b      	ldrh	r3, [r3, r2]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	001a      	movs	r2, r3
 800b24e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b250:	189b      	adds	r3, r3, r2
 800b252:	653b      	str	r3, [r7, #80]	@ 0x50
 800b254:	683b      	ldr	r3, [r7, #0]
 800b256:	781b      	ldrb	r3, [r3, #0]
 800b258:	00da      	lsls	r2, r3, #3
 800b25a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b25c:	18d3      	adds	r3, r2, r3
 800b25e:	4a93      	ldr	r2, [pc, #588]	@ (800b4ac <USB_EPStartXfer+0x748>)
 800b260:	4694      	mov	ip, r2
 800b262:	4463      	add	r3, ip
 800b264:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b266:	1d7b      	adds	r3, r7, #5
 800b268:	33ff      	adds	r3, #255	@ 0xff
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	b29a      	uxth	r2, r3
 800b26e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b270:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800b272:	2076      	movs	r0, #118	@ 0x76
 800b274:	183b      	adds	r3, r7, r0
 800b276:	683a      	ldr	r2, [r7, #0]
 800b278:	8912      	ldrh	r2, [r2, #8]
 800b27a:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b27c:	683b      	ldr	r3, [r7, #0]
 800b27e:	6959      	ldr	r1, [r3, #20]
 800b280:	1d7b      	adds	r3, r7, #5
 800b282:	33ff      	adds	r3, #255	@ 0xff
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	b29c      	uxth	r4, r3
 800b288:	183b      	adds	r3, r7, r0
 800b28a:	881a      	ldrh	r2, [r3, #0]
 800b28c:	6878      	ldr	r0, [r7, #4]
 800b28e:	0023      	movs	r3, r4
 800b290:	f000 ffda 	bl	800c248 <USB_WritePMA>
            ep->xfer_buff += len;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	695a      	ldr	r2, [r3, #20]
 800b298:	1d7b      	adds	r3, r7, #5
 800b29a:	33ff      	adds	r3, #255	@ 0xff
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	18d2      	adds	r2, r2, r3
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	6a1a      	ldr	r2, [r3, #32]
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	691b      	ldr	r3, [r3, #16]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d908      	bls.n	800b2c2 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	6a1a      	ldr	r2, [r3, #32]
 800b2b4:	1d7b      	adds	r3, r7, #5
 800b2b6:	33ff      	adds	r3, #255	@ 0xff
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	1ad2      	subs	r2, r2, r3
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	621a      	str	r2, [r3, #32]
 800b2c0:	e007      	b.n	800b2d2 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 800b2c2:	683b      	ldr	r3, [r7, #0]
 800b2c4:	6a1b      	ldr	r3, [r3, #32]
 800b2c6:	1d7a      	adds	r2, r7, #5
 800b2c8:	32ff      	adds	r2, #255	@ 0xff
 800b2ca:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 800b2cc:	683b      	ldr	r3, [r7, #0]
 800b2ce:	2200      	movs	r2, #0
 800b2d0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	643b      	str	r3, [r7, #64]	@ 0x40
 800b2d6:	683b      	ldr	r3, [r7, #0]
 800b2d8:	785b      	ldrb	r3, [r3, #1]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d000      	beq.n	800b2e0 <USB_EPStartXfer+0x57c>
 800b2de:	e070      	b.n	800b3c2 <USB_EPStartXfer+0x65e>
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	2250      	movs	r2, #80	@ 0x50
 800b2e8:	5a9b      	ldrh	r3, [r3, r2]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	001a      	movs	r2, r3
 800b2ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2f0:	189b      	adds	r3, r3, r2
 800b2f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b2f4:	683b      	ldr	r3, [r7, #0]
 800b2f6:	781b      	ldrb	r3, [r3, #0]
 800b2f8:	00da      	lsls	r2, r3, #3
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2fc:	18d3      	adds	r3, r2, r3
 800b2fe:	4a6d      	ldr	r2, [pc, #436]	@ (800b4b4 <USB_EPStartXfer+0x750>)
 800b300:	4694      	mov	ip, r2
 800b302:	4463      	add	r3, ip
 800b304:	637b      	str	r3, [r7, #52]	@ 0x34
 800b306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b308:	881b      	ldrh	r3, [r3, #0]
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	059b      	lsls	r3, r3, #22
 800b30e:	0d9b      	lsrs	r3, r3, #22
 800b310:	b29a      	uxth	r2, r3
 800b312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b314:	801a      	strh	r2, [r3, #0]
 800b316:	1d7b      	adds	r3, r7, #5
 800b318:	33ff      	adds	r3, #255	@ 0xff
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	2b3e      	cmp	r3, #62	@ 0x3e
 800b31e:	d922      	bls.n	800b366 <USB_EPStartXfer+0x602>
 800b320:	1d7b      	adds	r3, r7, #5
 800b322:	33ff      	adds	r3, #255	@ 0xff
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	095b      	lsrs	r3, r3, #5
 800b328:	21f4      	movs	r1, #244	@ 0xf4
 800b32a:	187a      	adds	r2, r7, r1
 800b32c:	6013      	str	r3, [r2, #0]
 800b32e:	1d7b      	adds	r3, r7, #5
 800b330:	33ff      	adds	r3, #255	@ 0xff
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	221f      	movs	r2, #31
 800b336:	4013      	ands	r3, r2
 800b338:	d104      	bne.n	800b344 <USB_EPStartXfer+0x5e0>
 800b33a:	187b      	adds	r3, r7, r1
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	3b01      	subs	r3, #1
 800b340:	187a      	adds	r2, r7, r1
 800b342:	6013      	str	r3, [r2, #0]
 800b344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b346:	881b      	ldrh	r3, [r3, #0]
 800b348:	b29a      	uxth	r2, r3
 800b34a:	23f4      	movs	r3, #244	@ 0xf4
 800b34c:	18fb      	adds	r3, r7, r3
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	b29b      	uxth	r3, r3
 800b352:	029b      	lsls	r3, r3, #10
 800b354:	b29b      	uxth	r3, r3
 800b356:	4313      	orrs	r3, r2
 800b358:	b29b      	uxth	r3, r3
 800b35a:	4a55      	ldr	r2, [pc, #340]	@ (800b4b0 <USB_EPStartXfer+0x74c>)
 800b35c:	4313      	orrs	r3, r2
 800b35e:	b29a      	uxth	r2, r3
 800b360:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b362:	801a      	strh	r2, [r3, #0]
 800b364:	e048      	b.n	800b3f8 <USB_EPStartXfer+0x694>
 800b366:	1d7b      	adds	r3, r7, #5
 800b368:	33ff      	adds	r3, #255	@ 0xff
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d108      	bne.n	800b382 <USB_EPStartXfer+0x61e>
 800b370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b372:	881b      	ldrh	r3, [r3, #0]
 800b374:	b29b      	uxth	r3, r3
 800b376:	4a4e      	ldr	r2, [pc, #312]	@ (800b4b0 <USB_EPStartXfer+0x74c>)
 800b378:	4313      	orrs	r3, r2
 800b37a:	b29a      	uxth	r2, r3
 800b37c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b37e:	801a      	strh	r2, [r3, #0]
 800b380:	e03a      	b.n	800b3f8 <USB_EPStartXfer+0x694>
 800b382:	1d7b      	adds	r3, r7, #5
 800b384:	33ff      	adds	r3, #255	@ 0xff
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	085b      	lsrs	r3, r3, #1
 800b38a:	21f4      	movs	r1, #244	@ 0xf4
 800b38c:	187a      	adds	r2, r7, r1
 800b38e:	6013      	str	r3, [r2, #0]
 800b390:	1d7b      	adds	r3, r7, #5
 800b392:	33ff      	adds	r3, #255	@ 0xff
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2201      	movs	r2, #1
 800b398:	4013      	ands	r3, r2
 800b39a:	d004      	beq.n	800b3a6 <USB_EPStartXfer+0x642>
 800b39c:	187b      	adds	r3, r7, r1
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	187a      	adds	r2, r7, r1
 800b3a4:	6013      	str	r3, [r2, #0]
 800b3a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3a8:	881b      	ldrh	r3, [r3, #0]
 800b3aa:	b29a      	uxth	r2, r3
 800b3ac:	23f4      	movs	r3, #244	@ 0xf4
 800b3ae:	18fb      	adds	r3, r7, r3
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	b29b      	uxth	r3, r3
 800b3b4:	029b      	lsls	r3, r3, #10
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	4313      	orrs	r3, r2
 800b3ba:	b29a      	uxth	r2, r3
 800b3bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b3be:	801a      	strh	r2, [r3, #0]
 800b3c0:	e01a      	b.n	800b3f8 <USB_EPStartXfer+0x694>
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	785b      	ldrb	r3, [r3, #1]
 800b3c6:	2b01      	cmp	r3, #1
 800b3c8:	d116      	bne.n	800b3f8 <USB_EPStartXfer+0x694>
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	2250      	movs	r2, #80	@ 0x50
 800b3ce:	5a9b      	ldrh	r3, [r3, r2]
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	001a      	movs	r2, r3
 800b3d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3d6:	189b      	adds	r3, r3, r2
 800b3d8:	643b      	str	r3, [r7, #64]	@ 0x40
 800b3da:	683b      	ldr	r3, [r7, #0]
 800b3dc:	781b      	ldrb	r3, [r3, #0]
 800b3de:	00da      	lsls	r2, r3, #3
 800b3e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b3e2:	18d3      	adds	r3, r2, r3
 800b3e4:	4a33      	ldr	r2, [pc, #204]	@ (800b4b4 <USB_EPStartXfer+0x750>)
 800b3e6:	4694      	mov	ip, r2
 800b3e8:	4463      	add	r3, ip
 800b3ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b3ec:	1d7b      	adds	r3, r7, #5
 800b3ee:	33ff      	adds	r3, #255	@ 0xff
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b3f6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b3f8:	2076      	movs	r0, #118	@ 0x76
 800b3fa:	183b      	adds	r3, r7, r0
 800b3fc:	683a      	ldr	r2, [r7, #0]
 800b3fe:	8952      	ldrh	r2, [r2, #10]
 800b400:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b402:	683b      	ldr	r3, [r7, #0]
 800b404:	6959      	ldr	r1, [r3, #20]
 800b406:	1d7b      	adds	r3, r7, #5
 800b408:	33ff      	adds	r3, #255	@ 0xff
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	b29c      	uxth	r4, r3
 800b40e:	183b      	adds	r3, r7, r0
 800b410:	881a      	ldrh	r2, [r3, #0]
 800b412:	6878      	ldr	r0, [r7, #4]
 800b414:	0023      	movs	r3, r4
 800b416:	f000 ff17 	bl	800c248 <USB_WritePMA>
 800b41a:	e1b6      	b.n	800b78a <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	1d7a      	adds	r2, r7, #5
 800b422:	32ff      	adds	r2, #255	@ 0xff
 800b424:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 800b426:	687a      	ldr	r2, [r7, #4]
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	781b      	ldrb	r3, [r3, #0]
 800b42c:	009b      	lsls	r3, r3, #2
 800b42e:	18d3      	adds	r3, r2, r3
 800b430:	881b      	ldrh	r3, [r3, #0]
 800b432:	b29a      	uxth	r2, r3
 800b434:	2062      	movs	r0, #98	@ 0x62
 800b436:	183b      	adds	r3, r7, r0
 800b438:	491f      	ldr	r1, [pc, #124]	@ (800b4b8 <USB_EPStartXfer+0x754>)
 800b43a:	400a      	ands	r2, r1
 800b43c:	801a      	strh	r2, [r3, #0]
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	781b      	ldrb	r3, [r3, #0]
 800b444:	009b      	lsls	r3, r3, #2
 800b446:	18d3      	adds	r3, r2, r3
 800b448:	183a      	adds	r2, r7, r0
 800b44a:	8812      	ldrh	r2, [r2, #0]
 800b44c:	491b      	ldr	r1, [pc, #108]	@ (800b4bc <USB_EPStartXfer+0x758>)
 800b44e:	430a      	orrs	r2, r1
 800b450:	b292      	uxth	r2, r2
 800b452:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2250      	movs	r2, #80	@ 0x50
 800b45c:	5a9b      	ldrh	r3, [r3, r2]
 800b45e:	b29b      	uxth	r3, r3
 800b460:	001a      	movs	r2, r3
 800b462:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b464:	189b      	adds	r3, r3, r2
 800b466:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	781b      	ldrb	r3, [r3, #0]
 800b46c:	00da      	lsls	r2, r3, #3
 800b46e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b470:	18d3      	adds	r3, r2, r3
 800b472:	4a0e      	ldr	r2, [pc, #56]	@ (800b4ac <USB_EPStartXfer+0x748>)
 800b474:	4694      	mov	ip, r2
 800b476:	4463      	add	r3, ip
 800b478:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b47a:	1d7b      	adds	r3, r7, #5
 800b47c:	33ff      	adds	r3, #255	@ 0xff
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	b29a      	uxth	r2, r3
 800b482:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b484:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b486:	2076      	movs	r0, #118	@ 0x76
 800b488:	183b      	adds	r3, r7, r0
 800b48a:	683a      	ldr	r2, [r7, #0]
 800b48c:	8912      	ldrh	r2, [r2, #8]
 800b48e:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b490:	683b      	ldr	r3, [r7, #0]
 800b492:	6959      	ldr	r1, [r3, #20]
 800b494:	1d7b      	adds	r3, r7, #5
 800b496:	33ff      	adds	r3, #255	@ 0xff
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	b29c      	uxth	r4, r3
 800b49c:	183b      	adds	r3, r7, r0
 800b49e:	881a      	ldrh	r2, [r3, #0]
 800b4a0:	6878      	ldr	r0, [r7, #4]
 800b4a2:	0023      	movs	r3, r4
 800b4a4:	f000 fed0 	bl	800c248 <USB_WritePMA>
 800b4a8:	e16f      	b.n	800b78a <USB_EPStartXfer+0xa26>
 800b4aa:	46c0      	nop			@ (mov r8, r8)
 800b4ac:	00000402 	.word	0x00000402
 800b4b0:	ffff8000 	.word	0xffff8000
 800b4b4:	00000406 	.word	0x00000406
 800b4b8:	ffff8e8f 	.word	0xffff8e8f
 800b4bc:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	6a1a      	ldr	r2, [r3, #32]
 800b4c4:	1d7b      	adds	r3, r7, #5
 800b4c6:	33ff      	adds	r3, #255	@ 0xff
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	1ad2      	subs	r2, r2, r3
 800b4cc:	683b      	ldr	r3, [r7, #0]
 800b4ce:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	683b      	ldr	r3, [r7, #0]
 800b4d4:	781b      	ldrb	r3, [r3, #0]
 800b4d6:	009b      	lsls	r3, r3, #2
 800b4d8:	18d3      	adds	r3, r2, r3
 800b4da:	881b      	ldrh	r3, [r3, #0]
 800b4dc:	b29b      	uxth	r3, r3
 800b4de:	001a      	movs	r2, r3
 800b4e0:	2340      	movs	r3, #64	@ 0x40
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	d100      	bne.n	800b4e8 <USB_EPStartXfer+0x784>
 800b4e6:	e0a4      	b.n	800b632 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	673b      	str	r3, [r7, #112]	@ 0x70
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	785b      	ldrb	r3, [r3, #1]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d000      	beq.n	800b4f6 <USB_EPStartXfer+0x792>
 800b4f4:	e070      	b.n	800b5d8 <USB_EPStartXfer+0x874>
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2250      	movs	r2, #80	@ 0x50
 800b4fe:	5a9b      	ldrh	r3, [r3, r2]
 800b500:	b29b      	uxth	r3, r3
 800b502:	001a      	movs	r2, r3
 800b504:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b506:	189b      	adds	r3, r3, r2
 800b508:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	781b      	ldrb	r3, [r3, #0]
 800b50e:	00da      	lsls	r2, r3, #3
 800b510:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b512:	18d3      	adds	r3, r2, r3
 800b514:	4abc      	ldr	r2, [pc, #752]	@ (800b808 <USB_EPStartXfer+0xaa4>)
 800b516:	4694      	mov	ip, r2
 800b518:	4463      	add	r3, ip
 800b51a:	667b      	str	r3, [r7, #100]	@ 0x64
 800b51c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b51e:	881b      	ldrh	r3, [r3, #0]
 800b520:	b29b      	uxth	r3, r3
 800b522:	059b      	lsls	r3, r3, #22
 800b524:	0d9b      	lsrs	r3, r3, #22
 800b526:	b29a      	uxth	r2, r3
 800b528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b52a:	801a      	strh	r2, [r3, #0]
 800b52c:	1d7b      	adds	r3, r7, #5
 800b52e:	33ff      	adds	r3, #255	@ 0xff
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	2b3e      	cmp	r3, #62	@ 0x3e
 800b534:	d922      	bls.n	800b57c <USB_EPStartXfer+0x818>
 800b536:	1d7b      	adds	r3, r7, #5
 800b538:	33ff      	adds	r3, #255	@ 0xff
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	095b      	lsrs	r3, r3, #5
 800b53e:	21f0      	movs	r1, #240	@ 0xf0
 800b540:	187a      	adds	r2, r7, r1
 800b542:	6013      	str	r3, [r2, #0]
 800b544:	1d7b      	adds	r3, r7, #5
 800b546:	33ff      	adds	r3, #255	@ 0xff
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	221f      	movs	r2, #31
 800b54c:	4013      	ands	r3, r2
 800b54e:	d104      	bne.n	800b55a <USB_EPStartXfer+0x7f6>
 800b550:	187b      	adds	r3, r7, r1
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	3b01      	subs	r3, #1
 800b556:	187a      	adds	r2, r7, r1
 800b558:	6013      	str	r3, [r2, #0]
 800b55a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b55c:	881b      	ldrh	r3, [r3, #0]
 800b55e:	b29a      	uxth	r2, r3
 800b560:	23f0      	movs	r3, #240	@ 0xf0
 800b562:	18fb      	adds	r3, r7, r3
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	b29b      	uxth	r3, r3
 800b568:	029b      	lsls	r3, r3, #10
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	4313      	orrs	r3, r2
 800b56e:	b29b      	uxth	r3, r3
 800b570:	4aa6      	ldr	r2, [pc, #664]	@ (800b80c <USB_EPStartXfer+0xaa8>)
 800b572:	4313      	orrs	r3, r2
 800b574:	b29a      	uxth	r2, r3
 800b576:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b578:	801a      	strh	r2, [r3, #0]
 800b57a:	e048      	b.n	800b60e <USB_EPStartXfer+0x8aa>
 800b57c:	1d7b      	adds	r3, r7, #5
 800b57e:	33ff      	adds	r3, #255	@ 0xff
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	2b00      	cmp	r3, #0
 800b584:	d108      	bne.n	800b598 <USB_EPStartXfer+0x834>
 800b586:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b588:	881b      	ldrh	r3, [r3, #0]
 800b58a:	b29b      	uxth	r3, r3
 800b58c:	4a9f      	ldr	r2, [pc, #636]	@ (800b80c <USB_EPStartXfer+0xaa8>)
 800b58e:	4313      	orrs	r3, r2
 800b590:	b29a      	uxth	r2, r3
 800b592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b594:	801a      	strh	r2, [r3, #0]
 800b596:	e03a      	b.n	800b60e <USB_EPStartXfer+0x8aa>
 800b598:	1d7b      	adds	r3, r7, #5
 800b59a:	33ff      	adds	r3, #255	@ 0xff
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	085b      	lsrs	r3, r3, #1
 800b5a0:	21f0      	movs	r1, #240	@ 0xf0
 800b5a2:	187a      	adds	r2, r7, r1
 800b5a4:	6013      	str	r3, [r2, #0]
 800b5a6:	1d7b      	adds	r3, r7, #5
 800b5a8:	33ff      	adds	r3, #255	@ 0xff
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2201      	movs	r2, #1
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	d004      	beq.n	800b5bc <USB_EPStartXfer+0x858>
 800b5b2:	187b      	adds	r3, r7, r1
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	3301      	adds	r3, #1
 800b5b8:	187a      	adds	r2, r7, r1
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5be:	881b      	ldrh	r3, [r3, #0]
 800b5c0:	b29a      	uxth	r2, r3
 800b5c2:	23f0      	movs	r3, #240	@ 0xf0
 800b5c4:	18fb      	adds	r3, r7, r3
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	b29b      	uxth	r3, r3
 800b5ca:	029b      	lsls	r3, r3, #10
 800b5cc:	b29b      	uxth	r3, r3
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	b29a      	uxth	r2, r3
 800b5d2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b5d4:	801a      	strh	r2, [r3, #0]
 800b5d6:	e01a      	b.n	800b60e <USB_EPStartXfer+0x8aa>
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	785b      	ldrb	r3, [r3, #1]
 800b5dc:	2b01      	cmp	r3, #1
 800b5de:	d116      	bne.n	800b60e <USB_EPStartXfer+0x8aa>
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2250      	movs	r2, #80	@ 0x50
 800b5e4:	5a9b      	ldrh	r3, [r3, r2]
 800b5e6:	b29b      	uxth	r3, r3
 800b5e8:	001a      	movs	r2, r3
 800b5ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5ec:	189b      	adds	r3, r3, r2
 800b5ee:	673b      	str	r3, [r7, #112]	@ 0x70
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	781b      	ldrb	r3, [r3, #0]
 800b5f4:	00da      	lsls	r2, r3, #3
 800b5f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b5f8:	18d3      	adds	r3, r2, r3
 800b5fa:	4a83      	ldr	r2, [pc, #524]	@ (800b808 <USB_EPStartXfer+0xaa4>)
 800b5fc:	4694      	mov	ip, r2
 800b5fe:	4463      	add	r3, ip
 800b600:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b602:	1d7b      	adds	r3, r7, #5
 800b604:	33ff      	adds	r3, #255	@ 0xff
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	b29a      	uxth	r2, r3
 800b60a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b60c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800b60e:	2076      	movs	r0, #118	@ 0x76
 800b610:	183b      	adds	r3, r7, r0
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	8952      	ldrh	r2, [r2, #10]
 800b616:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	6959      	ldr	r1, [r3, #20]
 800b61c:	1d7b      	adds	r3, r7, #5
 800b61e:	33ff      	adds	r3, #255	@ 0xff
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	b29c      	uxth	r4, r3
 800b624:	183b      	adds	r3, r7, r0
 800b626:	881a      	ldrh	r2, [r3, #0]
 800b628:	6878      	ldr	r0, [r7, #4]
 800b62a:	0023      	movs	r3, r4
 800b62c:	f000 fe0c 	bl	800c248 <USB_WritePMA>
 800b630:	e0ab      	b.n	800b78a <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800b632:	683b      	ldr	r3, [r7, #0]
 800b634:	785b      	ldrb	r3, [r3, #1]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d000      	beq.n	800b63c <USB_EPStartXfer+0x8d8>
 800b63a:	e070      	b.n	800b71e <USB_EPStartXfer+0x9ba>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	2250      	movs	r2, #80	@ 0x50
 800b644:	5a9b      	ldrh	r3, [r3, r2]
 800b646:	b29b      	uxth	r3, r3
 800b648:	001a      	movs	r2, r3
 800b64a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b64c:	189b      	adds	r3, r3, r2
 800b64e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	00da      	lsls	r2, r3, #3
 800b656:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b658:	18d3      	adds	r3, r2, r3
 800b65a:	4a6d      	ldr	r2, [pc, #436]	@ (800b810 <USB_EPStartXfer+0xaac>)
 800b65c:	4694      	mov	ip, r2
 800b65e:	4463      	add	r3, ip
 800b660:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b662:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b664:	881b      	ldrh	r3, [r3, #0]
 800b666:	b29b      	uxth	r3, r3
 800b668:	059b      	lsls	r3, r3, #22
 800b66a:	0d9b      	lsrs	r3, r3, #22
 800b66c:	b29a      	uxth	r2, r3
 800b66e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b670:	801a      	strh	r2, [r3, #0]
 800b672:	1d7b      	adds	r3, r7, #5
 800b674:	33ff      	adds	r3, #255	@ 0xff
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	2b3e      	cmp	r3, #62	@ 0x3e
 800b67a:	d922      	bls.n	800b6c2 <USB_EPStartXfer+0x95e>
 800b67c:	1d7b      	adds	r3, r7, #5
 800b67e:	33ff      	adds	r3, #255	@ 0xff
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	095b      	lsrs	r3, r3, #5
 800b684:	21ec      	movs	r1, #236	@ 0xec
 800b686:	187a      	adds	r2, r7, r1
 800b688:	6013      	str	r3, [r2, #0]
 800b68a:	1d7b      	adds	r3, r7, #5
 800b68c:	33ff      	adds	r3, #255	@ 0xff
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	221f      	movs	r2, #31
 800b692:	4013      	ands	r3, r2
 800b694:	d104      	bne.n	800b6a0 <USB_EPStartXfer+0x93c>
 800b696:	187b      	adds	r3, r7, r1
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	3b01      	subs	r3, #1
 800b69c:	187a      	adds	r2, r7, r1
 800b69e:	6013      	str	r3, [r2, #0]
 800b6a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6a2:	881b      	ldrh	r3, [r3, #0]
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	23ec      	movs	r3, #236	@ 0xec
 800b6a8:	18fb      	adds	r3, r7, r3
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	b29b      	uxth	r3, r3
 800b6ae:	029b      	lsls	r3, r3, #10
 800b6b0:	b29b      	uxth	r3, r3
 800b6b2:	4313      	orrs	r3, r2
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	4a55      	ldr	r2, [pc, #340]	@ (800b80c <USB_EPStartXfer+0xaa8>)
 800b6b8:	4313      	orrs	r3, r2
 800b6ba:	b29a      	uxth	r2, r3
 800b6bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6be:	801a      	strh	r2, [r3, #0]
 800b6c0:	e052      	b.n	800b768 <USB_EPStartXfer+0xa04>
 800b6c2:	1d7b      	adds	r3, r7, #5
 800b6c4:	33ff      	adds	r3, #255	@ 0xff
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d108      	bne.n	800b6de <USB_EPStartXfer+0x97a>
 800b6cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	b29b      	uxth	r3, r3
 800b6d2:	4a4e      	ldr	r2, [pc, #312]	@ (800b80c <USB_EPStartXfer+0xaa8>)
 800b6d4:	4313      	orrs	r3, r2
 800b6d6:	b29a      	uxth	r2, r3
 800b6d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b6da:	801a      	strh	r2, [r3, #0]
 800b6dc:	e044      	b.n	800b768 <USB_EPStartXfer+0xa04>
 800b6de:	1d7b      	adds	r3, r7, #5
 800b6e0:	33ff      	adds	r3, #255	@ 0xff
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	085b      	lsrs	r3, r3, #1
 800b6e6:	21ec      	movs	r1, #236	@ 0xec
 800b6e8:	187a      	adds	r2, r7, r1
 800b6ea:	6013      	str	r3, [r2, #0]
 800b6ec:	1d7b      	adds	r3, r7, #5
 800b6ee:	33ff      	adds	r3, #255	@ 0xff
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2201      	movs	r2, #1
 800b6f4:	4013      	ands	r3, r2
 800b6f6:	d004      	beq.n	800b702 <USB_EPStartXfer+0x99e>
 800b6f8:	187b      	adds	r3, r7, r1
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	3301      	adds	r3, #1
 800b6fe:	187a      	adds	r2, r7, r1
 800b700:	6013      	str	r3, [r2, #0]
 800b702:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	b29a      	uxth	r2, r3
 800b708:	23ec      	movs	r3, #236	@ 0xec
 800b70a:	18fb      	adds	r3, r7, r3
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	b29b      	uxth	r3, r3
 800b710:	029b      	lsls	r3, r3, #10
 800b712:	b29b      	uxth	r3, r3
 800b714:	4313      	orrs	r3, r2
 800b716:	b29a      	uxth	r2, r3
 800b718:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b71a:	801a      	strh	r2, [r3, #0]
 800b71c:	e024      	b.n	800b768 <USB_EPStartXfer+0xa04>
 800b71e:	683b      	ldr	r3, [r7, #0]
 800b720:	785b      	ldrb	r3, [r3, #1]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d120      	bne.n	800b768 <USB_EPStartXfer+0xa04>
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	2184      	movs	r1, #132	@ 0x84
 800b72a:	187a      	adds	r2, r7, r1
 800b72c:	6013      	str	r3, [r2, #0]
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	2250      	movs	r2, #80	@ 0x50
 800b732:	5a9b      	ldrh	r3, [r3, r2]
 800b734:	b29b      	uxth	r3, r3
 800b736:	001a      	movs	r2, r3
 800b738:	187b      	adds	r3, r7, r1
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	189b      	adds	r3, r3, r2
 800b73e:	187a      	adds	r2, r7, r1
 800b740:	6013      	str	r3, [r2, #0]
 800b742:	683b      	ldr	r3, [r7, #0]
 800b744:	781b      	ldrb	r3, [r3, #0]
 800b746:	00da      	lsls	r2, r3, #3
 800b748:	187b      	adds	r3, r7, r1
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	18d3      	adds	r3, r2, r3
 800b74e:	4a30      	ldr	r2, [pc, #192]	@ (800b810 <USB_EPStartXfer+0xaac>)
 800b750:	4694      	mov	ip, r2
 800b752:	4463      	add	r3, ip
 800b754:	2180      	movs	r1, #128	@ 0x80
 800b756:	187a      	adds	r2, r7, r1
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	1d7b      	adds	r3, r7, #5
 800b75c:	33ff      	adds	r3, #255	@ 0xff
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	b29a      	uxth	r2, r3
 800b762:	187b      	adds	r3, r7, r1
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800b768:	2076      	movs	r0, #118	@ 0x76
 800b76a:	183b      	adds	r3, r7, r0
 800b76c:	683a      	ldr	r2, [r7, #0]
 800b76e:	8912      	ldrh	r2, [r2, #8]
 800b770:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b772:	683b      	ldr	r3, [r7, #0]
 800b774:	6959      	ldr	r1, [r3, #20]
 800b776:	1d7b      	adds	r3, r7, #5
 800b778:	33ff      	adds	r3, #255	@ 0xff
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	b29c      	uxth	r4, r3
 800b77e:	183b      	adds	r3, r7, r0
 800b780:	881a      	ldrh	r2, [r3, #0]
 800b782:	6878      	ldr	r0, [r7, #4]
 800b784:	0023      	movs	r3, r4
 800b786:	f000 fd5f 	bl	800c248 <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	683b      	ldr	r3, [r7, #0]
 800b78e:	781b      	ldrb	r3, [r3, #0]
 800b790:	009b      	lsls	r3, r3, #2
 800b792:	18d3      	adds	r3, r2, r3
 800b794:	881b      	ldrh	r3, [r3, #0]
 800b796:	b29a      	uxth	r2, r3
 800b798:	200a      	movs	r0, #10
 800b79a:	183b      	adds	r3, r7, r0
 800b79c:	491d      	ldr	r1, [pc, #116]	@ (800b814 <USB_EPStartXfer+0xab0>)
 800b79e:	400a      	ands	r2, r1
 800b7a0:	801a      	strh	r2, [r3, #0]
 800b7a2:	183b      	adds	r3, r7, r0
 800b7a4:	183a      	adds	r2, r7, r0
 800b7a6:	8812      	ldrh	r2, [r2, #0]
 800b7a8:	2110      	movs	r1, #16
 800b7aa:	404a      	eors	r2, r1
 800b7ac:	801a      	strh	r2, [r3, #0]
 800b7ae:	183b      	adds	r3, r7, r0
 800b7b0:	183a      	adds	r2, r7, r0
 800b7b2:	8812      	ldrh	r2, [r2, #0]
 800b7b4:	2120      	movs	r1, #32
 800b7b6:	404a      	eors	r2, r1
 800b7b8:	801a      	strh	r2, [r3, #0]
 800b7ba:	687a      	ldr	r2, [r7, #4]
 800b7bc:	683b      	ldr	r3, [r7, #0]
 800b7be:	781b      	ldrb	r3, [r3, #0]
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	18d3      	adds	r3, r2, r3
 800b7c4:	183a      	adds	r2, r7, r0
 800b7c6:	8812      	ldrh	r2, [r2, #0]
 800b7c8:	4913      	ldr	r1, [pc, #76]	@ (800b818 <USB_EPStartXfer+0xab4>)
 800b7ca:	430a      	orrs	r2, r1
 800b7cc:	b292      	uxth	r2, r2
 800b7ce:	801a      	strh	r2, [r3, #0]
 800b7d0:	f000 fbf4 	bl	800bfbc <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	7b1b      	ldrb	r3, [r3, #12]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d000      	beq.n	800b7de <USB_EPStartXfer+0xa7a>
 800b7dc:	e0a9      	b.n	800b932 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b7de:	683b      	ldr	r3, [r7, #0]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	691b      	ldr	r3, [r3, #16]
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d918      	bls.n	800b81c <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 800b7ea:	683b      	ldr	r3, [r7, #0]
 800b7ec:	691b      	ldr	r3, [r3, #16]
 800b7ee:	1d7a      	adds	r2, r7, #5
 800b7f0:	32ff      	adds	r2, #255	@ 0xff
 800b7f2:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	699a      	ldr	r2, [r3, #24]
 800b7f8:	1d7b      	adds	r3, r7, #5
 800b7fa:	33ff      	adds	r3, #255	@ 0xff
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	1ad2      	subs	r2, r2, r3
 800b800:	683b      	ldr	r3, [r7, #0]
 800b802:	619a      	str	r2, [r3, #24]
 800b804:	e012      	b.n	800b82c <USB_EPStartXfer+0xac8>
 800b806:	46c0      	nop			@ (mov r8, r8)
 800b808:	00000406 	.word	0x00000406
 800b80c:	ffff8000 	.word	0xffff8000
 800b810:	00000402 	.word	0x00000402
 800b814:	ffff8fbf 	.word	0xffff8fbf
 800b818:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 800b81c:	683b      	ldr	r3, [r7, #0]
 800b81e:	699b      	ldr	r3, [r3, #24]
 800b820:	1d7a      	adds	r2, r7, #5
 800b822:	32ff      	adds	r2, #255	@ 0xff
 800b824:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	2200      	movs	r2, #0
 800b82a:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2190      	movs	r1, #144	@ 0x90
 800b830:	187a      	adds	r2, r7, r1
 800b832:	6013      	str	r3, [r2, #0]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2250      	movs	r2, #80	@ 0x50
 800b838:	5a9b      	ldrh	r3, [r3, r2]
 800b83a:	b29b      	uxth	r3, r3
 800b83c:	001a      	movs	r2, r3
 800b83e:	187b      	adds	r3, r7, r1
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	189b      	adds	r3, r3, r2
 800b844:	187a      	adds	r2, r7, r1
 800b846:	6013      	str	r3, [r2, #0]
 800b848:	683b      	ldr	r3, [r7, #0]
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	00da      	lsls	r2, r3, #3
 800b84e:	187b      	adds	r3, r7, r1
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	18d3      	adds	r3, r2, r3
 800b854:	4acf      	ldr	r2, [pc, #828]	@ (800bb94 <USB_EPStartXfer+0xe30>)
 800b856:	4694      	mov	ip, r2
 800b858:	4463      	add	r3, ip
 800b85a:	218c      	movs	r1, #140	@ 0x8c
 800b85c:	187a      	adds	r2, r7, r1
 800b85e:	6013      	str	r3, [r2, #0]
 800b860:	187b      	adds	r3, r7, r1
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	881b      	ldrh	r3, [r3, #0]
 800b866:	b29b      	uxth	r3, r3
 800b868:	059b      	lsls	r3, r3, #22
 800b86a:	0d9b      	lsrs	r3, r3, #22
 800b86c:	b29a      	uxth	r2, r3
 800b86e:	187b      	adds	r3, r7, r1
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	801a      	strh	r2, [r3, #0]
 800b874:	1d7b      	adds	r3, r7, #5
 800b876:	33ff      	adds	r3, #255	@ 0xff
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b3e      	cmp	r3, #62	@ 0x3e
 800b87c:	d925      	bls.n	800b8ca <USB_EPStartXfer+0xb66>
 800b87e:	1d7b      	adds	r3, r7, #5
 800b880:	33ff      	adds	r3, #255	@ 0xff
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	095b      	lsrs	r3, r3, #5
 800b886:	21e8      	movs	r1, #232	@ 0xe8
 800b888:	187a      	adds	r2, r7, r1
 800b88a:	6013      	str	r3, [r2, #0]
 800b88c:	1d7b      	adds	r3, r7, #5
 800b88e:	33ff      	adds	r3, #255	@ 0xff
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	221f      	movs	r2, #31
 800b894:	4013      	ands	r3, r2
 800b896:	d104      	bne.n	800b8a2 <USB_EPStartXfer+0xb3e>
 800b898:	187b      	adds	r3, r7, r1
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	3b01      	subs	r3, #1
 800b89e:	187a      	adds	r2, r7, r1
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	218c      	movs	r1, #140	@ 0x8c
 800b8a4:	187b      	adds	r3, r7, r1
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	881b      	ldrh	r3, [r3, #0]
 800b8aa:	b29a      	uxth	r2, r3
 800b8ac:	23e8      	movs	r3, #232	@ 0xe8
 800b8ae:	18fb      	adds	r3, r7, r3
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	b29b      	uxth	r3, r3
 800b8b4:	029b      	lsls	r3, r3, #10
 800b8b6:	b29b      	uxth	r3, r3
 800b8b8:	4313      	orrs	r3, r2
 800b8ba:	b29b      	uxth	r3, r3
 800b8bc:	4ab6      	ldr	r2, [pc, #728]	@ (800bb98 <USB_EPStartXfer+0xe34>)
 800b8be:	4313      	orrs	r3, r2
 800b8c0:	b29a      	uxth	r2, r3
 800b8c2:	187b      	adds	r3, r7, r1
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	801a      	strh	r2, [r3, #0]
 800b8c8:	e353      	b.n	800bf72 <USB_EPStartXfer+0x120e>
 800b8ca:	1d7b      	adds	r3, r7, #5
 800b8cc:	33ff      	adds	r3, #255	@ 0xff
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10b      	bne.n	800b8ec <USB_EPStartXfer+0xb88>
 800b8d4:	218c      	movs	r1, #140	@ 0x8c
 800b8d6:	187b      	adds	r3, r7, r1
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	881b      	ldrh	r3, [r3, #0]
 800b8dc:	b29b      	uxth	r3, r3
 800b8de:	4aae      	ldr	r2, [pc, #696]	@ (800bb98 <USB_EPStartXfer+0xe34>)
 800b8e0:	4313      	orrs	r3, r2
 800b8e2:	b29a      	uxth	r2, r3
 800b8e4:	187b      	adds	r3, r7, r1
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	801a      	strh	r2, [r3, #0]
 800b8ea:	e342      	b.n	800bf72 <USB_EPStartXfer+0x120e>
 800b8ec:	1d7b      	adds	r3, r7, #5
 800b8ee:	33ff      	adds	r3, #255	@ 0xff
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	085b      	lsrs	r3, r3, #1
 800b8f4:	21e8      	movs	r1, #232	@ 0xe8
 800b8f6:	187a      	adds	r2, r7, r1
 800b8f8:	6013      	str	r3, [r2, #0]
 800b8fa:	1d7b      	adds	r3, r7, #5
 800b8fc:	33ff      	adds	r3, #255	@ 0xff
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	2201      	movs	r2, #1
 800b902:	4013      	ands	r3, r2
 800b904:	d004      	beq.n	800b910 <USB_EPStartXfer+0xbac>
 800b906:	187b      	adds	r3, r7, r1
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	3301      	adds	r3, #1
 800b90c:	187a      	adds	r2, r7, r1
 800b90e:	6013      	str	r3, [r2, #0]
 800b910:	218c      	movs	r1, #140	@ 0x8c
 800b912:	187b      	adds	r3, r7, r1
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	881b      	ldrh	r3, [r3, #0]
 800b918:	b29a      	uxth	r2, r3
 800b91a:	23e8      	movs	r3, #232	@ 0xe8
 800b91c:	18fb      	adds	r3, r7, r3
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	b29b      	uxth	r3, r3
 800b922:	029b      	lsls	r3, r3, #10
 800b924:	b29b      	uxth	r3, r3
 800b926:	4313      	orrs	r3, r2
 800b928:	b29a      	uxth	r2, r3
 800b92a:	187b      	adds	r3, r7, r1
 800b92c:	681b      	ldr	r3, [r3, #0]
 800b92e:	801a      	strh	r2, [r3, #0]
 800b930:	e31f      	b.n	800bf72 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	78db      	ldrb	r3, [r3, #3]
 800b936:	2b02      	cmp	r3, #2
 800b938:	d000      	beq.n	800b93c <USB_EPStartXfer+0xbd8>
 800b93a:	e191      	b.n	800bc60 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	785b      	ldrb	r3, [r3, #1]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d000      	beq.n	800b946 <USB_EPStartXfer+0xbe2>
 800b944:	e07c      	b.n	800ba40 <USB_EPStartXfer+0xcdc>
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	21ac      	movs	r1, #172	@ 0xac
 800b94a:	187a      	adds	r2, r7, r1
 800b94c:	6013      	str	r3, [r2, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2250      	movs	r2, #80	@ 0x50
 800b952:	5a9b      	ldrh	r3, [r3, r2]
 800b954:	b29b      	uxth	r3, r3
 800b956:	001a      	movs	r2, r3
 800b958:	187b      	adds	r3, r7, r1
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	189b      	adds	r3, r3, r2
 800b95e:	187a      	adds	r2, r7, r1
 800b960:	6013      	str	r3, [r2, #0]
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	00da      	lsls	r2, r3, #3
 800b968:	187b      	adds	r3, r7, r1
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	18d3      	adds	r3, r2, r3
 800b96e:	4a8b      	ldr	r2, [pc, #556]	@ (800bb9c <USB_EPStartXfer+0xe38>)
 800b970:	4694      	mov	ip, r2
 800b972:	4463      	add	r3, ip
 800b974:	21a8      	movs	r1, #168	@ 0xa8
 800b976:	187a      	adds	r2, r7, r1
 800b978:	6013      	str	r3, [r2, #0]
 800b97a:	187b      	adds	r3, r7, r1
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	881b      	ldrh	r3, [r3, #0]
 800b980:	b29b      	uxth	r3, r3
 800b982:	059b      	lsls	r3, r3, #22
 800b984:	0d9b      	lsrs	r3, r3, #22
 800b986:	b29a      	uxth	r2, r3
 800b988:	187b      	adds	r3, r7, r1
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	801a      	strh	r2, [r3, #0]
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	691b      	ldr	r3, [r3, #16]
 800b992:	2b3e      	cmp	r3, #62	@ 0x3e
 800b994:	d923      	bls.n	800b9de <USB_EPStartXfer+0xc7a>
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	095b      	lsrs	r3, r3, #5
 800b99c:	21e4      	movs	r1, #228	@ 0xe4
 800b99e:	187a      	adds	r2, r7, r1
 800b9a0:	6013      	str	r3, [r2, #0]
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	221f      	movs	r2, #31
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	d104      	bne.n	800b9b6 <USB_EPStartXfer+0xc52>
 800b9ac:	187b      	adds	r3, r7, r1
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	3b01      	subs	r3, #1
 800b9b2:	187a      	adds	r2, r7, r1
 800b9b4:	6013      	str	r3, [r2, #0]
 800b9b6:	21a8      	movs	r1, #168	@ 0xa8
 800b9b8:	187b      	adds	r3, r7, r1
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	881b      	ldrh	r3, [r3, #0]
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	23e4      	movs	r3, #228	@ 0xe4
 800b9c2:	18fb      	adds	r3, r7, r3
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	b29b      	uxth	r3, r3
 800b9c8:	029b      	lsls	r3, r3, #10
 800b9ca:	b29b      	uxth	r3, r3
 800b9cc:	4313      	orrs	r3, r2
 800b9ce:	b29b      	uxth	r3, r3
 800b9d0:	4a71      	ldr	r2, [pc, #452]	@ (800bb98 <USB_EPStartXfer+0xe34>)
 800b9d2:	4313      	orrs	r3, r2
 800b9d4:	b29a      	uxth	r2, r3
 800b9d6:	187b      	adds	r3, r7, r1
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	801a      	strh	r2, [r3, #0]
 800b9dc:	e054      	b.n	800ba88 <USB_EPStartXfer+0xd24>
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d10b      	bne.n	800b9fe <USB_EPStartXfer+0xc9a>
 800b9e6:	21a8      	movs	r1, #168	@ 0xa8
 800b9e8:	187b      	adds	r3, r7, r1
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	881b      	ldrh	r3, [r3, #0]
 800b9ee:	b29b      	uxth	r3, r3
 800b9f0:	4a69      	ldr	r2, [pc, #420]	@ (800bb98 <USB_EPStartXfer+0xe34>)
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	187b      	adds	r3, r7, r1
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	801a      	strh	r2, [r3, #0]
 800b9fc:	e044      	b.n	800ba88 <USB_EPStartXfer+0xd24>
 800b9fe:	683b      	ldr	r3, [r7, #0]
 800ba00:	691b      	ldr	r3, [r3, #16]
 800ba02:	085b      	lsrs	r3, r3, #1
 800ba04:	21e4      	movs	r1, #228	@ 0xe4
 800ba06:	187a      	adds	r2, r7, r1
 800ba08:	6013      	str	r3, [r2, #0]
 800ba0a:	683b      	ldr	r3, [r7, #0]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	2201      	movs	r2, #1
 800ba10:	4013      	ands	r3, r2
 800ba12:	d004      	beq.n	800ba1e <USB_EPStartXfer+0xcba>
 800ba14:	187b      	adds	r3, r7, r1
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	3301      	adds	r3, #1
 800ba1a:	187a      	adds	r2, r7, r1
 800ba1c:	6013      	str	r3, [r2, #0]
 800ba1e:	21a8      	movs	r1, #168	@ 0xa8
 800ba20:	187b      	adds	r3, r7, r1
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	23e4      	movs	r3, #228	@ 0xe4
 800ba2a:	18fb      	adds	r3, r7, r3
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	b29b      	uxth	r3, r3
 800ba30:	029b      	lsls	r3, r3, #10
 800ba32:	b29b      	uxth	r3, r3
 800ba34:	4313      	orrs	r3, r2
 800ba36:	b29a      	uxth	r2, r3
 800ba38:	187b      	adds	r3, r7, r1
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	801a      	strh	r2, [r3, #0]
 800ba3e:	e023      	b.n	800ba88 <USB_EPStartXfer+0xd24>
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	785b      	ldrb	r3, [r3, #1]
 800ba44:	2b01      	cmp	r3, #1
 800ba46:	d11f      	bne.n	800ba88 <USB_EPStartXfer+0xd24>
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	21b4      	movs	r1, #180	@ 0xb4
 800ba4c:	187a      	adds	r2, r7, r1
 800ba4e:	6013      	str	r3, [r2, #0]
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2250      	movs	r2, #80	@ 0x50
 800ba54:	5a9b      	ldrh	r3, [r3, r2]
 800ba56:	b29b      	uxth	r3, r3
 800ba58:	001a      	movs	r2, r3
 800ba5a:	187b      	adds	r3, r7, r1
 800ba5c:	681b      	ldr	r3, [r3, #0]
 800ba5e:	189b      	adds	r3, r3, r2
 800ba60:	187a      	adds	r2, r7, r1
 800ba62:	6013      	str	r3, [r2, #0]
 800ba64:	683b      	ldr	r3, [r7, #0]
 800ba66:	781b      	ldrb	r3, [r3, #0]
 800ba68:	00da      	lsls	r2, r3, #3
 800ba6a:	187b      	adds	r3, r7, r1
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	18d3      	adds	r3, r2, r3
 800ba70:	4a4a      	ldr	r2, [pc, #296]	@ (800bb9c <USB_EPStartXfer+0xe38>)
 800ba72:	4694      	mov	ip, r2
 800ba74:	4463      	add	r3, ip
 800ba76:	21b0      	movs	r1, #176	@ 0xb0
 800ba78:	187a      	adds	r2, r7, r1
 800ba7a:	6013      	str	r3, [r2, #0]
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	691b      	ldr	r3, [r3, #16]
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	187b      	adds	r3, r7, r1
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	801a      	strh	r2, [r3, #0]
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	22a4      	movs	r2, #164	@ 0xa4
 800ba8c:	18ba      	adds	r2, r7, r2
 800ba8e:	6013      	str	r3, [r2, #0]
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d000      	beq.n	800ba9a <USB_EPStartXfer+0xd36>
 800ba98:	e082      	b.n	800bba0 <USB_EPStartXfer+0xe3c>
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	219c      	movs	r1, #156	@ 0x9c
 800ba9e:	187a      	adds	r2, r7, r1
 800baa0:	6013      	str	r3, [r2, #0]
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2250      	movs	r2, #80	@ 0x50
 800baa6:	5a9b      	ldrh	r3, [r3, r2]
 800baa8:	b29b      	uxth	r3, r3
 800baaa:	001a      	movs	r2, r3
 800baac:	187b      	adds	r3, r7, r1
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	189b      	adds	r3, r3, r2
 800bab2:	187a      	adds	r2, r7, r1
 800bab4:	6013      	str	r3, [r2, #0]
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	00da      	lsls	r2, r3, #3
 800babc:	187b      	adds	r3, r7, r1
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	18d3      	adds	r3, r2, r3
 800bac2:	4a34      	ldr	r2, [pc, #208]	@ (800bb94 <USB_EPStartXfer+0xe30>)
 800bac4:	4694      	mov	ip, r2
 800bac6:	4463      	add	r3, ip
 800bac8:	2198      	movs	r1, #152	@ 0x98
 800baca:	187a      	adds	r2, r7, r1
 800bacc:	6013      	str	r3, [r2, #0]
 800bace:	187b      	adds	r3, r7, r1
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	881b      	ldrh	r3, [r3, #0]
 800bad4:	b29b      	uxth	r3, r3
 800bad6:	059b      	lsls	r3, r3, #22
 800bad8:	0d9b      	lsrs	r3, r3, #22
 800bada:	b29a      	uxth	r2, r3
 800badc:	187b      	adds	r3, r7, r1
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	801a      	strh	r2, [r3, #0]
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	2b3e      	cmp	r3, #62	@ 0x3e
 800bae8:	d923      	bls.n	800bb32 <USB_EPStartXfer+0xdce>
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	691b      	ldr	r3, [r3, #16]
 800baee:	095b      	lsrs	r3, r3, #5
 800baf0:	21e0      	movs	r1, #224	@ 0xe0
 800baf2:	187a      	adds	r2, r7, r1
 800baf4:	6013      	str	r3, [r2, #0]
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	691b      	ldr	r3, [r3, #16]
 800bafa:	221f      	movs	r2, #31
 800bafc:	4013      	ands	r3, r2
 800bafe:	d104      	bne.n	800bb0a <USB_EPStartXfer+0xda6>
 800bb00:	187b      	adds	r3, r7, r1
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	3b01      	subs	r3, #1
 800bb06:	187a      	adds	r2, r7, r1
 800bb08:	6013      	str	r3, [r2, #0]
 800bb0a:	2198      	movs	r1, #152	@ 0x98
 800bb0c:	187b      	adds	r3, r7, r1
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	881b      	ldrh	r3, [r3, #0]
 800bb12:	b29a      	uxth	r2, r3
 800bb14:	23e0      	movs	r3, #224	@ 0xe0
 800bb16:	18fb      	adds	r3, r7, r3
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	b29b      	uxth	r3, r3
 800bb1c:	029b      	lsls	r3, r3, #10
 800bb1e:	b29b      	uxth	r3, r3
 800bb20:	4313      	orrs	r3, r2
 800bb22:	b29b      	uxth	r3, r3
 800bb24:	4a1c      	ldr	r2, [pc, #112]	@ (800bb98 <USB_EPStartXfer+0xe34>)
 800bb26:	4313      	orrs	r3, r2
 800bb28:	b29a      	uxth	r2, r3
 800bb2a:	187b      	adds	r3, r7, r1
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	801a      	strh	r2, [r3, #0]
 800bb30:	e057      	b.n	800bbe2 <USB_EPStartXfer+0xe7e>
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	691b      	ldr	r3, [r3, #16]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d10b      	bne.n	800bb52 <USB_EPStartXfer+0xdee>
 800bb3a:	2198      	movs	r1, #152	@ 0x98
 800bb3c:	187b      	adds	r3, r7, r1
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	881b      	ldrh	r3, [r3, #0]
 800bb42:	b29b      	uxth	r3, r3
 800bb44:	4a14      	ldr	r2, [pc, #80]	@ (800bb98 <USB_EPStartXfer+0xe34>)
 800bb46:	4313      	orrs	r3, r2
 800bb48:	b29a      	uxth	r2, r3
 800bb4a:	187b      	adds	r3, r7, r1
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	801a      	strh	r2, [r3, #0]
 800bb50:	e047      	b.n	800bbe2 <USB_EPStartXfer+0xe7e>
 800bb52:	683b      	ldr	r3, [r7, #0]
 800bb54:	691b      	ldr	r3, [r3, #16]
 800bb56:	085b      	lsrs	r3, r3, #1
 800bb58:	21e0      	movs	r1, #224	@ 0xe0
 800bb5a:	187a      	adds	r2, r7, r1
 800bb5c:	6013      	str	r3, [r2, #0]
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	691b      	ldr	r3, [r3, #16]
 800bb62:	2201      	movs	r2, #1
 800bb64:	4013      	ands	r3, r2
 800bb66:	d004      	beq.n	800bb72 <USB_EPStartXfer+0xe0e>
 800bb68:	187b      	adds	r3, r7, r1
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	3301      	adds	r3, #1
 800bb6e:	187a      	adds	r2, r7, r1
 800bb70:	6013      	str	r3, [r2, #0]
 800bb72:	2198      	movs	r1, #152	@ 0x98
 800bb74:	187b      	adds	r3, r7, r1
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	881b      	ldrh	r3, [r3, #0]
 800bb7a:	b29a      	uxth	r2, r3
 800bb7c:	23e0      	movs	r3, #224	@ 0xe0
 800bb7e:	18fb      	adds	r3, r7, r3
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	029b      	lsls	r3, r3, #10
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	4313      	orrs	r3, r2
 800bb8a:	b29a      	uxth	r2, r3
 800bb8c:	187b      	adds	r3, r7, r1
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	801a      	strh	r2, [r3, #0]
 800bb92:	e026      	b.n	800bbe2 <USB_EPStartXfer+0xe7e>
 800bb94:	00000406 	.word	0x00000406
 800bb98:	ffff8000 	.word	0xffff8000
 800bb9c:	00000402 	.word	0x00000402
 800bba0:	683b      	ldr	r3, [r7, #0]
 800bba2:	785b      	ldrb	r3, [r3, #1]
 800bba4:	2b01      	cmp	r3, #1
 800bba6:	d11c      	bne.n	800bbe2 <USB_EPStartXfer+0xe7e>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2250      	movs	r2, #80	@ 0x50
 800bbac:	5a9b      	ldrh	r3, [r3, r2]
 800bbae:	b29b      	uxth	r3, r3
 800bbb0:	001a      	movs	r2, r3
 800bbb2:	21a4      	movs	r1, #164	@ 0xa4
 800bbb4:	187b      	adds	r3, r7, r1
 800bbb6:	681b      	ldr	r3, [r3, #0]
 800bbb8:	189b      	adds	r3, r3, r2
 800bbba:	187a      	adds	r2, r7, r1
 800bbbc:	6013      	str	r3, [r2, #0]
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	781b      	ldrb	r3, [r3, #0]
 800bbc2:	00da      	lsls	r2, r3, #3
 800bbc4:	187b      	adds	r3, r7, r1
 800bbc6:	681b      	ldr	r3, [r3, #0]
 800bbc8:	18d3      	adds	r3, r2, r3
 800bbca:	4ad2      	ldr	r2, [pc, #840]	@ (800bf14 <USB_EPStartXfer+0x11b0>)
 800bbcc:	4694      	mov	ip, r2
 800bbce:	4463      	add	r3, ip
 800bbd0:	21a0      	movs	r1, #160	@ 0xa0
 800bbd2:	187a      	adds	r2, r7, r1
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	b29a      	uxth	r2, r3
 800bbdc:	187b      	adds	r3, r7, r1
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	69db      	ldr	r3, [r3, #28]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d100      	bne.n	800bbec <USB_EPStartXfer+0xe88>
 800bbea:	e1c2      	b.n	800bf72 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	18d2      	adds	r2, r2, r3
 800bbf6:	2196      	movs	r1, #150	@ 0x96
 800bbf8:	187b      	adds	r3, r7, r1
 800bbfa:	8812      	ldrh	r2, [r2, #0]
 800bbfc:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bbfe:	187b      	adds	r3, r7, r1
 800bc00:	881a      	ldrh	r2, [r3, #0]
 800bc02:	2380      	movs	r3, #128	@ 0x80
 800bc04:	01db      	lsls	r3, r3, #7
 800bc06:	4013      	ands	r3, r2
 800bc08:	d004      	beq.n	800bc14 <USB_EPStartXfer+0xeb0>
 800bc0a:	187b      	adds	r3, r7, r1
 800bc0c:	881b      	ldrh	r3, [r3, #0]
 800bc0e:	2240      	movs	r2, #64	@ 0x40
 800bc10:	4013      	ands	r3, r2
 800bc12:	d10d      	bne.n	800bc30 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bc14:	2196      	movs	r1, #150	@ 0x96
 800bc16:	187b      	adds	r3, r7, r1
 800bc18:	881a      	ldrh	r2, [r3, #0]
 800bc1a:	2380      	movs	r3, #128	@ 0x80
 800bc1c:	01db      	lsls	r3, r3, #7
 800bc1e:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800bc20:	d000      	beq.n	800bc24 <USB_EPStartXfer+0xec0>
 800bc22:	e1a6      	b.n	800bf72 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800bc24:	187b      	adds	r3, r7, r1
 800bc26:	881b      	ldrh	r3, [r3, #0]
 800bc28:	2240      	movs	r2, #64	@ 0x40
 800bc2a:	4013      	ands	r3, r2
 800bc2c:	d000      	beq.n	800bc30 <USB_EPStartXfer+0xecc>
 800bc2e:	e1a0      	b.n	800bf72 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 800bc30:	687a      	ldr	r2, [r7, #4]
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	781b      	ldrb	r3, [r3, #0]
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	18d3      	adds	r3, r2, r3
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	2094      	movs	r0, #148	@ 0x94
 800bc40:	183b      	adds	r3, r7, r0
 800bc42:	49b5      	ldr	r1, [pc, #724]	@ (800bf18 <USB_EPStartXfer+0x11b4>)
 800bc44:	400a      	ands	r2, r1
 800bc46:	801a      	strh	r2, [r3, #0]
 800bc48:	687a      	ldr	r2, [r7, #4]
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	781b      	ldrb	r3, [r3, #0]
 800bc4e:	009b      	lsls	r3, r3, #2
 800bc50:	18d3      	adds	r3, r2, r3
 800bc52:	183a      	adds	r2, r7, r0
 800bc54:	8812      	ldrh	r2, [r2, #0]
 800bc56:	49b1      	ldr	r1, [pc, #708]	@ (800bf1c <USB_EPStartXfer+0x11b8>)
 800bc58:	430a      	orrs	r2, r1
 800bc5a:	b292      	uxth	r2, r2
 800bc5c:	801a      	strh	r2, [r3, #0]
 800bc5e:	e188      	b.n	800bf72 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	78db      	ldrb	r3, [r3, #3]
 800bc64:	2b01      	cmp	r3, #1
 800bc66:	d000      	beq.n	800bc6a <USB_EPStartXfer+0xf06>
 800bc68:	e181      	b.n	800bf6e <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800bc6a:	683b      	ldr	r3, [r7, #0]
 800bc6c:	699a      	ldr	r2, [r3, #24]
 800bc6e:	683b      	ldr	r3, [r7, #0]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d90d      	bls.n	800bc92 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 800bc76:	683b      	ldr	r3, [r7, #0]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	1d7a      	adds	r2, r7, #5
 800bc7c:	32ff      	adds	r2, #255	@ 0xff
 800bc7e:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	699a      	ldr	r2, [r3, #24]
 800bc84:	1d7b      	adds	r3, r7, #5
 800bc86:	33ff      	adds	r3, #255	@ 0xff
 800bc88:	681b      	ldr	r3, [r3, #0]
 800bc8a:	1ad2      	subs	r2, r2, r3
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	619a      	str	r2, [r3, #24]
 800bc90:	e007      	b.n	800bca2 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	699b      	ldr	r3, [r3, #24]
 800bc96:	1d7a      	adds	r2, r7, #5
 800bc98:	32ff      	adds	r2, #255	@ 0xff
 800bc9a:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 800bc9c:	683b      	ldr	r3, [r7, #0]
 800bc9e:	2200      	movs	r2, #0
 800bca0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	785b      	ldrb	r3, [r3, #1]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d000      	beq.n	800bcac <USB_EPStartXfer+0xf48>
 800bcaa:	e082      	b.n	800bdb2 <USB_EPStartXfer+0x104e>
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	21cc      	movs	r1, #204	@ 0xcc
 800bcb0:	187a      	adds	r2, r7, r1
 800bcb2:	6013      	str	r3, [r2, #0]
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	2250      	movs	r2, #80	@ 0x50
 800bcb8:	5a9b      	ldrh	r3, [r3, r2]
 800bcba:	b29b      	uxth	r3, r3
 800bcbc:	001a      	movs	r2, r3
 800bcbe:	187b      	adds	r3, r7, r1
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	189b      	adds	r3, r3, r2
 800bcc4:	187a      	adds	r2, r7, r1
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	683b      	ldr	r3, [r7, #0]
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	00da      	lsls	r2, r3, #3
 800bcce:	187b      	adds	r3, r7, r1
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	18d3      	adds	r3, r2, r3
 800bcd4:	4a92      	ldr	r2, [pc, #584]	@ (800bf20 <USB_EPStartXfer+0x11bc>)
 800bcd6:	4694      	mov	ip, r2
 800bcd8:	4463      	add	r3, ip
 800bcda:	21c8      	movs	r1, #200	@ 0xc8
 800bcdc:	187a      	adds	r2, r7, r1
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	187b      	adds	r3, r7, r1
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	881b      	ldrh	r3, [r3, #0]
 800bce6:	b29b      	uxth	r3, r3
 800bce8:	059b      	lsls	r3, r3, #22
 800bcea:	0d9b      	lsrs	r3, r3, #22
 800bcec:	b29a      	uxth	r2, r3
 800bcee:	187b      	adds	r3, r7, r1
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	801a      	strh	r2, [r3, #0]
 800bcf4:	1d7b      	adds	r3, r7, #5
 800bcf6:	33ff      	adds	r3, #255	@ 0xff
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	2b3e      	cmp	r3, #62	@ 0x3e
 800bcfc:	d925      	bls.n	800bd4a <USB_EPStartXfer+0xfe6>
 800bcfe:	1d7b      	adds	r3, r7, #5
 800bd00:	33ff      	adds	r3, #255	@ 0xff
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	095b      	lsrs	r3, r3, #5
 800bd06:	21dc      	movs	r1, #220	@ 0xdc
 800bd08:	187a      	adds	r2, r7, r1
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	1d7b      	adds	r3, r7, #5
 800bd0e:	33ff      	adds	r3, #255	@ 0xff
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	221f      	movs	r2, #31
 800bd14:	4013      	ands	r3, r2
 800bd16:	d104      	bne.n	800bd22 <USB_EPStartXfer+0xfbe>
 800bd18:	187b      	adds	r3, r7, r1
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	187a      	adds	r2, r7, r1
 800bd20:	6013      	str	r3, [r2, #0]
 800bd22:	21c8      	movs	r1, #200	@ 0xc8
 800bd24:	187b      	adds	r3, r7, r1
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	881b      	ldrh	r3, [r3, #0]
 800bd2a:	b29a      	uxth	r2, r3
 800bd2c:	23dc      	movs	r3, #220	@ 0xdc
 800bd2e:	18fb      	adds	r3, r7, r3
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	b29b      	uxth	r3, r3
 800bd34:	029b      	lsls	r3, r3, #10
 800bd36:	b29b      	uxth	r3, r3
 800bd38:	4313      	orrs	r3, r2
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	4a79      	ldr	r2, [pc, #484]	@ (800bf24 <USB_EPStartXfer+0x11c0>)
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	b29a      	uxth	r2, r3
 800bd42:	187b      	adds	r3, r7, r1
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	801a      	strh	r2, [r3, #0]
 800bd48:	e058      	b.n	800bdfc <USB_EPStartXfer+0x1098>
 800bd4a:	1d7b      	adds	r3, r7, #5
 800bd4c:	33ff      	adds	r3, #255	@ 0xff
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d10b      	bne.n	800bd6c <USB_EPStartXfer+0x1008>
 800bd54:	21c8      	movs	r1, #200	@ 0xc8
 800bd56:	187b      	adds	r3, r7, r1
 800bd58:	681b      	ldr	r3, [r3, #0]
 800bd5a:	881b      	ldrh	r3, [r3, #0]
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	4a71      	ldr	r2, [pc, #452]	@ (800bf24 <USB_EPStartXfer+0x11c0>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	187b      	adds	r3, r7, r1
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	801a      	strh	r2, [r3, #0]
 800bd6a:	e047      	b.n	800bdfc <USB_EPStartXfer+0x1098>
 800bd6c:	1d7b      	adds	r3, r7, #5
 800bd6e:	33ff      	adds	r3, #255	@ 0xff
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	085b      	lsrs	r3, r3, #1
 800bd74:	21dc      	movs	r1, #220	@ 0xdc
 800bd76:	187a      	adds	r2, r7, r1
 800bd78:	6013      	str	r3, [r2, #0]
 800bd7a:	1d7b      	adds	r3, r7, #5
 800bd7c:	33ff      	adds	r3, #255	@ 0xff
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2201      	movs	r2, #1
 800bd82:	4013      	ands	r3, r2
 800bd84:	d004      	beq.n	800bd90 <USB_EPStartXfer+0x102c>
 800bd86:	187b      	adds	r3, r7, r1
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	3301      	adds	r3, #1
 800bd8c:	187a      	adds	r2, r7, r1
 800bd8e:	6013      	str	r3, [r2, #0]
 800bd90:	21c8      	movs	r1, #200	@ 0xc8
 800bd92:	187b      	adds	r3, r7, r1
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	881b      	ldrh	r3, [r3, #0]
 800bd98:	b29a      	uxth	r2, r3
 800bd9a:	23dc      	movs	r3, #220	@ 0xdc
 800bd9c:	18fb      	adds	r3, r7, r3
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	b29b      	uxth	r3, r3
 800bda2:	029b      	lsls	r3, r3, #10
 800bda4:	b29b      	uxth	r3, r3
 800bda6:	4313      	orrs	r3, r2
 800bda8:	b29a      	uxth	r2, r3
 800bdaa:	187b      	adds	r3, r7, r1
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	801a      	strh	r2, [r3, #0]
 800bdb0:	e024      	b.n	800bdfc <USB_EPStartXfer+0x1098>
 800bdb2:	683b      	ldr	r3, [r7, #0]
 800bdb4:	785b      	ldrb	r3, [r3, #1]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d120      	bne.n	800bdfc <USB_EPStartXfer+0x1098>
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	21d4      	movs	r1, #212	@ 0xd4
 800bdbe:	187a      	adds	r2, r7, r1
 800bdc0:	6013      	str	r3, [r2, #0]
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	2250      	movs	r2, #80	@ 0x50
 800bdc6:	5a9b      	ldrh	r3, [r3, r2]
 800bdc8:	b29b      	uxth	r3, r3
 800bdca:	001a      	movs	r2, r3
 800bdcc:	187b      	adds	r3, r7, r1
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	189b      	adds	r3, r3, r2
 800bdd2:	187a      	adds	r2, r7, r1
 800bdd4:	6013      	str	r3, [r2, #0]
 800bdd6:	683b      	ldr	r3, [r7, #0]
 800bdd8:	781b      	ldrb	r3, [r3, #0]
 800bdda:	00da      	lsls	r2, r3, #3
 800bddc:	187b      	adds	r3, r7, r1
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	18d3      	adds	r3, r2, r3
 800bde2:	4a4f      	ldr	r2, [pc, #316]	@ (800bf20 <USB_EPStartXfer+0x11bc>)
 800bde4:	4694      	mov	ip, r2
 800bde6:	4463      	add	r3, ip
 800bde8:	21d0      	movs	r1, #208	@ 0xd0
 800bdea:	187a      	adds	r2, r7, r1
 800bdec:	6013      	str	r3, [r2, #0]
 800bdee:	1d7b      	adds	r3, r7, #5
 800bdf0:	33ff      	adds	r3, #255	@ 0xff
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	b29a      	uxth	r2, r3
 800bdf6:	187b      	adds	r3, r7, r1
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	801a      	strh	r2, [r3, #0]
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	22c4      	movs	r2, #196	@ 0xc4
 800be00:	18ba      	adds	r2, r7, r2
 800be02:	6013      	str	r3, [r2, #0]
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	785b      	ldrb	r3, [r3, #1]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d000      	beq.n	800be0e <USB_EPStartXfer+0x10aa>
 800be0c:	e08c      	b.n	800bf28 <USB_EPStartXfer+0x11c4>
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	21bc      	movs	r1, #188	@ 0xbc
 800be12:	187a      	adds	r2, r7, r1
 800be14:	6013      	str	r3, [r2, #0]
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2250      	movs	r2, #80	@ 0x50
 800be1a:	5a9b      	ldrh	r3, [r3, r2]
 800be1c:	b29b      	uxth	r3, r3
 800be1e:	001a      	movs	r2, r3
 800be20:	187b      	adds	r3, r7, r1
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	189b      	adds	r3, r3, r2
 800be26:	187a      	adds	r2, r7, r1
 800be28:	6013      	str	r3, [r2, #0]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	00da      	lsls	r2, r3, #3
 800be30:	187b      	adds	r3, r7, r1
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	18d3      	adds	r3, r2, r3
 800be36:	4a37      	ldr	r2, [pc, #220]	@ (800bf14 <USB_EPStartXfer+0x11b0>)
 800be38:	4694      	mov	ip, r2
 800be3a:	4463      	add	r3, ip
 800be3c:	21b8      	movs	r1, #184	@ 0xb8
 800be3e:	187a      	adds	r2, r7, r1
 800be40:	6013      	str	r3, [r2, #0]
 800be42:	187b      	adds	r3, r7, r1
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	881b      	ldrh	r3, [r3, #0]
 800be48:	b29b      	uxth	r3, r3
 800be4a:	059b      	lsls	r3, r3, #22
 800be4c:	0d9b      	lsrs	r3, r3, #22
 800be4e:	b29a      	uxth	r2, r3
 800be50:	187b      	adds	r3, r7, r1
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	801a      	strh	r2, [r3, #0]
 800be56:	1d7b      	adds	r3, r7, #5
 800be58:	33ff      	adds	r3, #255	@ 0xff
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2b3e      	cmp	r3, #62	@ 0x3e
 800be5e:	d925      	bls.n	800beac <USB_EPStartXfer+0x1148>
 800be60:	1d7b      	adds	r3, r7, #5
 800be62:	33ff      	adds	r3, #255	@ 0xff
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	095b      	lsrs	r3, r3, #5
 800be68:	21d8      	movs	r1, #216	@ 0xd8
 800be6a:	187a      	adds	r2, r7, r1
 800be6c:	6013      	str	r3, [r2, #0]
 800be6e:	1d7b      	adds	r3, r7, #5
 800be70:	33ff      	adds	r3, #255	@ 0xff
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	221f      	movs	r2, #31
 800be76:	4013      	ands	r3, r2
 800be78:	d104      	bne.n	800be84 <USB_EPStartXfer+0x1120>
 800be7a:	187b      	adds	r3, r7, r1
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	3b01      	subs	r3, #1
 800be80:	187a      	adds	r2, r7, r1
 800be82:	6013      	str	r3, [r2, #0]
 800be84:	21b8      	movs	r1, #184	@ 0xb8
 800be86:	187b      	adds	r3, r7, r1
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	881b      	ldrh	r3, [r3, #0]
 800be8c:	b29a      	uxth	r2, r3
 800be8e:	23d8      	movs	r3, #216	@ 0xd8
 800be90:	18fb      	adds	r3, r7, r3
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	b29b      	uxth	r3, r3
 800be96:	029b      	lsls	r3, r3, #10
 800be98:	b29b      	uxth	r3, r3
 800be9a:	4313      	orrs	r3, r2
 800be9c:	b29b      	uxth	r3, r3
 800be9e:	4a21      	ldr	r2, [pc, #132]	@ (800bf24 <USB_EPStartXfer+0x11c0>)
 800bea0:	4313      	orrs	r3, r2
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	187b      	adds	r3, r7, r1
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	801a      	strh	r2, [r3, #0]
 800beaa:	e062      	b.n	800bf72 <USB_EPStartXfer+0x120e>
 800beac:	1d7b      	adds	r3, r7, #5
 800beae:	33ff      	adds	r3, #255	@ 0xff
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d10b      	bne.n	800bece <USB_EPStartXfer+0x116a>
 800beb6:	21b8      	movs	r1, #184	@ 0xb8
 800beb8:	187b      	adds	r3, r7, r1
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	881b      	ldrh	r3, [r3, #0]
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4a18      	ldr	r2, [pc, #96]	@ (800bf24 <USB_EPStartXfer+0x11c0>)
 800bec2:	4313      	orrs	r3, r2
 800bec4:	b29a      	uxth	r2, r3
 800bec6:	187b      	adds	r3, r7, r1
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	801a      	strh	r2, [r3, #0]
 800becc:	e051      	b.n	800bf72 <USB_EPStartXfer+0x120e>
 800bece:	1d7b      	adds	r3, r7, #5
 800bed0:	33ff      	adds	r3, #255	@ 0xff
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	085b      	lsrs	r3, r3, #1
 800bed6:	21d8      	movs	r1, #216	@ 0xd8
 800bed8:	187a      	adds	r2, r7, r1
 800beda:	6013      	str	r3, [r2, #0]
 800bedc:	1d7b      	adds	r3, r7, #5
 800bede:	33ff      	adds	r3, #255	@ 0xff
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	2201      	movs	r2, #1
 800bee4:	4013      	ands	r3, r2
 800bee6:	d004      	beq.n	800bef2 <USB_EPStartXfer+0x118e>
 800bee8:	187b      	adds	r3, r7, r1
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	3301      	adds	r3, #1
 800beee:	187a      	adds	r2, r7, r1
 800bef0:	6013      	str	r3, [r2, #0]
 800bef2:	21b8      	movs	r1, #184	@ 0xb8
 800bef4:	187b      	adds	r3, r7, r1
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	881b      	ldrh	r3, [r3, #0]
 800befa:	b29a      	uxth	r2, r3
 800befc:	23d8      	movs	r3, #216	@ 0xd8
 800befe:	18fb      	adds	r3, r7, r3
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	b29b      	uxth	r3, r3
 800bf04:	029b      	lsls	r3, r3, #10
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	4313      	orrs	r3, r2
 800bf0a:	b29a      	uxth	r2, r3
 800bf0c:	187b      	adds	r3, r7, r1
 800bf0e:	681b      	ldr	r3, [r3, #0]
 800bf10:	801a      	strh	r2, [r3, #0]
 800bf12:	e02e      	b.n	800bf72 <USB_EPStartXfer+0x120e>
 800bf14:	00000406 	.word	0x00000406
 800bf18:	ffff8f8f 	.word	0xffff8f8f
 800bf1c:	ffff80c0 	.word	0xffff80c0
 800bf20:	00000402 	.word	0x00000402
 800bf24:	ffff8000 	.word	0xffff8000
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	785b      	ldrb	r3, [r3, #1]
 800bf2c:	2b01      	cmp	r3, #1
 800bf2e:	d120      	bne.n	800bf72 <USB_EPStartXfer+0x120e>
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2250      	movs	r2, #80	@ 0x50
 800bf34:	5a9b      	ldrh	r3, [r3, r2]
 800bf36:	b29b      	uxth	r3, r3
 800bf38:	001a      	movs	r2, r3
 800bf3a:	21c4      	movs	r1, #196	@ 0xc4
 800bf3c:	187b      	adds	r3, r7, r1
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	189b      	adds	r3, r3, r2
 800bf42:	187a      	adds	r2, r7, r1
 800bf44:	6013      	str	r3, [r2, #0]
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	781b      	ldrb	r3, [r3, #0]
 800bf4a:	00da      	lsls	r2, r3, #3
 800bf4c:	187b      	adds	r3, r7, r1
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	18d3      	adds	r3, r2, r3
 800bf52:	4a1d      	ldr	r2, [pc, #116]	@ (800bfc8 <USB_EPStartXfer+0x1264>)
 800bf54:	4694      	mov	ip, r2
 800bf56:	4463      	add	r3, ip
 800bf58:	21c0      	movs	r1, #192	@ 0xc0
 800bf5a:	187a      	adds	r2, r7, r1
 800bf5c:	6013      	str	r3, [r2, #0]
 800bf5e:	1d7b      	adds	r3, r7, #5
 800bf60:	33ff      	adds	r3, #255	@ 0xff
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	187b      	adds	r3, r7, r1
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	801a      	strh	r2, [r3, #0]
 800bf6c:	e001      	b.n	800bf72 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	e025      	b.n	800bfbe <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bf72:	687a      	ldr	r2, [r7, #4]
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	781b      	ldrb	r3, [r3, #0]
 800bf78:	009b      	lsls	r3, r3, #2
 800bf7a:	18d3      	adds	r3, r2, r3
 800bf7c:	881b      	ldrh	r3, [r3, #0]
 800bf7e:	b29a      	uxth	r2, r3
 800bf80:	208a      	movs	r0, #138	@ 0x8a
 800bf82:	183b      	adds	r3, r7, r0
 800bf84:	4911      	ldr	r1, [pc, #68]	@ (800bfcc <USB_EPStartXfer+0x1268>)
 800bf86:	400a      	ands	r2, r1
 800bf88:	801a      	strh	r2, [r3, #0]
 800bf8a:	183b      	adds	r3, r7, r0
 800bf8c:	183a      	adds	r2, r7, r0
 800bf8e:	8812      	ldrh	r2, [r2, #0]
 800bf90:	2180      	movs	r1, #128	@ 0x80
 800bf92:	0149      	lsls	r1, r1, #5
 800bf94:	404a      	eors	r2, r1
 800bf96:	801a      	strh	r2, [r3, #0]
 800bf98:	183b      	adds	r3, r7, r0
 800bf9a:	183a      	adds	r2, r7, r0
 800bf9c:	8812      	ldrh	r2, [r2, #0]
 800bf9e:	2180      	movs	r1, #128	@ 0x80
 800bfa0:	0189      	lsls	r1, r1, #6
 800bfa2:	404a      	eors	r2, r1
 800bfa4:	801a      	strh	r2, [r3, #0]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	18d3      	adds	r3, r2, r3
 800bfb0:	183a      	adds	r2, r7, r0
 800bfb2:	8812      	ldrh	r2, [r2, #0]
 800bfb4:	4906      	ldr	r1, [pc, #24]	@ (800bfd0 <USB_EPStartXfer+0x126c>)
 800bfb6:	430a      	orrs	r2, r1
 800bfb8:	b292      	uxth	r2, r2
 800bfba:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800bfbc:	2300      	movs	r3, #0
}
 800bfbe:	0018      	movs	r0, r3
 800bfc0:	46bd      	mov	sp, r7
 800bfc2:	b043      	add	sp, #268	@ 0x10c
 800bfc4:	bd90      	pop	{r4, r7, pc}
 800bfc6:	46c0      	nop			@ (mov r8, r8)
 800bfc8:	00000406 	.word	0x00000406
 800bfcc:	ffffbf8f 	.word	0xffffbf8f
 800bfd0:	ffff8080 	.word	0xffff8080

0800bfd4 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bfd4:	b580      	push	{r7, lr}
 800bfd6:	b084      	sub	sp, #16
 800bfd8:	af00      	add	r7, sp, #0
 800bfda:	6078      	str	r0, [r7, #4]
 800bfdc:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	785b      	ldrb	r3, [r3, #1]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d01d      	beq.n	800c022 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bfe6:	687a      	ldr	r2, [r7, #4]
 800bfe8:	683b      	ldr	r3, [r7, #0]
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	009b      	lsls	r3, r3, #2
 800bfee:	18d3      	adds	r3, r2, r3
 800bff0:	881b      	ldrh	r3, [r3, #0]
 800bff2:	b29a      	uxth	r2, r3
 800bff4:	200c      	movs	r0, #12
 800bff6:	183b      	adds	r3, r7, r0
 800bff8:	491b      	ldr	r1, [pc, #108]	@ (800c068 <USB_EPSetStall+0x94>)
 800bffa:	400a      	ands	r2, r1
 800bffc:	801a      	strh	r2, [r3, #0]
 800bffe:	183b      	adds	r3, r7, r0
 800c000:	183a      	adds	r2, r7, r0
 800c002:	8812      	ldrh	r2, [r2, #0]
 800c004:	2110      	movs	r1, #16
 800c006:	404a      	eors	r2, r1
 800c008:	801a      	strh	r2, [r3, #0]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	781b      	ldrb	r3, [r3, #0]
 800c010:	009b      	lsls	r3, r3, #2
 800c012:	18d3      	adds	r3, r2, r3
 800c014:	183a      	adds	r2, r7, r0
 800c016:	8812      	ldrh	r2, [r2, #0]
 800c018:	4914      	ldr	r1, [pc, #80]	@ (800c06c <USB_EPSetStall+0x98>)
 800c01a:	430a      	orrs	r2, r1
 800c01c:	b292      	uxth	r2, r2
 800c01e:	801a      	strh	r2, [r3, #0]
 800c020:	e01d      	b.n	800c05e <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	781b      	ldrb	r3, [r3, #0]
 800c028:	009b      	lsls	r3, r3, #2
 800c02a:	18d3      	adds	r3, r2, r3
 800c02c:	881b      	ldrh	r3, [r3, #0]
 800c02e:	b29a      	uxth	r2, r3
 800c030:	200e      	movs	r0, #14
 800c032:	183b      	adds	r3, r7, r0
 800c034:	490e      	ldr	r1, [pc, #56]	@ (800c070 <USB_EPSetStall+0x9c>)
 800c036:	400a      	ands	r2, r1
 800c038:	801a      	strh	r2, [r3, #0]
 800c03a:	183b      	adds	r3, r7, r0
 800c03c:	183a      	adds	r2, r7, r0
 800c03e:	8812      	ldrh	r2, [r2, #0]
 800c040:	2180      	movs	r1, #128	@ 0x80
 800c042:	0149      	lsls	r1, r1, #5
 800c044:	404a      	eors	r2, r1
 800c046:	801a      	strh	r2, [r3, #0]
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	781b      	ldrb	r3, [r3, #0]
 800c04e:	009b      	lsls	r3, r3, #2
 800c050:	18d3      	adds	r3, r2, r3
 800c052:	183a      	adds	r2, r7, r0
 800c054:	8812      	ldrh	r2, [r2, #0]
 800c056:	4905      	ldr	r1, [pc, #20]	@ (800c06c <USB_EPSetStall+0x98>)
 800c058:	430a      	orrs	r2, r1
 800c05a:	b292      	uxth	r2, r2
 800c05c:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 800c05e:	2300      	movs	r3, #0
}
 800c060:	0018      	movs	r0, r3
 800c062:	46bd      	mov	sp, r7
 800c064:	b004      	add	sp, #16
 800c066:	bd80      	pop	{r7, pc}
 800c068:	ffff8fbf 	.word	0xffff8fbf
 800c06c:	ffff8080 	.word	0xffff8080
 800c070:	ffffbf8f 	.word	0xffffbf8f

0800c074 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800c074:	b580      	push	{r7, lr}
 800c076:	b086      	sub	sp, #24
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
 800c07c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800c07e:	683b      	ldr	r3, [r7, #0]
 800c080:	7b1b      	ldrb	r3, [r3, #12]
 800c082:	2b00      	cmp	r3, #0
 800c084:	d000      	beq.n	800c088 <USB_EPClearStall+0x14>
 800c086:	e095      	b.n	800c1b4 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 800c088:	683b      	ldr	r3, [r7, #0]
 800c08a:	785b      	ldrb	r3, [r3, #1]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d046      	beq.n	800c11e <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800c090:	687a      	ldr	r2, [r7, #4]
 800c092:	683b      	ldr	r3, [r7, #0]
 800c094:	781b      	ldrb	r3, [r3, #0]
 800c096:	009b      	lsls	r3, r3, #2
 800c098:	18d2      	adds	r2, r2, r3
 800c09a:	2110      	movs	r1, #16
 800c09c:	187b      	adds	r3, r7, r1
 800c09e:	8812      	ldrh	r2, [r2, #0]
 800c0a0:	801a      	strh	r2, [r3, #0]
 800c0a2:	187b      	adds	r3, r7, r1
 800c0a4:	881b      	ldrh	r3, [r3, #0]
 800c0a6:	2240      	movs	r2, #64	@ 0x40
 800c0a8:	4013      	ands	r3, r2
 800c0aa:	d016      	beq.n	800c0da <USB_EPClearStall+0x66>
 800c0ac:	687a      	ldr	r2, [r7, #4]
 800c0ae:	683b      	ldr	r3, [r7, #0]
 800c0b0:	781b      	ldrb	r3, [r3, #0]
 800c0b2:	009b      	lsls	r3, r3, #2
 800c0b4:	18d3      	adds	r3, r2, r3
 800c0b6:	881b      	ldrh	r3, [r3, #0]
 800c0b8:	b29a      	uxth	r2, r3
 800c0ba:	200e      	movs	r0, #14
 800c0bc:	183b      	adds	r3, r7, r0
 800c0be:	4940      	ldr	r1, [pc, #256]	@ (800c1c0 <USB_EPClearStall+0x14c>)
 800c0c0:	400a      	ands	r2, r1
 800c0c2:	801a      	strh	r2, [r3, #0]
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	781b      	ldrb	r3, [r3, #0]
 800c0ca:	009b      	lsls	r3, r3, #2
 800c0cc:	18d3      	adds	r3, r2, r3
 800c0ce:	183a      	adds	r2, r7, r0
 800c0d0:	8812      	ldrh	r2, [r2, #0]
 800c0d2:	493c      	ldr	r1, [pc, #240]	@ (800c1c4 <USB_EPClearStall+0x150>)
 800c0d4:	430a      	orrs	r2, r1
 800c0d6:	b292      	uxth	r2, r2
 800c0d8:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c0da:	683b      	ldr	r3, [r7, #0]
 800c0dc:	78db      	ldrb	r3, [r3, #3]
 800c0de:	2b01      	cmp	r3, #1
 800c0e0:	d068      	beq.n	800c1b4 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800c0e2:	687a      	ldr	r2, [r7, #4]
 800c0e4:	683b      	ldr	r3, [r7, #0]
 800c0e6:	781b      	ldrb	r3, [r3, #0]
 800c0e8:	009b      	lsls	r3, r3, #2
 800c0ea:	18d3      	adds	r3, r2, r3
 800c0ec:	881b      	ldrh	r3, [r3, #0]
 800c0ee:	b29a      	uxth	r2, r3
 800c0f0:	200c      	movs	r0, #12
 800c0f2:	183b      	adds	r3, r7, r0
 800c0f4:	4934      	ldr	r1, [pc, #208]	@ (800c1c8 <USB_EPClearStall+0x154>)
 800c0f6:	400a      	ands	r2, r1
 800c0f8:	801a      	strh	r2, [r3, #0]
 800c0fa:	183b      	adds	r3, r7, r0
 800c0fc:	183a      	adds	r2, r7, r0
 800c0fe:	8812      	ldrh	r2, [r2, #0]
 800c100:	2120      	movs	r1, #32
 800c102:	404a      	eors	r2, r1
 800c104:	801a      	strh	r2, [r3, #0]
 800c106:	687a      	ldr	r2, [r7, #4]
 800c108:	683b      	ldr	r3, [r7, #0]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	009b      	lsls	r3, r3, #2
 800c10e:	18d3      	adds	r3, r2, r3
 800c110:	183a      	adds	r2, r7, r0
 800c112:	8812      	ldrh	r2, [r2, #0]
 800c114:	492d      	ldr	r1, [pc, #180]	@ (800c1cc <USB_EPClearStall+0x158>)
 800c116:	430a      	orrs	r2, r1
 800c118:	b292      	uxth	r2, r2
 800c11a:	801a      	strh	r2, [r3, #0]
 800c11c:	e04a      	b.n	800c1b4 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800c11e:	687a      	ldr	r2, [r7, #4]
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	009b      	lsls	r3, r3, #2
 800c126:	18d2      	adds	r2, r2, r3
 800c128:	2116      	movs	r1, #22
 800c12a:	187b      	adds	r3, r7, r1
 800c12c:	8812      	ldrh	r2, [r2, #0]
 800c12e:	801a      	strh	r2, [r3, #0]
 800c130:	187b      	adds	r3, r7, r1
 800c132:	881a      	ldrh	r2, [r3, #0]
 800c134:	2380      	movs	r3, #128	@ 0x80
 800c136:	01db      	lsls	r3, r3, #7
 800c138:	4013      	ands	r3, r2
 800c13a:	d016      	beq.n	800c16a <USB_EPClearStall+0xf6>
 800c13c:	687a      	ldr	r2, [r7, #4]
 800c13e:	683b      	ldr	r3, [r7, #0]
 800c140:	781b      	ldrb	r3, [r3, #0]
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	18d3      	adds	r3, r2, r3
 800c146:	881b      	ldrh	r3, [r3, #0]
 800c148:	b29a      	uxth	r2, r3
 800c14a:	2014      	movs	r0, #20
 800c14c:	183b      	adds	r3, r7, r0
 800c14e:	491c      	ldr	r1, [pc, #112]	@ (800c1c0 <USB_EPClearStall+0x14c>)
 800c150:	400a      	ands	r2, r1
 800c152:	801a      	strh	r2, [r3, #0]
 800c154:	687a      	ldr	r2, [r7, #4]
 800c156:	683b      	ldr	r3, [r7, #0]
 800c158:	781b      	ldrb	r3, [r3, #0]
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	18d3      	adds	r3, r2, r3
 800c15e:	183a      	adds	r2, r7, r0
 800c160:	8812      	ldrh	r2, [r2, #0]
 800c162:	491b      	ldr	r1, [pc, #108]	@ (800c1d0 <USB_EPClearStall+0x15c>)
 800c164:	430a      	orrs	r2, r1
 800c166:	b292      	uxth	r2, r2
 800c168:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800c16a:	687a      	ldr	r2, [r7, #4]
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	781b      	ldrb	r3, [r3, #0]
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	18d3      	adds	r3, r2, r3
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	b29a      	uxth	r2, r3
 800c178:	2012      	movs	r0, #18
 800c17a:	183b      	adds	r3, r7, r0
 800c17c:	4915      	ldr	r1, [pc, #84]	@ (800c1d4 <USB_EPClearStall+0x160>)
 800c17e:	400a      	ands	r2, r1
 800c180:	801a      	strh	r2, [r3, #0]
 800c182:	183b      	adds	r3, r7, r0
 800c184:	183a      	adds	r2, r7, r0
 800c186:	8812      	ldrh	r2, [r2, #0]
 800c188:	2180      	movs	r1, #128	@ 0x80
 800c18a:	0149      	lsls	r1, r1, #5
 800c18c:	404a      	eors	r2, r1
 800c18e:	801a      	strh	r2, [r3, #0]
 800c190:	183b      	adds	r3, r7, r0
 800c192:	183a      	adds	r2, r7, r0
 800c194:	8812      	ldrh	r2, [r2, #0]
 800c196:	2180      	movs	r1, #128	@ 0x80
 800c198:	0189      	lsls	r1, r1, #6
 800c19a:	404a      	eors	r2, r1
 800c19c:	801a      	strh	r2, [r3, #0]
 800c19e:	687a      	ldr	r2, [r7, #4]
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	18d3      	adds	r3, r2, r3
 800c1a8:	183a      	adds	r2, r7, r0
 800c1aa:	8812      	ldrh	r2, [r2, #0]
 800c1ac:	4907      	ldr	r1, [pc, #28]	@ (800c1cc <USB_EPClearStall+0x158>)
 800c1ae:	430a      	orrs	r2, r1
 800c1b0:	b292      	uxth	r2, r2
 800c1b2:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 800c1b4:	2300      	movs	r3, #0
}
 800c1b6:	0018      	movs	r0, r3
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	b006      	add	sp, #24
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	46c0      	nop			@ (mov r8, r8)
 800c1c0:	ffff8f8f 	.word	0xffff8f8f
 800c1c4:	ffff80c0 	.word	0xffff80c0
 800c1c8:	ffff8fbf 	.word	0xffff8fbf
 800c1cc:	ffff8080 	.word	0xffff8080
 800c1d0:	ffffc080 	.word	0xffffc080
 800c1d4:	ffffbf8f 	.word	0xffffbf8f

0800c1d8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b082      	sub	sp, #8
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
 800c1e0:	000a      	movs	r2, r1
 800c1e2:	1cfb      	adds	r3, r7, #3
 800c1e4:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 800c1e6:	1cfb      	adds	r3, r7, #3
 800c1e8:	781b      	ldrb	r3, [r3, #0]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d103      	bne.n	800c1f6 <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	224c      	movs	r2, #76	@ 0x4c
 800c1f2:	2180      	movs	r1, #128	@ 0x80
 800c1f4:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	0018      	movs	r0, r3
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	b002      	add	sp, #8
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	2258      	movs	r2, #88	@ 0x58
 800c20c:	5a9b      	ldrh	r3, [r3, r2]
 800c20e:	b29b      	uxth	r3, r3
 800c210:	4a05      	ldr	r2, [pc, #20]	@ (800c228 <USB_DevConnect+0x28>)
 800c212:	4313      	orrs	r3, r2
 800c214:	b299      	uxth	r1, r3
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2258      	movs	r2, #88	@ 0x58
 800c21a:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c21c:	2300      	movs	r3, #0
}
 800c21e:	0018      	movs	r0, r3
 800c220:	46bd      	mov	sp, r7
 800c222:	b002      	add	sp, #8
 800c224:	bd80      	pop	{r7, pc}
 800c226:	46c0      	nop			@ (mov r8, r8)
 800c228:	ffff8000 	.word	0xffff8000

0800c22c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b084      	sub	sp, #16
 800c230:	af00      	add	r7, sp, #0
 800c232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	2244      	movs	r2, #68	@ 0x44
 800c238:	5a9b      	ldrh	r3, [r3, r2]
 800c23a:	b29b      	uxth	r3, r3
 800c23c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800c23e:	68fb      	ldr	r3, [r7, #12]
}
 800c240:	0018      	movs	r0, r3
 800c242:	46bd      	mov	sp, r7
 800c244:	b004      	add	sp, #16
 800c246:	bd80      	pop	{r7, pc}

0800c248 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b08a      	sub	sp, #40	@ 0x28
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	60f8      	str	r0, [r7, #12]
 800c250:	60b9      	str	r1, [r7, #8]
 800c252:	0019      	movs	r1, r3
 800c254:	1dbb      	adds	r3, r7, #6
 800c256:	801a      	strh	r2, [r3, #0]
 800c258:	1d3b      	adds	r3, r7, #4
 800c25a:	1c0a      	adds	r2, r1, #0
 800c25c:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800c25e:	1d3b      	adds	r3, r7, #4
 800c260:	881b      	ldrh	r3, [r3, #0]
 800c262:	3301      	adds	r3, #1
 800c264:	085b      	lsrs	r3, r3, #1
 800c266:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c270:	1dbb      	adds	r3, r7, #6
 800c272:	881a      	ldrh	r2, [r3, #0]
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	18d3      	adds	r3, r2, r3
 800c278:	2280      	movs	r2, #128	@ 0x80
 800c27a:	00d2      	lsls	r2, r2, #3
 800c27c:	4694      	mov	ip, r2
 800c27e:	4463      	add	r3, ip
 800c280:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	627b      	str	r3, [r7, #36]	@ 0x24
 800c286:	e020      	b.n	800c2ca <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 800c288:	69fb      	ldr	r3, [r7, #28]
 800c28a:	781a      	ldrb	r2, [r3, #0]
 800c28c:	2112      	movs	r1, #18
 800c28e:	187b      	adds	r3, r7, r1
 800c290:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 800c292:	69fb      	ldr	r3, [r7, #28]
 800c294:	3301      	adds	r3, #1
 800c296:	781b      	ldrb	r3, [r3, #0]
 800c298:	021b      	lsls	r3, r3, #8
 800c29a:	b21a      	sxth	r2, r3
 800c29c:	187b      	adds	r3, r7, r1
 800c29e:	2000      	movs	r0, #0
 800c2a0:	5e1b      	ldrsh	r3, [r3, r0]
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	b21a      	sxth	r2, r3
 800c2a6:	187b      	adds	r3, r7, r1
 800c2a8:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 800c2aa:	6a3b      	ldr	r3, [r7, #32]
 800c2ac:	187a      	adds	r2, r7, r1
 800c2ae:	8812      	ldrh	r2, [r2, #0]
 800c2b0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800c2b2:	6a3b      	ldr	r3, [r7, #32]
 800c2b4:	3302      	adds	r3, #2
 800c2b6:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 800c2b8:	69fb      	ldr	r3, [r7, #28]
 800c2ba:	3301      	adds	r3, #1
 800c2bc:	61fb      	str	r3, [r7, #28]
    pBuf++;
 800c2be:	69fb      	ldr	r3, [r7, #28]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c2c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c6:	3b01      	subs	r3, #1
 800c2c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800c2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d1db      	bne.n	800c288 <USB_WritePMA+0x40>
  }
}
 800c2d0:	46c0      	nop			@ (mov r8, r8)
 800c2d2:	46c0      	nop			@ (mov r8, r8)
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	b00a      	add	sp, #40	@ 0x28
 800c2d8:	bd80      	pop	{r7, pc}

0800c2da <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800c2da:	b580      	push	{r7, lr}
 800c2dc:	b08a      	sub	sp, #40	@ 0x28
 800c2de:	af00      	add	r7, sp, #0
 800c2e0:	60f8      	str	r0, [r7, #12]
 800c2e2:	60b9      	str	r1, [r7, #8]
 800c2e4:	0019      	movs	r1, r3
 800c2e6:	1dbb      	adds	r3, r7, #6
 800c2e8:	801a      	strh	r2, [r3, #0]
 800c2ea:	1d3b      	adds	r3, r7, #4
 800c2ec:	1c0a      	adds	r2, r1, #0
 800c2ee:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800c2f0:	1d3b      	adds	r3, r7, #4
 800c2f2:	881b      	ldrh	r3, [r3, #0]
 800c2f4:	085b      	lsrs	r3, r3, #1
 800c2f6:	b29b      	uxth	r3, r3
 800c2f8:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800c2fe:	68bb      	ldr	r3, [r7, #8]
 800c300:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800c302:	1dbb      	adds	r3, r7, #6
 800c304:	881a      	ldrh	r2, [r3, #0]
 800c306:	697b      	ldr	r3, [r7, #20]
 800c308:	18d3      	adds	r3, r2, r3
 800c30a:	2280      	movs	r2, #128	@ 0x80
 800c30c:	00d2      	lsls	r2, r2, #3
 800c30e:	4694      	mov	ip, r2
 800c310:	4463      	add	r3, ip
 800c312:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 800c314:	69bb      	ldr	r3, [r7, #24]
 800c316:	627b      	str	r3, [r7, #36]	@ 0x24
 800c318:	e018      	b.n	800c34c <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 800c31a:	6a3b      	ldr	r3, [r7, #32]
 800c31c:	881b      	ldrh	r3, [r3, #0]
 800c31e:	b29b      	uxth	r3, r3
 800c320:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800c322:	6a3b      	ldr	r3, [r7, #32]
 800c324:	3302      	adds	r3, #2
 800c326:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c328:	693b      	ldr	r3, [r7, #16]
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	3301      	adds	r3, #1
 800c334:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 800c336:	693b      	ldr	r3, [r7, #16]
 800c338:	0a1b      	lsrs	r3, r3, #8
 800c33a:	b2da      	uxtb	r2, r3
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800c340:	69fb      	ldr	r3, [r7, #28]
 800c342:	3301      	adds	r3, #1
 800c344:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 800c346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c348:	3b01      	subs	r3, #1
 800c34a:	627b      	str	r3, [r7, #36]	@ 0x24
 800c34c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d1e3      	bne.n	800c31a <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 800c352:	1d3b      	adds	r3, r7, #4
 800c354:	881b      	ldrh	r3, [r3, #0]
 800c356:	2201      	movs	r2, #1
 800c358:	4013      	ands	r3, r2
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d007      	beq.n	800c370 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	881b      	ldrh	r3, [r3, #0]
 800c364:	b29b      	uxth	r3, r3
 800c366:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	b2da      	uxtb	r2, r3
 800c36c:	69fb      	ldr	r3, [r7, #28]
 800c36e:	701a      	strb	r2, [r3, #0]
  }
}
 800c370:	46c0      	nop			@ (mov r8, r8)
 800c372:	46bd      	mov	sp, r7
 800c374:	b00a      	add	sp, #40	@ 0x28
 800c376:	bd80      	pop	{r7, pc}

0800c378 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b084      	sub	sp, #16
 800c37c:	af00      	add	r7, sp, #0
 800c37e:	6078      	str	r0, [r7, #4]
 800c380:	000a      	movs	r2, r1
 800c382:	1cfb      	adds	r3, r7, #3
 800c384:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800c386:	230f      	movs	r3, #15
 800c388:	18fb      	adds	r3, r7, r3
 800c38a:	2200      	movs	r2, #0
 800c38c:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	7c1b      	ldrb	r3, [r3, #16]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d116      	bne.n	800c3c4 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c396:	2380      	movs	r3, #128	@ 0x80
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	2202      	movs	r2, #2
 800c39e:	2181      	movs	r1, #129	@ 0x81
 800c3a0:	f002 f825 	bl	800e3ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c3aa:	2380      	movs	r3, #128	@ 0x80
 800c3ac:	009b      	lsls	r3, r3, #2
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	2202      	movs	r2, #2
 800c3b2:	2101      	movs	r1, #1
 800c3b4:	f002 f81b 	bl	800e3ee <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c3b8:	687a      	ldr	r2, [r7, #4]
 800c3ba:	23b6      	movs	r3, #182	@ 0xb6
 800c3bc:	005b      	lsls	r3, r3, #1
 800c3be:	2101      	movs	r1, #1
 800c3c0:	50d1      	str	r1, [r2, r3]
 800c3c2:	e013      	b.n	800c3ec <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c3c4:	6878      	ldr	r0, [r7, #4]
 800c3c6:	2340      	movs	r3, #64	@ 0x40
 800c3c8:	2202      	movs	r2, #2
 800c3ca:	2181      	movs	r1, #129	@ 0x81
 800c3cc:	f002 f80f 	bl	800e3ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	2201      	movs	r2, #1
 800c3d4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c3d6:	6878      	ldr	r0, [r7, #4]
 800c3d8:	2340      	movs	r3, #64	@ 0x40
 800c3da:	2202      	movs	r2, #2
 800c3dc:	2101      	movs	r1, #1
 800c3de:	f002 f806 	bl	800e3ee <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	23b6      	movs	r3, #182	@ 0xb6
 800c3e6:	005b      	lsls	r3, r3, #1
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c3ec:	6878      	ldr	r0, [r7, #4]
 800c3ee:	2308      	movs	r3, #8
 800c3f0:	2203      	movs	r2, #3
 800c3f2:	2182      	movs	r1, #130	@ 0x82
 800c3f4:	f001 fffb 	bl	800e3ee <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2201      	movs	r2, #1
 800c3fc:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c3fe:	2387      	movs	r3, #135	@ 0x87
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	0018      	movs	r0, r3
 800c404:	f002 f98c 	bl	800e720 <USBD_static_malloc>
 800c408:	0001      	movs	r1, r0
 800c40a:	687a      	ldr	r2, [r7, #4]
 800c40c:	23ae      	movs	r3, #174	@ 0xae
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	23ae      	movs	r3, #174	@ 0xae
 800c416:	009b      	lsls	r3, r3, #2
 800c418:	58d3      	ldr	r3, [r2, r3]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d104      	bne.n	800c428 <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 800c41e:	230f      	movs	r3, #15
 800c420:	18fb      	adds	r3, r7, r3
 800c422:	2201      	movs	r2, #1
 800c424:	701a      	strb	r2, [r3, #0]
 800c426:	e02c      	b.n	800c482 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c428:	687a      	ldr	r2, [r7, #4]
 800c42a:	23ae      	movs	r3, #174	@ 0xae
 800c42c:	009b      	lsls	r3, r3, #2
 800c42e:	58d3      	ldr	r3, [r2, r3]
 800c430:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c432:	687a      	ldr	r2, [r7, #4]
 800c434:	23af      	movs	r3, #175	@ 0xaf
 800c436:	009b      	lsls	r3, r3, #2
 800c438:	58d3      	ldr	r3, [r2, r3]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c43e:	68ba      	ldr	r2, [r7, #8]
 800c440:	2385      	movs	r3, #133	@ 0x85
 800c442:	009b      	lsls	r3, r3, #2
 800c444:	2100      	movs	r1, #0
 800c446:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 800c448:	68ba      	ldr	r2, [r7, #8]
 800c44a:	2386      	movs	r3, #134	@ 0x86
 800c44c:	009b      	lsls	r3, r3, #2
 800c44e:	2100      	movs	r1, #0
 800c450:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	7c1b      	ldrb	r3, [r3, #16]
 800c456:	2b00      	cmp	r3, #0
 800c458:	d10a      	bne.n	800c470 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c45a:	68ba      	ldr	r2, [r7, #8]
 800c45c:	2381      	movs	r3, #129	@ 0x81
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	58d2      	ldr	r2, [r2, r3]
 800c462:	2380      	movs	r3, #128	@ 0x80
 800c464:	009b      	lsls	r3, r3, #2
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	2101      	movs	r1, #1
 800c46a:	f002 f90b 	bl	800e684 <USBD_LL_PrepareReceive>
 800c46e:	e008      	b.n	800c482 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800c470:	68ba      	ldr	r2, [r7, #8]
 800c472:	2381      	movs	r3, #129	@ 0x81
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	58d2      	ldr	r2, [r2, r3]
 800c478:	6878      	ldr	r0, [r7, #4]
 800c47a:	2340      	movs	r3, #64	@ 0x40
 800c47c:	2101      	movs	r1, #1
 800c47e:	f002 f901 	bl	800e684 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800c482:	230f      	movs	r3, #15
 800c484:	18fb      	adds	r3, r7, r3
 800c486:	781b      	ldrb	r3, [r3, #0]
}
 800c488:	0018      	movs	r0, r3
 800c48a:	46bd      	mov	sp, r7
 800c48c:	b004      	add	sp, #16
 800c48e:	bd80      	pop	{r7, pc}

0800c490 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b084      	sub	sp, #16
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
 800c498:	000a      	movs	r2, r1
 800c49a:	1cfb      	adds	r3, r7, #3
 800c49c:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 800c49e:	230f      	movs	r3, #15
 800c4a0:	18fb      	adds	r3, r7, r3
 800c4a2:	2200      	movs	r2, #0
 800c4a4:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	2181      	movs	r1, #129	@ 0x81
 800c4aa:	0018      	movs	r0, r3
 800c4ac:	f001 ffd6 	bl	800e45c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2200      	movs	r2, #0
 800c4b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2101      	movs	r1, #1
 800c4ba:	0018      	movs	r0, r3
 800c4bc:	f001 ffce 	bl	800e45c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800c4c0:	687a      	ldr	r2, [r7, #4]
 800c4c2:	23b6      	movs	r3, #182	@ 0xb6
 800c4c4:	005b      	lsls	r3, r3, #1
 800c4c6:	2100      	movs	r1, #0
 800c4c8:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	2182      	movs	r1, #130	@ 0x82
 800c4ce:	0018      	movs	r0, r3
 800c4d0:	f001 ffc4 	bl	800e45c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800c4da:	687a      	ldr	r2, [r7, #4]
 800c4dc:	23ae      	movs	r3, #174	@ 0xae
 800c4de:	009b      	lsls	r3, r3, #2
 800c4e0:	58d3      	ldr	r3, [r2, r3]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d011      	beq.n	800c50a <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	23af      	movs	r3, #175	@ 0xaf
 800c4ea:	009b      	lsls	r3, r3, #2
 800c4ec:	58d3      	ldr	r3, [r2, r3]
 800c4ee:	685b      	ldr	r3, [r3, #4]
 800c4f0:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800c4f2:	687a      	ldr	r2, [r7, #4]
 800c4f4:	23ae      	movs	r3, #174	@ 0xae
 800c4f6:	009b      	lsls	r3, r3, #2
 800c4f8:	58d3      	ldr	r3, [r2, r3]
 800c4fa:	0018      	movs	r0, r3
 800c4fc:	f002 f91c 	bl	800e738 <USBD_static_free>
    pdev->pClassData = NULL;
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	23ae      	movs	r3, #174	@ 0xae
 800c504:	009b      	lsls	r3, r3, #2
 800c506:	2100      	movs	r1, #0
 800c508:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 800c50a:	230f      	movs	r3, #15
 800c50c:	18fb      	adds	r3, r7, r3
 800c50e:	781b      	ldrb	r3, [r3, #0]
}
 800c510:	0018      	movs	r0, r3
 800c512:	46bd      	mov	sp, r7
 800c514:	b004      	add	sp, #16
 800c516:	bd80      	pop	{r7, pc}

0800c518 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b086      	sub	sp, #24
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	23ae      	movs	r3, #174	@ 0xae
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	58d3      	ldr	r3, [r2, r3]
 800c52a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800c52c:	230f      	movs	r3, #15
 800c52e:	18fb      	adds	r3, r7, r3
 800c530:	2200      	movs	r2, #0
 800c532:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 800c534:	230c      	movs	r3, #12
 800c536:	18fb      	adds	r3, r7, r3
 800c538:	2200      	movs	r2, #0
 800c53a:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 800c53c:	2317      	movs	r3, #23
 800c53e:	18fb      	adds	r3, r7, r3
 800c540:	2200      	movs	r2, #0
 800c542:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c544:	683b      	ldr	r3, [r7, #0]
 800c546:	781b      	ldrb	r3, [r3, #0]
 800c548:	001a      	movs	r2, r3
 800c54a:	2360      	movs	r3, #96	@ 0x60
 800c54c:	4013      	ands	r3, r2
 800c54e:	d03d      	beq.n	800c5cc <USBD_CDC_Setup+0xb4>
 800c550:	2b20      	cmp	r3, #32
 800c552:	d000      	beq.n	800c556 <USBD_CDC_Setup+0x3e>
 800c554:	e094      	b.n	800c680 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	88db      	ldrh	r3, [r3, #6]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d02b      	beq.n	800c5b6 <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 800c55e:	683b      	ldr	r3, [r7, #0]
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	b25b      	sxtb	r3, r3
 800c564:	2b00      	cmp	r3, #0
 800c566:	da12      	bge.n	800c58e <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c568:	687a      	ldr	r2, [r7, #4]
 800c56a:	23af      	movs	r3, #175	@ 0xaf
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	58d3      	ldr	r3, [r2, r3]
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	683a      	ldr	r2, [r7, #0]
 800c574:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800c576:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c578:	683a      	ldr	r2, [r7, #0]
 800c57a:	88d2      	ldrh	r2, [r2, #6]
 800c57c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c57e:	6939      	ldr	r1, [r7, #16]
 800c580:	683b      	ldr	r3, [r7, #0]
 800c582:	88da      	ldrh	r2, [r3, #6]
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	0018      	movs	r0, r3
 800c588:	f001 fb79 	bl	800dc7e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800c58c:	e083      	b.n	800c696 <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 800c58e:	683b      	ldr	r3, [r7, #0]
 800c590:	7859      	ldrb	r1, [r3, #1]
 800c592:	693a      	ldr	r2, [r7, #16]
 800c594:	2380      	movs	r3, #128	@ 0x80
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 800c59a:	683b      	ldr	r3, [r7, #0]
 800c59c:	88db      	ldrh	r3, [r3, #6]
 800c59e:	b2d9      	uxtb	r1, r3
 800c5a0:	693b      	ldr	r3, [r7, #16]
 800c5a2:	4a40      	ldr	r2, [pc, #256]	@ (800c6a4 <USBD_CDC_Setup+0x18c>)
 800c5a4:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800c5a6:	6939      	ldr	r1, [r7, #16]
 800c5a8:	683b      	ldr	r3, [r7, #0]
 800c5aa:	88da      	ldrh	r2, [r3, #6]
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	0018      	movs	r0, r3
 800c5b0:	f001 fb98 	bl	800dce4 <USBD_CtlPrepareRx>
      break;
 800c5b4:	e06f      	b.n	800c696 <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800c5b6:	687a      	ldr	r2, [r7, #4]
 800c5b8:	23af      	movs	r3, #175	@ 0xaf
 800c5ba:	009b      	lsls	r3, r3, #2
 800c5bc:	58d3      	ldr	r3, [r2, r3]
 800c5be:	689b      	ldr	r3, [r3, #8]
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	7850      	ldrb	r0, [r2, #1]
 800c5c4:	6839      	ldr	r1, [r7, #0]
 800c5c6:	2200      	movs	r2, #0
 800c5c8:	4798      	blx	r3
      break;
 800c5ca:	e064      	b.n	800c696 <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c5cc:	683b      	ldr	r3, [r7, #0]
 800c5ce:	785b      	ldrb	r3, [r3, #1]
 800c5d0:	2b0b      	cmp	r3, #11
 800c5d2:	d037      	beq.n	800c644 <USBD_CDC_Setup+0x12c>
 800c5d4:	dc47      	bgt.n	800c666 <USBD_CDC_Setup+0x14e>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d002      	beq.n	800c5e0 <USBD_CDC_Setup+0xc8>
 800c5da:	2b0a      	cmp	r3, #10
 800c5dc:	d019      	beq.n	800c612 <USBD_CDC_Setup+0xfa>
 800c5de:	e042      	b.n	800c666 <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5e0:	687a      	ldr	r2, [r7, #4]
 800c5e2:	23a7      	movs	r3, #167	@ 0xa7
 800c5e4:	009b      	lsls	r3, r3, #2
 800c5e6:	5cd3      	ldrb	r3, [r2, r3]
 800c5e8:	2b03      	cmp	r3, #3
 800c5ea:	d107      	bne.n	800c5fc <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800c5ec:	230c      	movs	r3, #12
 800c5ee:	18f9      	adds	r1, r7, r3
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	0018      	movs	r0, r3
 800c5f6:	f001 fb42 	bl	800dc7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c5fa:	e040      	b.n	800c67e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c5fc:	683a      	ldr	r2, [r7, #0]
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	0011      	movs	r1, r2
 800c602:	0018      	movs	r0, r3
 800c604:	f001 fabd 	bl	800db82 <USBD_CtlError>
            ret = USBD_FAIL;
 800c608:	2317      	movs	r3, #23
 800c60a:	18fb      	adds	r3, r7, r3
 800c60c:	2202      	movs	r2, #2
 800c60e:	701a      	strb	r2, [r3, #0]
          break;
 800c610:	e035      	b.n	800c67e <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	23a7      	movs	r3, #167	@ 0xa7
 800c616:	009b      	lsls	r3, r3, #2
 800c618:	5cd3      	ldrb	r3, [r2, r3]
 800c61a:	2b03      	cmp	r3, #3
 800c61c:	d107      	bne.n	800c62e <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800c61e:	230f      	movs	r3, #15
 800c620:	18f9      	adds	r1, r7, r3
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2201      	movs	r2, #1
 800c626:	0018      	movs	r0, r3
 800c628:	f001 fb29 	bl	800dc7e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c62c:	e027      	b.n	800c67e <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 800c62e:	683a      	ldr	r2, [r7, #0]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	0011      	movs	r1, r2
 800c634:	0018      	movs	r0, r3
 800c636:	f001 faa4 	bl	800db82 <USBD_CtlError>
            ret = USBD_FAIL;
 800c63a:	2317      	movs	r3, #23
 800c63c:	18fb      	adds	r3, r7, r3
 800c63e:	2202      	movs	r2, #2
 800c640:	701a      	strb	r2, [r3, #0]
          break;
 800c642:	e01c      	b.n	800c67e <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c644:	687a      	ldr	r2, [r7, #4]
 800c646:	23a7      	movs	r3, #167	@ 0xa7
 800c648:	009b      	lsls	r3, r3, #2
 800c64a:	5cd3      	ldrb	r3, [r2, r3]
 800c64c:	2b03      	cmp	r3, #3
 800c64e:	d015      	beq.n	800c67c <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 800c650:	683a      	ldr	r2, [r7, #0]
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	0011      	movs	r1, r2
 800c656:	0018      	movs	r0, r3
 800c658:	f001 fa93 	bl	800db82 <USBD_CtlError>
            ret = USBD_FAIL;
 800c65c:	2317      	movs	r3, #23
 800c65e:	18fb      	adds	r3, r7, r3
 800c660:	2202      	movs	r2, #2
 800c662:	701a      	strb	r2, [r3, #0]
          }
          break;
 800c664:	e00a      	b.n	800c67c <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 800c666:	683a      	ldr	r2, [r7, #0]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	0011      	movs	r1, r2
 800c66c:	0018      	movs	r0, r3
 800c66e:	f001 fa88 	bl	800db82 <USBD_CtlError>
          ret = USBD_FAIL;
 800c672:	2317      	movs	r3, #23
 800c674:	18fb      	adds	r3, r7, r3
 800c676:	2202      	movs	r2, #2
 800c678:	701a      	strb	r2, [r3, #0]
          break;
 800c67a:	e000      	b.n	800c67e <USBD_CDC_Setup+0x166>
          break;
 800c67c:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800c67e:	e00a      	b.n	800c696 <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 800c680:	683a      	ldr	r2, [r7, #0]
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	0011      	movs	r1, r2
 800c686:	0018      	movs	r0, r3
 800c688:	f001 fa7b 	bl	800db82 <USBD_CtlError>
      ret = USBD_FAIL;
 800c68c:	2317      	movs	r3, #23
 800c68e:	18fb      	adds	r3, r7, r3
 800c690:	2202      	movs	r2, #2
 800c692:	701a      	strb	r2, [r3, #0]
      break;
 800c694:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800c696:	2317      	movs	r3, #23
 800c698:	18fb      	adds	r3, r7, r3
 800c69a:	781b      	ldrb	r3, [r3, #0]
}
 800c69c:	0018      	movs	r0, r3
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	b006      	add	sp, #24
 800c6a2:	bd80      	pop	{r7, pc}
 800c6a4:	00000201 	.word	0x00000201

0800c6a8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c6a8:	b580      	push	{r7, lr}
 800c6aa:	b084      	sub	sp, #16
 800c6ac:	af00      	add	r7, sp, #0
 800c6ae:	6078      	str	r0, [r7, #4]
 800c6b0:	000a      	movs	r2, r1
 800c6b2:	1cfb      	adds	r3, r7, #3
 800c6b4:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800c6b6:	687a      	ldr	r2, [r7, #4]
 800c6b8:	23ae      	movs	r3, #174	@ 0xae
 800c6ba:	009b      	lsls	r3, r3, #2
 800c6bc:	58d3      	ldr	r3, [r2, r3]
 800c6be:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800c6c0:	687a      	ldr	r2, [r7, #4]
 800c6c2:	23b0      	movs	r3, #176	@ 0xb0
 800c6c4:	009b      	lsls	r3, r3, #2
 800c6c6:	58d3      	ldr	r3, [r2, r3]
 800c6c8:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	23ae      	movs	r3, #174	@ 0xae
 800c6ce:	009b      	lsls	r3, r3, #2
 800c6d0:	58d3      	ldr	r3, [r2, r3]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d03e      	beq.n	800c754 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800c6d6:	1cfb      	adds	r3, r7, #3
 800c6d8:	781a      	ldrb	r2, [r3, #0]
 800c6da:	6879      	ldr	r1, [r7, #4]
 800c6dc:	0013      	movs	r3, r2
 800c6de:	009b      	lsls	r3, r3, #2
 800c6e0:	189b      	adds	r3, r3, r2
 800c6e2:	009b      	lsls	r3, r3, #2
 800c6e4:	18cb      	adds	r3, r1, r3
 800c6e6:	331c      	adds	r3, #28
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d02b      	beq.n	800c746 <USBD_CDC_DataIn+0x9e>
 800c6ee:	1cfb      	adds	r3, r7, #3
 800c6f0:	781a      	ldrb	r2, [r3, #0]
 800c6f2:	6879      	ldr	r1, [r7, #4]
 800c6f4:	0013      	movs	r3, r2
 800c6f6:	009b      	lsls	r3, r3, #2
 800c6f8:	189b      	adds	r3, r3, r2
 800c6fa:	009b      	lsls	r3, r3, #2
 800c6fc:	18cb      	adds	r3, r1, r3
 800c6fe:	331c      	adds	r3, #28
 800c700:	6818      	ldr	r0, [r3, #0]
 800c702:	1cfb      	adds	r3, r7, #3
 800c704:	781a      	ldrb	r2, [r3, #0]
 800c706:	68b9      	ldr	r1, [r7, #8]
 800c708:	0013      	movs	r3, r2
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	189b      	adds	r3, r3, r2
 800c70e:	00db      	lsls	r3, r3, #3
 800c710:	18cb      	adds	r3, r1, r3
 800c712:	3338      	adds	r3, #56	@ 0x38
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	0019      	movs	r1, r3
 800c718:	f7f3 fd7c 	bl	8000214 <__aeabi_uidivmod>
 800c71c:	1e0b      	subs	r3, r1, #0
 800c71e:	d112      	bne.n	800c746 <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800c720:	1cfb      	adds	r3, r7, #3
 800c722:	781a      	ldrb	r2, [r3, #0]
 800c724:	6879      	ldr	r1, [r7, #4]
 800c726:	0013      	movs	r3, r2
 800c728:	009b      	lsls	r3, r3, #2
 800c72a:	189b      	adds	r3, r3, r2
 800c72c:	009b      	lsls	r3, r3, #2
 800c72e:	18cb      	adds	r3, r1, r3
 800c730:	331c      	adds	r3, #28
 800c732:	2200      	movs	r2, #0
 800c734:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c736:	1cfb      	adds	r3, r7, #3
 800c738:	7819      	ldrb	r1, [r3, #0]
 800c73a:	6878      	ldr	r0, [r7, #4]
 800c73c:	2300      	movs	r3, #0
 800c73e:	2200      	movs	r2, #0
 800c740:	f001 ff69 	bl	800e616 <USBD_LL_Transmit>
 800c744:	e004      	b.n	800c750 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 800c746:	68fa      	ldr	r2, [r7, #12]
 800c748:	2385      	movs	r3, #133	@ 0x85
 800c74a:	009b      	lsls	r3, r3, #2
 800c74c:	2100      	movs	r1, #0
 800c74e:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 800c750:	2300      	movs	r3, #0
 800c752:	e000      	b.n	800c756 <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 800c754:	2302      	movs	r3, #2
  }
}
 800c756:	0018      	movs	r0, r3
 800c758:	46bd      	mov	sp, r7
 800c75a:	b004      	add	sp, #16
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	000a      	movs	r2, r1
 800c768:	1cfb      	adds	r3, r7, #3
 800c76a:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c76c:	687a      	ldr	r2, [r7, #4]
 800c76e:	23ae      	movs	r3, #174	@ 0xae
 800c770:	009b      	lsls	r3, r3, #2
 800c772:	58d3      	ldr	r3, [r2, r3]
 800c774:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c776:	1cfb      	adds	r3, r7, #3
 800c778:	781a      	ldrb	r2, [r3, #0]
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	0011      	movs	r1, r2
 800c77e:	0018      	movs	r0, r3
 800c780:	f001 ffb7 	bl	800e6f2 <USBD_LL_GetRxDataSize>
 800c784:	0001      	movs	r1, r0
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	2383      	movs	r3, #131	@ 0x83
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800c78e:	687a      	ldr	r2, [r7, #4]
 800c790:	23ae      	movs	r3, #174	@ 0xae
 800c792:	009b      	lsls	r3, r3, #2
 800c794:	58d3      	ldr	r3, [r2, r3]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d011      	beq.n	800c7be <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c79a:	687a      	ldr	r2, [r7, #4]
 800c79c:	23af      	movs	r3, #175	@ 0xaf
 800c79e:	009b      	lsls	r3, r3, #2
 800c7a0:	58d3      	ldr	r3, [r2, r3]
 800c7a2:	68da      	ldr	r2, [r3, #12]
 800c7a4:	68f9      	ldr	r1, [r7, #12]
 800c7a6:	2381      	movs	r3, #129	@ 0x81
 800c7a8:	009b      	lsls	r3, r3, #2
 800c7aa:	58c8      	ldr	r0, [r1, r3]
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	2183      	movs	r1, #131	@ 0x83
 800c7b0:	0089      	lsls	r1, r1, #2
 800c7b2:	468c      	mov	ip, r1
 800c7b4:	4463      	add	r3, ip
 800c7b6:	0019      	movs	r1, r3
 800c7b8:	4790      	blx	r2

    return USBD_OK;
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	e000      	b.n	800c7c0 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 800c7be:	2302      	movs	r3, #2
  }
}
 800c7c0:	0018      	movs	r0, r3
 800c7c2:	46bd      	mov	sp, r7
 800c7c4:	b004      	add	sp, #16
 800c7c6:	bd80      	pop	{r7, pc}

0800c7c8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c7c8:	b590      	push	{r4, r7, lr}
 800c7ca:	b085      	sub	sp, #20
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	23ae      	movs	r3, #174	@ 0xae
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	58d3      	ldr	r3, [r2, r3]
 800c7d8:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c7da:	687a      	ldr	r2, [r7, #4]
 800c7dc:	23af      	movs	r3, #175	@ 0xaf
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	58d3      	ldr	r3, [r2, r3]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d018      	beq.n	800c818 <USBD_CDC_EP0_RxReady+0x50>
 800c7e6:	68fa      	ldr	r2, [r7, #12]
 800c7e8:	2380      	movs	r3, #128	@ 0x80
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	5cd3      	ldrb	r3, [r2, r3]
 800c7ee:	2bff      	cmp	r3, #255	@ 0xff
 800c7f0:	d012      	beq.n	800c818 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	23af      	movs	r3, #175	@ 0xaf
 800c7f6:	009b      	lsls	r3, r3, #2
 800c7f8:	58d3      	ldr	r3, [r2, r3]
 800c7fa:	689b      	ldr	r3, [r3, #8]
 800c7fc:	68f9      	ldr	r1, [r7, #12]
 800c7fe:	2280      	movs	r2, #128	@ 0x80
 800c800:	0092      	lsls	r2, r2, #2
 800c802:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 800c804:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800c806:	68fa      	ldr	r2, [r7, #12]
 800c808:	4c06      	ldr	r4, [pc, #24]	@ (800c824 <USBD_CDC_EP0_RxReady+0x5c>)
 800c80a:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800c80c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c80e:	68fa      	ldr	r2, [r7, #12]
 800c810:	2380      	movs	r3, #128	@ 0x80
 800c812:	009b      	lsls	r3, r3, #2
 800c814:	21ff      	movs	r1, #255	@ 0xff
 800c816:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	0018      	movs	r0, r3
 800c81c:	46bd      	mov	sp, r7
 800c81e:	b005      	add	sp, #20
 800c820:	bd90      	pop	{r4, r7, pc}
 800c822:	46c0      	nop			@ (mov r8, r8)
 800c824:	00000201 	.word	0x00000201

0800c828 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c828:	b580      	push	{r7, lr}
 800c82a:	b082      	sub	sp, #8
 800c82c:	af00      	add	r7, sp, #0
 800c82e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	2243      	movs	r2, #67	@ 0x43
 800c834:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800c836:	4b02      	ldr	r3, [pc, #8]	@ (800c840 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 800c838:	0018      	movs	r0, r3
 800c83a:	46bd      	mov	sp, r7
 800c83c:	b002      	add	sp, #8
 800c83e:	bd80      	pop	{r7, pc}
 800c840:	200000a8 	.word	0x200000a8

0800c844 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b082      	sub	sp, #8
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2243      	movs	r2, #67	@ 0x43
 800c850:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800c852:	4b02      	ldr	r3, [pc, #8]	@ (800c85c <USBD_CDC_GetHSCfgDesc+0x18>)
}
 800c854:	0018      	movs	r0, r3
 800c856:	46bd      	mov	sp, r7
 800c858:	b002      	add	sp, #8
 800c85a:	bd80      	pop	{r7, pc}
 800c85c:	20000064 	.word	0x20000064

0800c860 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c860:	b580      	push	{r7, lr}
 800c862:	b082      	sub	sp, #8
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2243      	movs	r2, #67	@ 0x43
 800c86c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800c86e:	4b02      	ldr	r3, [pc, #8]	@ (800c878 <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 800c870:	0018      	movs	r0, r3
 800c872:	46bd      	mov	sp, r7
 800c874:	b002      	add	sp, #8
 800c876:	bd80      	pop	{r7, pc}
 800c878:	200000ec 	.word	0x200000ec

0800c87c <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c87c:	b580      	push	{r7, lr}
 800c87e:	b082      	sub	sp, #8
 800c880:	af00      	add	r7, sp, #0
 800c882:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	220a      	movs	r2, #10
 800c888:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800c88a:	4b02      	ldr	r3, [pc, #8]	@ (800c894 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 800c88c:	0018      	movs	r0, r3
 800c88e:	46bd      	mov	sp, r7
 800c890:	b002      	add	sp, #8
 800c892:	bd80      	pop	{r7, pc}
 800c894:	20000020 	.word	0x20000020

0800c898 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b084      	sub	sp, #16
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
 800c8a0:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800c8a2:	200f      	movs	r0, #15
 800c8a4:	183b      	adds	r3, r7, r0
 800c8a6:	2202      	movs	r2, #2
 800c8a8:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d007      	beq.n	800c8c0 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 800c8b0:	687a      	ldr	r2, [r7, #4]
 800c8b2:	23af      	movs	r3, #175	@ 0xaf
 800c8b4:	009b      	lsls	r3, r3, #2
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 800c8ba:	183b      	adds	r3, r7, r0
 800c8bc:	2200      	movs	r2, #0
 800c8be:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 800c8c0:	230f      	movs	r3, #15
 800c8c2:	18fb      	adds	r3, r7, r3
 800c8c4:	781b      	ldrb	r3, [r3, #0]
}
 800c8c6:	0018      	movs	r0, r3
 800c8c8:	46bd      	mov	sp, r7
 800c8ca:	b004      	add	sp, #16
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b086      	sub	sp, #24
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	60f8      	str	r0, [r7, #12]
 800c8d6:	60b9      	str	r1, [r7, #8]
 800c8d8:	1dbb      	adds	r3, r7, #6
 800c8da:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c8dc:	68fa      	ldr	r2, [r7, #12]
 800c8de:	23ae      	movs	r3, #174	@ 0xae
 800c8e0:	009b      	lsls	r3, r3, #2
 800c8e2:	58d3      	ldr	r3, [r2, r3]
 800c8e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800c8e6:	697a      	ldr	r2, [r7, #20]
 800c8e8:	2382      	movs	r3, #130	@ 0x82
 800c8ea:	009b      	lsls	r3, r3, #2
 800c8ec:	68b9      	ldr	r1, [r7, #8]
 800c8ee:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 800c8f0:	1dbb      	adds	r3, r7, #6
 800c8f2:	8819      	ldrh	r1, [r3, #0]
 800c8f4:	697a      	ldr	r2, [r7, #20]
 800c8f6:	2384      	movs	r3, #132	@ 0x84
 800c8f8:	009b      	lsls	r3, r3, #2
 800c8fa:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	0018      	movs	r0, r3
 800c900:	46bd      	mov	sp, r7
 800c902:	b006      	add	sp, #24
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c910:	687a      	ldr	r2, [r7, #4]
 800c912:	23ae      	movs	r3, #174	@ 0xae
 800c914:	009b      	lsls	r3, r3, #2
 800c916:	58d3      	ldr	r3, [r2, r3]
 800c918:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800c91a:	68fa      	ldr	r2, [r7, #12]
 800c91c:	2381      	movs	r3, #129	@ 0x81
 800c91e:	009b      	lsls	r3, r3, #2
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 800c924:	2300      	movs	r3, #0
}
 800c926:	0018      	movs	r0, r3
 800c928:	46bd      	mov	sp, r7
 800c92a:	b004      	add	sp, #16
 800c92c:	bd80      	pop	{r7, pc}

0800c92e <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c92e:	b580      	push	{r7, lr}
 800c930:	b084      	sub	sp, #16
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800c936:	687a      	ldr	r2, [r7, #4]
 800c938:	23ae      	movs	r3, #174	@ 0xae
 800c93a:	009b      	lsls	r3, r3, #2
 800c93c:	58d3      	ldr	r3, [r2, r3]
 800c93e:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800c940:	687a      	ldr	r2, [r7, #4]
 800c942:	23ae      	movs	r3, #174	@ 0xae
 800c944:	009b      	lsls	r3, r3, #2
 800c946:	58d3      	ldr	r3, [r2, r3]
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d019      	beq.n	800c980 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7c1b      	ldrb	r3, [r3, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d10a      	bne.n	800c96a <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c954:	68fa      	ldr	r2, [r7, #12]
 800c956:	2381      	movs	r3, #129	@ 0x81
 800c958:	009b      	lsls	r3, r3, #2
 800c95a:	58d2      	ldr	r2, [r2, r3]
 800c95c:	2380      	movs	r3, #128	@ 0x80
 800c95e:	009b      	lsls	r3, r3, #2
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	2101      	movs	r1, #1
 800c964:	f001 fe8e 	bl	800e684 <USBD_LL_PrepareReceive>
 800c968:	e008      	b.n	800c97c <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	2381      	movs	r3, #129	@ 0x81
 800c96e:	009b      	lsls	r3, r3, #2
 800c970:	58d2      	ldr	r2, [r2, r3]
 800c972:	6878      	ldr	r0, [r7, #4]
 800c974:	2340      	movs	r3, #64	@ 0x40
 800c976:	2101      	movs	r1, #1
 800c978:	f001 fe84 	bl	800e684 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800c97c:	2300      	movs	r3, #0
 800c97e:	e000      	b.n	800c982 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 800c980:	2302      	movs	r3, #2
  }
}
 800c982:	0018      	movs	r0, r3
 800c984:	46bd      	mov	sp, r7
 800c986:	b004      	add	sp, #16
 800c988:	bd80      	pop	{r7, pc}

0800c98a <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c98a:	b580      	push	{r7, lr}
 800c98c:	b084      	sub	sp, #16
 800c98e:	af00      	add	r7, sp, #0
 800c990:	60f8      	str	r0, [r7, #12]
 800c992:	60b9      	str	r1, [r7, #8]
 800c994:	1dfb      	adds	r3, r7, #7
 800c996:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c998:	68fb      	ldr	r3, [r7, #12]
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d101      	bne.n	800c9a2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800c99e:	2302      	movs	r3, #2
 800c9a0:	e020      	b.n	800c9e4 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800c9a2:	68fa      	ldr	r2, [r7, #12]
 800c9a4:	23ad      	movs	r3, #173	@ 0xad
 800c9a6:	009b      	lsls	r3, r3, #2
 800c9a8:	58d3      	ldr	r3, [r2, r3]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d004      	beq.n	800c9b8 <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 800c9ae:	68fa      	ldr	r2, [r7, #12]
 800c9b0:	23ad      	movs	r3, #173	@ 0xad
 800c9b2:	009b      	lsls	r3, r3, #2
 800c9b4:	2100      	movs	r1, #0
 800c9b6:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d004      	beq.n	800c9c8 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c9be:	68fa      	ldr	r2, [r7, #12]
 800c9c0:	23ac      	movs	r3, #172	@ 0xac
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	68b9      	ldr	r1, [r7, #8]
 800c9c6:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	23a7      	movs	r3, #167	@ 0xa7
 800c9cc:	009b      	lsls	r3, r3, #2
 800c9ce:	2101      	movs	r1, #1
 800c9d0:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	1dfa      	adds	r2, r7, #7
 800c9d6:	7812      	ldrb	r2, [r2, #0]
 800c9d8:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	0018      	movs	r0, r3
 800c9de:	f001 fc7d 	bl	800e2dc <USBD_LL_Init>

  return USBD_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	0018      	movs	r0, r3
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	b004      	add	sp, #16
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
 800c9f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800c9f6:	200f      	movs	r0, #15
 800c9f8:	183b      	adds	r3, r7, r0
 800c9fa:	2200      	movs	r2, #0
 800c9fc:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d008      	beq.n	800ca16 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	23ad      	movs	r3, #173	@ 0xad
 800ca08:	009b      	lsls	r3, r3, #2
 800ca0a:	6839      	ldr	r1, [r7, #0]
 800ca0c:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 800ca0e:	183b      	adds	r3, r7, r0
 800ca10:	2200      	movs	r2, #0
 800ca12:	701a      	strb	r2, [r3, #0]
 800ca14:	e003      	b.n	800ca1e <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800ca16:	230f      	movs	r3, #15
 800ca18:	18fb      	adds	r3, r7, r3
 800ca1a:	2202      	movs	r2, #2
 800ca1c:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800ca1e:	230f      	movs	r3, #15
 800ca20:	18fb      	adds	r3, r7, r3
 800ca22:	781b      	ldrb	r3, [r3, #0]
}
 800ca24:	0018      	movs	r0, r3
 800ca26:	46bd      	mov	sp, r7
 800ca28:	b004      	add	sp, #16
 800ca2a:	bd80      	pop	{r7, pc}

0800ca2c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b082      	sub	sp, #8
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	0018      	movs	r0, r3
 800ca38:	f001 fcb4 	bl	800e3a4 <USBD_LL_Start>

  return USBD_OK;
 800ca3c:	2300      	movs	r3, #0
}
 800ca3e:	0018      	movs	r0, r3
 800ca40:	46bd      	mov	sp, r7
 800ca42:	b002      	add	sp, #8
 800ca44:	bd80      	pop	{r7, pc}

0800ca46 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800ca46:	b580      	push	{r7, lr}
 800ca48:	b082      	sub	sp, #8
 800ca4a:	af00      	add	r7, sp, #0
 800ca4c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	0018      	movs	r0, r3
 800ca52:	46bd      	mov	sp, r7
 800ca54:	b002      	add	sp, #8
 800ca56:	bd80      	pop	{r7, pc}

0800ca58 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800ca58:	b590      	push	{r4, r7, lr}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
 800ca60:	000a      	movs	r2, r1
 800ca62:	1cfb      	adds	r3, r7, #3
 800ca64:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800ca66:	240f      	movs	r4, #15
 800ca68:	193b      	adds	r3, r7, r4
 800ca6a:	2202      	movs	r2, #2
 800ca6c:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 800ca6e:	687a      	ldr	r2, [r7, #4]
 800ca70:	23ad      	movs	r3, #173	@ 0xad
 800ca72:	009b      	lsls	r3, r3, #2
 800ca74:	58d3      	ldr	r3, [r2, r3]
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d00e      	beq.n	800ca98 <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	23ad      	movs	r3, #173	@ 0xad
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	58d3      	ldr	r3, [r2, r3]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	1cfa      	adds	r2, r7, #3
 800ca86:	7811      	ldrb	r1, [r2, #0]
 800ca88:	687a      	ldr	r2, [r7, #4]
 800ca8a:	0010      	movs	r0, r2
 800ca8c:	4798      	blx	r3
 800ca8e:	1e03      	subs	r3, r0, #0
 800ca90:	d102      	bne.n	800ca98 <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 800ca92:	193b      	adds	r3, r7, r4
 800ca94:	2200      	movs	r2, #0
 800ca96:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 800ca98:	230f      	movs	r3, #15
 800ca9a:	18fb      	adds	r3, r7, r3
 800ca9c:	781b      	ldrb	r3, [r3, #0]
}
 800ca9e:	0018      	movs	r0, r3
 800caa0:	46bd      	mov	sp, r7
 800caa2:	b005      	add	sp, #20
 800caa4:	bd90      	pop	{r4, r7, pc}

0800caa6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b082      	sub	sp, #8
 800caaa:	af00      	add	r7, sp, #0
 800caac:	6078      	str	r0, [r7, #4]
 800caae:	000a      	movs	r2, r1
 800cab0:	1cfb      	adds	r3, r7, #3
 800cab2:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cab4:	687a      	ldr	r2, [r7, #4]
 800cab6:	23ad      	movs	r3, #173	@ 0xad
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	58d3      	ldr	r3, [r2, r3]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	1cfa      	adds	r2, r7, #3
 800cac0:	7811      	ldrb	r1, [r2, #0]
 800cac2:	687a      	ldr	r2, [r7, #4]
 800cac4:	0010      	movs	r0, r2
 800cac6:	4798      	blx	r3

  return USBD_OK;
 800cac8:	2300      	movs	r3, #0
}
 800caca:	0018      	movs	r0, r3
 800cacc:	46bd      	mov	sp, r7
 800cace:	b002      	add	sp, #8
 800cad0:	bd80      	pop	{r7, pc}
	...

0800cad4 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800cad4:	b580      	push	{r7, lr}
 800cad6:	b082      	sub	sp, #8
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]
 800cadc:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	22aa      	movs	r2, #170	@ 0xaa
 800cae2:	0092      	lsls	r2, r2, #2
 800cae4:	4694      	mov	ip, r2
 800cae6:	4463      	add	r3, ip
 800cae8:	683a      	ldr	r2, [r7, #0]
 800caea:	0011      	movs	r1, r2
 800caec:	0018      	movs	r0, r3
 800caee:	f001 f810 	bl	800db12 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800caf2:	687a      	ldr	r2, [r7, #4]
 800caf4:	23a5      	movs	r3, #165	@ 0xa5
 800caf6:	009b      	lsls	r3, r3, #2
 800caf8:	2101      	movs	r1, #1
 800cafa:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	4a23      	ldr	r2, [pc, #140]	@ (800cb8c <USBD_LL_SetupStage+0xb8>)
 800cb00:	5a9b      	ldrh	r3, [r3, r2]
 800cb02:	0019      	movs	r1, r3
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	23a6      	movs	r3, #166	@ 0xa6
 800cb08:	009b      	lsls	r3, r3, #2
 800cb0a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	23aa      	movs	r3, #170	@ 0xaa
 800cb10:	009b      	lsls	r3, r3, #2
 800cb12:	5cd3      	ldrb	r3, [r2, r3]
 800cb14:	001a      	movs	r2, r3
 800cb16:	231f      	movs	r3, #31
 800cb18:	4013      	ands	r3, r2
 800cb1a:	2b02      	cmp	r3, #2
 800cb1c:	d019      	beq.n	800cb52 <USBD_LL_SetupStage+0x7e>
 800cb1e:	d822      	bhi.n	800cb66 <USBD_LL_SetupStage+0x92>
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <USBD_LL_SetupStage+0x56>
 800cb24:	2b01      	cmp	r3, #1
 800cb26:	d00a      	beq.n	800cb3e <USBD_LL_SetupStage+0x6a>
 800cb28:	e01d      	b.n	800cb66 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	22aa      	movs	r2, #170	@ 0xaa
 800cb2e:	0092      	lsls	r2, r2, #2
 800cb30:	189a      	adds	r2, r3, r2
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	0011      	movs	r1, r2
 800cb36:	0018      	movs	r0, r3
 800cb38:	f000 fa10 	bl	800cf5c <USBD_StdDevReq>
      break;
 800cb3c:	e020      	b.n	800cb80 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	22aa      	movs	r2, #170	@ 0xaa
 800cb42:	0092      	lsls	r2, r2, #2
 800cb44:	189a      	adds	r2, r3, r2
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	0011      	movs	r1, r2
 800cb4a:	0018      	movs	r0, r3
 800cb4c:	f000 fa78 	bl	800d040 <USBD_StdItfReq>
      break;
 800cb50:	e016      	b.n	800cb80 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	22aa      	movs	r2, #170	@ 0xaa
 800cb56:	0092      	lsls	r2, r2, #2
 800cb58:	189a      	adds	r2, r3, r2
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	0011      	movs	r1, r2
 800cb5e:	0018      	movs	r0, r3
 800cb60:	f000 fac5 	bl	800d0ee <USBD_StdEPReq>
      break;
 800cb64:	e00c      	b.n	800cb80 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cb66:	687a      	ldr	r2, [r7, #4]
 800cb68:	23aa      	movs	r3, #170	@ 0xaa
 800cb6a:	009b      	lsls	r3, r3, #2
 800cb6c:	5cd3      	ldrb	r3, [r2, r3]
 800cb6e:	227f      	movs	r2, #127	@ 0x7f
 800cb70:	4393      	bics	r3, r2
 800cb72:	b2da      	uxtb	r2, r3
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	0011      	movs	r1, r2
 800cb78:	0018      	movs	r0, r3
 800cb7a:	f001 fc9a 	bl	800e4b2 <USBD_LL_StallEP>
      break;
 800cb7e:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800cb80:	2300      	movs	r3, #0
}
 800cb82:	0018      	movs	r0, r3
 800cb84:	46bd      	mov	sp, r7
 800cb86:	b002      	add	sp, #8
 800cb88:	bd80      	pop	{r7, pc}
 800cb8a:	46c0      	nop			@ (mov r8, r8)
 800cb8c:	000002ae 	.word	0x000002ae

0800cb90 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cb90:	b580      	push	{r7, lr}
 800cb92:	b086      	sub	sp, #24
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	607a      	str	r2, [r7, #4]
 800cb9a:	200b      	movs	r0, #11
 800cb9c:	183b      	adds	r3, r7, r0
 800cb9e:	1c0a      	adds	r2, r1, #0
 800cba0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cba2:	183b      	adds	r3, r7, r0
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d154      	bne.n	800cc54 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	3355      	adds	r3, #85	@ 0x55
 800cbae:	33ff      	adds	r3, #255	@ 0xff
 800cbb0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cbb2:	68fa      	ldr	r2, [r7, #12]
 800cbb4:	23a5      	movs	r3, #165	@ 0xa5
 800cbb6:	009b      	lsls	r3, r3, #2
 800cbb8:	58d3      	ldr	r3, [r2, r3]
 800cbba:	2b03      	cmp	r3, #3
 800cbbc:	d139      	bne.n	800cc32 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	68da      	ldr	r2, [r3, #12]
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	691b      	ldr	r3, [r3, #16]
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d919      	bls.n	800cbfe <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	68da      	ldr	r2, [r3, #12]
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	691b      	ldr	r3, [r3, #16]
 800cbd2:	1ad2      	subs	r2, r2, r3
 800cbd4:	697b      	ldr	r3, [r7, #20]
 800cbd6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	68da      	ldr	r2, [r3, #12]
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cbe0:	429a      	cmp	r2, r3
 800cbe2:	d203      	bcs.n	800cbec <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cbe4:	697b      	ldr	r3, [r7, #20]
 800cbe6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 800cbe8:	b29b      	uxth	r3, r3
 800cbea:	e002      	b.n	800cbf2 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800cbec:	697b      	ldr	r3, [r7, #20]
 800cbee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	6879      	ldr	r1, [r7, #4]
 800cbf4:	68f8      	ldr	r0, [r7, #12]
 800cbf6:	001a      	movs	r2, r3
 800cbf8:	f001 f898 	bl	800dd2c <USBD_CtlContinueRx>
 800cbfc:	e045      	b.n	800cc8a <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cbfe:	68fa      	ldr	r2, [r7, #12]
 800cc00:	23ad      	movs	r3, #173	@ 0xad
 800cc02:	009b      	lsls	r3, r3, #2
 800cc04:	58d3      	ldr	r3, [r2, r3]
 800cc06:	691b      	ldr	r3, [r3, #16]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00d      	beq.n	800cc28 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc0c:	68fa      	ldr	r2, [r7, #12]
 800cc0e:	23a7      	movs	r3, #167	@ 0xa7
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800cc14:	2b03      	cmp	r3, #3
 800cc16:	d107      	bne.n	800cc28 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	23ad      	movs	r3, #173	@ 0xad
 800cc1c:	009b      	lsls	r3, r3, #2
 800cc1e:	58d3      	ldr	r3, [r2, r3]
 800cc20:	691b      	ldr	r3, [r3, #16]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	0010      	movs	r0, r2
 800cc26:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	0018      	movs	r0, r3
 800cc2c:	f001 f891 	bl	800dd52 <USBD_CtlSendStatus>
 800cc30:	e02b      	b.n	800cc8a <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800cc32:	68fa      	ldr	r2, [r7, #12]
 800cc34:	23a5      	movs	r3, #165	@ 0xa5
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	58d3      	ldr	r3, [r2, r3]
 800cc3a:	2b05      	cmp	r3, #5
 800cc3c:	d125      	bne.n	800cc8a <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800cc3e:	68fa      	ldr	r2, [r7, #12]
 800cc40:	23a5      	movs	r3, #165	@ 0xa5
 800cc42:	009b      	lsls	r3, r3, #2
 800cc44:	2100      	movs	r1, #0
 800cc46:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	2100      	movs	r1, #0
 800cc4c:	0018      	movs	r0, r3
 800cc4e:	f001 fc30 	bl	800e4b2 <USBD_LL_StallEP>
 800cc52:	e01a      	b.n	800cc8a <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc54:	68fa      	ldr	r2, [r7, #12]
 800cc56:	23ad      	movs	r3, #173	@ 0xad
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	58d3      	ldr	r3, [r2, r3]
 800cc5c:	699b      	ldr	r3, [r3, #24]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d011      	beq.n	800cc86 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cc62:	68fa      	ldr	r2, [r7, #12]
 800cc64:	23a7      	movs	r3, #167	@ 0xa7
 800cc66:	009b      	lsls	r3, r3, #2
 800cc68:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 800cc6a:	2b03      	cmp	r3, #3
 800cc6c:	d10b      	bne.n	800cc86 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800cc6e:	68fa      	ldr	r2, [r7, #12]
 800cc70:	23ad      	movs	r3, #173	@ 0xad
 800cc72:	009b      	lsls	r3, r3, #2
 800cc74:	58d3      	ldr	r3, [r2, r3]
 800cc76:	699b      	ldr	r3, [r3, #24]
 800cc78:	220b      	movs	r2, #11
 800cc7a:	18ba      	adds	r2, r7, r2
 800cc7c:	7811      	ldrb	r1, [r2, #0]
 800cc7e:	68fa      	ldr	r2, [r7, #12]
 800cc80:	0010      	movs	r0, r2
 800cc82:	4798      	blx	r3
 800cc84:	e001      	b.n	800cc8a <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800cc86:	2302      	movs	r3, #2
 800cc88:	e000      	b.n	800cc8c <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 800cc8a:	2300      	movs	r3, #0
}
 800cc8c:	0018      	movs	r0, r3
 800cc8e:	46bd      	mov	sp, r7
 800cc90:	b006      	add	sp, #24
 800cc92:	bd80      	pop	{r7, pc}

0800cc94 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b086      	sub	sp, #24
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	60f8      	str	r0, [r7, #12]
 800cc9c:	607a      	str	r2, [r7, #4]
 800cc9e:	200b      	movs	r0, #11
 800cca0:	183b      	adds	r3, r7, r0
 800cca2:	1c0a      	adds	r2, r1, #0
 800cca4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800cca6:	183b      	adds	r3, r7, r0
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d000      	beq.n	800ccb0 <USBD_LL_DataInStage+0x1c>
 800ccae:	e08e      	b.n	800cdce <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	3314      	adds	r3, #20
 800ccb4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ccb6:	68fa      	ldr	r2, [r7, #12]
 800ccb8:	23a5      	movs	r3, #165	@ 0xa5
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	58d3      	ldr	r3, [r2, r3]
 800ccbe:	2b02      	cmp	r3, #2
 800ccc0:	d164      	bne.n	800cd8c <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 800ccc2:	697b      	ldr	r3, [r7, #20]
 800ccc4:	68da      	ldr	r2, [r3, #12]
 800ccc6:	697b      	ldr	r3, [r7, #20]
 800ccc8:	691b      	ldr	r3, [r3, #16]
 800ccca:	429a      	cmp	r2, r3
 800cccc:	d915      	bls.n	800ccfa <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	68da      	ldr	r2, [r3, #12]
 800ccd2:	697b      	ldr	r3, [r7, #20]
 800ccd4:	691b      	ldr	r3, [r3, #16]
 800ccd6:	1ad2      	subs	r2, r2, r3
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	68db      	ldr	r3, [r3, #12]
 800cce0:	b29a      	uxth	r2, r3
 800cce2:	6879      	ldr	r1, [r7, #4]
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	0018      	movs	r0, r3
 800cce8:	f000 ffe9 	bl	800dcbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ccec:	68f8      	ldr	r0, [r7, #12]
 800ccee:	2300      	movs	r3, #0
 800ccf0:	2200      	movs	r2, #0
 800ccf2:	2100      	movs	r1, #0
 800ccf4:	f001 fcc6 	bl	800e684 <USBD_LL_PrepareReceive>
 800ccf8:	e059      	b.n	800cdae <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	689a      	ldr	r2, [r3, #8]
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	0019      	movs	r1, r3
 800cd04:	0010      	movs	r0, r2
 800cd06:	f7f3 fa85 	bl	8000214 <__aeabi_uidivmod>
 800cd0a:	1e0b      	subs	r3, r1, #0
 800cd0c:	d11f      	bne.n	800cd4e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 800cd0e:	697b      	ldr	r3, [r7, #20]
 800cd10:	689a      	ldr	r2, [r3, #8]
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d319      	bcc.n	800cd4e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	689a      	ldr	r2, [r3, #8]
 800cd1e:	68f9      	ldr	r1, [r7, #12]
 800cd20:	23a6      	movs	r3, #166	@ 0xa6
 800cd22:	009b      	lsls	r3, r3, #2
 800cd24:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d211      	bcs.n	800cd4e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2200      	movs	r2, #0
 800cd2e:	2100      	movs	r1, #0
 800cd30:	0018      	movs	r0, r3
 800cd32:	f000 ffc4 	bl	800dcbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cd36:	68fa      	ldr	r2, [r7, #12]
 800cd38:	23a6      	movs	r3, #166	@ 0xa6
 800cd3a:	009b      	lsls	r3, r3, #2
 800cd3c:	2100      	movs	r1, #0
 800cd3e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cd40:	68f8      	ldr	r0, [r7, #12]
 800cd42:	2300      	movs	r3, #0
 800cd44:	2200      	movs	r2, #0
 800cd46:	2100      	movs	r1, #0
 800cd48:	f001 fc9c 	bl	800e684 <USBD_LL_PrepareReceive>
 800cd4c:	e02f      	b.n	800cdae <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	23ad      	movs	r3, #173	@ 0xad
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	58d3      	ldr	r3, [r2, r3]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d00d      	beq.n	800cd78 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	23a7      	movs	r3, #167	@ 0xa7
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800cd64:	2b03      	cmp	r3, #3
 800cd66:	d107      	bne.n	800cd78 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800cd68:	68fa      	ldr	r2, [r7, #12]
 800cd6a:	23ad      	movs	r3, #173	@ 0xad
 800cd6c:	009b      	lsls	r3, r3, #2
 800cd6e:	58d3      	ldr	r3, [r2, r3]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	68fa      	ldr	r2, [r7, #12]
 800cd74:	0010      	movs	r0, r2
 800cd76:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2180      	movs	r1, #128	@ 0x80
 800cd7c:	0018      	movs	r0, r3
 800cd7e:	f001 fb98 	bl	800e4b2 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	0018      	movs	r0, r3
 800cd86:	f000 fff8 	bl	800dd7a <USBD_CtlReceiveStatus>
 800cd8a:	e010      	b.n	800cdae <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cd8c:	68fa      	ldr	r2, [r7, #12]
 800cd8e:	23a5      	movs	r3, #165	@ 0xa5
 800cd90:	009b      	lsls	r3, r3, #2
 800cd92:	58d3      	ldr	r3, [r2, r3]
 800cd94:	2b04      	cmp	r3, #4
 800cd96:	d005      	beq.n	800cda4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800cd98:	68fa      	ldr	r2, [r7, #12]
 800cd9a:	23a5      	movs	r3, #165	@ 0xa5
 800cd9c:	009b      	lsls	r3, r3, #2
 800cd9e:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d104      	bne.n	800cdae <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	2180      	movs	r1, #128	@ 0x80
 800cda8:	0018      	movs	r0, r3
 800cdaa:	f001 fb82 	bl	800e4b2 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	23a8      	movs	r3, #168	@ 0xa8
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	5cd3      	ldrb	r3, [r2, r3]
 800cdb6:	2b01      	cmp	r3, #1
 800cdb8:	d124      	bne.n	800ce04 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	0018      	movs	r0, r3
 800cdbe:	f7ff fe42 	bl	800ca46 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cdc2:	68fa      	ldr	r2, [r7, #12]
 800cdc4:	23a8      	movs	r3, #168	@ 0xa8
 800cdc6:	009b      	lsls	r3, r3, #2
 800cdc8:	2100      	movs	r1, #0
 800cdca:	54d1      	strb	r1, [r2, r3]
 800cdcc:	e01a      	b.n	800ce04 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	23ad      	movs	r3, #173	@ 0xad
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	58d3      	ldr	r3, [r2, r3]
 800cdd6:	695b      	ldr	r3, [r3, #20]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d011      	beq.n	800ce00 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800cddc:	68fa      	ldr	r2, [r7, #12]
 800cdde:	23a7      	movs	r3, #167	@ 0xa7
 800cde0:	009b      	lsls	r3, r3, #2
 800cde2:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d10b      	bne.n	800ce00 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800cde8:	68fa      	ldr	r2, [r7, #12]
 800cdea:	23ad      	movs	r3, #173	@ 0xad
 800cdec:	009b      	lsls	r3, r3, #2
 800cdee:	58d3      	ldr	r3, [r2, r3]
 800cdf0:	695b      	ldr	r3, [r3, #20]
 800cdf2:	220b      	movs	r2, #11
 800cdf4:	18ba      	adds	r2, r7, r2
 800cdf6:	7811      	ldrb	r1, [r2, #0]
 800cdf8:	68fa      	ldr	r2, [r7, #12]
 800cdfa:	0010      	movs	r0, r2
 800cdfc:	4798      	blx	r3
 800cdfe:	e001      	b.n	800ce04 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ce00:	2302      	movs	r3, #2
 800ce02:	e000      	b.n	800ce06 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 800ce04:	2300      	movs	r3, #0
}
 800ce06:	0018      	movs	r0, r3
 800ce08:	46bd      	mov	sp, r7
 800ce0a:	b006      	add	sp, #24
 800ce0c:	bd80      	pop	{r7, pc}

0800ce0e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ce0e:	b580      	push	{r7, lr}
 800ce10:	b082      	sub	sp, #8
 800ce12:	af00      	add	r7, sp, #0
 800ce14:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce16:	6878      	ldr	r0, [r7, #4]
 800ce18:	2340      	movs	r3, #64	@ 0x40
 800ce1a:	2200      	movs	r2, #0
 800ce1c:	2100      	movs	r1, #0
 800ce1e:	f001 fae6 	bl	800e3ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ce22:	687a      	ldr	r2, [r7, #4]
 800ce24:	23ac      	movs	r3, #172	@ 0xac
 800ce26:	005b      	lsls	r3, r3, #1
 800ce28:	2101      	movs	r1, #1
 800ce2a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	23b2      	movs	r3, #178	@ 0xb2
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	2140      	movs	r1, #64	@ 0x40
 800ce34:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ce36:	6878      	ldr	r0, [r7, #4]
 800ce38:	2340      	movs	r3, #64	@ 0x40
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	2180      	movs	r1, #128	@ 0x80
 800ce3e:	f001 fad6 	bl	800e3ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2201      	movs	r2, #1
 800ce46:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2240      	movs	r2, #64	@ 0x40
 800ce4c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce4e:	687a      	ldr	r2, [r7, #4]
 800ce50:	23a7      	movs	r3, #167	@ 0xa7
 800ce52:	009b      	lsls	r3, r3, #2
 800ce54:	2101      	movs	r1, #1
 800ce56:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	23a5      	movs	r3, #165	@ 0xa5
 800ce5c:	009b      	lsls	r3, r3, #2
 800ce5e:	2100      	movs	r1, #0
 800ce60:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	2200      	movs	r2, #0
 800ce66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ce68:	687a      	ldr	r2, [r7, #4]
 800ce6a:	23a9      	movs	r3, #169	@ 0xa9
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	2100      	movs	r1, #0
 800ce70:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 800ce72:	687a      	ldr	r2, [r7, #4]
 800ce74:	23ae      	movs	r3, #174	@ 0xae
 800ce76:	009b      	lsls	r3, r3, #2
 800ce78:	58d3      	ldr	r3, [r2, r3]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d00a      	beq.n	800ce94 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ce7e:	687a      	ldr	r2, [r7, #4]
 800ce80:	23ad      	movs	r3, #173	@ 0xad
 800ce82:	009b      	lsls	r3, r3, #2
 800ce84:	58d3      	ldr	r3, [r2, r3]
 800ce86:	685a      	ldr	r2, [r3, #4]
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	685b      	ldr	r3, [r3, #4]
 800ce8c:	b2d9      	uxtb	r1, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	0018      	movs	r0, r3
 800ce92:	4790      	blx	r2
  }

  return USBD_OK;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	0018      	movs	r0, r3
 800ce98:	46bd      	mov	sp, r7
 800ce9a:	b002      	add	sp, #8
 800ce9c:	bd80      	pop	{r7, pc}

0800ce9e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ce9e:	b580      	push	{r7, lr}
 800cea0:	b082      	sub	sp, #8
 800cea2:	af00      	add	r7, sp, #0
 800cea4:	6078      	str	r0, [r7, #4]
 800cea6:	000a      	movs	r2, r1
 800cea8:	1cfb      	adds	r3, r7, #3
 800ceaa:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	1cfa      	adds	r2, r7, #3
 800ceb0:	7812      	ldrb	r2, [r2, #0]
 800ceb2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ceb4:	2300      	movs	r3, #0
}
 800ceb6:	0018      	movs	r0, r3
 800ceb8:	46bd      	mov	sp, r7
 800ceba:	b002      	add	sp, #8
 800cebc:	bd80      	pop	{r7, pc}
	...

0800cec0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b082      	sub	sp, #8
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800cec8:	687a      	ldr	r2, [r7, #4]
 800ceca:	23a7      	movs	r3, #167	@ 0xa7
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	5cd1      	ldrb	r1, [r2, r3]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	4a06      	ldr	r2, [pc, #24]	@ (800ceec <USBD_LL_Suspend+0x2c>)
 800ced4:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800ced6:	687a      	ldr	r2, [r7, #4]
 800ced8:	23a7      	movs	r3, #167	@ 0xa7
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	2104      	movs	r1, #4
 800cede:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 800cee0:	2300      	movs	r3, #0
}
 800cee2:	0018      	movs	r0, r3
 800cee4:	46bd      	mov	sp, r7
 800cee6:	b002      	add	sp, #8
 800cee8:	bd80      	pop	{r7, pc}
 800ceea:	46c0      	nop			@ (mov r8, r8)
 800ceec:	0000029d 	.word	0x0000029d

0800cef0 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b082      	sub	sp, #8
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cef8:	687a      	ldr	r2, [r7, #4]
 800cefa:	23a7      	movs	r3, #167	@ 0xa7
 800cefc:	009b      	lsls	r3, r3, #2
 800cefe:	5cd3      	ldrb	r3, [r2, r3]
 800cf00:	2b04      	cmp	r3, #4
 800cf02:	d106      	bne.n	800cf12 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	4a05      	ldr	r2, [pc, #20]	@ (800cf1c <USBD_LL_Resume+0x2c>)
 800cf08:	5c99      	ldrb	r1, [r3, r2]
 800cf0a:	687a      	ldr	r2, [r7, #4]
 800cf0c:	23a7      	movs	r3, #167	@ 0xa7
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 800cf12:	2300      	movs	r3, #0
}
 800cf14:	0018      	movs	r0, r3
 800cf16:	46bd      	mov	sp, r7
 800cf18:	b002      	add	sp, #8
 800cf1a:	bd80      	pop	{r7, pc}
 800cf1c:	0000029d 	.word	0x0000029d

0800cf20 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b082      	sub	sp, #8
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf28:	687a      	ldr	r2, [r7, #4]
 800cf2a:	23a7      	movs	r3, #167	@ 0xa7
 800cf2c:	009b      	lsls	r3, r3, #2
 800cf2e:	5cd3      	ldrb	r3, [r2, r3]
 800cf30:	2b03      	cmp	r3, #3
 800cf32:	d10e      	bne.n	800cf52 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 800cf34:	687a      	ldr	r2, [r7, #4]
 800cf36:	23ad      	movs	r3, #173	@ 0xad
 800cf38:	009b      	lsls	r3, r3, #2
 800cf3a:	58d3      	ldr	r3, [r2, r3]
 800cf3c:	69db      	ldr	r3, [r3, #28]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d007      	beq.n	800cf52 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 800cf42:	687a      	ldr	r2, [r7, #4]
 800cf44:	23ad      	movs	r3, #173	@ 0xad
 800cf46:	009b      	lsls	r3, r3, #2
 800cf48:	58d3      	ldr	r3, [r2, r3]
 800cf4a:	69db      	ldr	r3, [r3, #28]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	0010      	movs	r0, r2
 800cf50:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cf52:	2300      	movs	r3, #0
}
 800cf54:	0018      	movs	r0, r3
 800cf56:	46bd      	mov	sp, r7
 800cf58:	b002      	add	sp, #8
 800cf5a:	bd80      	pop	{r7, pc}

0800cf5c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 800cf5c:	b580      	push	{r7, lr}
 800cf5e:	b084      	sub	sp, #16
 800cf60:	af00      	add	r7, sp, #0
 800cf62:	6078      	str	r0, [r7, #4]
 800cf64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf66:	230f      	movs	r3, #15
 800cf68:	18fb      	adds	r3, r7, r3
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	781b      	ldrb	r3, [r3, #0]
 800cf72:	001a      	movs	r2, r3
 800cf74:	2360      	movs	r3, #96	@ 0x60
 800cf76:	4013      	ands	r3, r2
 800cf78:	2b40      	cmp	r3, #64	@ 0x40
 800cf7a:	d004      	beq.n	800cf86 <USBD_StdDevReq+0x2a>
 800cf7c:	d84f      	bhi.n	800d01e <USBD_StdDevReq+0xc2>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d00b      	beq.n	800cf9a <USBD_StdDevReq+0x3e>
 800cf82:	2b20      	cmp	r3, #32
 800cf84:	d14b      	bne.n	800d01e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	23ad      	movs	r3, #173	@ 0xad
 800cf8a:	009b      	lsls	r3, r3, #2
 800cf8c:	58d3      	ldr	r3, [r2, r3]
 800cf8e:	689b      	ldr	r3, [r3, #8]
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	0010      	movs	r0, r2
 800cf96:	4798      	blx	r3
      break;
 800cf98:	e048      	b.n	800d02c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	785b      	ldrb	r3, [r3, #1]
 800cf9e:	2b09      	cmp	r3, #9
 800cfa0:	d835      	bhi.n	800d00e <USBD_StdDevReq+0xb2>
 800cfa2:	009a      	lsls	r2, r3, #2
 800cfa4:	4b25      	ldr	r3, [pc, #148]	@ (800d03c <USBD_StdDevReq+0xe0>)
 800cfa6:	18d3      	adds	r3, r2, r3
 800cfa8:	681b      	ldr	r3, [r3, #0]
 800cfaa:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cfac:	683a      	ldr	r2, [r7, #0]
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	0011      	movs	r1, r2
 800cfb2:	0018      	movs	r0, r3
 800cfb4:	f000 fa52 	bl	800d45c <USBD_GetDescriptor>
          break;
 800cfb8:	e030      	b.n	800d01c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	0011      	movs	r1, r2
 800cfc0:	0018      	movs	r0, r3
 800cfc2:	f000 fbfd 	bl	800d7c0 <USBD_SetAddress>
          break;
 800cfc6:	e029      	b.n	800d01c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800cfc8:	683a      	ldr	r2, [r7, #0]
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	0011      	movs	r1, r2
 800cfce:	0018      	movs	r0, r3
 800cfd0:	f000 fc4a 	bl	800d868 <USBD_SetConfig>
          break;
 800cfd4:	e022      	b.n	800d01c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cfd6:	683a      	ldr	r2, [r7, #0]
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	0011      	movs	r1, r2
 800cfdc:	0018      	movs	r0, r3
 800cfde:	f000 fce7 	bl	800d9b0 <USBD_GetConfig>
          break;
 800cfe2:	e01b      	b.n	800d01c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cfe4:	683a      	ldr	r2, [r7, #0]
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	0011      	movs	r1, r2
 800cfea:	0018      	movs	r0, r3
 800cfec:	f000 fd1b 	bl	800da26 <USBD_GetStatus>
          break;
 800cff0:	e014      	b.n	800d01c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cff2:	683a      	ldr	r2, [r7, #0]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	0011      	movs	r1, r2
 800cff8:	0018      	movs	r0, r3
 800cffa:	f000 fd4e 	bl	800da9a <USBD_SetFeature>
          break;
 800cffe:	e00d      	b.n	800d01c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d000:	683a      	ldr	r2, [r7, #0]
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	0011      	movs	r1, r2
 800d006:	0018      	movs	r0, r3
 800d008:	f000 fd5d 	bl	800dac6 <USBD_ClrFeature>
          break;
 800d00c:	e006      	b.n	800d01c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d00e:	683a      	ldr	r2, [r7, #0]
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	0011      	movs	r1, r2
 800d014:	0018      	movs	r0, r3
 800d016:	f000 fdb4 	bl	800db82 <USBD_CtlError>
          break;
 800d01a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d01c:	e006      	b.n	800d02c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800d01e:	683a      	ldr	r2, [r7, #0]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	0011      	movs	r1, r2
 800d024:	0018      	movs	r0, r3
 800d026:	f000 fdac 	bl	800db82 <USBD_CtlError>
      break;
 800d02a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d02c:	230f      	movs	r3, #15
 800d02e:	18fb      	adds	r3, r7, r3
 800d030:	781b      	ldrb	r3, [r3, #0]
}
 800d032:	0018      	movs	r0, r3
 800d034:	46bd      	mov	sp, r7
 800d036:	b004      	add	sp, #16
 800d038:	bd80      	pop	{r7, pc}
 800d03a:	46c0      	nop			@ (mov r8, r8)
 800d03c:	0800ec3c 	.word	0x0800ec3c

0800d040 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 800d040:	b5b0      	push	{r4, r5, r7, lr}
 800d042:	b084      	sub	sp, #16
 800d044:	af00      	add	r7, sp, #0
 800d046:	6078      	str	r0, [r7, #4]
 800d048:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d04a:	230f      	movs	r3, #15
 800d04c:	18fb      	adds	r3, r7, r3
 800d04e:	2200      	movs	r2, #0
 800d050:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	001a      	movs	r2, r3
 800d058:	2360      	movs	r3, #96	@ 0x60
 800d05a:	4013      	ands	r3, r2
 800d05c:	2b40      	cmp	r3, #64	@ 0x40
 800d05e:	d004      	beq.n	800d06a <USBD_StdItfReq+0x2a>
 800d060:	d839      	bhi.n	800d0d6 <USBD_StdItfReq+0x96>
 800d062:	2b00      	cmp	r3, #0
 800d064:	d001      	beq.n	800d06a <USBD_StdItfReq+0x2a>
 800d066:	2b20      	cmp	r3, #32
 800d068:	d135      	bne.n	800d0d6 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d06a:	687a      	ldr	r2, [r7, #4]
 800d06c:	23a7      	movs	r3, #167	@ 0xa7
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	5cd3      	ldrb	r3, [r2, r3]
 800d072:	3b01      	subs	r3, #1
 800d074:	2b02      	cmp	r3, #2
 800d076:	d825      	bhi.n	800d0c4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d078:	683b      	ldr	r3, [r7, #0]
 800d07a:	889b      	ldrh	r3, [r3, #4]
 800d07c:	b2db      	uxtb	r3, r3
 800d07e:	2b01      	cmp	r3, #1
 800d080:	d819      	bhi.n	800d0b6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	23ad      	movs	r3, #173	@ 0xad
 800d086:	009b      	lsls	r3, r3, #2
 800d088:	58d3      	ldr	r3, [r2, r3]
 800d08a:	689b      	ldr	r3, [r3, #8]
 800d08c:	250f      	movs	r5, #15
 800d08e:	197c      	adds	r4, r7, r5
 800d090:	6839      	ldr	r1, [r7, #0]
 800d092:	687a      	ldr	r2, [r7, #4]
 800d094:	0010      	movs	r0, r2
 800d096:	4798      	blx	r3
 800d098:	0003      	movs	r3, r0
 800d09a:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d09c:	683b      	ldr	r3, [r7, #0]
 800d09e:	88db      	ldrh	r3, [r3, #6]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d116      	bne.n	800d0d2 <USBD_StdItfReq+0x92>
 800d0a4:	197b      	adds	r3, r7, r5
 800d0a6:	781b      	ldrb	r3, [r3, #0]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d112      	bne.n	800d0d2 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	0018      	movs	r0, r3
 800d0b0:	f000 fe4f 	bl	800dd52 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d0b4:	e00d      	b.n	800d0d2 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 800d0b6:	683a      	ldr	r2, [r7, #0]
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	0011      	movs	r1, r2
 800d0bc:	0018      	movs	r0, r3
 800d0be:	f000 fd60 	bl	800db82 <USBD_CtlError>
          break;
 800d0c2:	e006      	b.n	800d0d2 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 800d0c4:	683a      	ldr	r2, [r7, #0]
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	0011      	movs	r1, r2
 800d0ca:	0018      	movs	r0, r3
 800d0cc:	f000 fd59 	bl	800db82 <USBD_CtlError>
          break;
 800d0d0:	e000      	b.n	800d0d4 <USBD_StdItfReq+0x94>
          break;
 800d0d2:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d0d4:	e006      	b.n	800d0e4 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 800d0d6:	683a      	ldr	r2, [r7, #0]
 800d0d8:	687b      	ldr	r3, [r7, #4]
 800d0da:	0011      	movs	r1, r2
 800d0dc:	0018      	movs	r0, r3
 800d0de:	f000 fd50 	bl	800db82 <USBD_CtlError>
      break;
 800d0e2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 800d0e4:	2300      	movs	r3, #0
}
 800d0e6:	0018      	movs	r0, r3
 800d0e8:	46bd      	mov	sp, r7
 800d0ea:	b004      	add	sp, #16
 800d0ec:	bdb0      	pop	{r4, r5, r7, pc}

0800d0ee <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 800d0ee:	b5b0      	push	{r4, r5, r7, lr}
 800d0f0:	b084      	sub	sp, #16
 800d0f2:	af00      	add	r7, sp, #0
 800d0f4:	6078      	str	r0, [r7, #4]
 800d0f6:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d0f8:	230f      	movs	r3, #15
 800d0fa:	18fb      	adds	r3, r7, r3
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 800d100:	683b      	ldr	r3, [r7, #0]
 800d102:	889a      	ldrh	r2, [r3, #4]
 800d104:	230e      	movs	r3, #14
 800d106:	18fb      	adds	r3, r7, r3
 800d108:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d10a:	683b      	ldr	r3, [r7, #0]
 800d10c:	781b      	ldrb	r3, [r3, #0]
 800d10e:	001a      	movs	r2, r3
 800d110:	2360      	movs	r3, #96	@ 0x60
 800d112:	4013      	ands	r3, r2
 800d114:	2b40      	cmp	r3, #64	@ 0x40
 800d116:	d006      	beq.n	800d126 <USBD_StdEPReq+0x38>
 800d118:	d900      	bls.n	800d11c <USBD_StdEPReq+0x2e>
 800d11a:	e190      	b.n	800d43e <USBD_StdEPReq+0x350>
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00c      	beq.n	800d13a <USBD_StdEPReq+0x4c>
 800d120:	2b20      	cmp	r3, #32
 800d122:	d000      	beq.n	800d126 <USBD_StdEPReq+0x38>
 800d124:	e18b      	b.n	800d43e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 800d126:	687a      	ldr	r2, [r7, #4]
 800d128:	23ad      	movs	r3, #173	@ 0xad
 800d12a:	009b      	lsls	r3, r3, #2
 800d12c:	58d3      	ldr	r3, [r2, r3]
 800d12e:	689b      	ldr	r3, [r3, #8]
 800d130:	6839      	ldr	r1, [r7, #0]
 800d132:	687a      	ldr	r2, [r7, #4]
 800d134:	0010      	movs	r0, r2
 800d136:	4798      	blx	r3
      break;
 800d138:	e188      	b.n	800d44c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	781b      	ldrb	r3, [r3, #0]
 800d13e:	001a      	movs	r2, r3
 800d140:	2360      	movs	r3, #96	@ 0x60
 800d142:	4013      	ands	r3, r2
 800d144:	2b20      	cmp	r3, #32
 800d146:	d10f      	bne.n	800d168 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800d148:	687a      	ldr	r2, [r7, #4]
 800d14a:	23ad      	movs	r3, #173	@ 0xad
 800d14c:	009b      	lsls	r3, r3, #2
 800d14e:	58d3      	ldr	r3, [r2, r3]
 800d150:	689b      	ldr	r3, [r3, #8]
 800d152:	250f      	movs	r5, #15
 800d154:	197c      	adds	r4, r7, r5
 800d156:	6839      	ldr	r1, [r7, #0]
 800d158:	687a      	ldr	r2, [r7, #4]
 800d15a:	0010      	movs	r0, r2
 800d15c:	4798      	blx	r3
 800d15e:	0003      	movs	r3, r0
 800d160:	7023      	strb	r3, [r4, #0]

        return ret;
 800d162:	197b      	adds	r3, r7, r5
 800d164:	781b      	ldrb	r3, [r3, #0]
 800d166:	e174      	b.n	800d452 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	785b      	ldrb	r3, [r3, #1]
 800d16c:	2b03      	cmp	r3, #3
 800d16e:	d007      	beq.n	800d180 <USBD_StdEPReq+0x92>
 800d170:	dd00      	ble.n	800d174 <USBD_StdEPReq+0x86>
 800d172:	e15c      	b.n	800d42e <USBD_StdEPReq+0x340>
 800d174:	2b00      	cmp	r3, #0
 800d176:	d100      	bne.n	800d17a <USBD_StdEPReq+0x8c>
 800d178:	e092      	b.n	800d2a0 <USBD_StdEPReq+0x1b2>
 800d17a:	2b01      	cmp	r3, #1
 800d17c:	d04b      	beq.n	800d216 <USBD_StdEPReq+0x128>
 800d17e:	e156      	b.n	800d42e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d180:	687a      	ldr	r2, [r7, #4]
 800d182:	23a7      	movs	r3, #167	@ 0xa7
 800d184:	009b      	lsls	r3, r3, #2
 800d186:	5cd3      	ldrb	r3, [r2, r3]
 800d188:	2b02      	cmp	r3, #2
 800d18a:	d002      	beq.n	800d192 <USBD_StdEPReq+0xa4>
 800d18c:	2b03      	cmp	r3, #3
 800d18e:	d01d      	beq.n	800d1cc <USBD_StdEPReq+0xde>
 800d190:	e039      	b.n	800d206 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d192:	220e      	movs	r2, #14
 800d194:	18bb      	adds	r3, r7, r2
 800d196:	781b      	ldrb	r3, [r3, #0]
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d010      	beq.n	800d1be <USBD_StdEPReq+0xd0>
 800d19c:	18bb      	adds	r3, r7, r2
 800d19e:	781b      	ldrb	r3, [r3, #0]
 800d1a0:	2b80      	cmp	r3, #128	@ 0x80
 800d1a2:	d00c      	beq.n	800d1be <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d1a4:	18bb      	adds	r3, r7, r2
 800d1a6:	781a      	ldrb	r2, [r3, #0]
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	0011      	movs	r1, r2
 800d1ac:	0018      	movs	r0, r3
 800d1ae:	f001 f980 	bl	800e4b2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2180      	movs	r1, #128	@ 0x80
 800d1b6:	0018      	movs	r0, r3
 800d1b8:	f001 f97b 	bl	800e4b2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1bc:	e02a      	b.n	800d214 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	0011      	movs	r1, r2
 800d1c4:	0018      	movs	r0, r3
 800d1c6:	f000 fcdc 	bl	800db82 <USBD_CtlError>
              break;
 800d1ca:	e023      	b.n	800d214 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1cc:	683b      	ldr	r3, [r7, #0]
 800d1ce:	885b      	ldrh	r3, [r3, #2]
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d113      	bne.n	800d1fc <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 800d1d4:	220e      	movs	r2, #14
 800d1d6:	18bb      	adds	r3, r7, r2
 800d1d8:	781b      	ldrb	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d00e      	beq.n	800d1fc <USBD_StdEPReq+0x10e>
 800d1de:	18bb      	adds	r3, r7, r2
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	2b80      	cmp	r3, #128	@ 0x80
 800d1e4:	d00a      	beq.n	800d1fc <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	88db      	ldrh	r3, [r3, #6]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d106      	bne.n	800d1fc <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 800d1ee:	18bb      	adds	r3, r7, r2
 800d1f0:	781a      	ldrb	r2, [r3, #0]
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	0011      	movs	r1, r2
 800d1f6:	0018      	movs	r0, r3
 800d1f8:	f001 f95b 	bl	800e4b2 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	0018      	movs	r0, r3
 800d200:	f000 fda7 	bl	800dd52 <USBD_CtlSendStatus>

              break;
 800d204:	e006      	b.n	800d214 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 800d206:	683a      	ldr	r2, [r7, #0]
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	0011      	movs	r1, r2
 800d20c:	0018      	movs	r0, r3
 800d20e:	f000 fcb8 	bl	800db82 <USBD_CtlError>
              break;
 800d212:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d214:	e112      	b.n	800d43c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d216:	687a      	ldr	r2, [r7, #4]
 800d218:	23a7      	movs	r3, #167	@ 0xa7
 800d21a:	009b      	lsls	r3, r3, #2
 800d21c:	5cd3      	ldrb	r3, [r2, r3]
 800d21e:	2b02      	cmp	r3, #2
 800d220:	d002      	beq.n	800d228 <USBD_StdEPReq+0x13a>
 800d222:	2b03      	cmp	r3, #3
 800d224:	d01d      	beq.n	800d262 <USBD_StdEPReq+0x174>
 800d226:	e032      	b.n	800d28e <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d228:	220e      	movs	r2, #14
 800d22a:	18bb      	adds	r3, r7, r2
 800d22c:	781b      	ldrb	r3, [r3, #0]
 800d22e:	2b00      	cmp	r3, #0
 800d230:	d010      	beq.n	800d254 <USBD_StdEPReq+0x166>
 800d232:	18bb      	adds	r3, r7, r2
 800d234:	781b      	ldrb	r3, [r3, #0]
 800d236:	2b80      	cmp	r3, #128	@ 0x80
 800d238:	d00c      	beq.n	800d254 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800d23a:	18bb      	adds	r3, r7, r2
 800d23c:	781a      	ldrb	r2, [r3, #0]
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	0011      	movs	r1, r2
 800d242:	0018      	movs	r0, r3
 800d244:	f001 f935 	bl	800e4b2 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2180      	movs	r1, #128	@ 0x80
 800d24c:	0018      	movs	r0, r3
 800d24e:	f001 f930 	bl	800e4b2 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d252:	e024      	b.n	800d29e <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 800d254:	683a      	ldr	r2, [r7, #0]
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	0011      	movs	r1, r2
 800d25a:	0018      	movs	r0, r3
 800d25c:	f000 fc91 	bl	800db82 <USBD_CtlError>
              break;
 800d260:	e01d      	b.n	800d29e <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	885b      	ldrh	r3, [r3, #2]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d118      	bne.n	800d29c <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d26a:	210e      	movs	r1, #14
 800d26c:	187b      	adds	r3, r7, r1
 800d26e:	781b      	ldrb	r3, [r3, #0]
 800d270:	227f      	movs	r2, #127	@ 0x7f
 800d272:	4013      	ands	r3, r2
 800d274:	d006      	beq.n	800d284 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800d276:	187b      	adds	r3, r7, r1
 800d278:	781a      	ldrb	r2, [r3, #0]
 800d27a:	687b      	ldr	r3, [r7, #4]
 800d27c:	0011      	movs	r1, r2
 800d27e:	0018      	movs	r0, r3
 800d280:	f001 f942 	bl	800e508 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	0018      	movs	r0, r3
 800d288:	f000 fd63 	bl	800dd52 <USBD_CtlSendStatus>
              }
              break;
 800d28c:	e006      	b.n	800d29c <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 800d28e:	683a      	ldr	r2, [r7, #0]
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	0011      	movs	r1, r2
 800d294:	0018      	movs	r0, r3
 800d296:	f000 fc74 	bl	800db82 <USBD_CtlError>
              break;
 800d29a:	e000      	b.n	800d29e <USBD_StdEPReq+0x1b0>
              break;
 800d29c:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d29e:	e0cd      	b.n	800d43c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	23a7      	movs	r3, #167	@ 0xa7
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	5cd3      	ldrb	r3, [r2, r3]
 800d2a8:	2b02      	cmp	r3, #2
 800d2aa:	d002      	beq.n	800d2b2 <USBD_StdEPReq+0x1c4>
 800d2ac:	2b03      	cmp	r3, #3
 800d2ae:	d03c      	beq.n	800d32a <USBD_StdEPReq+0x23c>
 800d2b0:	e0b5      	b.n	800d41e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2b2:	220e      	movs	r2, #14
 800d2b4:	18bb      	adds	r3, r7, r2
 800d2b6:	781b      	ldrb	r3, [r3, #0]
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d00a      	beq.n	800d2d2 <USBD_StdEPReq+0x1e4>
 800d2bc:	18bb      	adds	r3, r7, r2
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2b80      	cmp	r3, #128	@ 0x80
 800d2c2:	d006      	beq.n	800d2d2 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 800d2c4:	683a      	ldr	r2, [r7, #0]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	0011      	movs	r1, r2
 800d2ca:	0018      	movs	r0, r3
 800d2cc:	f000 fc59 	bl	800db82 <USBD_CtlError>
                break;
 800d2d0:	e0ac      	b.n	800d42c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d2d2:	220e      	movs	r2, #14
 800d2d4:	18bb      	adds	r3, r7, r2
 800d2d6:	781b      	ldrb	r3, [r3, #0]
 800d2d8:	b25b      	sxtb	r3, r3
 800d2da:	2b00      	cmp	r3, #0
 800d2dc:	da0c      	bge.n	800d2f8 <USBD_StdEPReq+0x20a>
 800d2de:	18bb      	adds	r3, r7, r2
 800d2e0:	781b      	ldrb	r3, [r3, #0]
 800d2e2:	227f      	movs	r2, #127	@ 0x7f
 800d2e4:	401a      	ands	r2, r3
 800d2e6:	0013      	movs	r3, r2
 800d2e8:	009b      	lsls	r3, r3, #2
 800d2ea:	189b      	adds	r3, r3, r2
 800d2ec:	009b      	lsls	r3, r3, #2
 800d2ee:	3310      	adds	r3, #16
 800d2f0:	687a      	ldr	r2, [r7, #4]
 800d2f2:	18d3      	adds	r3, r2, r3
 800d2f4:	3304      	adds	r3, #4
 800d2f6:	e00d      	b.n	800d314 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d2f8:	230e      	movs	r3, #14
 800d2fa:	18fb      	adds	r3, r7, r3
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	227f      	movs	r2, #127	@ 0x7f
 800d300:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d302:	0013      	movs	r3, r2
 800d304:	009b      	lsls	r3, r3, #2
 800d306:	189b      	adds	r3, r3, r2
 800d308:	009b      	lsls	r3, r3, #2
 800d30a:	3351      	adds	r3, #81	@ 0x51
 800d30c:	33ff      	adds	r3, #255	@ 0xff
 800d30e:	687a      	ldr	r2, [r7, #4]
 800d310:	18d3      	adds	r3, r2, r3
 800d312:	3304      	adds	r3, #4
 800d314:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d31c:	68b9      	ldr	r1, [r7, #8]
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2202      	movs	r2, #2
 800d322:	0018      	movs	r0, r3
 800d324:	f000 fcab 	bl	800dc7e <USBD_CtlSendData>
              break;
 800d328:	e080      	b.n	800d42c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d32a:	220e      	movs	r2, #14
 800d32c:	18bb      	adds	r3, r7, r2
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	b25b      	sxtb	r3, r3
 800d332:	2b00      	cmp	r3, #0
 800d334:	da14      	bge.n	800d360 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d336:	18bb      	adds	r3, r7, r2
 800d338:	781b      	ldrb	r3, [r3, #0]
 800d33a:	220f      	movs	r2, #15
 800d33c:	401a      	ands	r2, r3
 800d33e:	6879      	ldr	r1, [r7, #4]
 800d340:	0013      	movs	r3, r2
 800d342:	009b      	lsls	r3, r3, #2
 800d344:	189b      	adds	r3, r3, r2
 800d346:	009b      	lsls	r3, r3, #2
 800d348:	18cb      	adds	r3, r1, r3
 800d34a:	3318      	adds	r3, #24
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d11e      	bne.n	800d390 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800d352:	683a      	ldr	r2, [r7, #0]
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	0011      	movs	r1, r2
 800d358:	0018      	movs	r0, r3
 800d35a:	f000 fc12 	bl	800db82 <USBD_CtlError>
                  break;
 800d35e:	e065      	b.n	800d42c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d360:	230e      	movs	r3, #14
 800d362:	18fb      	adds	r3, r7, r3
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	220f      	movs	r2, #15
 800d368:	401a      	ands	r2, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	23ac      	movs	r3, #172	@ 0xac
 800d36e:	0059      	lsls	r1, r3, #1
 800d370:	0013      	movs	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	189b      	adds	r3, r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	18c3      	adds	r3, r0, r3
 800d37a:	185b      	adds	r3, r3, r1
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d106      	bne.n	800d390 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 800d382:	683a      	ldr	r2, [r7, #0]
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	0011      	movs	r1, r2
 800d388:	0018      	movs	r0, r3
 800d38a:	f000 fbfa 	bl	800db82 <USBD_CtlError>
                  break;
 800d38e:	e04d      	b.n	800d42c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d390:	220e      	movs	r2, #14
 800d392:	18bb      	adds	r3, r7, r2
 800d394:	781b      	ldrb	r3, [r3, #0]
 800d396:	b25b      	sxtb	r3, r3
 800d398:	2b00      	cmp	r3, #0
 800d39a:	da0c      	bge.n	800d3b6 <USBD_StdEPReq+0x2c8>
 800d39c:	18bb      	adds	r3, r7, r2
 800d39e:	781b      	ldrb	r3, [r3, #0]
 800d3a0:	227f      	movs	r2, #127	@ 0x7f
 800d3a2:	401a      	ands	r2, r3
 800d3a4:	0013      	movs	r3, r2
 800d3a6:	009b      	lsls	r3, r3, #2
 800d3a8:	189b      	adds	r3, r3, r2
 800d3aa:	009b      	lsls	r3, r3, #2
 800d3ac:	3310      	adds	r3, #16
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	18d3      	adds	r3, r2, r3
 800d3b2:	3304      	adds	r3, #4
 800d3b4:	e00d      	b.n	800d3d2 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3b6:	230e      	movs	r3, #14
 800d3b8:	18fb      	adds	r3, r7, r3
 800d3ba:	781b      	ldrb	r3, [r3, #0]
 800d3bc:	227f      	movs	r2, #127	@ 0x7f
 800d3be:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3c0:	0013      	movs	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	189b      	adds	r3, r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	3351      	adds	r3, #81	@ 0x51
 800d3ca:	33ff      	adds	r3, #255	@ 0xff
 800d3cc:	687a      	ldr	r2, [r7, #4]
 800d3ce:	18d3      	adds	r3, r2, r3
 800d3d0:	3304      	adds	r3, #4
 800d3d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d3d4:	220e      	movs	r2, #14
 800d3d6:	18bb      	adds	r3, r7, r2
 800d3d8:	781b      	ldrb	r3, [r3, #0]
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d003      	beq.n	800d3e6 <USBD_StdEPReq+0x2f8>
 800d3de:	18bb      	adds	r3, r7, r2
 800d3e0:	781b      	ldrb	r3, [r3, #0]
 800d3e2:	2b80      	cmp	r3, #128	@ 0x80
 800d3e4:	d103      	bne.n	800d3ee <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 800d3e6:	68bb      	ldr	r3, [r7, #8]
 800d3e8:	2200      	movs	r2, #0
 800d3ea:	601a      	str	r2, [r3, #0]
 800d3ec:	e010      	b.n	800d410 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800d3ee:	230e      	movs	r3, #14
 800d3f0:	18fb      	adds	r3, r7, r3
 800d3f2:	781a      	ldrb	r2, [r3, #0]
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	0011      	movs	r1, r2
 800d3f8:	0018      	movs	r0, r3
 800d3fa:	f001 f8b0 	bl	800e55e <USBD_LL_IsStallEP>
 800d3fe:	1e03      	subs	r3, r0, #0
 800d400:	d003      	beq.n	800d40a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2201      	movs	r2, #1
 800d406:	601a      	str	r2, [r3, #0]
 800d408:	e002      	b.n	800d410 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 800d40a:	68bb      	ldr	r3, [r7, #8]
 800d40c:	2200      	movs	r2, #0
 800d40e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d410:	68b9      	ldr	r1, [r7, #8]
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2202      	movs	r2, #2
 800d416:	0018      	movs	r0, r3
 800d418:	f000 fc31 	bl	800dc7e <USBD_CtlSendData>
              break;
 800d41c:	e006      	b.n	800d42c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 800d41e:	683a      	ldr	r2, [r7, #0]
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	0011      	movs	r1, r2
 800d424:	0018      	movs	r0, r3
 800d426:	f000 fbac 	bl	800db82 <USBD_CtlError>
              break;
 800d42a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 800d42c:	e006      	b.n	800d43c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	0011      	movs	r1, r2
 800d434:	0018      	movs	r0, r3
 800d436:	f000 fba4 	bl	800db82 <USBD_CtlError>
          break;
 800d43a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 800d43c:	e006      	b.n	800d44c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 800d43e:	683a      	ldr	r2, [r7, #0]
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	0011      	movs	r1, r2
 800d444:	0018      	movs	r0, r3
 800d446:	f000 fb9c 	bl	800db82 <USBD_CtlError>
      break;
 800d44a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 800d44c:	230f      	movs	r3, #15
 800d44e:	18fb      	adds	r3, r7, r3
 800d450:	781b      	ldrb	r3, [r3, #0]
}
 800d452:	0018      	movs	r0, r3
 800d454:	46bd      	mov	sp, r7
 800d456:	b004      	add	sp, #16
 800d458:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800d45c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d466:	2308      	movs	r3, #8
 800d468:	18fb      	adds	r3, r7, r3
 800d46a:	2200      	movs	r2, #0
 800d46c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 800d46e:	2300      	movs	r3, #0
 800d470:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d472:	230b      	movs	r3, #11
 800d474:	18fb      	adds	r3, r7, r3
 800d476:	2200      	movs	r2, #0
 800d478:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	885b      	ldrh	r3, [r3, #2]
 800d47e:	0a1b      	lsrs	r3, r3, #8
 800d480:	b29b      	uxth	r3, r3
 800d482:	2b07      	cmp	r3, #7
 800d484:	d900      	bls.n	800d488 <USBD_GetDescriptor+0x2c>
 800d486:	e159      	b.n	800d73c <USBD_GetDescriptor+0x2e0>
 800d488:	009a      	lsls	r2, r3, #2
 800d48a:	4bcb      	ldr	r3, [pc, #812]	@ (800d7b8 <USBD_GetDescriptor+0x35c>)
 800d48c:	18d3      	adds	r3, r2, r3
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	23ac      	movs	r3, #172	@ 0xac
 800d496:	009b      	lsls	r3, r3, #2
 800d498:	58d3      	ldr	r3, [r2, r3]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	687a      	ldr	r2, [r7, #4]
 800d49e:	7c12      	ldrb	r2, [r2, #16]
 800d4a0:	2108      	movs	r1, #8
 800d4a2:	1879      	adds	r1, r7, r1
 800d4a4:	0010      	movs	r0, r2
 800d4a6:	4798      	blx	r3
 800d4a8:	0003      	movs	r3, r0
 800d4aa:	60fb      	str	r3, [r7, #12]
      break;
 800d4ac:	e153      	b.n	800d756 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	7c1b      	ldrb	r3, [r3, #16]
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d10f      	bne.n	800d4d6 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800d4b6:	687a      	ldr	r2, [r7, #4]
 800d4b8:	23ad      	movs	r3, #173	@ 0xad
 800d4ba:	009b      	lsls	r3, r3, #2
 800d4bc:	58d3      	ldr	r3, [r2, r3]
 800d4be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d4c0:	2208      	movs	r2, #8
 800d4c2:	18ba      	adds	r2, r7, r2
 800d4c4:	0010      	movs	r0, r2
 800d4c6:	4798      	blx	r3
 800d4c8:	0003      	movs	r3, r0
 800d4ca:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	3301      	adds	r3, #1
 800d4d0:	2202      	movs	r2, #2
 800d4d2:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d4d4:	e13f      	b.n	800d756 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800d4d6:	687a      	ldr	r2, [r7, #4]
 800d4d8:	23ad      	movs	r3, #173	@ 0xad
 800d4da:	009b      	lsls	r3, r3, #2
 800d4dc:	58d3      	ldr	r3, [r2, r3]
 800d4de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4e0:	2208      	movs	r2, #8
 800d4e2:	18ba      	adds	r2, r7, r2
 800d4e4:	0010      	movs	r0, r2
 800d4e6:	4798      	blx	r3
 800d4e8:	0003      	movs	r3, r0
 800d4ea:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	3301      	adds	r3, #1
 800d4f0:	2202      	movs	r2, #2
 800d4f2:	701a      	strb	r2, [r3, #0]
      break;
 800d4f4:	e12f      	b.n	800d756 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	885b      	ldrh	r3, [r3, #2]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b05      	cmp	r3, #5
 800d4fe:	d900      	bls.n	800d502 <USBD_GetDescriptor+0xa6>
 800d500:	e0d0      	b.n	800d6a4 <USBD_GetDescriptor+0x248>
 800d502:	009a      	lsls	r2, r3, #2
 800d504:	4bad      	ldr	r3, [pc, #692]	@ (800d7bc <USBD_GetDescriptor+0x360>)
 800d506:	18d3      	adds	r3, r2, r3
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d50c:	687a      	ldr	r2, [r7, #4]
 800d50e:	23ac      	movs	r3, #172	@ 0xac
 800d510:	009b      	lsls	r3, r3, #2
 800d512:	58d3      	ldr	r3, [r2, r3]
 800d514:	685b      	ldr	r3, [r3, #4]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00d      	beq.n	800d536 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	23ac      	movs	r3, #172	@ 0xac
 800d51e:	009b      	lsls	r3, r3, #2
 800d520:	58d3      	ldr	r3, [r2, r3]
 800d522:	685b      	ldr	r3, [r3, #4]
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	7c12      	ldrb	r2, [r2, #16]
 800d528:	2108      	movs	r1, #8
 800d52a:	1879      	adds	r1, r7, r1
 800d52c:	0010      	movs	r0, r2
 800d52e:	4798      	blx	r3
 800d530:	0003      	movs	r3, r0
 800d532:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d534:	e0c3      	b.n	800d6be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d536:	683a      	ldr	r2, [r7, #0]
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	0011      	movs	r1, r2
 800d53c:	0018      	movs	r0, r3
 800d53e:	f000 fb20 	bl	800db82 <USBD_CtlError>
            err++;
 800d542:	210b      	movs	r1, #11
 800d544:	187b      	adds	r3, r7, r1
 800d546:	781a      	ldrb	r2, [r3, #0]
 800d548:	187b      	adds	r3, r7, r1
 800d54a:	3201      	adds	r2, #1
 800d54c:	701a      	strb	r2, [r3, #0]
          break;
 800d54e:	e0b6      	b.n	800d6be <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	23ac      	movs	r3, #172	@ 0xac
 800d554:	009b      	lsls	r3, r3, #2
 800d556:	58d3      	ldr	r3, [r2, r3]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00d      	beq.n	800d57a <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d55e:	687a      	ldr	r2, [r7, #4]
 800d560:	23ac      	movs	r3, #172	@ 0xac
 800d562:	009b      	lsls	r3, r3, #2
 800d564:	58d3      	ldr	r3, [r2, r3]
 800d566:	689b      	ldr	r3, [r3, #8]
 800d568:	687a      	ldr	r2, [r7, #4]
 800d56a:	7c12      	ldrb	r2, [r2, #16]
 800d56c:	2108      	movs	r1, #8
 800d56e:	1879      	adds	r1, r7, r1
 800d570:	0010      	movs	r0, r2
 800d572:	4798      	blx	r3
 800d574:	0003      	movs	r3, r0
 800d576:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d578:	e0a1      	b.n	800d6be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d57a:	683a      	ldr	r2, [r7, #0]
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	0011      	movs	r1, r2
 800d580:	0018      	movs	r0, r3
 800d582:	f000 fafe 	bl	800db82 <USBD_CtlError>
            err++;
 800d586:	210b      	movs	r1, #11
 800d588:	187b      	adds	r3, r7, r1
 800d58a:	781a      	ldrb	r2, [r3, #0]
 800d58c:	187b      	adds	r3, r7, r1
 800d58e:	3201      	adds	r2, #1
 800d590:	701a      	strb	r2, [r3, #0]
          break;
 800d592:	e094      	b.n	800d6be <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d594:	687a      	ldr	r2, [r7, #4]
 800d596:	23ac      	movs	r3, #172	@ 0xac
 800d598:	009b      	lsls	r3, r3, #2
 800d59a:	58d3      	ldr	r3, [r2, r3]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d00d      	beq.n	800d5be <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d5a2:	687a      	ldr	r2, [r7, #4]
 800d5a4:	23ac      	movs	r3, #172	@ 0xac
 800d5a6:	009b      	lsls	r3, r3, #2
 800d5a8:	58d3      	ldr	r3, [r2, r3]
 800d5aa:	68db      	ldr	r3, [r3, #12]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	7c12      	ldrb	r2, [r2, #16]
 800d5b0:	2108      	movs	r1, #8
 800d5b2:	1879      	adds	r1, r7, r1
 800d5b4:	0010      	movs	r0, r2
 800d5b6:	4798      	blx	r3
 800d5b8:	0003      	movs	r3, r0
 800d5ba:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5bc:	e07f      	b.n	800d6be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	0011      	movs	r1, r2
 800d5c4:	0018      	movs	r0, r3
 800d5c6:	f000 fadc 	bl	800db82 <USBD_CtlError>
            err++;
 800d5ca:	210b      	movs	r1, #11
 800d5cc:	187b      	adds	r3, r7, r1
 800d5ce:	781a      	ldrb	r2, [r3, #0]
 800d5d0:	187b      	adds	r3, r7, r1
 800d5d2:	3201      	adds	r2, #1
 800d5d4:	701a      	strb	r2, [r3, #0]
          break;
 800d5d6:	e072      	b.n	800d6be <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	23ac      	movs	r3, #172	@ 0xac
 800d5dc:	009b      	lsls	r3, r3, #2
 800d5de:	58d3      	ldr	r3, [r2, r3]
 800d5e0:	691b      	ldr	r3, [r3, #16]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d00d      	beq.n	800d602 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5e6:	687a      	ldr	r2, [r7, #4]
 800d5e8:	23ac      	movs	r3, #172	@ 0xac
 800d5ea:	009b      	lsls	r3, r3, #2
 800d5ec:	58d3      	ldr	r3, [r2, r3]
 800d5ee:	691b      	ldr	r3, [r3, #16]
 800d5f0:	687a      	ldr	r2, [r7, #4]
 800d5f2:	7c12      	ldrb	r2, [r2, #16]
 800d5f4:	2108      	movs	r1, #8
 800d5f6:	1879      	adds	r1, r7, r1
 800d5f8:	0010      	movs	r0, r2
 800d5fa:	4798      	blx	r3
 800d5fc:	0003      	movs	r3, r0
 800d5fe:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d600:	e05d      	b.n	800d6be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d602:	683a      	ldr	r2, [r7, #0]
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	0011      	movs	r1, r2
 800d608:	0018      	movs	r0, r3
 800d60a:	f000 faba 	bl	800db82 <USBD_CtlError>
            err++;
 800d60e:	210b      	movs	r1, #11
 800d610:	187b      	adds	r3, r7, r1
 800d612:	781a      	ldrb	r2, [r3, #0]
 800d614:	187b      	adds	r3, r7, r1
 800d616:	3201      	adds	r2, #1
 800d618:	701a      	strb	r2, [r3, #0]
          break;
 800d61a:	e050      	b.n	800d6be <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d61c:	687a      	ldr	r2, [r7, #4]
 800d61e:	23ac      	movs	r3, #172	@ 0xac
 800d620:	009b      	lsls	r3, r3, #2
 800d622:	58d3      	ldr	r3, [r2, r3]
 800d624:	695b      	ldr	r3, [r3, #20]
 800d626:	2b00      	cmp	r3, #0
 800d628:	d00d      	beq.n	800d646 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	23ac      	movs	r3, #172	@ 0xac
 800d62e:	009b      	lsls	r3, r3, #2
 800d630:	58d3      	ldr	r3, [r2, r3]
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	687a      	ldr	r2, [r7, #4]
 800d636:	7c12      	ldrb	r2, [r2, #16]
 800d638:	2108      	movs	r1, #8
 800d63a:	1879      	adds	r1, r7, r1
 800d63c:	0010      	movs	r0, r2
 800d63e:	4798      	blx	r3
 800d640:	0003      	movs	r3, r0
 800d642:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d644:	e03b      	b.n	800d6be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d646:	683a      	ldr	r2, [r7, #0]
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	0011      	movs	r1, r2
 800d64c:	0018      	movs	r0, r3
 800d64e:	f000 fa98 	bl	800db82 <USBD_CtlError>
            err++;
 800d652:	210b      	movs	r1, #11
 800d654:	187b      	adds	r3, r7, r1
 800d656:	781a      	ldrb	r2, [r3, #0]
 800d658:	187b      	adds	r3, r7, r1
 800d65a:	3201      	adds	r2, #1
 800d65c:	701a      	strb	r2, [r3, #0]
          break;
 800d65e:	e02e      	b.n	800d6be <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d660:	687a      	ldr	r2, [r7, #4]
 800d662:	23ac      	movs	r3, #172	@ 0xac
 800d664:	009b      	lsls	r3, r3, #2
 800d666:	58d3      	ldr	r3, [r2, r3]
 800d668:	699b      	ldr	r3, [r3, #24]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d00d      	beq.n	800d68a <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d66e:	687a      	ldr	r2, [r7, #4]
 800d670:	23ac      	movs	r3, #172	@ 0xac
 800d672:	009b      	lsls	r3, r3, #2
 800d674:	58d3      	ldr	r3, [r2, r3]
 800d676:	699b      	ldr	r3, [r3, #24]
 800d678:	687a      	ldr	r2, [r7, #4]
 800d67a:	7c12      	ldrb	r2, [r2, #16]
 800d67c:	2108      	movs	r1, #8
 800d67e:	1879      	adds	r1, r7, r1
 800d680:	0010      	movs	r0, r2
 800d682:	4798      	blx	r3
 800d684:	0003      	movs	r3, r0
 800d686:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d688:	e019      	b.n	800d6be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 800d68a:	683a      	ldr	r2, [r7, #0]
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	0011      	movs	r1, r2
 800d690:	0018      	movs	r0, r3
 800d692:	f000 fa76 	bl	800db82 <USBD_CtlError>
            err++;
 800d696:	210b      	movs	r1, #11
 800d698:	187b      	adds	r3, r7, r1
 800d69a:	781a      	ldrb	r2, [r3, #0]
 800d69c:	187b      	adds	r3, r7, r1
 800d69e:	3201      	adds	r2, #1
 800d6a0:	701a      	strb	r2, [r3, #0]
          break;
 800d6a2:	e00c      	b.n	800d6be <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 800d6a4:	683a      	ldr	r2, [r7, #0]
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	0011      	movs	r1, r2
 800d6aa:	0018      	movs	r0, r3
 800d6ac:	f000 fa69 	bl	800db82 <USBD_CtlError>
          err++;
 800d6b0:	210b      	movs	r1, #11
 800d6b2:	187b      	adds	r3, r7, r1
 800d6b4:	781a      	ldrb	r2, [r3, #0]
 800d6b6:	187b      	adds	r3, r7, r1
 800d6b8:	3201      	adds	r2, #1
 800d6ba:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 800d6bc:	e04b      	b.n	800d756 <USBD_GetDescriptor+0x2fa>
 800d6be:	e04a      	b.n	800d756 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	7c1b      	ldrb	r3, [r3, #16]
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d10b      	bne.n	800d6e0 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d6c8:	687a      	ldr	r2, [r7, #4]
 800d6ca:	23ad      	movs	r3, #173	@ 0xad
 800d6cc:	009b      	lsls	r3, r3, #2
 800d6ce:	58d3      	ldr	r3, [r2, r3]
 800d6d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d6d2:	2208      	movs	r2, #8
 800d6d4:	18ba      	adds	r2, r7, r2
 800d6d6:	0010      	movs	r0, r2
 800d6d8:	4798      	blx	r3
 800d6da:	0003      	movs	r3, r0
 800d6dc:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6de:	e03a      	b.n	800d756 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800d6e0:	683a      	ldr	r2, [r7, #0]
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	0011      	movs	r1, r2
 800d6e6:	0018      	movs	r0, r3
 800d6e8:	f000 fa4b 	bl	800db82 <USBD_CtlError>
        err++;
 800d6ec:	210b      	movs	r1, #11
 800d6ee:	187b      	adds	r3, r7, r1
 800d6f0:	781a      	ldrb	r2, [r3, #0]
 800d6f2:	187b      	adds	r3, r7, r1
 800d6f4:	3201      	adds	r2, #1
 800d6f6:	701a      	strb	r2, [r3, #0]
      break;
 800d6f8:	e02d      	b.n	800d756 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	7c1b      	ldrb	r3, [r3, #16]
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d10f      	bne.n	800d722 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d702:	687a      	ldr	r2, [r7, #4]
 800d704:	23ad      	movs	r3, #173	@ 0xad
 800d706:	009b      	lsls	r3, r3, #2
 800d708:	58d3      	ldr	r3, [r2, r3]
 800d70a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d70c:	2208      	movs	r2, #8
 800d70e:	18ba      	adds	r2, r7, r2
 800d710:	0010      	movs	r0, r2
 800d712:	4798      	blx	r3
 800d714:	0003      	movs	r3, r0
 800d716:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d718:	68fb      	ldr	r3, [r7, #12]
 800d71a:	3301      	adds	r3, #1
 800d71c:	2207      	movs	r2, #7
 800d71e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d720:	e019      	b.n	800d756 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 800d722:	683a      	ldr	r2, [r7, #0]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	0011      	movs	r1, r2
 800d728:	0018      	movs	r0, r3
 800d72a:	f000 fa2a 	bl	800db82 <USBD_CtlError>
        err++;
 800d72e:	210b      	movs	r1, #11
 800d730:	187b      	adds	r3, r7, r1
 800d732:	781a      	ldrb	r2, [r3, #0]
 800d734:	187b      	adds	r3, r7, r1
 800d736:	3201      	adds	r2, #1
 800d738:	701a      	strb	r2, [r3, #0]
      break;
 800d73a:	e00c      	b.n	800d756 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 800d73c:	683a      	ldr	r2, [r7, #0]
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	0011      	movs	r1, r2
 800d742:	0018      	movs	r0, r3
 800d744:	f000 fa1d 	bl	800db82 <USBD_CtlError>
      err++;
 800d748:	210b      	movs	r1, #11
 800d74a:	187b      	adds	r3, r7, r1
 800d74c:	781a      	ldrb	r2, [r3, #0]
 800d74e:	187b      	adds	r3, r7, r1
 800d750:	3201      	adds	r2, #1
 800d752:	701a      	strb	r2, [r3, #0]
      break;
 800d754:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 800d756:	230b      	movs	r3, #11
 800d758:	18fb      	adds	r3, r7, r3
 800d75a:	781b      	ldrb	r3, [r3, #0]
 800d75c:	2b00      	cmp	r3, #0
 800d75e:	d127      	bne.n	800d7b0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800d760:	2108      	movs	r1, #8
 800d762:	187b      	adds	r3, r7, r1
 800d764:	881b      	ldrh	r3, [r3, #0]
 800d766:	2b00      	cmp	r3, #0
 800d768:	d019      	beq.n	800d79e <USBD_GetDescriptor+0x342>
 800d76a:	683b      	ldr	r3, [r7, #0]
 800d76c:	88db      	ldrh	r3, [r3, #6]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d015      	beq.n	800d79e <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	88da      	ldrh	r2, [r3, #6]
 800d776:	187b      	adds	r3, r7, r1
 800d778:	881b      	ldrh	r3, [r3, #0]
 800d77a:	1c18      	adds	r0, r3, #0
 800d77c:	1c11      	adds	r1, r2, #0
 800d77e:	b28a      	uxth	r2, r1
 800d780:	b283      	uxth	r3, r0
 800d782:	429a      	cmp	r2, r3
 800d784:	d900      	bls.n	800d788 <USBD_GetDescriptor+0x32c>
 800d786:	1c01      	adds	r1, r0, #0
 800d788:	b28a      	uxth	r2, r1
 800d78a:	2108      	movs	r1, #8
 800d78c:	187b      	adds	r3, r7, r1
 800d78e:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d790:	187b      	adds	r3, r7, r1
 800d792:	881a      	ldrh	r2, [r3, #0]
 800d794:	68f9      	ldr	r1, [r7, #12]
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	0018      	movs	r0, r3
 800d79a:	f000 fa70 	bl	800dc7e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	88db      	ldrh	r3, [r3, #6]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d105      	bne.n	800d7b2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	0018      	movs	r0, r3
 800d7aa:	f000 fad2 	bl	800dd52 <USBD_CtlSendStatus>
 800d7ae:	e000      	b.n	800d7b2 <USBD_GetDescriptor+0x356>
    return;
 800d7b0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	b004      	add	sp, #16
 800d7b6:	bd80      	pop	{r7, pc}
 800d7b8:	0800ec64 	.word	0x0800ec64
 800d7bc:	0800ec84 	.word	0x0800ec84

0800d7c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800d7c0:	b590      	push	{r4, r7, lr}
 800d7c2:	b085      	sub	sp, #20
 800d7c4:	af00      	add	r7, sp, #0
 800d7c6:	6078      	str	r0, [r7, #4]
 800d7c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d7ca:	683b      	ldr	r3, [r7, #0]
 800d7cc:	889b      	ldrh	r3, [r3, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d13d      	bne.n	800d84e <USBD_SetAddress+0x8e>
 800d7d2:	683b      	ldr	r3, [r7, #0]
 800d7d4:	88db      	ldrh	r3, [r3, #6]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d139      	bne.n	800d84e <USBD_SetAddress+0x8e>
 800d7da:	683b      	ldr	r3, [r7, #0]
 800d7dc:	885b      	ldrh	r3, [r3, #2]
 800d7de:	2b7f      	cmp	r3, #127	@ 0x7f
 800d7e0:	d835      	bhi.n	800d84e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7e2:	683b      	ldr	r3, [r7, #0]
 800d7e4:	885b      	ldrh	r3, [r3, #2]
 800d7e6:	b2da      	uxtb	r2, r3
 800d7e8:	230f      	movs	r3, #15
 800d7ea:	18fb      	adds	r3, r7, r3
 800d7ec:	217f      	movs	r1, #127	@ 0x7f
 800d7ee:	400a      	ands	r2, r1
 800d7f0:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7f2:	687a      	ldr	r2, [r7, #4]
 800d7f4:	23a7      	movs	r3, #167	@ 0xa7
 800d7f6:	009b      	lsls	r3, r3, #2
 800d7f8:	5cd3      	ldrb	r3, [r2, r3]
 800d7fa:	2b03      	cmp	r3, #3
 800d7fc:	d106      	bne.n	800d80c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 800d7fe:	683a      	ldr	r2, [r7, #0]
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	0011      	movs	r1, r2
 800d804:	0018      	movs	r0, r3
 800d806:	f000 f9bc 	bl	800db82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d80a:	e027      	b.n	800d85c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	240f      	movs	r4, #15
 800d810:	193a      	adds	r2, r7, r4
 800d812:	4914      	ldr	r1, [pc, #80]	@ (800d864 <USBD_SetAddress+0xa4>)
 800d814:	7812      	ldrb	r2, [r2, #0]
 800d816:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d818:	193b      	adds	r3, r7, r4
 800d81a:	781a      	ldrb	r2, [r3, #0]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	0011      	movs	r1, r2
 800d820:	0018      	movs	r0, r3
 800d822:	f000 fecd 	bl	800e5c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	0018      	movs	r0, r3
 800d82a:	f000 fa92 	bl	800dd52 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d82e:	193b      	adds	r3, r7, r4
 800d830:	781b      	ldrb	r3, [r3, #0]
 800d832:	2b00      	cmp	r3, #0
 800d834:	d005      	beq.n	800d842 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	23a7      	movs	r3, #167	@ 0xa7
 800d83a:	009b      	lsls	r3, r3, #2
 800d83c:	2102      	movs	r1, #2
 800d83e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d840:	e00c      	b.n	800d85c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	23a7      	movs	r3, #167	@ 0xa7
 800d846:	009b      	lsls	r3, r3, #2
 800d848:	2101      	movs	r1, #1
 800d84a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d84c:	e006      	b.n	800d85c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d84e:	683a      	ldr	r2, [r7, #0]
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	0011      	movs	r1, r2
 800d854:	0018      	movs	r0, r3
 800d856:	f000 f994 	bl	800db82 <USBD_CtlError>
  }
}
 800d85a:	46c0      	nop			@ (mov r8, r8)
 800d85c:	46c0      	nop			@ (mov r8, r8)
 800d85e:	46bd      	mov	sp, r7
 800d860:	b005      	add	sp, #20
 800d862:	bd90      	pop	{r4, r7, pc}
 800d864:	0000029e 	.word	0x0000029e

0800d868 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b082      	sub	sp, #8
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	6078      	str	r0, [r7, #4]
 800d870:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	885b      	ldrh	r3, [r3, #2]
 800d876:	b2da      	uxtb	r2, r3
 800d878:	4b4c      	ldr	r3, [pc, #304]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d87a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d87c:	4b4b      	ldr	r3, [pc, #300]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	2b01      	cmp	r3, #1
 800d882:	d906      	bls.n	800d892 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	0011      	movs	r1, r2
 800d88a:	0018      	movs	r0, r3
 800d88c:	f000 f979 	bl	800db82 <USBD_CtlError>
 800d890:	e088      	b.n	800d9a4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 800d892:	687a      	ldr	r2, [r7, #4]
 800d894:	23a7      	movs	r3, #167	@ 0xa7
 800d896:	009b      	lsls	r3, r3, #2
 800d898:	5cd3      	ldrb	r3, [r2, r3]
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d002      	beq.n	800d8a4 <USBD_SetConfig+0x3c>
 800d89e:	2b03      	cmp	r3, #3
 800d8a0:	d029      	beq.n	800d8f6 <USBD_SetConfig+0x8e>
 800d8a2:	e071      	b.n	800d988 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800d8a4:	4b41      	ldr	r3, [pc, #260]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d8a6:	781b      	ldrb	r3, [r3, #0]
 800d8a8:	2b00      	cmp	r3, #0
 800d8aa:	d01f      	beq.n	800d8ec <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 800d8ac:	4b3f      	ldr	r3, [pc, #252]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	001a      	movs	r2, r3
 800d8b2:	687b      	ldr	r3, [r7, #4]
 800d8b4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d8b6:	687a      	ldr	r2, [r7, #4]
 800d8b8:	23a7      	movs	r3, #167	@ 0xa7
 800d8ba:	009b      	lsls	r3, r3, #2
 800d8bc:	2103      	movs	r1, #3
 800d8be:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d8c0:	4b3a      	ldr	r3, [pc, #232]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d8c2:	781a      	ldrb	r2, [r3, #0]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	0011      	movs	r1, r2
 800d8c8:	0018      	movs	r0, r3
 800d8ca:	f7ff f8c5 	bl	800ca58 <USBD_SetClassConfig>
 800d8ce:	0003      	movs	r3, r0
 800d8d0:	2b02      	cmp	r3, #2
 800d8d2:	d106      	bne.n	800d8e2 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 800d8d4:	683a      	ldr	r2, [r7, #0]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	0011      	movs	r1, r2
 800d8da:	0018      	movs	r0, r3
 800d8dc:	f000 f951 	bl	800db82 <USBD_CtlError>
            return;
 800d8e0:	e060      	b.n	800d9a4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	0018      	movs	r0, r3
 800d8e6:	f000 fa34 	bl	800dd52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d8ea:	e05b      	b.n	800d9a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	0018      	movs	r0, r3
 800d8f0:	f000 fa2f 	bl	800dd52 <USBD_CtlSendStatus>
        break;
 800d8f4:	e056      	b.n	800d9a4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800d8f6:	4b2d      	ldr	r3, [pc, #180]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d115      	bne.n	800d92a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8fe:	687a      	ldr	r2, [r7, #4]
 800d900:	23a7      	movs	r3, #167	@ 0xa7
 800d902:	009b      	lsls	r3, r3, #2
 800d904:	2102      	movs	r1, #2
 800d906:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 800d908:	4b28      	ldr	r3, [pc, #160]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d90a:	781b      	ldrb	r3, [r3, #0]
 800d90c:	001a      	movs	r2, r3
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800d912:	4b26      	ldr	r3, [pc, #152]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d914:	781a      	ldrb	r2, [r3, #0]
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	0011      	movs	r1, r2
 800d91a:	0018      	movs	r0, r3
 800d91c:	f7ff f8c3 	bl	800caa6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	0018      	movs	r0, r3
 800d924:	f000 fa15 	bl	800dd52 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800d928:	e03c      	b.n	800d9a4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 800d92a:	4b20      	ldr	r3, [pc, #128]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	001a      	movs	r2, r3
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	685b      	ldr	r3, [r3, #4]
 800d934:	429a      	cmp	r2, r3
 800d936:	d022      	beq.n	800d97e <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	685b      	ldr	r3, [r3, #4]
 800d93c:	b2da      	uxtb	r2, r3
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	0011      	movs	r1, r2
 800d942:	0018      	movs	r0, r3
 800d944:	f7ff f8af 	bl	800caa6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800d948:	4b18      	ldr	r3, [pc, #96]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d94a:	781b      	ldrb	r3, [r3, #0]
 800d94c:	001a      	movs	r2, r3
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800d952:	4b16      	ldr	r3, [pc, #88]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d954:	781a      	ldrb	r2, [r3, #0]
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	0011      	movs	r1, r2
 800d95a:	0018      	movs	r0, r3
 800d95c:	f7ff f87c 	bl	800ca58 <USBD_SetClassConfig>
 800d960:	0003      	movs	r3, r0
 800d962:	2b02      	cmp	r3, #2
 800d964:	d106      	bne.n	800d974 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 800d966:	683a      	ldr	r2, [r7, #0]
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	0011      	movs	r1, r2
 800d96c:	0018      	movs	r0, r3
 800d96e:	f000 f908 	bl	800db82 <USBD_CtlError>
            return;
 800d972:	e017      	b.n	800d9a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	0018      	movs	r0, r3
 800d978:	f000 f9eb 	bl	800dd52 <USBD_CtlSendStatus>
        break;
 800d97c:	e012      	b.n	800d9a4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	0018      	movs	r0, r3
 800d982:	f000 f9e6 	bl	800dd52 <USBD_CtlSendStatus>
        break;
 800d986:	e00d      	b.n	800d9a4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 800d988:	683a      	ldr	r2, [r7, #0]
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	0011      	movs	r1, r2
 800d98e:	0018      	movs	r0, r3
 800d990:	f000 f8f7 	bl	800db82 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 800d994:	4b05      	ldr	r3, [pc, #20]	@ (800d9ac <USBD_SetConfig+0x144>)
 800d996:	781a      	ldrb	r2, [r3, #0]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	0011      	movs	r1, r2
 800d99c:	0018      	movs	r0, r3
 800d99e:	f7ff f882 	bl	800caa6 <USBD_ClrClassConfig>
        break;
 800d9a2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	b002      	add	sp, #8
 800d9a8:	bd80      	pop	{r7, pc}
 800d9aa:	46c0      	nop			@ (mov r8, r8)
 800d9ac:	200004cc 	.word	0x200004cc

0800d9b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b082      	sub	sp, #8
 800d9b4:	af00      	add	r7, sp, #0
 800d9b6:	6078      	str	r0, [r7, #4]
 800d9b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d9ba:	683b      	ldr	r3, [r7, #0]
 800d9bc:	88db      	ldrh	r3, [r3, #6]
 800d9be:	2b01      	cmp	r3, #1
 800d9c0:	d006      	beq.n	800d9d0 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 800d9c2:	683a      	ldr	r2, [r7, #0]
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	0011      	movs	r1, r2
 800d9c8:	0018      	movs	r0, r3
 800d9ca:	f000 f8da 	bl	800db82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d9ce:	e026      	b.n	800da1e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 800d9d0:	687a      	ldr	r2, [r7, #4]
 800d9d2:	23a7      	movs	r3, #167	@ 0xa7
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	5cd3      	ldrb	r3, [r2, r3]
 800d9d8:	2b02      	cmp	r3, #2
 800d9da:	dc02      	bgt.n	800d9e2 <USBD_GetConfig+0x32>
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	dc03      	bgt.n	800d9e8 <USBD_GetConfig+0x38>
 800d9e0:	e016      	b.n	800da10 <USBD_GetConfig+0x60>
 800d9e2:	2b03      	cmp	r3, #3
 800d9e4:	d00c      	beq.n	800da00 <USBD_GetConfig+0x50>
 800d9e6:	e013      	b.n	800da10 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	0019      	movs	r1, r3
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2201      	movs	r2, #1
 800d9f8:	0018      	movs	r0, r3
 800d9fa:	f000 f940 	bl	800dc7e <USBD_CtlSendData>
        break;
 800d9fe:	e00e      	b.n	800da1e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	1d19      	adds	r1, r3, #4
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	0018      	movs	r0, r3
 800da0a:	f000 f938 	bl	800dc7e <USBD_CtlSendData>
        break;
 800da0e:	e006      	b.n	800da1e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 800da10:	683a      	ldr	r2, [r7, #0]
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	0011      	movs	r1, r2
 800da16:	0018      	movs	r0, r3
 800da18:	f000 f8b3 	bl	800db82 <USBD_CtlError>
        break;
 800da1c:	46c0      	nop			@ (mov r8, r8)
}
 800da1e:	46c0      	nop			@ (mov r8, r8)
 800da20:	46bd      	mov	sp, r7
 800da22:	b002      	add	sp, #8
 800da24:	bd80      	pop	{r7, pc}

0800da26 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da26:	b580      	push	{r7, lr}
 800da28:	b082      	sub	sp, #8
 800da2a:	af00      	add	r7, sp, #0
 800da2c:	6078      	str	r0, [r7, #4]
 800da2e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da30:	687a      	ldr	r2, [r7, #4]
 800da32:	23a7      	movs	r3, #167	@ 0xa7
 800da34:	009b      	lsls	r3, r3, #2
 800da36:	5cd3      	ldrb	r3, [r2, r3]
 800da38:	3b01      	subs	r3, #1
 800da3a:	2b02      	cmp	r3, #2
 800da3c:	d822      	bhi.n	800da84 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800da3e:	683b      	ldr	r3, [r7, #0]
 800da40:	88db      	ldrh	r3, [r3, #6]
 800da42:	2b02      	cmp	r3, #2
 800da44:	d006      	beq.n	800da54 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 800da46:	683a      	ldr	r2, [r7, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	0011      	movs	r1, r2
 800da4c:	0018      	movs	r0, r3
 800da4e:	f000 f898 	bl	800db82 <USBD_CtlError>
        break;
 800da52:	e01e      	b.n	800da92 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2201      	movs	r2, #1
 800da58:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800da5a:	687a      	ldr	r2, [r7, #4]
 800da5c:	23a9      	movs	r3, #169	@ 0xa9
 800da5e:	009b      	lsls	r3, r3, #2
 800da60:	58d3      	ldr	r3, [r2, r3]
 800da62:	2b00      	cmp	r3, #0
 800da64:	d005      	beq.n	800da72 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	2202      	movs	r2, #2
 800da6c:	431a      	orrs	r2, r3
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	330c      	adds	r3, #12
 800da76:	0019      	movs	r1, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2202      	movs	r2, #2
 800da7c:	0018      	movs	r0, r3
 800da7e:	f000 f8fe 	bl	800dc7e <USBD_CtlSendData>
      break;
 800da82:	e006      	b.n	800da92 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	0011      	movs	r1, r2
 800da8a:	0018      	movs	r0, r3
 800da8c:	f000 f879 	bl	800db82 <USBD_CtlError>
      break;
 800da90:	46c0      	nop			@ (mov r8, r8)
  }
}
 800da92:	46c0      	nop			@ (mov r8, r8)
 800da94:	46bd      	mov	sp, r7
 800da96:	b002      	add	sp, #8
 800da98:	bd80      	pop	{r7, pc}

0800da9a <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800da9a:	b580      	push	{r7, lr}
 800da9c:	b082      	sub	sp, #8
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
 800daa2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800daa4:	683b      	ldr	r3, [r7, #0]
 800daa6:	885b      	ldrh	r3, [r3, #2]
 800daa8:	2b01      	cmp	r3, #1
 800daaa:	d108      	bne.n	800dabe <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 800daac:	687a      	ldr	r2, [r7, #4]
 800daae:	23a9      	movs	r3, #169	@ 0xa9
 800dab0:	009b      	lsls	r3, r3, #2
 800dab2:	2101      	movs	r1, #1
 800dab4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	0018      	movs	r0, r3
 800daba:	f000 f94a 	bl	800dd52 <USBD_CtlSendStatus>
  }
}
 800dabe:	46c0      	nop			@ (mov r8, r8)
 800dac0:	46bd      	mov	sp, r7
 800dac2:	b002      	add	sp, #8
 800dac4:	bd80      	pop	{r7, pc}

0800dac6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800dac6:	b580      	push	{r7, lr}
 800dac8:	b082      	sub	sp, #8
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dad0:	687a      	ldr	r2, [r7, #4]
 800dad2:	23a7      	movs	r3, #167	@ 0xa7
 800dad4:	009b      	lsls	r3, r3, #2
 800dad6:	5cd3      	ldrb	r3, [r2, r3]
 800dad8:	3b01      	subs	r3, #1
 800dada:	2b02      	cmp	r3, #2
 800dadc:	d80d      	bhi.n	800dafa <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	885b      	ldrh	r3, [r3, #2]
 800dae2:	2b01      	cmp	r3, #1
 800dae4:	d110      	bne.n	800db08 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 800dae6:	687a      	ldr	r2, [r7, #4]
 800dae8:	23a9      	movs	r3, #169	@ 0xa9
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	2100      	movs	r1, #0
 800daee:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	0018      	movs	r0, r3
 800daf4:	f000 f92d 	bl	800dd52 <USBD_CtlSendStatus>
      }
      break;
 800daf8:	e006      	b.n	800db08 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 800dafa:	683a      	ldr	r2, [r7, #0]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	0011      	movs	r1, r2
 800db00:	0018      	movs	r0, r3
 800db02:	f000 f83e 	bl	800db82 <USBD_CtlError>
      break;
 800db06:	e000      	b.n	800db0a <USBD_ClrFeature+0x44>
      break;
 800db08:	46c0      	nop			@ (mov r8, r8)
  }
}
 800db0a:	46c0      	nop			@ (mov r8, r8)
 800db0c:	46bd      	mov	sp, r7
 800db0e:	b002      	add	sp, #8
 800db10:	bd80      	pop	{r7, pc}

0800db12 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800db12:	b580      	push	{r7, lr}
 800db14:	b082      	sub	sp, #8
 800db16:	af00      	add	r7, sp, #0
 800db18:	6078      	str	r0, [r7, #4]
 800db1a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 800db1c:	683b      	ldr	r3, [r7, #0]
 800db1e:	781a      	ldrb	r2, [r3, #0]
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	785a      	ldrb	r2, [r3, #1]
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 800db2c:	683b      	ldr	r3, [r7, #0]
 800db2e:	3302      	adds	r3, #2
 800db30:	781b      	ldrb	r3, [r3, #0]
 800db32:	001a      	movs	r2, r3
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	3303      	adds	r3, #3
 800db38:	781b      	ldrb	r3, [r3, #0]
 800db3a:	021b      	lsls	r3, r3, #8
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	18d3      	adds	r3, r2, r3
 800db40:	b29a      	uxth	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	3304      	adds	r3, #4
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	001a      	movs	r2, r3
 800db4e:	683b      	ldr	r3, [r7, #0]
 800db50:	3305      	adds	r3, #5
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	021b      	lsls	r3, r3, #8
 800db56:	b29b      	uxth	r3, r3
 800db58:	18d3      	adds	r3, r2, r3
 800db5a:	b29a      	uxth	r2, r3
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800db60:	683b      	ldr	r3, [r7, #0]
 800db62:	3306      	adds	r3, #6
 800db64:	781b      	ldrb	r3, [r3, #0]
 800db66:	001a      	movs	r2, r3
 800db68:	683b      	ldr	r3, [r7, #0]
 800db6a:	3307      	adds	r3, #7
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	021b      	lsls	r3, r3, #8
 800db70:	b29b      	uxth	r3, r3
 800db72:	18d3      	adds	r3, r2, r3
 800db74:	b29a      	uxth	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	80da      	strh	r2, [r3, #6]

}
 800db7a:	46c0      	nop			@ (mov r8, r8)
 800db7c:	46bd      	mov	sp, r7
 800db7e:	b002      	add	sp, #8
 800db80:	bd80      	pop	{r7, pc}

0800db82 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800db82:	b580      	push	{r7, lr}
 800db84:	b082      	sub	sp, #8
 800db86:	af00      	add	r7, sp, #0
 800db88:	6078      	str	r0, [r7, #4]
 800db8a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2180      	movs	r1, #128	@ 0x80
 800db90:	0018      	movs	r0, r3
 800db92:	f000 fc8e 	bl	800e4b2 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	2100      	movs	r1, #0
 800db9a:	0018      	movs	r0, r3
 800db9c:	f000 fc89 	bl	800e4b2 <USBD_LL_StallEP>
}
 800dba0:	46c0      	nop			@ (mov r8, r8)
 800dba2:	46bd      	mov	sp, r7
 800dba4:	b002      	add	sp, #8
 800dba6:	bd80      	pop	{r7, pc}

0800dba8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dba8:	b590      	push	{r4, r7, lr}
 800dbaa:	b087      	sub	sp, #28
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	60f8      	str	r0, [r7, #12]
 800dbb0:	60b9      	str	r1, [r7, #8]
 800dbb2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dbb4:	2417      	movs	r4, #23
 800dbb6:	193b      	adds	r3, r7, r4
 800dbb8:	2200      	movs	r2, #0
 800dbba:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d03c      	beq.n	800dc3c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	0018      	movs	r0, r3
 800dbc6:	f000 f83d 	bl	800dc44 <USBD_GetLen>
 800dbca:	0003      	movs	r3, r0
 800dbcc:	3301      	adds	r3, #1
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	18db      	adds	r3, r3, r3
 800dbd2:	b29a      	uxth	r2, r3
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800dbd8:	193b      	adds	r3, r7, r4
 800dbda:	781b      	ldrb	r3, [r3, #0]
 800dbdc:	193a      	adds	r2, r7, r4
 800dbde:	1c59      	adds	r1, r3, #1
 800dbe0:	7011      	strb	r1, [r2, #0]
 800dbe2:	001a      	movs	r2, r3
 800dbe4:	68bb      	ldr	r3, [r7, #8]
 800dbe6:	189b      	adds	r3, r3, r2
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	7812      	ldrb	r2, [r2, #0]
 800dbec:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800dbee:	193b      	adds	r3, r7, r4
 800dbf0:	781b      	ldrb	r3, [r3, #0]
 800dbf2:	193a      	adds	r2, r7, r4
 800dbf4:	1c59      	adds	r1, r3, #1
 800dbf6:	7011      	strb	r1, [r2, #0]
 800dbf8:	001a      	movs	r2, r3
 800dbfa:	68bb      	ldr	r3, [r7, #8]
 800dbfc:	189b      	adds	r3, r3, r2
 800dbfe:	2203      	movs	r2, #3
 800dc00:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800dc02:	e017      	b.n	800dc34 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	1c5a      	adds	r2, r3, #1
 800dc08:	60fa      	str	r2, [r7, #12]
 800dc0a:	2417      	movs	r4, #23
 800dc0c:	193a      	adds	r2, r7, r4
 800dc0e:	7812      	ldrb	r2, [r2, #0]
 800dc10:	1939      	adds	r1, r7, r4
 800dc12:	1c50      	adds	r0, r2, #1
 800dc14:	7008      	strb	r0, [r1, #0]
 800dc16:	0011      	movs	r1, r2
 800dc18:	68ba      	ldr	r2, [r7, #8]
 800dc1a:	1852      	adds	r2, r2, r1
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800dc20:	193b      	adds	r3, r7, r4
 800dc22:	781b      	ldrb	r3, [r3, #0]
 800dc24:	193a      	adds	r2, r7, r4
 800dc26:	1c59      	adds	r1, r3, #1
 800dc28:	7011      	strb	r1, [r2, #0]
 800dc2a:	001a      	movs	r2, r3
 800dc2c:	68bb      	ldr	r3, [r7, #8]
 800dc2e:	189b      	adds	r3, r3, r2
 800dc30:	2200      	movs	r2, #0
 800dc32:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	781b      	ldrb	r3, [r3, #0]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d1e3      	bne.n	800dc04 <USBD_GetString+0x5c>
    }
  }
}
 800dc3c:	46c0      	nop			@ (mov r8, r8)
 800dc3e:	46bd      	mov	sp, r7
 800dc40:	b007      	add	sp, #28
 800dc42:	bd90      	pop	{r4, r7, pc}

0800dc44 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dc44:	b580      	push	{r7, lr}
 800dc46:	b084      	sub	sp, #16
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc4c:	230f      	movs	r3, #15
 800dc4e:	18fb      	adds	r3, r7, r3
 800dc50:	2200      	movs	r2, #0
 800dc52:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 800dc54:	e008      	b.n	800dc68 <USBD_GetLen+0x24>
  {
    len++;
 800dc56:	210f      	movs	r1, #15
 800dc58:	187b      	adds	r3, r7, r1
 800dc5a:	781a      	ldrb	r2, [r3, #0]
 800dc5c:	187b      	adds	r3, r7, r1
 800dc5e:	3201      	adds	r2, #1
 800dc60:	701a      	strb	r2, [r3, #0]
    buf++;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	3301      	adds	r3, #1
 800dc66:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1f2      	bne.n	800dc56 <USBD_GetLen+0x12>
  }

  return len;
 800dc70:	230f      	movs	r3, #15
 800dc72:	18fb      	adds	r3, r7, r3
 800dc74:	781b      	ldrb	r3, [r3, #0]
}
 800dc76:	0018      	movs	r0, r3
 800dc78:	46bd      	mov	sp, r7
 800dc7a:	b004      	add	sp, #16
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b084      	sub	sp, #16
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	60f8      	str	r0, [r7, #12]
 800dc86:	60b9      	str	r1, [r7, #8]
 800dc88:	1dbb      	adds	r3, r7, #6
 800dc8a:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc8c:	68fa      	ldr	r2, [r7, #12]
 800dc8e:	23a5      	movs	r3, #165	@ 0xa5
 800dc90:	009b      	lsls	r3, r3, #2
 800dc92:	2102      	movs	r1, #2
 800dc94:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 800dc96:	1dbb      	adds	r3, r7, #6
 800dc98:	881a      	ldrh	r2, [r3, #0]
 800dc9a:	68fb      	ldr	r3, [r7, #12]
 800dc9c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800dc9e:	1dbb      	adds	r3, r7, #6
 800dca0:	881a      	ldrh	r2, [r3, #0]
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dca6:	1dbb      	adds	r3, r7, #6
 800dca8:	881b      	ldrh	r3, [r3, #0]
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	2100      	movs	r1, #0
 800dcb0:	f000 fcb1 	bl	800e616 <USBD_LL_Transmit>

  return USBD_OK;
 800dcb4:	2300      	movs	r3, #0
}
 800dcb6:	0018      	movs	r0, r3
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	b004      	add	sp, #16
 800dcbc:	bd80      	pop	{r7, pc}

0800dcbe <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800dcbe:	b580      	push	{r7, lr}
 800dcc0:	b084      	sub	sp, #16
 800dcc2:	af00      	add	r7, sp, #0
 800dcc4:	60f8      	str	r0, [r7, #12]
 800dcc6:	60b9      	str	r1, [r7, #8]
 800dcc8:	1dbb      	adds	r3, r7, #6
 800dcca:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dccc:	1dbb      	adds	r3, r7, #6
 800dcce:	881b      	ldrh	r3, [r3, #0]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	68f8      	ldr	r0, [r7, #12]
 800dcd4:	2100      	movs	r1, #0
 800dcd6:	f000 fc9e 	bl	800e616 <USBD_LL_Transmit>

  return USBD_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	0018      	movs	r0, r3
 800dcde:	46bd      	mov	sp, r7
 800dce0:	b004      	add	sp, #16
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b084      	sub	sp, #16
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	60b9      	str	r1, [r7, #8]
 800dcee:	1dbb      	adds	r3, r7, #6
 800dcf0:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dcf2:	68fa      	ldr	r2, [r7, #12]
 800dcf4:	23a5      	movs	r3, #165	@ 0xa5
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	2103      	movs	r1, #3
 800dcfa:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 800dcfc:	1dbb      	adds	r3, r7, #6
 800dcfe:	8819      	ldrh	r1, [r3, #0]
 800dd00:	68fa      	ldr	r2, [r7, #12]
 800dd02:	23ae      	movs	r3, #174	@ 0xae
 800dd04:	005b      	lsls	r3, r3, #1
 800dd06:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 800dd08:	1dbb      	adds	r3, r7, #6
 800dd0a:	8819      	ldrh	r1, [r3, #0]
 800dd0c:	68fa      	ldr	r2, [r7, #12]
 800dd0e:	23b0      	movs	r3, #176	@ 0xb0
 800dd10:	005b      	lsls	r3, r3, #1
 800dd12:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd14:	1dbb      	adds	r3, r7, #6
 800dd16:	881b      	ldrh	r3, [r3, #0]
 800dd18:	68ba      	ldr	r2, [r7, #8]
 800dd1a:	68f8      	ldr	r0, [r7, #12]
 800dd1c:	2100      	movs	r1, #0
 800dd1e:	f000 fcb1 	bl	800e684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd22:	2300      	movs	r3, #0
}
 800dd24:	0018      	movs	r0, r3
 800dd26:	46bd      	mov	sp, r7
 800dd28:	b004      	add	sp, #16
 800dd2a:	bd80      	pop	{r7, pc}

0800dd2c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b084      	sub	sp, #16
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	60f8      	str	r0, [r7, #12]
 800dd34:	60b9      	str	r1, [r7, #8]
 800dd36:	1dbb      	adds	r3, r7, #6
 800dd38:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dd3a:	1dbb      	adds	r3, r7, #6
 800dd3c:	881b      	ldrh	r3, [r3, #0]
 800dd3e:	68ba      	ldr	r2, [r7, #8]
 800dd40:	68f8      	ldr	r0, [r7, #12]
 800dd42:	2100      	movs	r1, #0
 800dd44:	f000 fc9e 	bl	800e684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd48:	2300      	movs	r3, #0
}
 800dd4a:	0018      	movs	r0, r3
 800dd4c:	46bd      	mov	sp, r7
 800dd4e:	b004      	add	sp, #16
 800dd50:	bd80      	pop	{r7, pc}

0800dd52 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dd52:	b580      	push	{r7, lr}
 800dd54:	b082      	sub	sp, #8
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dd5a:	687a      	ldr	r2, [r7, #4]
 800dd5c:	23a5      	movs	r3, #165	@ 0xa5
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	2104      	movs	r1, #4
 800dd62:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	2300      	movs	r3, #0
 800dd68:	2200      	movs	r2, #0
 800dd6a:	2100      	movs	r1, #0
 800dd6c:	f000 fc53 	bl	800e616 <USBD_LL_Transmit>

  return USBD_OK;
 800dd70:	2300      	movs	r3, #0
}
 800dd72:	0018      	movs	r0, r3
 800dd74:	46bd      	mov	sp, r7
 800dd76:	b002      	add	sp, #8
 800dd78:	bd80      	pop	{r7, pc}

0800dd7a <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd7a:	b580      	push	{r7, lr}
 800dd7c:	b082      	sub	sp, #8
 800dd7e:	af00      	add	r7, sp, #0
 800dd80:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd82:	687a      	ldr	r2, [r7, #4]
 800dd84:	23a5      	movs	r3, #165	@ 0xa5
 800dd86:	009b      	lsls	r3, r3, #2
 800dd88:	2105      	movs	r1, #5
 800dd8a:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd8c:	6878      	ldr	r0, [r7, #4]
 800dd8e:	2300      	movs	r3, #0
 800dd90:	2200      	movs	r2, #0
 800dd92:	2100      	movs	r1, #0
 800dd94:	f000 fc76 	bl	800e684 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd98:	2300      	movs	r3, #0
}
 800dd9a:	0018      	movs	r0, r3
 800dd9c:	46bd      	mov	sp, r7
 800dd9e:	b002      	add	sp, #8
 800dda0:	bd80      	pop	{r7, pc}
	...

0800dda4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dda8:	4914      	ldr	r1, [pc, #80]	@ (800ddfc <MX_USB_DEVICE_Init+0x58>)
 800ddaa:	4b15      	ldr	r3, [pc, #84]	@ (800de00 <MX_USB_DEVICE_Init+0x5c>)
 800ddac:	2200      	movs	r2, #0
 800ddae:	0018      	movs	r0, r3
 800ddb0:	f7fe fdeb 	bl	800c98a <USBD_Init>
 800ddb4:	1e03      	subs	r3, r0, #0
 800ddb6:	d001      	beq.n	800ddbc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ddb8:	f7f5 ff80 	bl	8003cbc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ddbc:	4a11      	ldr	r2, [pc, #68]	@ (800de04 <MX_USB_DEVICE_Init+0x60>)
 800ddbe:	4b10      	ldr	r3, [pc, #64]	@ (800de00 <MX_USB_DEVICE_Init+0x5c>)
 800ddc0:	0011      	movs	r1, r2
 800ddc2:	0018      	movs	r0, r3
 800ddc4:	f7fe fe12 	bl	800c9ec <USBD_RegisterClass>
 800ddc8:	1e03      	subs	r3, r0, #0
 800ddca:	d001      	beq.n	800ddd0 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 800ddcc:	f7f5 ff76 	bl	8003cbc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ddd0:	4a0d      	ldr	r2, [pc, #52]	@ (800de08 <MX_USB_DEVICE_Init+0x64>)
 800ddd2:	4b0b      	ldr	r3, [pc, #44]	@ (800de00 <MX_USB_DEVICE_Init+0x5c>)
 800ddd4:	0011      	movs	r1, r2
 800ddd6:	0018      	movs	r0, r3
 800ddd8:	f7fe fd5e 	bl	800c898 <USBD_CDC_RegisterInterface>
 800dddc:	1e03      	subs	r3, r0, #0
 800ddde:	d001      	beq.n	800dde4 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 800dde0:	f7f5 ff6c 	bl	8003cbc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dde4:	4b06      	ldr	r3, [pc, #24]	@ (800de00 <MX_USB_DEVICE_Init+0x5c>)
 800dde6:	0018      	movs	r0, r3
 800dde8:	f7fe fe20 	bl	800ca2c <USBD_Start>
 800ddec:	1e03      	subs	r3, r0, #0
 800ddee:	d001      	beq.n	800ddf4 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 800ddf0:	f7f5 ff64 	bl	8003cbc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ddf4:	46c0      	nop			@ (mov r8, r8)
 800ddf6:	46bd      	mov	sp, r7
 800ddf8:	bd80      	pop	{r7, pc}
 800ddfa:	46c0      	nop			@ (mov r8, r8)
 800ddfc:	20000140 	.word	0x20000140
 800de00:	200004d0 	.word	0x200004d0
 800de04:	2000002c 	.word	0x2000002c
 800de08:	20000130 	.word	0x20000130

0800de0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de10:	4907      	ldr	r1, [pc, #28]	@ (800de30 <CDC_Init_FS+0x24>)
 800de12:	4b08      	ldr	r3, [pc, #32]	@ (800de34 <CDC_Init_FS+0x28>)
 800de14:	2200      	movs	r2, #0
 800de16:	0018      	movs	r0, r3
 800de18:	f7fe fd59 	bl	800c8ce <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de1c:	4a06      	ldr	r2, [pc, #24]	@ (800de38 <CDC_Init_FS+0x2c>)
 800de1e:	4b05      	ldr	r3, [pc, #20]	@ (800de34 <CDC_Init_FS+0x28>)
 800de20:	0011      	movs	r1, r2
 800de22:	0018      	movs	r0, r3
 800de24:	f7fe fd6f 	bl	800c906 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800de28:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800de2a:	0018      	movs	r0, r3
 800de2c:	46bd      	mov	sp, r7
 800de2e:	bd80      	pop	{r7, pc}
 800de30:	20000b94 	.word	0x20000b94
 800de34:	200004d0 	.word	0x200004d0
 800de38:	20000794 	.word	0x20000794

0800de3c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de40:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de42:	0018      	movs	r0, r3
 800de44:	46bd      	mov	sp, r7
 800de46:	bd80      	pop	{r7, pc}

0800de48 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de48:	b580      	push	{r7, lr}
 800de4a:	b082      	sub	sp, #8
 800de4c:	af00      	add	r7, sp, #0
 800de4e:	6039      	str	r1, [r7, #0]
 800de50:	0011      	movs	r1, r2
 800de52:	1dfb      	adds	r3, r7, #7
 800de54:	1c02      	adds	r2, r0, #0
 800de56:	701a      	strb	r2, [r3, #0]
 800de58:	1d3b      	adds	r3, r7, #4
 800de5a:	1c0a      	adds	r2, r1, #0
 800de5c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de5e:	1dfb      	adds	r3, r7, #7
 800de60:	781b      	ldrb	r3, [r3, #0]
 800de62:	2b23      	cmp	r3, #35	@ 0x23
 800de64:	d804      	bhi.n	800de70 <CDC_Control_FS+0x28>
 800de66:	009a      	lsls	r2, r3, #2
 800de68:	4b04      	ldr	r3, [pc, #16]	@ (800de7c <CDC_Control_FS+0x34>)
 800de6a:	18d3      	adds	r3, r2, r3
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800de70:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 800de72:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800de74:	0018      	movs	r0, r3
 800de76:	46bd      	mov	sp, r7
 800de78:	b002      	add	sp, #8
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	0800ec9c 	.word	0x0800ec9c

0800de80 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
 800de88:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800de8a:	687a      	ldr	r2, [r7, #4]
 800de8c:	4b06      	ldr	r3, [pc, #24]	@ (800dea8 <CDC_Receive_FS+0x28>)
 800de8e:	0011      	movs	r1, r2
 800de90:	0018      	movs	r0, r3
 800de92:	f7fe fd38 	bl	800c906 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800de96:	4b04      	ldr	r3, [pc, #16]	@ (800dea8 <CDC_Receive_FS+0x28>)
 800de98:	0018      	movs	r0, r3
 800de9a:	f7fe fd48 	bl	800c92e <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800de9e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800dea0:	0018      	movs	r0, r3
 800dea2:	46bd      	mov	sp, r7
 800dea4:	b002      	add	sp, #8
 800dea6:	bd80      	pop	{r7, pc}
 800dea8:	200004d0 	.word	0x200004d0

0800deac <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800deac:	b580      	push	{r7, lr}
 800deae:	b082      	sub	sp, #8
 800deb0:	af00      	add	r7, sp, #0
 800deb2:	0002      	movs	r2, r0
 800deb4:	6039      	str	r1, [r7, #0]
 800deb6:	1dfb      	adds	r3, r7, #7
 800deb8:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800deba:	683b      	ldr	r3, [r7, #0]
 800debc:	2212      	movs	r2, #18
 800debe:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dec0:	4b02      	ldr	r3, [pc, #8]	@ (800decc <USBD_FS_DeviceDescriptor+0x20>)
}
 800dec2:	0018      	movs	r0, r3
 800dec4:	46bd      	mov	sp, r7
 800dec6:	b002      	add	sp, #8
 800dec8:	bd80      	pop	{r7, pc}
 800deca:	46c0      	nop			@ (mov r8, r8)
 800decc:	2000015c 	.word	0x2000015c

0800ded0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	0002      	movs	r2, r0
 800ded8:	6039      	str	r1, [r7, #0]
 800deda:	1dfb      	adds	r3, r7, #7
 800dedc:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	2204      	movs	r2, #4
 800dee2:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dee4:	4b02      	ldr	r3, [pc, #8]	@ (800def0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dee6:	0018      	movs	r0, r3
 800dee8:	46bd      	mov	sp, r7
 800deea:	b002      	add	sp, #8
 800deec:	bd80      	pop	{r7, pc}
 800deee:	46c0      	nop			@ (mov r8, r8)
 800def0:	20000170 	.word	0x20000170

0800def4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800def4:	b580      	push	{r7, lr}
 800def6:	b082      	sub	sp, #8
 800def8:	af00      	add	r7, sp, #0
 800defa:	0002      	movs	r2, r0
 800defc:	6039      	str	r1, [r7, #0]
 800defe:	1dfb      	adds	r3, r7, #7
 800df00:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800df02:	1dfb      	adds	r3, r7, #7
 800df04:	781b      	ldrb	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d106      	bne.n	800df18 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df0a:	683a      	ldr	r2, [r7, #0]
 800df0c:	4908      	ldr	r1, [pc, #32]	@ (800df30 <USBD_FS_ProductStrDescriptor+0x3c>)
 800df0e:	4b09      	ldr	r3, [pc, #36]	@ (800df34 <USBD_FS_ProductStrDescriptor+0x40>)
 800df10:	0018      	movs	r0, r3
 800df12:	f7ff fe49 	bl	800dba8 <USBD_GetString>
 800df16:	e005      	b.n	800df24 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	4905      	ldr	r1, [pc, #20]	@ (800df30 <USBD_FS_ProductStrDescriptor+0x3c>)
 800df1c:	4b05      	ldr	r3, [pc, #20]	@ (800df34 <USBD_FS_ProductStrDescriptor+0x40>)
 800df1e:	0018      	movs	r0, r3
 800df20:	f7ff fe42 	bl	800dba8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800df24:	4b02      	ldr	r3, [pc, #8]	@ (800df30 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 800df26:	0018      	movs	r0, r3
 800df28:	46bd      	mov	sp, r7
 800df2a:	b002      	add	sp, #8
 800df2c:	bd80      	pop	{r7, pc}
 800df2e:	46c0      	nop			@ (mov r8, r8)
 800df30:	20000f94 	.word	0x20000f94
 800df34:	0800eb7c 	.word	0x0800eb7c

0800df38 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b082      	sub	sp, #8
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	0002      	movs	r2, r0
 800df40:	6039      	str	r1, [r7, #0]
 800df42:	1dfb      	adds	r3, r7, #7
 800df44:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800df46:	683a      	ldr	r2, [r7, #0]
 800df48:	4904      	ldr	r1, [pc, #16]	@ (800df5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800df4a:	4b05      	ldr	r3, [pc, #20]	@ (800df60 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 800df4c:	0018      	movs	r0, r3
 800df4e:	f7ff fe2b 	bl	800dba8 <USBD_GetString>
  return USBD_StrDesc;
 800df52:	4b02      	ldr	r3, [pc, #8]	@ (800df5c <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 800df54:	0018      	movs	r0, r3
 800df56:	46bd      	mov	sp, r7
 800df58:	b002      	add	sp, #8
 800df5a:	bd80      	pop	{r7, pc}
 800df5c:	20000f94 	.word	0x20000f94
 800df60:	0800eb90 	.word	0x0800eb90

0800df64 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b082      	sub	sp, #8
 800df68:	af00      	add	r7, sp, #0
 800df6a:	0002      	movs	r2, r0
 800df6c:	6039      	str	r1, [r7, #0]
 800df6e:	1dfb      	adds	r3, r7, #7
 800df70:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800df72:	683b      	ldr	r3, [r7, #0]
 800df74:	221a      	movs	r2, #26
 800df76:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800df78:	f000 f84c 	bl	800e014 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800df7c:	4b02      	ldr	r3, [pc, #8]	@ (800df88 <USBD_FS_SerialStrDescriptor+0x24>)
}
 800df7e:	0018      	movs	r0, r3
 800df80:	46bd      	mov	sp, r7
 800df82:	b002      	add	sp, #8
 800df84:	bd80      	pop	{r7, pc}
 800df86:	46c0      	nop			@ (mov r8, r8)
 800df88:	20000174 	.word	0x20000174

0800df8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df8c:	b580      	push	{r7, lr}
 800df8e:	b082      	sub	sp, #8
 800df90:	af00      	add	r7, sp, #0
 800df92:	0002      	movs	r2, r0
 800df94:	6039      	str	r1, [r7, #0]
 800df96:	1dfb      	adds	r3, r7, #7
 800df98:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 800df9a:	1dfb      	adds	r3, r7, #7
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d106      	bne.n	800dfb0 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dfa2:	683a      	ldr	r2, [r7, #0]
 800dfa4:	4908      	ldr	r1, [pc, #32]	@ (800dfc8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800dfa6:	4b09      	ldr	r3, [pc, #36]	@ (800dfcc <USBD_FS_ConfigStrDescriptor+0x40>)
 800dfa8:	0018      	movs	r0, r3
 800dfaa:	f7ff fdfd 	bl	800dba8 <USBD_GetString>
 800dfae:	e005      	b.n	800dfbc <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800dfb0:	683a      	ldr	r2, [r7, #0]
 800dfb2:	4905      	ldr	r1, [pc, #20]	@ (800dfc8 <USBD_FS_ConfigStrDescriptor+0x3c>)
 800dfb4:	4b05      	ldr	r3, [pc, #20]	@ (800dfcc <USBD_FS_ConfigStrDescriptor+0x40>)
 800dfb6:	0018      	movs	r0, r3
 800dfb8:	f7ff fdf6 	bl	800dba8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfbc:	4b02      	ldr	r3, [pc, #8]	@ (800dfc8 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 800dfbe:	0018      	movs	r0, r3
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	b002      	add	sp, #8
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	46c0      	nop			@ (mov r8, r8)
 800dfc8:	20000f94 	.word	0x20000f94
 800dfcc:	0800eba0 	.word	0x0800eba0

0800dfd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b082      	sub	sp, #8
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	0002      	movs	r2, r0
 800dfd8:	6039      	str	r1, [r7, #0]
 800dfda:	1dfb      	adds	r3, r7, #7
 800dfdc:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 800dfde:	1dfb      	adds	r3, r7, #7
 800dfe0:	781b      	ldrb	r3, [r3, #0]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d106      	bne.n	800dff4 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dfe6:	683a      	ldr	r2, [r7, #0]
 800dfe8:	4908      	ldr	r1, [pc, #32]	@ (800e00c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800dfea:	4b09      	ldr	r3, [pc, #36]	@ (800e010 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800dfec:	0018      	movs	r0, r3
 800dfee:	f7ff fddb 	bl	800dba8 <USBD_GetString>
 800dff2:	e005      	b.n	800e000 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800dff4:	683a      	ldr	r2, [r7, #0]
 800dff6:	4905      	ldr	r1, [pc, #20]	@ (800e00c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 800dff8:	4b05      	ldr	r3, [pc, #20]	@ (800e010 <USBD_FS_InterfaceStrDescriptor+0x40>)
 800dffa:	0018      	movs	r0, r3
 800dffc:	f7ff fdd4 	bl	800dba8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e000:	4b02      	ldr	r3, [pc, #8]	@ (800e00c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 800e002:	0018      	movs	r0, r3
 800e004:	46bd      	mov	sp, r7
 800e006:	b002      	add	sp, #8
 800e008:	bd80      	pop	{r7, pc}
 800e00a:	46c0      	nop			@ (mov r8, r8)
 800e00c:	20000f94 	.word	0x20000f94
 800e010:	0800ebac 	.word	0x0800ebac

0800e014 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e01a:	4b10      	ldr	r3, [pc, #64]	@ (800e05c <Get_SerialNum+0x48>)
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e020:	4b0f      	ldr	r3, [pc, #60]	@ (800e060 <Get_SerialNum+0x4c>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e026:	4b0f      	ldr	r3, [pc, #60]	@ (800e064 <Get_SerialNum+0x50>)
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e02c:	68fa      	ldr	r2, [r7, #12]
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	18d3      	adds	r3, r2, r3
 800e032:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d00b      	beq.n	800e052 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e03a:	490b      	ldr	r1, [pc, #44]	@ (800e068 <Get_SerialNum+0x54>)
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	2208      	movs	r2, #8
 800e040:	0018      	movs	r0, r3
 800e042:	f000 f815 	bl	800e070 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e046:	4909      	ldr	r1, [pc, #36]	@ (800e06c <Get_SerialNum+0x58>)
 800e048:	68bb      	ldr	r3, [r7, #8]
 800e04a:	2204      	movs	r2, #4
 800e04c:	0018      	movs	r0, r3
 800e04e:	f000 f80f 	bl	800e070 <IntToUnicode>
  }
}
 800e052:	46c0      	nop			@ (mov r8, r8)
 800e054:	46bd      	mov	sp, r7
 800e056:	b004      	add	sp, #16
 800e058:	bd80      	pop	{r7, pc}
 800e05a:	46c0      	nop			@ (mov r8, r8)
 800e05c:	1ffff7ac 	.word	0x1ffff7ac
 800e060:	1ffff7b0 	.word	0x1ffff7b0
 800e064:	1ffff7b4 	.word	0x1ffff7b4
 800e068:	20000176 	.word	0x20000176
 800e06c:	20000186 	.word	0x20000186

0800e070 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b086      	sub	sp, #24
 800e074:	af00      	add	r7, sp, #0
 800e076:	60f8      	str	r0, [r7, #12]
 800e078:	60b9      	str	r1, [r7, #8]
 800e07a:	1dfb      	adds	r3, r7, #7
 800e07c:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 800e07e:	2117      	movs	r1, #23
 800e080:	187b      	adds	r3, r7, r1
 800e082:	2200      	movs	r2, #0
 800e084:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 800e086:	187b      	adds	r3, r7, r1
 800e088:	2200      	movs	r2, #0
 800e08a:	701a      	strb	r2, [r3, #0]
 800e08c:	e02f      	b.n	800e0ee <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	0f1b      	lsrs	r3, r3, #28
 800e092:	2b09      	cmp	r3, #9
 800e094:	d80d      	bhi.n	800e0b2 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	0f1b      	lsrs	r3, r3, #28
 800e09a:	b2da      	uxtb	r2, r3
 800e09c:	2317      	movs	r3, #23
 800e09e:	18fb      	adds	r3, r7, r3
 800e0a0:	781b      	ldrb	r3, [r3, #0]
 800e0a2:	005b      	lsls	r3, r3, #1
 800e0a4:	0019      	movs	r1, r3
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	185b      	adds	r3, r3, r1
 800e0aa:	3230      	adds	r2, #48	@ 0x30
 800e0ac:	b2d2      	uxtb	r2, r2
 800e0ae:	701a      	strb	r2, [r3, #0]
 800e0b0:	e00c      	b.n	800e0cc <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	0f1b      	lsrs	r3, r3, #28
 800e0b6:	b2da      	uxtb	r2, r3
 800e0b8:	2317      	movs	r3, #23
 800e0ba:	18fb      	adds	r3, r7, r3
 800e0bc:	781b      	ldrb	r3, [r3, #0]
 800e0be:	005b      	lsls	r3, r3, #1
 800e0c0:	0019      	movs	r1, r3
 800e0c2:	68bb      	ldr	r3, [r7, #8]
 800e0c4:	185b      	adds	r3, r3, r1
 800e0c6:	3237      	adds	r2, #55	@ 0x37
 800e0c8:	b2d2      	uxtb	r2, r2
 800e0ca:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	011b      	lsls	r3, r3, #4
 800e0d0:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e0d2:	2117      	movs	r1, #23
 800e0d4:	187b      	adds	r3, r7, r1
 800e0d6:	781b      	ldrb	r3, [r3, #0]
 800e0d8:	005b      	lsls	r3, r3, #1
 800e0da:	3301      	adds	r3, #1
 800e0dc:	68ba      	ldr	r2, [r7, #8]
 800e0de:	18d3      	adds	r3, r2, r3
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e0e4:	187b      	adds	r3, r7, r1
 800e0e6:	781a      	ldrb	r2, [r3, #0]
 800e0e8:	187b      	adds	r3, r7, r1
 800e0ea:	3201      	adds	r2, #1
 800e0ec:	701a      	strb	r2, [r3, #0]
 800e0ee:	2317      	movs	r3, #23
 800e0f0:	18fa      	adds	r2, r7, r3
 800e0f2:	1dfb      	adds	r3, r7, #7
 800e0f4:	7812      	ldrb	r2, [r2, #0]
 800e0f6:	781b      	ldrb	r3, [r3, #0]
 800e0f8:	429a      	cmp	r2, r3
 800e0fa:	d3c8      	bcc.n	800e08e <IntToUnicode+0x1e>
  }
}
 800e0fc:	46c0      	nop			@ (mov r8, r8)
 800e0fe:	46c0      	nop			@ (mov r8, r8)
 800e100:	46bd      	mov	sp, r7
 800e102:	b006      	add	sp, #24
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b084      	sub	sp, #16
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	4a0e      	ldr	r2, [pc, #56]	@ (800e150 <HAL_PCD_MspInit+0x48>)
 800e116:	4293      	cmp	r3, r2
 800e118:	d115      	bne.n	800e146 <HAL_PCD_MspInit+0x3e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800e11a:	4b0e      	ldr	r3, [pc, #56]	@ (800e154 <HAL_PCD_MspInit+0x4c>)
 800e11c:	69da      	ldr	r2, [r3, #28]
 800e11e:	4b0d      	ldr	r3, [pc, #52]	@ (800e154 <HAL_PCD_MspInit+0x4c>)
 800e120:	2180      	movs	r1, #128	@ 0x80
 800e122:	0409      	lsls	r1, r1, #16
 800e124:	430a      	orrs	r2, r1
 800e126:	61da      	str	r2, [r3, #28]
 800e128:	4b0a      	ldr	r3, [pc, #40]	@ (800e154 <HAL_PCD_MspInit+0x4c>)
 800e12a:	69da      	ldr	r2, [r3, #28]
 800e12c:	2380      	movs	r3, #128	@ 0x80
 800e12e:	041b      	lsls	r3, r3, #16
 800e130:	4013      	ands	r3, r2
 800e132:	60fb      	str	r3, [r7, #12]
 800e134:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800e136:	2200      	movs	r2, #0
 800e138:	2100      	movs	r1, #0
 800e13a:	201f      	movs	r0, #31
 800e13c:	f7f6 fd98 	bl	8004c70 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 800e140:	201f      	movs	r0, #31
 800e142:	f7f6 fdaa 	bl	8004c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800e146:	46c0      	nop			@ (mov r8, r8)
 800e148:	46bd      	mov	sp, r7
 800e14a:	b004      	add	sp, #16
 800e14c:	bd80      	pop	{r7, pc}
 800e14e:	46c0      	nop			@ (mov r8, r8)
 800e150:	40005c00 	.word	0x40005c00
 800e154:	40021000 	.word	0x40021000

0800e158 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e158:	b580      	push	{r7, lr}
 800e15a:	b082      	sub	sp, #8
 800e15c:	af00      	add	r7, sp, #0
 800e15e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e160:	687a      	ldr	r2, [r7, #4]
 800e162:	23bc      	movs	r3, #188	@ 0xbc
 800e164:	009b      	lsls	r3, r3, #2
 800e166:	58d2      	ldr	r2, [r2, r3]
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	21ac      	movs	r1, #172	@ 0xac
 800e16c:	0089      	lsls	r1, r1, #2
 800e16e:	468c      	mov	ip, r1
 800e170:	4463      	add	r3, ip
 800e172:	0019      	movs	r1, r3
 800e174:	0010      	movs	r0, r2
 800e176:	f7fe fcad 	bl	800cad4 <USBD_LL_SetupStage>
}
 800e17a:	46c0      	nop			@ (mov r8, r8)
 800e17c:	46bd      	mov	sp, r7
 800e17e:	b002      	add	sp, #8
 800e180:	bd80      	pop	{r7, pc}

0800e182 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e182:	b590      	push	{r4, r7, lr}
 800e184:	b083      	sub	sp, #12
 800e186:	af00      	add	r7, sp, #0
 800e188:	6078      	str	r0, [r7, #4]
 800e18a:	000a      	movs	r2, r1
 800e18c:	1cfb      	adds	r3, r7, #3
 800e18e:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e190:	687a      	ldr	r2, [r7, #4]
 800e192:	23bc      	movs	r3, #188	@ 0xbc
 800e194:	009b      	lsls	r3, r3, #2
 800e196:	58d4      	ldr	r4, [r2, r3]
 800e198:	1cfb      	adds	r3, r7, #3
 800e19a:	781a      	ldrb	r2, [r3, #0]
 800e19c:	6878      	ldr	r0, [r7, #4]
 800e19e:	23be      	movs	r3, #190	@ 0xbe
 800e1a0:	0059      	lsls	r1, r3, #1
 800e1a2:	0013      	movs	r3, r2
 800e1a4:	009b      	lsls	r3, r3, #2
 800e1a6:	189b      	adds	r3, r3, r2
 800e1a8:	00db      	lsls	r3, r3, #3
 800e1aa:	18c3      	adds	r3, r0, r3
 800e1ac:	185b      	adds	r3, r3, r1
 800e1ae:	681a      	ldr	r2, [r3, #0]
 800e1b0:	1cfb      	adds	r3, r7, #3
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	0019      	movs	r1, r3
 800e1b6:	0020      	movs	r0, r4
 800e1b8:	f7fe fcea 	bl	800cb90 <USBD_LL_DataOutStage>
}
 800e1bc:	46c0      	nop			@ (mov r8, r8)
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	b003      	add	sp, #12
 800e1c2:	bd90      	pop	{r4, r7, pc}

0800e1c4 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e1c4:	b580      	push	{r7, lr}
 800e1c6:	b082      	sub	sp, #8
 800e1c8:	af00      	add	r7, sp, #0
 800e1ca:	6078      	str	r0, [r7, #4]
 800e1cc:	000a      	movs	r2, r1
 800e1ce:	1cfb      	adds	r3, r7, #3
 800e1d0:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	23bc      	movs	r3, #188	@ 0xbc
 800e1d6:	009b      	lsls	r3, r3, #2
 800e1d8:	58d0      	ldr	r0, [r2, r3]
 800e1da:	1cfb      	adds	r3, r7, #3
 800e1dc:	781a      	ldrb	r2, [r3, #0]
 800e1de:	6879      	ldr	r1, [r7, #4]
 800e1e0:	0013      	movs	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	189b      	adds	r3, r3, r2
 800e1e6:	00db      	lsls	r3, r3, #3
 800e1e8:	18cb      	adds	r3, r1, r3
 800e1ea:	333c      	adds	r3, #60	@ 0x3c
 800e1ec:	681a      	ldr	r2, [r3, #0]
 800e1ee:	1cfb      	adds	r3, r7, #3
 800e1f0:	781b      	ldrb	r3, [r3, #0]
 800e1f2:	0019      	movs	r1, r3
 800e1f4:	f7fe fd4e 	bl	800cc94 <USBD_LL_DataInStage>
}
 800e1f8:	46c0      	nop			@ (mov r8, r8)
 800e1fa:	46bd      	mov	sp, r7
 800e1fc:	b002      	add	sp, #8
 800e1fe:	bd80      	pop	{r7, pc}

0800e200 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b082      	sub	sp, #8
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e208:	687a      	ldr	r2, [r7, #4]
 800e20a:	23bc      	movs	r3, #188	@ 0xbc
 800e20c:	009b      	lsls	r3, r3, #2
 800e20e:	58d3      	ldr	r3, [r2, r3]
 800e210:	0018      	movs	r0, r3
 800e212:	f7fe fe85 	bl	800cf20 <USBD_LL_SOF>
}
 800e216:	46c0      	nop			@ (mov r8, r8)
 800e218:	46bd      	mov	sp, r7
 800e21a:	b002      	add	sp, #8
 800e21c:	bd80      	pop	{r7, pc}

0800e21e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e21e:	b580      	push	{r7, lr}
 800e220:	b084      	sub	sp, #16
 800e222:	af00      	add	r7, sp, #0
 800e224:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e226:	230f      	movs	r3, #15
 800e228:	18fb      	adds	r3, r7, r3
 800e22a:	2201      	movs	r2, #1
 800e22c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	689b      	ldr	r3, [r3, #8]
 800e232:	2b02      	cmp	r3, #2
 800e234:	d001      	beq.n	800e23a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 800e236:	f7f5 fd41 	bl	8003cbc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e23a:	687a      	ldr	r2, [r7, #4]
 800e23c:	23bc      	movs	r3, #188	@ 0xbc
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	58d2      	ldr	r2, [r2, r3]
 800e242:	230f      	movs	r3, #15
 800e244:	18fb      	adds	r3, r7, r3
 800e246:	781b      	ldrb	r3, [r3, #0]
 800e248:	0019      	movs	r1, r3
 800e24a:	0010      	movs	r0, r2
 800e24c:	f7fe fe27 	bl	800ce9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	23bc      	movs	r3, #188	@ 0xbc
 800e254:	009b      	lsls	r3, r3, #2
 800e256:	58d3      	ldr	r3, [r2, r3]
 800e258:	0018      	movs	r0, r3
 800e25a:	f7fe fdd8 	bl	800ce0e <USBD_LL_Reset>
}
 800e25e:	46c0      	nop			@ (mov r8, r8)
 800e260:	46bd      	mov	sp, r7
 800e262:	b004      	add	sp, #16
 800e264:	bd80      	pop	{r7, pc}
	...

0800e268 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b082      	sub	sp, #8
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e270:	687a      	ldr	r2, [r7, #4]
 800e272:	23bc      	movs	r3, #188	@ 0xbc
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	58d3      	ldr	r3, [r2, r3]
 800e278:	0018      	movs	r0, r3
 800e27a:	f7fe fe21 	bl	800cec0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	699b      	ldr	r3, [r3, #24]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d005      	beq.n	800e292 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e286:	4b05      	ldr	r3, [pc, #20]	@ (800e29c <HAL_PCD_SuspendCallback+0x34>)
 800e288:	691a      	ldr	r2, [r3, #16]
 800e28a:	4b04      	ldr	r3, [pc, #16]	@ (800e29c <HAL_PCD_SuspendCallback+0x34>)
 800e28c:	2106      	movs	r1, #6
 800e28e:	430a      	orrs	r2, r1
 800e290:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 800e292:	46c0      	nop			@ (mov r8, r8)
 800e294:	46bd      	mov	sp, r7
 800e296:	b002      	add	sp, #8
 800e298:	bd80      	pop	{r7, pc}
 800e29a:	46c0      	nop			@ (mov r8, r8)
 800e29c:	e000ed00 	.word	0xe000ed00

0800e2a0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b082      	sub	sp, #8
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	699b      	ldr	r3, [r3, #24]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d007      	beq.n	800e2c0 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e2b0:	4b09      	ldr	r3, [pc, #36]	@ (800e2d8 <HAL_PCD_ResumeCallback+0x38>)
 800e2b2:	691a      	ldr	r2, [r3, #16]
 800e2b4:	4b08      	ldr	r3, [pc, #32]	@ (800e2d8 <HAL_PCD_ResumeCallback+0x38>)
 800e2b6:	2106      	movs	r1, #6
 800e2b8:	438a      	bics	r2, r1
 800e2ba:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 800e2bc:	f000 fa44 	bl	800e748 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e2c0:	687a      	ldr	r2, [r7, #4]
 800e2c2:	23bc      	movs	r3, #188	@ 0xbc
 800e2c4:	009b      	lsls	r3, r3, #2
 800e2c6:	58d3      	ldr	r3, [r2, r3]
 800e2c8:	0018      	movs	r0, r3
 800e2ca:	f7fe fe11 	bl	800cef0 <USBD_LL_Resume>
}
 800e2ce:	46c0      	nop			@ (mov r8, r8)
 800e2d0:	46bd      	mov	sp, r7
 800e2d2:	b002      	add	sp, #8
 800e2d4:	bd80      	pop	{r7, pc}
 800e2d6:	46c0      	nop			@ (mov r8, r8)
 800e2d8:	e000ed00 	.word	0xe000ed00

0800e2dc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e2dc:	b580      	push	{r7, lr}
 800e2de:	b082      	sub	sp, #8
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800e2e4:	4a2d      	ldr	r2, [pc, #180]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e2e6:	23bc      	movs	r3, #188	@ 0xbc
 800e2e8:	009b      	lsls	r3, r3, #2
 800e2ea:	6879      	ldr	r1, [r7, #4]
 800e2ec:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 800e2ee:	687a      	ldr	r2, [r7, #4]
 800e2f0:	23b0      	movs	r3, #176	@ 0xb0
 800e2f2:	009b      	lsls	r3, r3, #2
 800e2f4:	4929      	ldr	r1, [pc, #164]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e2f6:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 800e2f8:	4b28      	ldr	r3, [pc, #160]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e2fa:	4a29      	ldr	r2, [pc, #164]	@ (800e3a0 <USBD_LL_Init+0xc4>)
 800e2fc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800e2fe:	4b27      	ldr	r3, [pc, #156]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e300:	2208      	movs	r2, #8
 800e302:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800e304:	4b25      	ldr	r3, [pc, #148]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e306:	2202      	movs	r2, #2
 800e308:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e30a:	4b24      	ldr	r3, [pc, #144]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e30c:	2202      	movs	r2, #2
 800e30e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800e310:	4b22      	ldr	r3, [pc, #136]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e312:	2200      	movs	r2, #0
 800e314:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = ENABLE;
 800e316:	4b21      	ldr	r3, [pc, #132]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e318:	2201      	movs	r2, #1
 800e31a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800e31c:	4b1f      	ldr	r3, [pc, #124]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e31e:	2200      	movs	r2, #0
 800e320:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 800e322:	4b1e      	ldr	r3, [pc, #120]	@ (800e39c <USBD_LL_Init+0xc0>)
 800e324:	0018      	movs	r0, r3
 800e326:	f7f8 fabb 	bl	80068a0 <HAL_PCD_Init>
 800e32a:	1e03      	subs	r3, r0, #0
 800e32c:	d001      	beq.n	800e332 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 800e32e:	f7f5 fcc5 	bl	8003cbc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 800e332:	687a      	ldr	r2, [r7, #4]
 800e334:	23b0      	movs	r3, #176	@ 0xb0
 800e336:	009b      	lsls	r3, r3, #2
 800e338:	58d0      	ldr	r0, [r2, r3]
 800e33a:	2318      	movs	r3, #24
 800e33c:	2200      	movs	r2, #0
 800e33e:	2100      	movs	r1, #0
 800e340:	f7fa f87c 	bl	800843c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 800e344:	687a      	ldr	r2, [r7, #4]
 800e346:	23b0      	movs	r3, #176	@ 0xb0
 800e348:	009b      	lsls	r3, r3, #2
 800e34a:	58d0      	ldr	r0, [r2, r3]
 800e34c:	2358      	movs	r3, #88	@ 0x58
 800e34e:	2200      	movs	r2, #0
 800e350:	2180      	movs	r1, #128	@ 0x80
 800e352:	f7fa f873 	bl	800843c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800e356:	687a      	ldr	r2, [r7, #4]
 800e358:	23b0      	movs	r3, #176	@ 0xb0
 800e35a:	009b      	lsls	r3, r3, #2
 800e35c:	58d0      	ldr	r0, [r2, r3]
 800e35e:	23c0      	movs	r3, #192	@ 0xc0
 800e360:	2200      	movs	r2, #0
 800e362:	2181      	movs	r1, #129	@ 0x81
 800e364:	f7fa f86a 	bl	800843c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	23b0      	movs	r3, #176	@ 0xb0
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	58d0      	ldr	r0, [r2, r3]
 800e370:	2388      	movs	r3, #136	@ 0x88
 800e372:	005b      	lsls	r3, r3, #1
 800e374:	2200      	movs	r2, #0
 800e376:	2101      	movs	r1, #1
 800e378:	f7fa f860 	bl	800843c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 800e37c:	687a      	ldr	r2, [r7, #4]
 800e37e:	23b0      	movs	r3, #176	@ 0xb0
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	58d0      	ldr	r0, [r2, r3]
 800e384:	2380      	movs	r3, #128	@ 0x80
 800e386:	005b      	lsls	r3, r3, #1
 800e388:	2200      	movs	r2, #0
 800e38a:	2182      	movs	r1, #130	@ 0x82
 800e38c:	f7fa f856 	bl	800843c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 800e390:	2300      	movs	r3, #0
}
 800e392:	0018      	movs	r0, r3
 800e394:	46bd      	mov	sp, r7
 800e396:	b002      	add	sp, #8
 800e398:	bd80      	pop	{r7, pc}
 800e39a:	46c0      	nop			@ (mov r8, r8)
 800e39c:	20001194 	.word	0x20001194
 800e3a0:	40005c00 	.word	0x40005c00

0800e3a4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3a6:	b085      	sub	sp, #20
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e3ac:	210f      	movs	r1, #15
 800e3ae:	187b      	adds	r3, r7, r1
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e3b4:	260e      	movs	r6, #14
 800e3b6:	19bb      	adds	r3, r7, r6
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e3bc:	687a      	ldr	r2, [r7, #4]
 800e3be:	23b0      	movs	r3, #176	@ 0xb0
 800e3c0:	009b      	lsls	r3, r3, #2
 800e3c2:	58d3      	ldr	r3, [r2, r3]
 800e3c4:	000d      	movs	r5, r1
 800e3c6:	187c      	adds	r4, r7, r1
 800e3c8:	0018      	movs	r0, r3
 800e3ca:	f7f8 fb69 	bl	8006aa0 <HAL_PCD_Start>
 800e3ce:	0003      	movs	r3, r0
 800e3d0:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e3d2:	19bc      	adds	r4, r7, r6
 800e3d4:	197b      	adds	r3, r7, r5
 800e3d6:	781b      	ldrb	r3, [r3, #0]
 800e3d8:	0018      	movs	r0, r3
 800e3da:	f000 f9bc 	bl	800e756 <USBD_Get_USB_Status>
 800e3de:	0003      	movs	r3, r0
 800e3e0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e3e2:	19bb      	adds	r3, r7, r6
 800e3e4:	781b      	ldrb	r3, [r3, #0]
}
 800e3e6:	0018      	movs	r0, r3
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	b005      	add	sp, #20
 800e3ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e3ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e3ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3f0:	b085      	sub	sp, #20
 800e3f2:	af00      	add	r7, sp, #0
 800e3f4:	6078      	str	r0, [r7, #4]
 800e3f6:	000c      	movs	r4, r1
 800e3f8:	0010      	movs	r0, r2
 800e3fa:	0019      	movs	r1, r3
 800e3fc:	1cfb      	adds	r3, r7, #3
 800e3fe:	1c22      	adds	r2, r4, #0
 800e400:	701a      	strb	r2, [r3, #0]
 800e402:	1cbb      	adds	r3, r7, #2
 800e404:	1c02      	adds	r2, r0, #0
 800e406:	701a      	strb	r2, [r3, #0]
 800e408:	003b      	movs	r3, r7
 800e40a:	1c0a      	adds	r2, r1, #0
 800e40c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e40e:	260f      	movs	r6, #15
 800e410:	19bb      	adds	r3, r7, r6
 800e412:	2200      	movs	r2, #0
 800e414:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e416:	250e      	movs	r5, #14
 800e418:	197b      	adds	r3, r7, r5
 800e41a:	2200      	movs	r2, #0
 800e41c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e41e:	687a      	ldr	r2, [r7, #4]
 800e420:	23b0      	movs	r3, #176	@ 0xb0
 800e422:	009b      	lsls	r3, r3, #2
 800e424:	58d0      	ldr	r0, [r2, r3]
 800e426:	19bc      	adds	r4, r7, r6
 800e428:	1cbb      	adds	r3, r7, #2
 800e42a:	781d      	ldrb	r5, [r3, #0]
 800e42c:	003b      	movs	r3, r7
 800e42e:	881a      	ldrh	r2, [r3, #0]
 800e430:	1cfb      	adds	r3, r7, #3
 800e432:	7819      	ldrb	r1, [r3, #0]
 800e434:	002b      	movs	r3, r5
 800e436:	f7f8 fcc8 	bl	8006dca <HAL_PCD_EP_Open>
 800e43a:	0003      	movs	r3, r0
 800e43c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e43e:	250e      	movs	r5, #14
 800e440:	197c      	adds	r4, r7, r5
 800e442:	19bb      	adds	r3, r7, r6
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	0018      	movs	r0, r3
 800e448:	f000 f985 	bl	800e756 <USBD_Get_USB_Status>
 800e44c:	0003      	movs	r3, r0
 800e44e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e450:	197b      	adds	r3, r7, r5
 800e452:	781b      	ldrb	r3, [r3, #0]
}
 800e454:	0018      	movs	r0, r3
 800e456:	46bd      	mov	sp, r7
 800e458:	b005      	add	sp, #20
 800e45a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e45c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e45e:	b085      	sub	sp, #20
 800e460:	af00      	add	r7, sp, #0
 800e462:	6078      	str	r0, [r7, #4]
 800e464:	000a      	movs	r2, r1
 800e466:	1cfb      	adds	r3, r7, #3
 800e468:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e46a:	210f      	movs	r1, #15
 800e46c:	187b      	adds	r3, r7, r1
 800e46e:	2200      	movs	r2, #0
 800e470:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e472:	260e      	movs	r6, #14
 800e474:	19bb      	adds	r3, r7, r6
 800e476:	2200      	movs	r2, #0
 800e478:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e47a:	687a      	ldr	r2, [r7, #4]
 800e47c:	23b0      	movs	r3, #176	@ 0xb0
 800e47e:	009b      	lsls	r3, r3, #2
 800e480:	58d2      	ldr	r2, [r2, r3]
 800e482:	000d      	movs	r5, r1
 800e484:	187c      	adds	r4, r7, r1
 800e486:	1cfb      	adds	r3, r7, #3
 800e488:	781b      	ldrb	r3, [r3, #0]
 800e48a:	0019      	movs	r1, r3
 800e48c:	0010      	movs	r0, r2
 800e48e:	f7f8 fd0b 	bl	8006ea8 <HAL_PCD_EP_Close>
 800e492:	0003      	movs	r3, r0
 800e494:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e496:	19bc      	adds	r4, r7, r6
 800e498:	197b      	adds	r3, r7, r5
 800e49a:	781b      	ldrb	r3, [r3, #0]
 800e49c:	0018      	movs	r0, r3
 800e49e:	f000 f95a 	bl	800e756 <USBD_Get_USB_Status>
 800e4a2:	0003      	movs	r3, r0
 800e4a4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e4a6:	19bb      	adds	r3, r7, r6
 800e4a8:	781b      	ldrb	r3, [r3, #0]
}
 800e4aa:	0018      	movs	r0, r3
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	b005      	add	sp, #20
 800e4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e4b2 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e4b2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e4b4:	b085      	sub	sp, #20
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]
 800e4ba:	000a      	movs	r2, r1
 800e4bc:	1cfb      	adds	r3, r7, #3
 800e4be:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4c0:	210f      	movs	r1, #15
 800e4c2:	187b      	adds	r3, r7, r1
 800e4c4:	2200      	movs	r2, #0
 800e4c6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c8:	260e      	movs	r6, #14
 800e4ca:	19bb      	adds	r3, r7, r6
 800e4cc:	2200      	movs	r2, #0
 800e4ce:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e4d0:	687a      	ldr	r2, [r7, #4]
 800e4d2:	23b0      	movs	r3, #176	@ 0xb0
 800e4d4:	009b      	lsls	r3, r3, #2
 800e4d6:	58d2      	ldr	r2, [r2, r3]
 800e4d8:	000d      	movs	r5, r1
 800e4da:	187c      	adds	r4, r7, r1
 800e4dc:	1cfb      	adds	r3, r7, #3
 800e4de:	781b      	ldrb	r3, [r3, #0]
 800e4e0:	0019      	movs	r1, r3
 800e4e2:	0010      	movs	r0, r2
 800e4e4:	f7f8 fdbd 	bl	8007062 <HAL_PCD_EP_SetStall>
 800e4e8:	0003      	movs	r3, r0
 800e4ea:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4ec:	19bc      	adds	r4, r7, r6
 800e4ee:	197b      	adds	r3, r7, r5
 800e4f0:	781b      	ldrb	r3, [r3, #0]
 800e4f2:	0018      	movs	r0, r3
 800e4f4:	f000 f92f 	bl	800e756 <USBD_Get_USB_Status>
 800e4f8:	0003      	movs	r3, r0
 800e4fa:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e4fc:	19bb      	adds	r3, r7, r6
 800e4fe:	781b      	ldrb	r3, [r3, #0]
}
 800e500:	0018      	movs	r0, r3
 800e502:	46bd      	mov	sp, r7
 800e504:	b005      	add	sp, #20
 800e506:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e508 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e50a:	b085      	sub	sp, #20
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
 800e510:	000a      	movs	r2, r1
 800e512:	1cfb      	adds	r3, r7, #3
 800e514:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e516:	210f      	movs	r1, #15
 800e518:	187b      	adds	r3, r7, r1
 800e51a:	2200      	movs	r2, #0
 800e51c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e51e:	260e      	movs	r6, #14
 800e520:	19bb      	adds	r3, r7, r6
 800e522:	2200      	movs	r2, #0
 800e524:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e526:	687a      	ldr	r2, [r7, #4]
 800e528:	23b0      	movs	r3, #176	@ 0xb0
 800e52a:	009b      	lsls	r3, r3, #2
 800e52c:	58d2      	ldr	r2, [r2, r3]
 800e52e:	000d      	movs	r5, r1
 800e530:	187c      	adds	r4, r7, r1
 800e532:	1cfb      	adds	r3, r7, #3
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	0019      	movs	r1, r3
 800e538:	0010      	movs	r0, r2
 800e53a:	f7f8 fdee 	bl	800711a <HAL_PCD_EP_ClrStall>
 800e53e:	0003      	movs	r3, r0
 800e540:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e542:	19bc      	adds	r4, r7, r6
 800e544:	197b      	adds	r3, r7, r5
 800e546:	781b      	ldrb	r3, [r3, #0]
 800e548:	0018      	movs	r0, r3
 800e54a:	f000 f904 	bl	800e756 <USBD_Get_USB_Status>
 800e54e:	0003      	movs	r3, r0
 800e550:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e552:	19bb      	adds	r3, r7, r6
 800e554:	781b      	ldrb	r3, [r3, #0]
}
 800e556:	0018      	movs	r0, r3
 800e558:	46bd      	mov	sp, r7
 800e55a:	b005      	add	sp, #20
 800e55c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e55e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e55e:	b580      	push	{r7, lr}
 800e560:	b084      	sub	sp, #16
 800e562:	af00      	add	r7, sp, #0
 800e564:	6078      	str	r0, [r7, #4]
 800e566:	000a      	movs	r2, r1
 800e568:	1cfb      	adds	r3, r7, #3
 800e56a:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	23b0      	movs	r3, #176	@ 0xb0
 800e570:	009b      	lsls	r3, r3, #2
 800e572:	58d3      	ldr	r3, [r2, r3]
 800e574:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e576:	1cfb      	adds	r3, r7, #3
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	b25b      	sxtb	r3, r3
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	da0d      	bge.n	800e59c <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e580:	1cfb      	adds	r3, r7, #3
 800e582:	781b      	ldrb	r3, [r3, #0]
 800e584:	227f      	movs	r2, #127	@ 0x7f
 800e586:	4013      	ands	r3, r2
 800e588:	68f9      	ldr	r1, [r7, #12]
 800e58a:	1c5a      	adds	r2, r3, #1
 800e58c:	0013      	movs	r3, r2
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	189b      	adds	r3, r3, r2
 800e592:	00db      	lsls	r3, r3, #3
 800e594:	18cb      	adds	r3, r1, r3
 800e596:	3302      	adds	r3, #2
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	e00d      	b.n	800e5b8 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e59c:	1cfb      	adds	r3, r7, #3
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	227f      	movs	r2, #127	@ 0x7f
 800e5a2:	401a      	ands	r2, r3
 800e5a4:	68f8      	ldr	r0, [r7, #12]
 800e5a6:	23b5      	movs	r3, #181	@ 0xb5
 800e5a8:	0059      	lsls	r1, r3, #1
 800e5aa:	0013      	movs	r3, r2
 800e5ac:	009b      	lsls	r3, r3, #2
 800e5ae:	189b      	adds	r3, r3, r2
 800e5b0:	00db      	lsls	r3, r3, #3
 800e5b2:	18c3      	adds	r3, r0, r3
 800e5b4:	185b      	adds	r3, r3, r1
 800e5b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e5b8:	0018      	movs	r0, r3
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	b004      	add	sp, #16
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e5c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	000a      	movs	r2, r1
 800e5ca:	1cfb      	adds	r3, r7, #3
 800e5cc:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5ce:	210f      	movs	r1, #15
 800e5d0:	187b      	adds	r3, r7, r1
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5d6:	260e      	movs	r6, #14
 800e5d8:	19bb      	adds	r3, r7, r6
 800e5da:	2200      	movs	r2, #0
 800e5dc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e5de:	687a      	ldr	r2, [r7, #4]
 800e5e0:	23b0      	movs	r3, #176	@ 0xb0
 800e5e2:	009b      	lsls	r3, r3, #2
 800e5e4:	58d2      	ldr	r2, [r2, r3]
 800e5e6:	000d      	movs	r5, r1
 800e5e8:	187c      	adds	r4, r7, r1
 800e5ea:	1cfb      	adds	r3, r7, #3
 800e5ec:	781b      	ldrb	r3, [r3, #0]
 800e5ee:	0019      	movs	r1, r3
 800e5f0:	0010      	movs	r0, r2
 800e5f2:	f7f8 fbbf 	bl	8006d74 <HAL_PCD_SetAddress>
 800e5f6:	0003      	movs	r3, r0
 800e5f8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5fa:	19bc      	adds	r4, r7, r6
 800e5fc:	197b      	adds	r3, r7, r5
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	0018      	movs	r0, r3
 800e602:	f000 f8a8 	bl	800e756 <USBD_Get_USB_Status>
 800e606:	0003      	movs	r3, r0
 800e608:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e60a:	19bb      	adds	r3, r7, r6
 800e60c:	781b      	ldrb	r3, [r3, #0]
}
 800e60e:	0018      	movs	r0, r3
 800e610:	46bd      	mov	sp, r7
 800e612:	b005      	add	sp, #20
 800e614:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e616 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e618:	b087      	sub	sp, #28
 800e61a:	af00      	add	r7, sp, #0
 800e61c:	60f8      	str	r0, [r7, #12]
 800e61e:	0008      	movs	r0, r1
 800e620:	607a      	str	r2, [r7, #4]
 800e622:	0019      	movs	r1, r3
 800e624:	230b      	movs	r3, #11
 800e626:	18fb      	adds	r3, r7, r3
 800e628:	1c02      	adds	r2, r0, #0
 800e62a:	701a      	strb	r2, [r3, #0]
 800e62c:	2408      	movs	r4, #8
 800e62e:	193b      	adds	r3, r7, r4
 800e630:	1c0a      	adds	r2, r1, #0
 800e632:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e634:	2117      	movs	r1, #23
 800e636:	187b      	adds	r3, r7, r1
 800e638:	2200      	movs	r2, #0
 800e63a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e63c:	2516      	movs	r5, #22
 800e63e:	197b      	adds	r3, r7, r5
 800e640:	2200      	movs	r2, #0
 800e642:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e644:	68fa      	ldr	r2, [r7, #12]
 800e646:	23b0      	movs	r3, #176	@ 0xb0
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	58d0      	ldr	r0, [r2, r3]
 800e64c:	193b      	adds	r3, r7, r4
 800e64e:	881d      	ldrh	r5, [r3, #0]
 800e650:	000e      	movs	r6, r1
 800e652:	187c      	adds	r4, r7, r1
 800e654:	687a      	ldr	r2, [r7, #4]
 800e656:	230b      	movs	r3, #11
 800e658:	18fb      	adds	r3, r7, r3
 800e65a:	7819      	ldrb	r1, [r3, #0]
 800e65c:	002b      	movs	r3, r5
 800e65e:	f7f8 fcc4 	bl	8006fea <HAL_PCD_EP_Transmit>
 800e662:	0003      	movs	r3, r0
 800e664:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e666:	2516      	movs	r5, #22
 800e668:	197c      	adds	r4, r7, r5
 800e66a:	19bb      	adds	r3, r7, r6
 800e66c:	781b      	ldrb	r3, [r3, #0]
 800e66e:	0018      	movs	r0, r3
 800e670:	f000 f871 	bl	800e756 <USBD_Get_USB_Status>
 800e674:	0003      	movs	r3, r0
 800e676:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e678:	197b      	adds	r3, r7, r5
 800e67a:	781b      	ldrb	r3, [r3, #0]
}
 800e67c:	0018      	movs	r0, r3
 800e67e:	46bd      	mov	sp, r7
 800e680:	b007      	add	sp, #28
 800e682:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e684 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800e684:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e686:	b087      	sub	sp, #28
 800e688:	af00      	add	r7, sp, #0
 800e68a:	60f8      	str	r0, [r7, #12]
 800e68c:	0008      	movs	r0, r1
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	0019      	movs	r1, r3
 800e692:	230b      	movs	r3, #11
 800e694:	18fb      	adds	r3, r7, r3
 800e696:	1c02      	adds	r2, r0, #0
 800e698:	701a      	strb	r2, [r3, #0]
 800e69a:	2408      	movs	r4, #8
 800e69c:	193b      	adds	r3, r7, r4
 800e69e:	1c0a      	adds	r2, r1, #0
 800e6a0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6a2:	2117      	movs	r1, #23
 800e6a4:	187b      	adds	r3, r7, r1
 800e6a6:	2200      	movs	r2, #0
 800e6a8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6aa:	2516      	movs	r5, #22
 800e6ac:	197b      	adds	r3, r7, r5
 800e6ae:	2200      	movs	r2, #0
 800e6b0:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e6b2:	68fa      	ldr	r2, [r7, #12]
 800e6b4:	23b0      	movs	r3, #176	@ 0xb0
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	58d0      	ldr	r0, [r2, r3]
 800e6ba:	193b      	adds	r3, r7, r4
 800e6bc:	881d      	ldrh	r5, [r3, #0]
 800e6be:	000e      	movs	r6, r1
 800e6c0:	187c      	adds	r4, r7, r1
 800e6c2:	687a      	ldr	r2, [r7, #4]
 800e6c4:	230b      	movs	r3, #11
 800e6c6:	18fb      	adds	r3, r7, r3
 800e6c8:	7819      	ldrb	r1, [r3, #0]
 800e6ca:	002b      	movs	r3, r5
 800e6cc:	f7f8 fc3d 	bl	8006f4a <HAL_PCD_EP_Receive>
 800e6d0:	0003      	movs	r3, r0
 800e6d2:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6d4:	2516      	movs	r5, #22
 800e6d6:	197c      	adds	r4, r7, r5
 800e6d8:	19bb      	adds	r3, r7, r6
 800e6da:	781b      	ldrb	r3, [r3, #0]
 800e6dc:	0018      	movs	r0, r3
 800e6de:	f000 f83a 	bl	800e756 <USBD_Get_USB_Status>
 800e6e2:	0003      	movs	r3, r0
 800e6e4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 800e6e6:	197b      	adds	r3, r7, r5
 800e6e8:	781b      	ldrb	r3, [r3, #0]
}
 800e6ea:	0018      	movs	r0, r3
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	b007      	add	sp, #28
 800e6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e6f2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b082      	sub	sp, #8
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
 800e6fa:	000a      	movs	r2, r1
 800e6fc:	1cfb      	adds	r3, r7, #3
 800e6fe:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e700:	687a      	ldr	r2, [r7, #4]
 800e702:	23b0      	movs	r3, #176	@ 0xb0
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	58d2      	ldr	r2, [r2, r3]
 800e708:	1cfb      	adds	r3, r7, #3
 800e70a:	781b      	ldrb	r3, [r3, #0]
 800e70c:	0019      	movs	r1, r3
 800e70e:	0010      	movs	r0, r2
 800e710:	f7f8 fc52 	bl	8006fb8 <HAL_PCD_EP_GetRxCount>
 800e714:	0003      	movs	r3, r0
}
 800e716:	0018      	movs	r0, r3
 800e718:	46bd      	mov	sp, r7
 800e71a:	b002      	add	sp, #8
 800e71c:	bd80      	pop	{r7, pc}
	...

0800e720 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e720:	b580      	push	{r7, lr}
 800e722:	b082      	sub	sp, #8
 800e724:	af00      	add	r7, sp, #0
 800e726:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e728:	4b02      	ldr	r3, [pc, #8]	@ (800e734 <USBD_static_malloc+0x14>)
}
 800e72a:	0018      	movs	r0, r3
 800e72c:	46bd      	mov	sp, r7
 800e72e:	b002      	add	sp, #8
 800e730:	bd80      	pop	{r7, pc}
 800e732:	46c0      	nop			@ (mov r8, r8)
 800e734:	20001488 	.word	0x20001488

0800e738 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
 800e73e:	6078      	str	r0, [r7, #4]

}
 800e740:	46c0      	nop			@ (mov r8, r8)
 800e742:	46bd      	mov	sp, r7
 800e744:	b002      	add	sp, #8
 800e746:	bd80      	pop	{r7, pc}

0800e748 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB Resume CallBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800e748:	b580      	push	{r7, lr}
 800e74a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800e74c:	f7f4 ff50 	bl	80035f0 <SystemClock_Config>
}
 800e750:	46c0      	nop			@ (mov r8, r8)
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}

0800e756 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e756:	b580      	push	{r7, lr}
 800e758:	b084      	sub	sp, #16
 800e75a:	af00      	add	r7, sp, #0
 800e75c:	0002      	movs	r2, r0
 800e75e:	1dfb      	adds	r3, r7, #7
 800e760:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e762:	230f      	movs	r3, #15
 800e764:	18fb      	adds	r3, r7, r3
 800e766:	2200      	movs	r2, #0
 800e768:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 800e76a:	1dfb      	adds	r3, r7, #7
 800e76c:	781b      	ldrb	r3, [r3, #0]
 800e76e:	2b03      	cmp	r3, #3
 800e770:	d017      	beq.n	800e7a2 <USBD_Get_USB_Status+0x4c>
 800e772:	dc1b      	bgt.n	800e7ac <USBD_Get_USB_Status+0x56>
 800e774:	2b02      	cmp	r3, #2
 800e776:	d00f      	beq.n	800e798 <USBD_Get_USB_Status+0x42>
 800e778:	dc18      	bgt.n	800e7ac <USBD_Get_USB_Status+0x56>
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d002      	beq.n	800e784 <USBD_Get_USB_Status+0x2e>
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d005      	beq.n	800e78e <USBD_Get_USB_Status+0x38>
 800e782:	e013      	b.n	800e7ac <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e784:	230f      	movs	r3, #15
 800e786:	18fb      	adds	r3, r7, r3
 800e788:	2200      	movs	r2, #0
 800e78a:	701a      	strb	r2, [r3, #0]
    break;
 800e78c:	e013      	b.n	800e7b6 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e78e:	230f      	movs	r3, #15
 800e790:	18fb      	adds	r3, r7, r3
 800e792:	2202      	movs	r2, #2
 800e794:	701a      	strb	r2, [r3, #0]
    break;
 800e796:	e00e      	b.n	800e7b6 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e798:	230f      	movs	r3, #15
 800e79a:	18fb      	adds	r3, r7, r3
 800e79c:	2201      	movs	r2, #1
 800e79e:	701a      	strb	r2, [r3, #0]
    break;
 800e7a0:	e009      	b.n	800e7b6 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e7a2:	230f      	movs	r3, #15
 800e7a4:	18fb      	adds	r3, r7, r3
 800e7a6:	2202      	movs	r2, #2
 800e7a8:	701a      	strb	r2, [r3, #0]
    break;
 800e7aa:	e004      	b.n	800e7b6 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 800e7ac:	230f      	movs	r3, #15
 800e7ae:	18fb      	adds	r3, r7, r3
 800e7b0:	2202      	movs	r2, #2
 800e7b2:	701a      	strb	r2, [r3, #0]
    break;
 800e7b4:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 800e7b6:	230f      	movs	r3, #15
 800e7b8:	18fb      	adds	r3, r7, r3
 800e7ba:	781b      	ldrb	r3, [r3, #0]
}
 800e7bc:	0018      	movs	r0, r3
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	b004      	add	sp, #16
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <_ZdlPvj>:
 800e7c4:	b510      	push	{r4, lr}
 800e7c6:	f000 f809 	bl	800e7dc <_ZdlPv>
 800e7ca:	bd10      	pop	{r4, pc}

0800e7cc <_ZdaPv>:
 800e7cc:	b510      	push	{r4, lr}
 800e7ce:	f000 f805 	bl	800e7dc <_ZdlPv>
 800e7d2:	bd10      	pop	{r4, pc}

0800e7d4 <_Znaj>:
 800e7d4:	b510      	push	{r4, lr}
 800e7d6:	f000 f805 	bl	800e7e4 <_Znwj>
 800e7da:	bd10      	pop	{r4, pc}

0800e7dc <_ZdlPv>:
 800e7dc:	b510      	push	{r4, lr}
 800e7de:	f000 f82b 	bl	800e838 <free>
 800e7e2:	bd10      	pop	{r4, pc}

0800e7e4 <_Znwj>:
 800e7e4:	b510      	push	{r4, lr}
 800e7e6:	1e04      	subs	r4, r0, #0
 800e7e8:	d100      	bne.n	800e7ec <_Znwj+0x8>
 800e7ea:	3401      	adds	r4, #1
 800e7ec:	0020      	movs	r0, r4
 800e7ee:	f000 f819 	bl	800e824 <malloc>
 800e7f2:	2800      	cmp	r0, #0
 800e7f4:	d000      	beq.n	800e7f8 <_Znwj+0x14>
 800e7f6:	bd10      	pop	{r4, pc}
 800e7f8:	f000 f806 	bl	800e808 <_ZSt15get_new_handlerv>
 800e7fc:	2800      	cmp	r0, #0
 800e7fe:	d101      	bne.n	800e804 <_Znwj+0x20>
 800e800:	f000 f808 	bl	800e814 <abort>
 800e804:	4780      	blx	r0
 800e806:	e7f1      	b.n	800e7ec <_Znwj+0x8>

0800e808 <_ZSt15get_new_handlerv>:
 800e808:	4b01      	ldr	r3, [pc, #4]	@ (800e810 <_ZSt15get_new_handlerv+0x8>)
 800e80a:	6818      	ldr	r0, [r3, #0]
 800e80c:	4770      	bx	lr
 800e80e:	46c0      	nop			@ (mov r8, r8)
 800e810:	200016a8 	.word	0x200016a8

0800e814 <abort>:
 800e814:	2006      	movs	r0, #6
 800e816:	b510      	push	{r4, lr}
 800e818:	f000 f8fc 	bl	800ea14 <raise>
 800e81c:	2001      	movs	r0, #1
 800e81e:	f7f5 fcb5 	bl	800418c <_exit>
	...

0800e824 <malloc>:
 800e824:	b510      	push	{r4, lr}
 800e826:	4b03      	ldr	r3, [pc, #12]	@ (800e834 <malloc+0x10>)
 800e828:	0001      	movs	r1, r0
 800e82a:	6818      	ldr	r0, [r3, #0]
 800e82c:	f000 f830 	bl	800e890 <_malloc_r>
 800e830:	bd10      	pop	{r4, pc}
 800e832:	46c0      	nop			@ (mov r8, r8)
 800e834:	20000190 	.word	0x20000190

0800e838 <free>:
 800e838:	b510      	push	{r4, lr}
 800e83a:	4b03      	ldr	r3, [pc, #12]	@ (800e848 <free+0x10>)
 800e83c:	0001      	movs	r1, r0
 800e83e:	6818      	ldr	r0, [r3, #0]
 800e840:	f000 f946 	bl	800ead0 <_free_r>
 800e844:	bd10      	pop	{r4, pc}
 800e846:	46c0      	nop			@ (mov r8, r8)
 800e848:	20000190 	.word	0x20000190

0800e84c <sbrk_aligned>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	4e0f      	ldr	r6, [pc, #60]	@ (800e88c <sbrk_aligned+0x40>)
 800e850:	000d      	movs	r5, r1
 800e852:	6831      	ldr	r1, [r6, #0]
 800e854:	0004      	movs	r4, r0
 800e856:	2900      	cmp	r1, #0
 800e858:	d102      	bne.n	800e860 <sbrk_aligned+0x14>
 800e85a:	f000 f8fb 	bl	800ea54 <_sbrk_r>
 800e85e:	6030      	str	r0, [r6, #0]
 800e860:	0029      	movs	r1, r5
 800e862:	0020      	movs	r0, r4
 800e864:	f000 f8f6 	bl	800ea54 <_sbrk_r>
 800e868:	1c43      	adds	r3, r0, #1
 800e86a:	d103      	bne.n	800e874 <sbrk_aligned+0x28>
 800e86c:	2501      	movs	r5, #1
 800e86e:	426d      	negs	r5, r5
 800e870:	0028      	movs	r0, r5
 800e872:	bd70      	pop	{r4, r5, r6, pc}
 800e874:	2303      	movs	r3, #3
 800e876:	1cc5      	adds	r5, r0, #3
 800e878:	439d      	bics	r5, r3
 800e87a:	42a8      	cmp	r0, r5
 800e87c:	d0f8      	beq.n	800e870 <sbrk_aligned+0x24>
 800e87e:	1a29      	subs	r1, r5, r0
 800e880:	0020      	movs	r0, r4
 800e882:	f000 f8e7 	bl	800ea54 <_sbrk_r>
 800e886:	3001      	adds	r0, #1
 800e888:	d1f2      	bne.n	800e870 <sbrk_aligned+0x24>
 800e88a:	e7ef      	b.n	800e86c <sbrk_aligned+0x20>
 800e88c:	200016ac 	.word	0x200016ac

0800e890 <_malloc_r>:
 800e890:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e892:	2203      	movs	r2, #3
 800e894:	1ccb      	adds	r3, r1, #3
 800e896:	4393      	bics	r3, r2
 800e898:	3308      	adds	r3, #8
 800e89a:	0005      	movs	r5, r0
 800e89c:	001f      	movs	r7, r3
 800e89e:	2b0c      	cmp	r3, #12
 800e8a0:	d234      	bcs.n	800e90c <_malloc_r+0x7c>
 800e8a2:	270c      	movs	r7, #12
 800e8a4:	42b9      	cmp	r1, r7
 800e8a6:	d833      	bhi.n	800e910 <_malloc_r+0x80>
 800e8a8:	0028      	movs	r0, r5
 800e8aa:	f000 f871 	bl	800e990 <__malloc_lock>
 800e8ae:	4e37      	ldr	r6, [pc, #220]	@ (800e98c <_malloc_r+0xfc>)
 800e8b0:	6833      	ldr	r3, [r6, #0]
 800e8b2:	001c      	movs	r4, r3
 800e8b4:	2c00      	cmp	r4, #0
 800e8b6:	d12f      	bne.n	800e918 <_malloc_r+0x88>
 800e8b8:	0039      	movs	r1, r7
 800e8ba:	0028      	movs	r0, r5
 800e8bc:	f7ff ffc6 	bl	800e84c <sbrk_aligned>
 800e8c0:	0004      	movs	r4, r0
 800e8c2:	1c43      	adds	r3, r0, #1
 800e8c4:	d15f      	bne.n	800e986 <_malloc_r+0xf6>
 800e8c6:	6834      	ldr	r4, [r6, #0]
 800e8c8:	9400      	str	r4, [sp, #0]
 800e8ca:	9b00      	ldr	r3, [sp, #0]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d14a      	bne.n	800e966 <_malloc_r+0xd6>
 800e8d0:	2c00      	cmp	r4, #0
 800e8d2:	d052      	beq.n	800e97a <_malloc_r+0xea>
 800e8d4:	6823      	ldr	r3, [r4, #0]
 800e8d6:	0028      	movs	r0, r5
 800e8d8:	18e3      	adds	r3, r4, r3
 800e8da:	9900      	ldr	r1, [sp, #0]
 800e8dc:	9301      	str	r3, [sp, #4]
 800e8de:	f000 f8b9 	bl	800ea54 <_sbrk_r>
 800e8e2:	9b01      	ldr	r3, [sp, #4]
 800e8e4:	4283      	cmp	r3, r0
 800e8e6:	d148      	bne.n	800e97a <_malloc_r+0xea>
 800e8e8:	6823      	ldr	r3, [r4, #0]
 800e8ea:	0028      	movs	r0, r5
 800e8ec:	1aff      	subs	r7, r7, r3
 800e8ee:	0039      	movs	r1, r7
 800e8f0:	f7ff ffac 	bl	800e84c <sbrk_aligned>
 800e8f4:	3001      	adds	r0, #1
 800e8f6:	d040      	beq.n	800e97a <_malloc_r+0xea>
 800e8f8:	6823      	ldr	r3, [r4, #0]
 800e8fa:	19db      	adds	r3, r3, r7
 800e8fc:	6023      	str	r3, [r4, #0]
 800e8fe:	6833      	ldr	r3, [r6, #0]
 800e900:	685a      	ldr	r2, [r3, #4]
 800e902:	2a00      	cmp	r2, #0
 800e904:	d133      	bne.n	800e96e <_malloc_r+0xde>
 800e906:	9b00      	ldr	r3, [sp, #0]
 800e908:	6033      	str	r3, [r6, #0]
 800e90a:	e019      	b.n	800e940 <_malloc_r+0xb0>
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	dac9      	bge.n	800e8a4 <_malloc_r+0x14>
 800e910:	230c      	movs	r3, #12
 800e912:	602b      	str	r3, [r5, #0]
 800e914:	2000      	movs	r0, #0
 800e916:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e918:	6821      	ldr	r1, [r4, #0]
 800e91a:	1bc9      	subs	r1, r1, r7
 800e91c:	d420      	bmi.n	800e960 <_malloc_r+0xd0>
 800e91e:	290b      	cmp	r1, #11
 800e920:	d90a      	bls.n	800e938 <_malloc_r+0xa8>
 800e922:	19e2      	adds	r2, r4, r7
 800e924:	6027      	str	r7, [r4, #0]
 800e926:	42a3      	cmp	r3, r4
 800e928:	d104      	bne.n	800e934 <_malloc_r+0xa4>
 800e92a:	6032      	str	r2, [r6, #0]
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	6011      	str	r1, [r2, #0]
 800e930:	6053      	str	r3, [r2, #4]
 800e932:	e005      	b.n	800e940 <_malloc_r+0xb0>
 800e934:	605a      	str	r2, [r3, #4]
 800e936:	e7f9      	b.n	800e92c <_malloc_r+0x9c>
 800e938:	6862      	ldr	r2, [r4, #4]
 800e93a:	42a3      	cmp	r3, r4
 800e93c:	d10e      	bne.n	800e95c <_malloc_r+0xcc>
 800e93e:	6032      	str	r2, [r6, #0]
 800e940:	0028      	movs	r0, r5
 800e942:	f000 f82d 	bl	800e9a0 <__malloc_unlock>
 800e946:	0020      	movs	r0, r4
 800e948:	2207      	movs	r2, #7
 800e94a:	300b      	adds	r0, #11
 800e94c:	1d23      	adds	r3, r4, #4
 800e94e:	4390      	bics	r0, r2
 800e950:	1ac2      	subs	r2, r0, r3
 800e952:	4298      	cmp	r0, r3
 800e954:	d0df      	beq.n	800e916 <_malloc_r+0x86>
 800e956:	1a1b      	subs	r3, r3, r0
 800e958:	50a3      	str	r3, [r4, r2]
 800e95a:	e7dc      	b.n	800e916 <_malloc_r+0x86>
 800e95c:	605a      	str	r2, [r3, #4]
 800e95e:	e7ef      	b.n	800e940 <_malloc_r+0xb0>
 800e960:	0023      	movs	r3, r4
 800e962:	6864      	ldr	r4, [r4, #4]
 800e964:	e7a6      	b.n	800e8b4 <_malloc_r+0x24>
 800e966:	9c00      	ldr	r4, [sp, #0]
 800e968:	6863      	ldr	r3, [r4, #4]
 800e96a:	9300      	str	r3, [sp, #0]
 800e96c:	e7ad      	b.n	800e8ca <_malloc_r+0x3a>
 800e96e:	001a      	movs	r2, r3
 800e970:	685b      	ldr	r3, [r3, #4]
 800e972:	42a3      	cmp	r3, r4
 800e974:	d1fb      	bne.n	800e96e <_malloc_r+0xde>
 800e976:	2300      	movs	r3, #0
 800e978:	e7da      	b.n	800e930 <_malloc_r+0xa0>
 800e97a:	230c      	movs	r3, #12
 800e97c:	0028      	movs	r0, r5
 800e97e:	602b      	str	r3, [r5, #0]
 800e980:	f000 f80e 	bl	800e9a0 <__malloc_unlock>
 800e984:	e7c6      	b.n	800e914 <_malloc_r+0x84>
 800e986:	6007      	str	r7, [r0, #0]
 800e988:	e7da      	b.n	800e940 <_malloc_r+0xb0>
 800e98a:	46c0      	nop			@ (mov r8, r8)
 800e98c:	200016b0 	.word	0x200016b0

0800e990 <__malloc_lock>:
 800e990:	b510      	push	{r4, lr}
 800e992:	4802      	ldr	r0, [pc, #8]	@ (800e99c <__malloc_lock+0xc>)
 800e994:	f000 f89a 	bl	800eacc <__retarget_lock_acquire_recursive>
 800e998:	bd10      	pop	{r4, pc}
 800e99a:	46c0      	nop			@ (mov r8, r8)
 800e99c:	200017f0 	.word	0x200017f0

0800e9a0 <__malloc_unlock>:
 800e9a0:	b510      	push	{r4, lr}
 800e9a2:	4802      	ldr	r0, [pc, #8]	@ (800e9ac <__malloc_unlock+0xc>)
 800e9a4:	f000 f893 	bl	800eace <__retarget_lock_release_recursive>
 800e9a8:	bd10      	pop	{r4, pc}
 800e9aa:	46c0      	nop			@ (mov r8, r8)
 800e9ac:	200017f0 	.word	0x200017f0

0800e9b0 <memset>:
 800e9b0:	0003      	movs	r3, r0
 800e9b2:	1882      	adds	r2, r0, r2
 800e9b4:	4293      	cmp	r3, r2
 800e9b6:	d100      	bne.n	800e9ba <memset+0xa>
 800e9b8:	4770      	bx	lr
 800e9ba:	7019      	strb	r1, [r3, #0]
 800e9bc:	3301      	adds	r3, #1
 800e9be:	e7f9      	b.n	800e9b4 <memset+0x4>

0800e9c0 <_raise_r>:
 800e9c0:	b570      	push	{r4, r5, r6, lr}
 800e9c2:	0004      	movs	r4, r0
 800e9c4:	000d      	movs	r5, r1
 800e9c6:	291f      	cmp	r1, #31
 800e9c8:	d904      	bls.n	800e9d4 <_raise_r+0x14>
 800e9ca:	2316      	movs	r3, #22
 800e9cc:	6003      	str	r3, [r0, #0]
 800e9ce:	2001      	movs	r0, #1
 800e9d0:	4240      	negs	r0, r0
 800e9d2:	bd70      	pop	{r4, r5, r6, pc}
 800e9d4:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d004      	beq.n	800e9e4 <_raise_r+0x24>
 800e9da:	008a      	lsls	r2, r1, #2
 800e9dc:	189b      	adds	r3, r3, r2
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	2a00      	cmp	r2, #0
 800e9e2:	d108      	bne.n	800e9f6 <_raise_r+0x36>
 800e9e4:	0020      	movs	r0, r4
 800e9e6:	f000 f831 	bl	800ea4c <_getpid_r>
 800e9ea:	002a      	movs	r2, r5
 800e9ec:	0001      	movs	r1, r0
 800e9ee:	0020      	movs	r0, r4
 800e9f0:	f000 f81a 	bl	800ea28 <_kill_r>
 800e9f4:	e7ed      	b.n	800e9d2 <_raise_r+0x12>
 800e9f6:	2a01      	cmp	r2, #1
 800e9f8:	d009      	beq.n	800ea0e <_raise_r+0x4e>
 800e9fa:	1c51      	adds	r1, r2, #1
 800e9fc:	d103      	bne.n	800ea06 <_raise_r+0x46>
 800e9fe:	2316      	movs	r3, #22
 800ea00:	6003      	str	r3, [r0, #0]
 800ea02:	2001      	movs	r0, #1
 800ea04:	e7e5      	b.n	800e9d2 <_raise_r+0x12>
 800ea06:	2100      	movs	r1, #0
 800ea08:	0028      	movs	r0, r5
 800ea0a:	6019      	str	r1, [r3, #0]
 800ea0c:	4790      	blx	r2
 800ea0e:	2000      	movs	r0, #0
 800ea10:	e7df      	b.n	800e9d2 <_raise_r+0x12>
	...

0800ea14 <raise>:
 800ea14:	b510      	push	{r4, lr}
 800ea16:	4b03      	ldr	r3, [pc, #12]	@ (800ea24 <raise+0x10>)
 800ea18:	0001      	movs	r1, r0
 800ea1a:	6818      	ldr	r0, [r3, #0]
 800ea1c:	f7ff ffd0 	bl	800e9c0 <_raise_r>
 800ea20:	bd10      	pop	{r4, pc}
 800ea22:	46c0      	nop			@ (mov r8, r8)
 800ea24:	20000190 	.word	0x20000190

0800ea28 <_kill_r>:
 800ea28:	2300      	movs	r3, #0
 800ea2a:	b570      	push	{r4, r5, r6, lr}
 800ea2c:	4d06      	ldr	r5, [pc, #24]	@ (800ea48 <_kill_r+0x20>)
 800ea2e:	0004      	movs	r4, r0
 800ea30:	0008      	movs	r0, r1
 800ea32:	0011      	movs	r1, r2
 800ea34:	602b      	str	r3, [r5, #0]
 800ea36:	f7f5 fb99 	bl	800416c <_kill>
 800ea3a:	1c43      	adds	r3, r0, #1
 800ea3c:	d103      	bne.n	800ea46 <_kill_r+0x1e>
 800ea3e:	682b      	ldr	r3, [r5, #0]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d000      	beq.n	800ea46 <_kill_r+0x1e>
 800ea44:	6023      	str	r3, [r4, #0]
 800ea46:	bd70      	pop	{r4, r5, r6, pc}
 800ea48:	200017ec 	.word	0x200017ec

0800ea4c <_getpid_r>:
 800ea4c:	b510      	push	{r4, lr}
 800ea4e:	f7f5 fb87 	bl	8004160 <_getpid>
 800ea52:	bd10      	pop	{r4, pc}

0800ea54 <_sbrk_r>:
 800ea54:	2300      	movs	r3, #0
 800ea56:	b570      	push	{r4, r5, r6, lr}
 800ea58:	4d06      	ldr	r5, [pc, #24]	@ (800ea74 <_sbrk_r+0x20>)
 800ea5a:	0004      	movs	r4, r0
 800ea5c:	0008      	movs	r0, r1
 800ea5e:	602b      	str	r3, [r5, #0]
 800ea60:	f7f5 fba2 	bl	80041a8 <_sbrk>
 800ea64:	1c43      	adds	r3, r0, #1
 800ea66:	d103      	bne.n	800ea70 <_sbrk_r+0x1c>
 800ea68:	682b      	ldr	r3, [r5, #0]
 800ea6a:	2b00      	cmp	r3, #0
 800ea6c:	d000      	beq.n	800ea70 <_sbrk_r+0x1c>
 800ea6e:	6023      	str	r3, [r4, #0]
 800ea70:	bd70      	pop	{r4, r5, r6, pc}
 800ea72:	46c0      	nop			@ (mov r8, r8)
 800ea74:	200017ec 	.word	0x200017ec

0800ea78 <__errno>:
 800ea78:	4b01      	ldr	r3, [pc, #4]	@ (800ea80 <__errno+0x8>)
 800ea7a:	6818      	ldr	r0, [r3, #0]
 800ea7c:	4770      	bx	lr
 800ea7e:	46c0      	nop			@ (mov r8, r8)
 800ea80:	20000190 	.word	0x20000190

0800ea84 <__libc_init_array>:
 800ea84:	b570      	push	{r4, r5, r6, lr}
 800ea86:	2600      	movs	r6, #0
 800ea88:	4c0c      	ldr	r4, [pc, #48]	@ (800eabc <__libc_init_array+0x38>)
 800ea8a:	4d0d      	ldr	r5, [pc, #52]	@ (800eac0 <__libc_init_array+0x3c>)
 800ea8c:	1b64      	subs	r4, r4, r5
 800ea8e:	10a4      	asrs	r4, r4, #2
 800ea90:	42a6      	cmp	r6, r4
 800ea92:	d109      	bne.n	800eaa8 <__libc_init_array+0x24>
 800ea94:	2600      	movs	r6, #0
 800ea96:	f000 f865 	bl	800eb64 <_init>
 800ea9a:	4c0a      	ldr	r4, [pc, #40]	@ (800eac4 <__libc_init_array+0x40>)
 800ea9c:	4d0a      	ldr	r5, [pc, #40]	@ (800eac8 <__libc_init_array+0x44>)
 800ea9e:	1b64      	subs	r4, r4, r5
 800eaa0:	10a4      	asrs	r4, r4, #2
 800eaa2:	42a6      	cmp	r6, r4
 800eaa4:	d105      	bne.n	800eab2 <__libc_init_array+0x2e>
 800eaa6:	bd70      	pop	{r4, r5, r6, pc}
 800eaa8:	00b3      	lsls	r3, r6, #2
 800eaaa:	58eb      	ldr	r3, [r5, r3]
 800eaac:	4798      	blx	r3
 800eaae:	3601      	adds	r6, #1
 800eab0:	e7ee      	b.n	800ea90 <__libc_init_array+0xc>
 800eab2:	00b3      	lsls	r3, r6, #2
 800eab4:	58eb      	ldr	r3, [r5, r3]
 800eab6:	4798      	blx	r3
 800eab8:	3601      	adds	r6, #1
 800eaba:	e7f2      	b.n	800eaa2 <__libc_init_array+0x1e>
 800eabc:	0800ed2c 	.word	0x0800ed2c
 800eac0:	0800ed2c 	.word	0x0800ed2c
 800eac4:	0800ed34 	.word	0x0800ed34
 800eac8:	0800ed2c 	.word	0x0800ed2c

0800eacc <__retarget_lock_acquire_recursive>:
 800eacc:	4770      	bx	lr

0800eace <__retarget_lock_release_recursive>:
 800eace:	4770      	bx	lr

0800ead0 <_free_r>:
 800ead0:	b570      	push	{r4, r5, r6, lr}
 800ead2:	0005      	movs	r5, r0
 800ead4:	1e0c      	subs	r4, r1, #0
 800ead6:	d010      	beq.n	800eafa <_free_r+0x2a>
 800ead8:	3c04      	subs	r4, #4
 800eada:	6823      	ldr	r3, [r4, #0]
 800eadc:	2b00      	cmp	r3, #0
 800eade:	da00      	bge.n	800eae2 <_free_r+0x12>
 800eae0:	18e4      	adds	r4, r4, r3
 800eae2:	0028      	movs	r0, r5
 800eae4:	f7ff ff54 	bl	800e990 <__malloc_lock>
 800eae8:	4a1d      	ldr	r2, [pc, #116]	@ (800eb60 <_free_r+0x90>)
 800eaea:	6813      	ldr	r3, [r2, #0]
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d105      	bne.n	800eafc <_free_r+0x2c>
 800eaf0:	6063      	str	r3, [r4, #4]
 800eaf2:	6014      	str	r4, [r2, #0]
 800eaf4:	0028      	movs	r0, r5
 800eaf6:	f7ff ff53 	bl	800e9a0 <__malloc_unlock>
 800eafa:	bd70      	pop	{r4, r5, r6, pc}
 800eafc:	42a3      	cmp	r3, r4
 800eafe:	d908      	bls.n	800eb12 <_free_r+0x42>
 800eb00:	6820      	ldr	r0, [r4, #0]
 800eb02:	1821      	adds	r1, r4, r0
 800eb04:	428b      	cmp	r3, r1
 800eb06:	d1f3      	bne.n	800eaf0 <_free_r+0x20>
 800eb08:	6819      	ldr	r1, [r3, #0]
 800eb0a:	685b      	ldr	r3, [r3, #4]
 800eb0c:	1809      	adds	r1, r1, r0
 800eb0e:	6021      	str	r1, [r4, #0]
 800eb10:	e7ee      	b.n	800eaf0 <_free_r+0x20>
 800eb12:	001a      	movs	r2, r3
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	d001      	beq.n	800eb1e <_free_r+0x4e>
 800eb1a:	42a3      	cmp	r3, r4
 800eb1c:	d9f9      	bls.n	800eb12 <_free_r+0x42>
 800eb1e:	6811      	ldr	r1, [r2, #0]
 800eb20:	1850      	adds	r0, r2, r1
 800eb22:	42a0      	cmp	r0, r4
 800eb24:	d10b      	bne.n	800eb3e <_free_r+0x6e>
 800eb26:	6820      	ldr	r0, [r4, #0]
 800eb28:	1809      	adds	r1, r1, r0
 800eb2a:	1850      	adds	r0, r2, r1
 800eb2c:	6011      	str	r1, [r2, #0]
 800eb2e:	4283      	cmp	r3, r0
 800eb30:	d1e0      	bne.n	800eaf4 <_free_r+0x24>
 800eb32:	6818      	ldr	r0, [r3, #0]
 800eb34:	685b      	ldr	r3, [r3, #4]
 800eb36:	1841      	adds	r1, r0, r1
 800eb38:	6011      	str	r1, [r2, #0]
 800eb3a:	6053      	str	r3, [r2, #4]
 800eb3c:	e7da      	b.n	800eaf4 <_free_r+0x24>
 800eb3e:	42a0      	cmp	r0, r4
 800eb40:	d902      	bls.n	800eb48 <_free_r+0x78>
 800eb42:	230c      	movs	r3, #12
 800eb44:	602b      	str	r3, [r5, #0]
 800eb46:	e7d5      	b.n	800eaf4 <_free_r+0x24>
 800eb48:	6820      	ldr	r0, [r4, #0]
 800eb4a:	1821      	adds	r1, r4, r0
 800eb4c:	428b      	cmp	r3, r1
 800eb4e:	d103      	bne.n	800eb58 <_free_r+0x88>
 800eb50:	6819      	ldr	r1, [r3, #0]
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	1809      	adds	r1, r1, r0
 800eb56:	6021      	str	r1, [r4, #0]
 800eb58:	6063      	str	r3, [r4, #4]
 800eb5a:	6054      	str	r4, [r2, #4]
 800eb5c:	e7ca      	b.n	800eaf4 <_free_r+0x24>
 800eb5e:	46c0      	nop			@ (mov r8, r8)
 800eb60:	200016b0 	.word	0x200016b0

0800eb64 <_init>:
 800eb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb66:	46c0      	nop			@ (mov r8, r8)
 800eb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb6a:	bc08      	pop	{r3}
 800eb6c:	469e      	mov	lr, r3
 800eb6e:	4770      	bx	lr

0800eb70 <_fini>:
 800eb70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb72:	46c0      	nop			@ (mov r8, r8)
 800eb74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eb76:	bc08      	pop	{r3}
 800eb78:	469e      	mov	lr, r3
 800eb7a:	4770      	bx	lr
